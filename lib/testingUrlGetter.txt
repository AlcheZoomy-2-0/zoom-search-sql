WEBVTT

1
00:00:01.319 --> 00:00:03.929
Ryan Mehta: So we're going to use this body pics thing to

2
00:00:05.730 --> 00:00:07.109
Ryan Mehta: Make like filters.

3
00:00:08.400 --> 00:00:17.880
Ryan Mehta: Our filters will be pretty simple. So we won't be able to put like stuff on people's faces. We'll just do like virtual background type of filters.

4
00:00:18.300 --> 00:00:21.120
Annalise Murphy: How tricky is it to put things on people's faces.

5
00:00:22.320 --> 00:00:27.570
Ryan Mehta: Well, probably a little bit tricky. At least, but this body pics thing actually does not just

6
00:00:28.680 --> 00:00:28.890
Ryan Mehta: Like

7
00:00:29.100 --> 00:00:30.300
Ryan Mehta: Kind of see it working here.

8
00:00:31.770 --> 00:00:37.050
Ryan Mehta: Yeah, it doesn't just do the person detection, but it also does body part detection.

9
00:00:38.580 --> 00:00:44.700
Ryan Mehta: So you could potentially do something like putting things on people's faces or on their hands or whatever.

10
00:00:45.810 --> 00:00:46.560
Ryan Mehta: Well, super cool.

11
00:00:49.920 --> 00:00:53.700
Ryan Mehta: The data that it gives you back is first an array of pixels.

12
00:00:55.590 --> 00:01:04.560
Ryan Mehta: So yeah, the first thing that gives us an array of pixels, where you have some pickle souls that belong to people and some pixels that don't belong to people.

13
00:01:06.750 --> 00:01:12.210
Ryan Mehta: That's this data thing and then also gives you all of their poses like we're all over there.

14
00:01:14.970 --> 00:01:17.460
Ryan Mehta: And then like, yeah, you can do this body part thing to

15
00:01:18.660 --> 00:01:23.160
Ryan Mehta: Which is kind of cool. But I didn't do any of that body part stuff.

16
00:01:25.260 --> 00:01:27.330
Ryan Mehta: Alright, so with this as a model.

17
00:01:28.830 --> 00:01:37.140
Ryan Mehta: Or with this like model already created for us. We can do a ton of ton of cool things I do something kind of boring because it already exists, but

18
00:01:38.160 --> 00:01:40.320
Ryan Mehta: I did like a virtual background.

19
00:01:41.580 --> 00:01:44.910
Ryan Mehta: Thing to play with this Tensorflow model.

20
00:01:47.220 --> 00:01:56.880
Ryan Mehta: Alright so goal. Make a webcam filter. We're going to be using this body pics library. It's part of the TensorFlow project.

21
00:01:58.110 --> 00:02:07.650
Ryan Mehta: The TensorFlow project allows us to play with sensors for anybody who doesn't know what a tensor is there is this nice little

22
00:02:09.900 --> 00:02:11.730
Ryan Mehta: Guide about sensors.

23
00:02:13.710 --> 00:02:19.050
Ryan Mehta: Are really maybe somewhat simple way to think about it. If you're comfortable with matrix is

24
00:02:20.250 --> 00:02:27.960
Ryan Mehta: Cancers are matrices matrix is or like 2D arrays, where you have rows and columns of numbers.

25
00:02:29.010 --> 00:02:33.900
Ryan Mehta: If you take them like a linear algebra class or something. You may have seen matrix is before

26
00:02:35.220 --> 00:02:48.870
Ryan Mehta: tenses are sort of like these matrix is except there are multi dimensional. So you can have a three axis matrix essentially that has your normal matrix rows and columns and a third dimension.

27
00:02:50.130 --> 00:02:52.350
Ryan Mehta: So like planes have a matrix.

28
00:02:53.610 --> 00:03:01.530
Ryan Mehta: And you can have more than three dimensions to you can afford dimensional matrix is five dimensional matrix is what they call them sensors.

29
00:03:03.660 --> 00:03:10.200
Ryan Mehta: Well here's kind of like what a three dimensional matrix might look like, or a 3D tensor.

30
00:03:13.200 --> 00:03:22.140
Ryan Mehta: So we're going to be using these to manipulate or to figure out stuff about our image, the body pics model takes a tensor.

31
00:03:22.590 --> 00:03:35.640
Ryan Mehta: So in order to get the body segmentation. We need to convert our image into a tensor, which is converting the image into this three dimensional matrix. Luckily TensorFlow has

32
00:03:36.870 --> 00:03:50.820
Ryan Mehta: Is a library that has like methods that let us just pass it an image and create a tensor out of the image automatically. We don't actually have to write a ton of code to accomplish the goals today.

33
00:03:52.650 --> 00:03:53.280
Ryan Mehta: So those are the

34
00:03:54.360 --> 00:04:07.980
Ryan Mehta: Big Three things for this first part, the body pics library, which lets us segment people from non people TensorFlow, which is a library that lets us mess around with sensors and a tensor is a three dimensional matrix.

35
00:04:09.780 --> 00:04:16.950
Ryan Mehta: The first little thing that I wrote. So I already pre wrote all of this code will just explore it and look at it together.

36
00:04:18.330 --> 00:04:21.960
Ryan Mehta: Is a file called image maker.

37
00:04:23.040 --> 00:04:25.590
And put it side by side with my readme.

38
00:04:29.010 --> 00:04:33.360
Ryan Mehta: Image makers job is to read a single file.

39
00:04:34.410 --> 00:04:36.360
Ryan Mehta: I'll show you the file that it reads first

40
00:04:37.560 --> 00:04:41.190
Ryan Mehta: This file a picture of me when I was very bright outside

41
00:04:42.900 --> 00:04:44.310
Ryan Mehta: It will read that file.

42
00:04:46.740 --> 00:04:49.710
Ryan Mehta: converted the image into a tensor.

43
00:04:50.940 --> 00:04:51.870
Ryan Mehta: And then

44
00:04:53.310 --> 00:04:57.480
Ryan Mehta: Get a segment the people from the non people in

45
00:04:58.560 --> 00:05:01.080
Ryan Mehta: The file and then write the

46
00:05:02.520 --> 00:05:05.940
Ryan Mehta: Like segmentation back to another file.

47
00:05:07.500 --> 00:05:19.320
Ryan Mehta: So from the very top, we bring in FS we're bringing our body pics, which is our body segmentation model from TensorFlow. We bring in the TensorFlow library itself.

48
00:05:19.980 --> 00:05:31.080
Ryan Mehta: And we bring in sharp, sharp is a library that lets us convert buffers into images. So it takes like binary representations and lets you save images from them.

49
00:05:34.530 --> 00:05:36.840
Ryan Mehta: I have these two little constants at the top.

50
00:05:38.100 --> 00:05:44.130
Ryan Mehta: The body pics library eventually returns an array of pixels.

51
00:05:45.990 --> 00:06:01.980
Ryan Mehta: If in the array. If the array element is zero. That means a pixel does not represent a person if the array element is a one, that means that pixel does represent the person. So we're going to get back from the body segmentation, a bunch of

52
00:06:04.380 --> 00:06:05.250
Like this.

53
00:06:08.910 --> 00:06:13.230
Ryan Mehta: Wherever there's ones. That means we have a person at that location on the image.

54
00:06:14.970 --> 00:06:22.350
Ryan Mehta: This array just represents all of the pixels of the image. So starting from the top left corner moving

55
00:06:23.550 --> 00:06:25.290
Ryan Mehta: Left to right and then down

56
00:06:26.700 --> 00:06:27.960
All of the pixels.

57
00:06:29.700 --> 00:06:40.710
Ryan Mehta: Right, there's this little helper function here called segmentation to RPG. It takes an array of pixels and maps through the array of pixels.

58
00:06:41.940 --> 00:06:47.730
Ryan Mehta: If the pixel is a non person, it returns zero if it is a person, it returns

59
00:06:49.170 --> 00:07:08.010
Ryan Mehta: This is just a way to color eyes the pixels 01 don't represent colors, but zero to 55 deal zero would represent black and to 55 represents a bite. Same in like CSS right like to 55 to 55 to 55 is white 000 black

60
00:07:11.190 --> 00:07:17.970
Ryan Mehta: So this is just a little function that takes our array of zeros and ones and converts it into color values.

61
00:07:21.390 --> 00:07:31.560
Ryan Mehta: And then starting online 14 we start doing the harder work. We first load our model. This takes a little bit of time. The model is kind of large so it takes maybe like

62
00:07:32.670 --> 00:07:45.540
Ryan Mehta: I guess not that long takes like a few seconds to load the model. Once the models loaded, we get a neural network back. So this net. Here is a neural net that is able to segment people for us.

63
00:07:46.890 --> 00:07:58.830
Ryan Mehta: We read our image we decode the image as a tensor. And then we pass our tensor to our neural net the neural net will give us back an array.

64
00:07:59.400 --> 00:08:13.890
Ryan Mehta: Of zeros and ones zeros being non people pixels ones being people pixels. And then we store the result back to this mask JS file or master JPEG file. So if we run this little file.

65
00:08:15.510 --> 00:08:22.650
Ryan Mehta: And it's maker. It should read my original image and kind of see it like loading the model.

66
00:08:24.000 --> 00:08:27.270
Ryan Mehta: should read my original image and output.

67
00:08:28.950 --> 00:08:30.090
Don't give these things away.

68
00:08:31.500 --> 00:08:33.000
Ryan Mehta: A mask jpg

69
00:08:35.430 --> 00:08:39.600
Ryan Mehta: So this is the mask that it created from

70
00:08:41.580 --> 00:08:42.420
Ryan Mehta: This image.

71
00:08:43.620 --> 00:08:46.770
Ryan Mehta: So it's saying that you can kind of see the similar shape here.

72
00:08:50.160 --> 00:08:51.840
Ryan Mehta: Not a ton of code to get that right.

73
00:08:53.100 --> 00:08:55.110
Ryan Mehta: It's kind of cool. When the models already made.

74
00:08:57.360 --> 00:09:01.290
Ryan Mehta: Any questions about that little this little script here.

75
00:09:08.640 --> 00:09:09.030
Ryan Mehta: Cool.

76
00:09:12.630 --> 00:09:23.040
Ryan Mehta: So we're going to build upon this, we're now able to convert a single image into a mask that lets us know where people are and where non people are

77
00:09:25.230 --> 00:09:32.610
Ryan Mehta: Our next little phase will be to stream from camera. This is like the same stages that I took

78
00:09:33.750 --> 00:09:38.940
Ryan Mehta: When I was writing this, too. So I was just taking notes as I was actually trying to solve this problem.

79
00:09:40.560 --> 00:09:44.160
Ryan Mehta: We're going to stream from our camera. So I want to read from my actual webcam.

80
00:09:45.780 --> 00:09:48.240
Ryan Mehta: So I can eventually run it through this neural network.

81
00:09:49.380 --> 00:09:57.060
Ryan Mehta: I'm on Linux. So I'm going to be using this video for Linux driver. This is the driver that all of the Linux webcams use

82
00:10:00.510 --> 00:10:16.980
Ryan Mehta: I tried as much as possible to not have to write like to use libraries anywhere that I could in this project so other people can kind of pick up from it, where they can where they want to master using this node video for Linux to camera package as well.

83
00:10:18.570 --> 00:10:24.960
Ryan Mehta: One thing to note about this package it hasn't been updated for

84
00:10:26.220 --> 00:10:45.750
Ryan Mehta: Three years or so. And it no longer works with the latest version of node there is a PR, but that came in September 2019 that hasn't been merged that updates the library. So it will work with node 14 and 15 so you have to use this

85
00:10:46.920 --> 00:10:49.890
Ryan Mehta: This branch in order to get the library to work.

86
00:10:51.240 --> 00:10:56.820
Ryan Mehta: So a little bit cumbersome, but somebody should merge this PR been like a year.

87
00:10:59.430 --> 00:11:01.500
Ryan Mehta: So we're going to use that library this node.

88
00:11:02.910 --> 00:11:05.730
Ryan Mehta: Video for Linux to camera library.

89
00:11:06.960 --> 00:11:19.260
Ryan Mehta: And continuously save frames to a file for now. So we'll do sort of the same thing except this time breed from the camera and state each frame to a file over and over again.

90
00:11:21.300 --> 00:11:23.280
Ryan Mehta: That is happening in this file.

91
00:11:25.350 --> 00:11:28.650
Ryan Mehta: So we're bringing that video for Linux camera.

92
00:11:30.060 --> 00:11:45.960
Ryan Mehta: Package and sharp, which lets us save images to the disk on my four and five, we're grabbing our camera and then starting the camera and then we're running this capture function. The capture function will capture an image.

93
00:11:47.670 --> 00:11:49.620
Ryan Mehta: And then store it in

94
00:11:50.880 --> 00:12:03.840
Ryan Mehta: This live dot JPG file and then rerun the capture function so recursive over and over again just constantly taking frames off of the camera and storing it to a file and then capturing again.

95
00:12:06.180 --> 00:12:16.860
Ryan Mehta: If we run this function and open up that live JPG, you can kind of see me right here it like it's fast enough that it actually looks like.

96
00:12:17.910 --> 00:12:20.970
Ryan Mehta: It's actually an image but it, it looks like a camera right

97
00:12:22.440 --> 00:12:22.980
Ryan Mehta: Pretty cool.

98
00:12:24.180 --> 00:12:39.060
Ryan Mehta: You can see these little blips happening too. That's when the. It's a little bit too slow to keep up, which makes sense because it's not just streaming it right now. It's actually streaming from the camera and having to wait to store the image, which is a little bit slower than streaming

99
00:12:40.260 --> 00:12:42.630
Ryan Mehta: But it's pretty cool. Like, it actually kind of works.

100
00:12:46.500 --> 00:12:57.600
Ryan Mehta: Alright, so that's how we're going to get information from our camera. We're going to use this library. We're going to start our camera and then just pick off frames over and over again off the camera and do something with those frames.

101
00:13:01.230 --> 00:13:05.070
Ryan Mehta: Any questions about this camera streaming thing.

102
00:13:11.250 --> 00:13:11.520
Cool.

103
00:13:14.370 --> 00:13:27.660
Ryan Mehta: Next step stream a mask. So we want to put together these two concepts we want to capture from our webcam output and we want to create a mask for each frame of the camera output.

104
00:13:29.610 --> 00:13:33.300
Ryan Mehta: I did this in this live mask JS file.

105
00:13:35.190 --> 00:13:38.340
Ryan Mehta: So kind of slamming together. The last two things.

106
00:13:39.780 --> 00:13:50.250
Ryan Mehta: We start our camera and we load our model after our models loaded, right, we're ready to process images we begin to capture from our camera.

107
00:13:51.660 --> 00:13:58.950
Ryan Mehta: The capture function. This time, grabs an RPG frame so grabs the frame that our camera currently has

108
00:14:00.330 --> 00:14:01.980
Ryan Mehta: It stores the frame as an

109
00:14:02.010 --> 00:14:15.060
Ryan Mehta: Image and then runs that image through our mask. I should also say here that I started at this point to get a little fancy and started extracting some of these functions.

110
00:14:15.930 --> 00:14:26.430
Ryan Mehta: So this create mask from frame does two things. It decodes the image, giving us the tensor version of the image and gives us the body segmentation.

111
00:14:27.870 --> 00:14:36.000
Ryan Mehta: So this slide here. Does the two lines that we had last time, create our tensor create the body segmentation.

112
00:14:37.140 --> 00:14:40.950
Ryan Mehta: So we read our frame we get our bodies segmentation.

113
00:14:42.240 --> 00:14:47.490
Ryan Mehta: And then we store the mask in a live mask JPEG file.

114
00:14:50.610 --> 00:15:02.310
Ryan Mehta: Okay, and then we recapture again. So every time we capture grab the frame process. The friend getting our mask and then storing the mask in this live mask JPG file.

115
00:15:03.360 --> 00:15:04.770
Ryan Mehta: By run this function.

116
00:15:07.470 --> 00:15:11.880
Ryan Mehta: We should see a live mask pop up here in a little bit.

117
00:15:13.500 --> 00:15:22.620
Ryan Mehta: There is our live mask. And that's, that's me right now. You can kind of see me moving. Oh.

118
00:15:22.980 --> 00:15:24.510
Annalise Murphy: You're such a shape.

119
00:15:24.870 --> 00:15:25.500
I know

120
00:15:26.610 WEBVTT

1
00:00:03.659 --> 00:00:04.230
Ryan Mehta: Yeah.

2
00:00:09.090 --> 00:00:19.380
Ryan Mehta: That's pretty cool. I guess I mean if you like that sort of thing. I find that types like type systems. Whenever you use a static Lee typed language like TypeScript.

3
00:00:19.890 --> 00:00:30.180
Ryan Mehta: The initial setup is a little bit more cumbersome, because you have to sort of lay out your architecture and you're fighting with the types. A lot of the times, as you're doing that.

4
00:00:31.380 --> 00:00:45.720
Ryan Mehta: But once it gets rolling and the patterns are all emerging from your application. The types of really help you program a lot of the times they give you some like nice little hints, they make sure that you're passing the right sort of variables everywhere.

5
00:00:47.160 --> 00:00:49.200
Ryan Mehta: And they start accelerating your pace.

6
00:00:50.580 --> 00:00:55.500
Ryan Mehta: After you get those initial like the initial architecture there, I'm sure.

7
00:01:02.880 --> 00:01:03.750
Annalise: He gets signed off.

8
00:01:04.440 --> 00:01:05.400
Greg Mall: He's something happen.

9
00:01:06.870 --> 00:01:07.680
Think aliens.

10
00:01:09.390 --> 00:01:12.480
Edgar Cuellar: Yeah, he got signed up usually his screen will still move

11
00:01:12.720 --> 00:01:13.500
Edgar Cuellar: Who's in charge.

12
00:01:15.330 --> 00:01:16.080
Edgar Cuellar: Is probably still

13
00:01:17.160 --> 00:01:20.850
Thomas Stussi: User hasn't dropped yet or else this screen will drop

14
00:01:23.040 --> 00:01:23.970
Thomas Stussi: it'll drop soon.

15
00:01:33.690 --> 00:01:36.900
Ryan Mehta: Alright, I'm back. The other nice co host

16
00:01:37.860 --> 00:01:38.370
So,

17
00:01:39.870 --> 00:01:41.130
We'll have to wait for

18
00:01:43.260 --> 00:01:43.710
Ryan Mehta: Okay.

19
00:01:45.030 --> 00:01:46.560
Ryan Mehta: Derek, can you make me host

20
00:01:48.270 --> 00:01:48.750
Jerud Moyer: Me.

21
00:01:50.220 --> 00:01:51.600
Jerud Moyer: Oh, okay. Weird.

22
00:01:52.950 --> 00:01:53.340
Jerud Moyer: Because

23
00:01:53.910 --> 00:01:55.290
Annalise: I side but for you, Jared.

24
00:01:55.500 --> 00:01:58.590
Jerud Moyer: The hex how I did that. See

25
00:02:00.420 --> 00:02:02.250
Jerud Moyer: Participants is that how do that.

26
00:02:02.700 --> 00:02:03.990
Jerud Moyer: Mm hmm. Right.

27
00:02:05.310 --> 00:02:05.970
Jerud Moyer: More

28
00:02:07.620 --> 00:02:08.790
Jerud Moyer: Makeup close. Boom.

29
00:02:10.890 --> 00:02:13.710
Jerud Moyer: Enjoyed the power while I had it. But there you go.

30
00:02:14.340 --> 00:02:15.870
Greg Mall: Thank you even know you had it.

31
00:02:19.170 --> 00:02:31.860
Ryan Mehta: Yeah. So for those who have been writing their apps and TypeScript THIS LAST WEEK OR SO, HOW IS THAT FELT starting up a new application with TypeScript, because I felt cumbersome, as I felt fast or slow

32
00:02:32.970 --> 00:02:40.680
Ryan Mehta: Have you gotten to the point where you reach this point where you the types have helped you at all anywhere.

33
00:02:42.090 --> 00:02:43.920
Josh Olloqui: definitely helpful. I would say

34
00:02:45.360 --> 00:02:50.760
Josh Olloqui: Like the the simplicity, a bit being just very explicit is very helpful.

35
00:02:54.150 --> 00:02:58.920
Josh Olloqui: It also helps with them refactoring less I've noticed

36
00:03:00.090 --> 00:03:00.630
Josh Olloqui: Totally

37
00:03:01.140 --> 00:03:01.620
Yeah.

38
00:03:02.970 --> 00:03:12.450
Ryan Mehta: There's, there's, like, one other thing with TypeScript right you have so many more things to name. So you really need to pick some good names for some of these things because you have to name all of your types.

39
00:03:14.520 --> 00:03:24.420
Ryan Mehta: Alright. So some things about TypeScript. It's a compile to JavaScript language. So we will be writing TypeScript in these TS files.

40
00:03:25.650 --> 00:03:35.370
Ryan Mehta: But these TS files will eventually compile to JavaScript and the JavaScript code is what actually runs in the browser or a Node JS we're writing a back end application.

41
00:03:36.120 --> 00:03:45.540
Ryan Mehta: So JavaScript is still the thing that gets run we just write code in TypeScript and then compile it back to JavaScript compile to JavaScript.

42
00:03:46.350 --> 00:03:54.540
Ryan Mehta: Um, it's a little bit similar to what web pack does for us right we write some stuff in our JavaScript files and then web pack takes that and

43
00:03:55.140 --> 00:04:08.100
Ryan Mehta: transfer files into other JavaScript files for us in this like dist directory or build directory. The same thing happens with our TypeScript code. So like, I'm just going to make a really silly TypeScript.

44
00:04:10.830 --> 00:04:11.970
Ryan Mehta: File per second.

45
00:04:13.260 --> 00:04:31.650
Ryan Mehta: When we write this sort of code, we can build our code. Once we build our code this dis director gets created. And you'll see the output some JavaScript. So TypeScript compiled to JavaScript eventually

46
00:04:33.270 --> 00:04:39.150
Ryan Mehta: Um, it's also a superset of JavaScript. So all valid JavaScript. It's also valid TypeScript.

47
00:04:41.310 --> 00:04:45.630
Ryan Mehta: TypeScript is just JavaScript, which adds typing to it.

48
00:04:47.250 --> 00:04:55.680
Ryan Mehta: So you can kind of see that here. This is my TypeScript file. You can't even tell that it's TypeScript and not JavaScript, it looks exactly like JavaScript.

49
00:04:58.530 --> 00:05:05.220
Ryan Mehta: So TypeScript is just a superset of JavaScript, it adds the ability to add types to your JavaScript.

50
00:05:07.500 --> 00:05:11.610
Ryan Mehta: I'm actually going to move this up because I think it's important here.

51
00:05:13.320 --> 00:05:19.290
Ryan Mehta: The typing is also optional for the most part, so I can create a normal JavaScript variable.

52
00:05:20.760 --> 00:05:22.560
Ryan Mehta: And use it here.

53
00:05:25.140 --> 00:05:31.110
Ryan Mehta: You'd have, again, still no idea that you were in TypeScript here and not JavaScript.

54
00:05:32.730 --> 00:05:48.060
Ryan Mehta: It looks exactly like JavaScript because it's a superset by default. If you don't add your types in TypeScript. They are inferred. So the type of high is inferred to be a string, because you said it equal to a string. You don't have to be explicit about the types

55
00:05:50.820 --> 00:05:51.870
Ryan Mehta: type inference.

56
00:05:55.140 --> 00:05:58.740
Ryan Mehta: Ultimately though Typescript adds this typing layer.

57
00:05:59.700 --> 00:06:16.650
Ryan Mehta: To JavaScript, it creates ecstatically typed language. So the types of our code or check at compile time not at runtime, that's the big difference. JavaScript is a dynamic typed language, there are still types and JavaScript their strings or numbers or billions

58
00:06:18.390 --> 00:06:21.540
Ryan Mehta: But those types are never checked until the code is actually run

59
00:06:22.740 --> 00:06:24.930
Ryan Mehta: Right, so you can try to add

60
00:06:26.040 --> 00:06:27.510
Ryan Mehta: Like you can try to

61
00:06:29.820 --> 00:06:39.360
Ryan Mehta: You can try anything in your code and it won't break until the user actually goes and runs the file or the user actually goes to your page and the console spits out a bunch of error messages.

62
00:06:40.770 --> 00:06:53.850
Ryan Mehta: With TypeScript its exact opposite. When we go to build our application. The building process will fail. When we go to compile our application to compile process will fail if our types don't match up.

63
00:06:54.420 --> 00:07:04.200
Ryan Mehta: So static type, the types are checked at compile time not dynamically typed, which would mean that the types are checked out runtime when the program is run

64
00:07:06.660 --> 00:07:11.850
Ryan Mehta: There's a particular type of typing that TypeScript uses. It's called structural typing.

65
00:07:13.560 --> 00:07:18.150
Ryan Mehta: Some people also refer to this as duck typing but they're slightly different

66
00:07:20.580 --> 00:07:23.370
Ryan Mehta: What's that phrase I was perfect. This thing.

67
00:07:25.500 --> 00:07:26.250
Ryan Mehta: Like that.

68
00:07:29.190 --> 00:07:29.820
Ryan Mehta: Like

69
00:07:31.500 --> 00:07:33.090
Ryan Mehta: If it walks like a duck.

70
00:07:34.470 --> 00:07:38.100
Annalise: Then it talks like a duck and it quacks like a duck, then it must be a duck.

71
00:07:38.220 --> 00:07:42.450
Ryan Mehta: Yeah, if it walks like a duck, and quacks like a duck, then it must be a duck.

72
00:07:44.430 --> 00:07:47.460
Ryan Mehta: So that's the, that's what structWEBVTT

1
00:00:01.829 --> 00:00:06.779
Ryan Mehta: So process M is another object with all of your built in.

2
00:00:09.780 --> 00:00:25.800
Ryan Mehta: Whatever environment variables. So right here, this is concatenate those two objects. So you end up with the environment variables from your dot m file and all of your built in environment variables.

3
00:00:26.850 --> 00:00:33.420
Ryan Mehta: And then you run this reduce which essentially changes the object from this type of thing to

4
00:00:35.100 --> 00:00:37.860
Ryan Mehta: Process and da. Hi.

5
00:00:50.520 --> 00:00:51.300
Ryan Mehta: Sort of thing.

6
00:00:56.070 --> 00:00:58.350
Ryan Mehta: So put the process and in front of it.

7
00:00:59.940 --> 00:01:09.660
Ryan Mehta: And then this plug in here will search all of your code for any usage of processed and got high or process m dot path and replace them with the values here.

8
00:01:11.190 --> 00:01:11.850
Ryan Mehta: So no

9
00:01:11.910 --> 00:01:13.470
Ryan Mehta: No longer any need for that.

10
00:01:13.770 --> 00:01:16.200
Ryan Mehta: And web pack plugin, which is kind of cool.

11
00:01:17.100 --> 00:01:22.770
Ron Yonker: So this is a change in new web pack and we don't have to manually. It just does this

12
00:01:24.000 --> 00:01:24.600
Ryan Mehta: Well,

13
00:01:24.750 --> 00:01:28.770
Ryan Mehta: We had, it's kind of a slightly bit more manual but

14
00:01:30.480 --> 00:01:32.970
Ryan Mehta: Yes, it just does this part at least

15
00:01:35.490 --> 00:01:36.030
Ryan Mehta: Okay.

16
00:01:39.300 --> 00:01:43.110
Ryan Mehta: So let's play around. To begin with, with

17
00:01:45.660 --> 00:01:50.220
Ryan Mehta: React router. So I'm going to start off by installing react router DOM.

18
00:01:51.390 --> 00:01:56.010
Ryan Mehta: This gives us all of those fancy react router components.

19
00:01:57.660 --> 00:02:00.120
Ryan Mehta: Inside of my app JS.

20
00:02:01.200 --> 00:02:06.000
Ryan Mehta: I am going to make a few other components. We've gotten used to putting components in their own

21
00:02:08.040 --> 00:02:14.700
Ryan Mehta: Files, but you can always define multiple components in the same file if you want to. I'm going to start off by

22
00:02:16.080 --> 00:02:18.090
Ryan Mehta: Making a few components.

23
00:02:19.260 --> 00:02:27.630
Ryan Mehta: inside of here, just so we can play around with a few components with React router. So I'll make a home component about component

24
00:02:33.300 --> 00:02:34.590
Ryan Mehta: Let's make a

25
00:02:35.640 --> 00:02:41.130
Ryan Mehta: Contact component. So, like a kind of basic website.

26
00:02:44.550 --> 00:02:50.430
Ryan Mehta: Okay, so we have three function components up here. We're going to import react router DOM.

27
00:02:56.310 --> 00:03:05.820
Ryan Mehta: Will bring in the browser router as router. So this is bringing in the browser router and renaming it to router.

28
00:03:07.050 --> 00:03:11.610
Ryan Mehta: Will bring in a route and we'll bring in switch

29
00:03:15.660 --> 00:03:26.220
Ryan Mehta: Okay, so these three things inside of app, we're gonna wrap everything with our router, so everything will be a child of the router component

30
00:03:28.590 --> 00:03:34.320
Ryan Mehta: And then let's start off by having three routes. So we'll have a route.

31
00:03:35.340 --> 00:03:41.880
Ryan Mehta: Where the path is slash and the component that will load will be our home component

32
00:03:44.340 --> 00:03:56.250
Ryan Mehta: Will have another route where the path is about and the component that will load is our about component and the final route contact and

33
00:03:59.700 --> 00:04:01.710
Ryan Mehta: Then let's run this application.

34
00:04:03.720 --> 00:04:11.490
Ryan Mehta: All right. Any predictions. What will happen if we go to the homepage, just to slash. What will we see on the page.

35
00:04:14.820 --> 00:04:15.660
Greg Mall: It'll just say home.

36
00:04:18.450 --> 00:04:22.740
Ryan Mehta: We have one, and he had that he think that they'll say something different.

37
00:04:26.550 --> 00:04:26.850
Thomas Stussi: You

38
00:04:28.650 --> 00:04:37.110
Ron Yonker: Know, switch right now. You did not know. So technically, just the slash that matches all three of those.

39
00:04:38.370 --> 00:04:43.650
Ron Yonker: Yeah, I imagine you should see home about and contact in that order.

40
00:04:49.350 --> 00:04:49.740
Ron Yonker: Now,

41
00:05:11.880 --> 00:05:13.260
Ryan Mehta: So close.

42
00:05:14.070 --> 00:05:19.410
Ryan Mehta: But we had an opposite right the prediction was the opposite direction.

43
00:05:21.360 --> 00:05:23.160
Ryan Mehta: So you had some intuition around this.

44
00:05:25.140 --> 00:05:35.430
Ryan Mehta: The slash for sure matches all of these things. But when you're on just the slash page, it only matches this right because slash

45
00:05:37.650 --> 00:05:40.170
Ryan Mehta: Doesn't match any of these two when you're on that page.

46
00:05:40.830 --> 00:05:43.650
Ron Yonker: But guess it's just matching. The first thing I'm ready.

47
00:05:44.460 --> 00:05:44.880
Ryan Mehta: Well,

48
00:05:44.940 --> 00:05:46.770
Ryan Mehta: When you go to the about page.

49
00:05:48.870 --> 00:05:50.280
Ryan Mehta: Now slash about

50
00:05:51.540 --> 00:06:03.480
Ryan Mehta: Is going to trigger both the homepage component and the about page component because slash about has both a slash in it, and it has slash about in it.

51
00:06:05.460 --> 00:06:12.990
Ryan Mehta: So when we go to the about page we get something sort of unexpected when I do it this way. So it's a bit easier.

52
00:06:15.690 --> 00:06:19.830
Ryan Mehta: To see our changes. So this is at the homepage.

53
00:06:21.000 --> 00:06:22.710
Ryan Mehta: And on the about page.

54
00:06:27.090 --> 00:06:41.790
Ryan Mehta: Okay, we could fix that, if we said that the only time we went to Home component to load is if we're on exactly the about page or exactly the homepage. Then when we load the about page, we only see the about

55
00:06:43.170 --> 00:06:52.380
Ryan Mehta: This slide 23 no longer matches slash about because it only loads on the path is exactly slash not any path with a slash in it.

56
00:06:57.120 --> 00:06:57.840
Ryan Mehta: seem okay

57
00:07:00.000 --> 00:07:02.190
Ryan Mehta: What if I put slash blah.

58
00:07:03.210 --> 00:07:05.940
Blah, here what will happen.

59
00:07:08.580 --> 00:07:09.090
Annalise Murphy: You just

60
00:07:09.420 --> 00:07:13.650
Ron Yonker: Landing. Technically, it's still matches both about and slash

61
00:07:19.260 --> 00:07:23.790
Ryan Mehta: To get the about page, it actually only matches about now because we have this exact thing here.

62
00:07:27.900 --> 00:07:38.370
Ryan Mehta: So what if we wanted this not to load the about page, what we would change over here on the left. So when you type in about, blah, blah. We no longer get this about text here.

63
00:07:39.540 --> 00:07:40.110
Greg Mall: Exactly.

64
00:07:41.280 --> 00:07:41.760
Greg Mall: Exactly.

65
00:07:41.790 --> 00:07:43.380
Ryan Mehta: So if we make this exact

66
00:07:43.950 --> 00:07:46.320
Ryan Mehta: And load this again. We get nothing here.

67
00:07:47.640 --> 00:07:47.880
Ryan Mehta: That's

68
00:07:48.930 --> 00:07:58.800
Ryan Mehta: A bit subtle, but how I sort of think of these routes or like a convenient way that I used to think about these routes is a series of

69
00:07:59.400 --> 00:08:15.060
Ryan Mehta: ifs. So these are all conditional rendering where the path is like your condition. So if I were to translate this route into a if statement, it would say if the path.

70
00:08:16.620 --> 00:08:20.160
Ryan Mehta: And by path here. I mean, like the actual path that the user goes to

71
00:08:21.930 --> 00:08:23.340
Ryan Mehta: triple equals

72
00:08:24.510 --> 00:08:25.410
Ryan Mehta: Slash

73
00:08:26.940 --> 00:08:30.420
Ryan Mehta: Then we're going to return the homepage component

74
00:08:34.950 --> 00:08:37.140
Ryan Mehta: And then we have another one is

75
00:08:38.610 --> 00:08:40.620
Ryan Mehta: Path triple equals

76
00:08:41.910 --> 00:08:47.130
Ryan Mehta: About them. We're going to return the about component

77
00:08:48.210 --> 00:08:56.280
Ryan Mehta: Right now our contact doesn't have the exact path. So it's a little bit different. It's saying if the path includes

78
00:08:57.690 --> 00:08:58.770
Ryan Mehta: Contact

79
00:09:00.150 --> 00:09:03.000
Ryan Mehta: Then return contact

80
00:09:05.490 --> 00:09:21.120
Ryan Mehta: So you can kind of see the difference right when you have the exact path. They're saying the path has to equal about if you have, if you don't have exact here, all you're saying is the path has to include contact in order to render the contact page.

81
00:09:25.050 --> 00:09:25.380
Right.

82
00:09:28.140 --> 00:09:28.710
Ryan Mehta: All right.

83
00:09:30.450 --> 00:09:35.580
Ryan Mehta: Let's get rid of this last for a second and go back to our about page.

84
00:09:36.720 --> 00:09:48.720
Ryan Mehta: Now we see both again right if the path has a slash in it. We're going to load the home component. And if the path has exactly slash about in it. We're going to load the about page.

85
00:09:48.900 --> 00:10:02.220
Ron Yonker: To Ryan on the about page. Yep, I'm sorry if you put a slash contact at the end of that. So that's local host slash about slash contact, would you get all three to display.

86
00:10:03.900 --> 00:10:05.490
Ryan Mehta: It still has to start with it.

87
00:10:06.240 --> 00:10:07.230
Ron Yonker: Okay, yeah.

88
00:10:14.250 --> 00:10:22.470
Ryan Mehta: Okay, so we get both of these on the page. We are triggering both like 23 and we're triggering line.

89
00:10:23.640 --> 00:10:24.120
Here.

90
00:10:26.070 --> 00:10:29.010
Ryan Mehta: What if we wrap this whole thing with a switch, though.

91
00:10:30.300 --> 00:10:41.610
Ryan Mehta: So if I switch around this. What do you all think we'll see on the page instead of auto auto save it gave it away.

92
00:10:44.610 --> 00:10:45.690
Annalise Murphy: I think it'll show that right

93
00:10:46.110 --> 00:10:46.500
Yeah.

94
00:10:48.390 --> 00:10:50.040
Ryan Mehta: So a switch. We only

95
00:10:50.070 --> 00:11:00.390
Ryan Mehta: Render the first matching route. In this case, the first matching route is line 24 so without the switch. We got both

96
00:11:02.850 --> 00:11:08.580
Ryan Mehta: With the switch. We only get the first one that matches, which is line 24

97
00:11:10.350 --> 00:11:15.240
Ryan Mehta: If we swapped line 24 and 25 then we'll see about instead

98
00:11:16.500 --> 00:11:19.530
Ryan Mehta: The first matching component

99
00:11:23.010 --> 00:11:26.220
Ryan Mehta: So if you know you only ever want one of your routes to show

100
00:11:26.850 --> 00:11:42.120
Ryan Mehta: Then you always want to use exam or switch because you only want these are all pages. You never want to have your pages to show, but sometimes there might be an application where you do want multiple routes to show what a single page, in which case you would switch

101
00:11:45.060 --> 00:11:49.740
Ron Yonker: So Ryan, what was the effect of swapping lines 24 and 25

102
00:11:51.360 --> 00:11:53.130
Ron Yonker: I'm not sure I caught what happened.

103
00:11:53.940 --> 00:12:11.580
Ryan Mehta: So if you have a switch and not the exact path here we have our home first because home is the first matching route. Okay. Swap 24 and 25 then we would have about first because about is now the first matching route.

104
00:12:13.860 --> 00:12:19.410
Ron Yonker: So that makes it literally like a cascading yes a statement.

105
00:12:20.040 --> 00:12:21.150
Ryan Mehta: So yeah, now it's because

106
00:12:21.210 --> 00:12:22.680
Ryan Mehta: If l fifth

107
00:12:22.860 --> 00:12:23.490
Else.

108
00:12:24.780 --> 00:12:31.050
Adrian Simental: Pretty much sort of just typing it out. Is there an easy way to just have exact in front of me.

109
00:12:33.120 --> 00:12:33.630
Ryan Mehta: And

110
00:12:35.190 --> 00:12:38.820
Ryan Mehta: You can make another component that does that. You could do something like

111
00:12:43.080 --> 00:12:46.050
Ryan Mehta: I don't know if it ends up being less or more work.

112
00:12:46.950 --> 00:12:53.490
Adrian Simental: What does it mean like if it was a real website and you have like a bunch of different pages and you didn't want to write out exact you know $100

113
00:12:54.840 --> 00:12:55.470
To

114
00:13:01.500 --> 00:13:02.730
Ryan Mehta: Can do this sort of thing.

115
00:13:04.140 --> 00:13:05.760
Ryan Mehta: And then you could replace

116
00:13:10.350 --> 00:13:12.000
Ryan Mehta: And then you wouldn't need these exact

117
00:13:25.620 --> 00:13:27.030
Ryan Mehta: Although it doesn't work so

118
00:13:29.070 --> 00:13:30.870
Ryan Mehta: Because this one should no longer

119
00:13:53.070 --> 00:14:00.480
Ryan Mehta: Because it's no longer part of the switch, I guess, I don't know, you could probably play around with this and get something like it working.

120
00:14:02.160 --> 00:14:03.540
Ryan Mehta: So make another component

121
00:14:07.530 --> 00:14:13.140
Ryan Mehta: But other than other than trying to make another component like that. There's no other real way.

122
00:14:15.690 --> 00:14:20.100
Ryan Mehta: To do that, I guess, well, there's one other thing that you could do. You could

123
00:14:22.320 --> 00:14:24.090
Ryan Mehta: You could always have these

124
00:14:25.410 --> 00:14:30.900
Ryan Mehta: The Oregon organized from most explicit to least explicit. So like most

125
00:14:32.280 --> 00:14:37.890
Ryan Mehta: Nested to least nested so this would go on the bottom and then you would need these exact same anymore.

126
00:14:38.910 --> 00:14:42.060
Ryan Mehta: And it would still behave the way you expected.

127
00:14:43.080 --> 00:14:49.770
Ryan Mehta: That would also work, but that might actually be more strenuous than just putting the exact seer.

128
00:14:50.430 --> 00:14:55.710
Ryan Mehta: Because the exact swell. It takes a little extra typing it doesn't take very much brain power.

129
00:14:56.160 --> 00:15:02.370
Ryan Mehta: But figuring out what the correct order of these things are so the page loads correctly takes a lot of brain power so

130
00:15:02.790 --> 00:15:11.520
Ryan Mehta: Especially as the application grows like if we had 40 of these things, trying to figure out which one should go first or second could take a lot of you. I have to drop it somewhere.

131
00:15:12.840 --> 00:15:19.320
Adrian Simental: Where we can say when it does the switch. We also do it like alphabetically like instead of

132
00:15:20.610 --> 00:15:25.980
Adrian Simental: Whatever contact you and I don't know. Cole right so catch like the see

133
00:15:28.500 --> 00:15:29.100
Ryan Mehta: I see.

134
00:15:32.820 --> 00:15:38.580
Ryan Mehta: So, well, actually. So could you mean like organize these alphabetically.

135
00:15:39.510 --> 00:15:49.410
Adrian Simental: Know, I mean like if you were to go to local host slash see right and you had two different paths, one for contact and one for coal, which one would it hit

136
00:15:50.550 --> 00:15:53.460
Ryan Mehta: Neither because they would have to match the entire word

137
00:16:02.340 --> 00:16:10.590
Ryan Mehta: Yeah, and also probably on a big application. I wouldn't write these routes manually, I would probably have a pages directory and

138
00:16:11.700 --> 00:16:24.750
Ryan Mehta: If any of you have used next year sometime next JS, does it, you have a pages directory and all of the components and the pages directory would automatically get a route and you just write a little bit of logic to do that.

139
00:16:27.690 --> 00:16:28.950
Ryan Mehta: We can experiment with that.

140
00:16:30--> 00:15:28.710
Ryan Mehta: Now we just need to put me actually here, right.

121
00:15:30.030 --> 00:15:41.220
Annalise Murphy: But it's kind of cool. What music artists did that take me home today he. Oh, you can take on me, remind me of that video.

122
00:15:42.870 --> 00:15:44.250
Ryan Mehta: Yeah, I think, um,

123
00:15:44.490 --> 00:15:45.060
Ryan Mehta: I kind of

124
00:15:45.480 --> 00:15:53.580
Ryan Mehta: I don't want to be on camera all that often. But sometimes you required to be on camera. I wonder if I just show up with like this. If people will accept it.

125
00:15:54.720 --> 00:15:55.410
Annalise Murphy: I would

126
00:15:56.880 --> 00:16:01.230
Thomas Stussi: Put a spotlight on it. So you're like, this is swordfish.

127
00:16:03.780 --> 00:16:08.820
Annalise Murphy: And also be like, this is my good friend, Ryan, I don't know what he ever looks like.

128
00:16:10.980 --> 00:16:12.690
Annalise Murphy: But he's my favorite blob anywhere.

129
00:16:16.200 --> 00:16:23.280
Ryan Mehta: So yeah, that's what this is doing. If I stopped the program, it'll stop writing the file. So I'll stop moving. Also right let's delete some of these

130
00:16:27.480 --> 00:16:27.990
Jerud Moyer: Was there.

131
00:16:30.360 --> 00:16:35.880
Jerud Moyer: Somewhere where you set the frame rate in the like live cam. First, I just sort of what it is.

132
00:16:38.190 --> 00:16:41.850
Ryan Mehta: I haven't yet, but I am going to sit the fraural typing is

73
00:07:48.750 --> 00:08:03.930
Ryan Mehta: What the types do is a check the structure, the shape of objects, they don't check out the objects have the same name. So we'll see when we start creating our custom types we tell it that this type has to have these fields in it.

74
00:08:05.670 --> 00:08:17.550
Ryan Mehta: And the name of this type is dog, we could create another type called top with the same fields in it in TypeScript, those, those types of be equivalent cat and dog, as long as they have the same fields.

75
00:08:19.770 --> 00:08:25.140
Ryan Mehta: There's a different type of typing system called nominal typing, which actually checks the name of the time.

76
00:08:27.870 --> 00:08:36.630
Ryan Mehta: So some examples of nominal type systems c++ Java C sharp. Actually I think C sharp can be structurally typed also

77
00:08:39.360 --> 00:08:42.360
Ryan Mehta: But most of the famous like very popular.

78
00:08:45.240 --> 00:09:01.710
Ryan Mehta: type systems or nominally typed a lot of the more newer rest is also nominally typed evolve have heard of rest, which is like another cool new language. Some examples of structurally typed languages TypeScript and go are both structurally typed.

79
00:09:05.070 --> 00:09:10.350
Ryan Mehta: All right, we'll get like a little bit more insight into this one. Once we start creating our own types.

80
00:09:12.390 --> 00:09:22.410
Ryan Mehta: I just want to do like a brief rundown of TypeScript in our index.ts file here to show you some of the features of it, and then we'll build our react application.

81
00:09:24.630 --> 00:09:30.810
Ryan Mehta: In this little project that I have here, I have created a package JSON.

82
00:09:31.890 --> 00:09:33.690
Ryan Mehta: Inside of the package JSON, I've

83
00:09:34.860 --> 00:09:37.740
Ryan Mehta: MPM IDE for dependencies.

84
00:09:39.210 --> 00:09:42.870
Ryan Mehta: To dependencies for ES lint, so I can get some as link to checking

85
00:09:43.950 --> 00:09:58.830
Ryan Mehta: This TS node file, which will let me run this node or this index dot txt file in my terminal and this type script dependency, which will let me build my TypeScript file and compile it into JavaScript.

86
00:10:00.480 --> 00:10:02.640
Ryan Mehta: There's also this TS config.

87
00:10:03.690 --> 00:10:12.480
Ryan Mehta: Which tells TypeScript, how to build our TypeScript into JavaScript. So should it be es lint, should it be common JS or

88
00:10:13.590 --> 00:10:17.850
Ryan Mehta: Yes. And, and where should it put the output of JavaScript.

89
00:10:19.560 --> 00:10:28.290
Ryan Mehta: We're not really going to go over this too much, but there's some configuration with how we should compile TypeScript. That's what goes in this TS config file.

90
00:10:31.290 --> 00:10:36.420
Ryan Mehta: Right. So we started off, we're starting off with these four dependencies here.

91
00:10:37.740 --> 00:10:44.550
Ryan Mehta: Before we actually start writing TypeScript. I am going to get my react application setup, just so we don't have to wait for it.

92
00:10:45.090 --> 00:11:01.710
Ryan Mehta: And a little while. It takes a little while for create React app to install everything. So I'm going to use create React app. I'm going to create an application called react TypeScript up I'm going to use the TypeScript template which will make it so it uses TypeScript instead of JavaScript.

93
00:11:04.200 --> 00:11:10.380
Ryan Mehta: And this MPM thing because I have yarn and MPM installed, but I want to use MPM so I have that last little flag there.

94
00:11:12.420 --> 00:11:23.460
Ryan Mehta: All right, I'll run that it might take a little while for our React app or react application to get started. In the meantime, let's play around a little bit with TypeScript.

95
00:11:25.980 --> 00:11:28.800
Ryan Mehta: Let me keep my notes. Over here on the left, also.

96
00:11:30.240 --> 00:11:44.340
Ryan Mehta: So in TypeScript. We can specify the types of variables. Let's make a greeting variable when I make my greeting variable I could put a colon and the type that greeting to do for

97
00:11:45.750 --> 00:11:48.780
Ryan Mehta: So this is saying that greeting is a string.

98
00:11:52.530 --> 00:11:57.450
Ryan Mehta: We can also do the same with numbers like constant age is a number

99
00:11:59.370 --> 00:12:02.640
Ryan Mehta: And bullying cards as a

100
00:12:04.050 --> 00:12:04.860
As a Boolean

101
00:12:09.300 --> 00:12:26.940
Ryan Mehta: So you have your normal JavaScript. The additional part is this colon and then the type before the equal sign. This is telling us that the variable is a string, the variable is a number. This variable is a Boolean with the specified those types.

102
00:12:28.560 --> 00:12:30.330
Ryan Mehta: And we sort of mentioned it already.

103
00:12:31.650 --> 00:12:34.410
Ryan Mehta: In TypeScript. You don't have to be this explicit

104
00:12:35.640 --> 00:12:45.210
Ryan Mehta: It can infer what these types are just based on the right hand side equals on the right hand side of the equal so you can

105
00:12:47.880 --> 00:12:52.500
Ryan Mehta: Totally leave those types off and get the typing by inference.

106
00:12:53.850 --> 00:13:06.810
Ryan Mehta: The one thing to keep in mind though always is, whenever you are adding a type the type goes after that the variable name or the property name a colon and then the type that that property is

107
00:13:09.780 --> 00:13:18.930
Ryan Mehta: In this case, we don't need those types because we have them by inference TypeScript can figure out the type of greeting based on what we put on the right hand side of the equal

108
00:13:22.740 --> 00:13:24.270
Ryan Mehta: Right, let's see. Okay.

109
00:13:26.520 --> 00:13:30.540
Ryan Mehta: We can also define functions. Let's define an ad function.

110
00:13:31.860 --> 00:13:39.270
Ryan Mehta: When we defined functions. We need to tell it what type of parameters for receiving. So our ad functions here, take a number

111
00:13:41.070 --> 00:13:42.480
Ryan Mehta: And another number

112
00:13:44.730 --> 00:13:51.210
Ryan Mehta: So we're saying, add expects to receive a which is a number and be which is also a number

113
00:13:52.530 --> 00:14:02.430
Ryan Mehta: In addition to this, we need to tell. We need to tell this function what type it returns. In this case, add returns

114
00:14:03.990 --> 00:14:04.560
A number

115
00:14:06.900 --> 00:14:09.270
We do something like return a fluffy.

116
00:14:10.770 --> 00:14:29.070
Ryan Mehta: So this is the TypeScript version of our classic like simple add function in JavaScript. You'll notice they look very, very similar, with the addition of these types. So same rule that we had up above. We have our parameter colon and then the type of that parameter

117
00:14:30.240 --> 00:14:37.170
Ryan Mehta: Or parameter colon and the type of our parameter our function colon.

118
00:14:38.550 --> 00:14:41.100
Ryan Mehta: And the return value of our function.

119
00:14:42.330 --> 00:14:45.360
Ryan Mehta: Their return type of our function also a number

120
00:14:47.220 --> 00:14:50.850
Ryan Mehta: In this case, you cannot, you can actually leave off this number.

121
00:14:51.960 --> 00:14:59.100
Ryan Mehta: Type because it can be inferred from line six TypeScript can totally infer what type you're returning here.

122
00:15:02.070 --> 00:15:08.340
Ryan Mehta: I like to keep them on. Anyways, just because I feel like it's easier to read with the explicit Typing of the function

123
00:15:11.820 --> 00:15:22.680
Ryan Mehta: In this case, it doesn't matter so much because it's a one line function, but a little bit longer function. It might be nice to be able to just read one line and know everything about the function for the most part.

124
00:15:27.930 --> 00:15:28.590
Ryan Mehta: All right.

125
00:15:30.390 --> 00:15:37.290
Ryan Mehta: What if we wanted to make a function. So let's take a array of names.

126
00:15:47.160 --> 00:15:52.860
Ryan Mehta: And we wanted to write a function called longest screen.

127
00:15:54.420 --> 00:15:57.330
Ryan Mehta: That takes that array and outputs.

128
00:15:58.410 --> 00:16:01.890
Ryan Mehta: A string that is the longest in the array.

129
00:16:03.330 --> 00:16:07.860
Ryan Mehta: I'm in this case we have an array of strings. I'm going to call these

130
00:16:10.530 --> 00:16:15.600
Ryan Mehta: I don't know strings strings is an array.

131
00:16:19.260 --> 00:16:29.130
Ryan Mehta: Of strings so TypeScript. You say string and then he put the square brackets. At the end of string to let it know that this is an array of strings.

132
00:16:31.020 --> 00:16:37.230
Ryan Mehta: And then our longest string returns a single string use this as a group.

133
00:16:40.500 --> 00:16:48.960
Ryan Mehta: So we have a function called longest strings. It takes an array of strings strings square brackets and it returns an individual string.

134
00:16:51.660 --> 00:16:52.380
Make sense

135
00:16:54.660 --> 00:17:01.770
Ryan Mehta: And then down below. We need to figure out how to do this sort of thing. I think we don't have to focus too much on this.

136
00:17:04.710 --> 00:17:07.890
Ryan Mehta: Because maybe it doesn't really matter.

137
00:17:10.410 --> 00:17:11.490
Ryan Mehta: Accumulator

138
00:17:13.230 --> 00:17:14.640
Less than a car.

139
00:17:20.640 --> 00:17:22.800
Ryan Mehta: Okay, I think that will do it.

140
00:17:25.980 --> 00:17:36.690
Ryan Mehta: We have our longest string function that takes an array of strings and outputs a single string. We can then console log one string names.

141
00:17:41.610 --> 00:17:45.060
Ryan Mehta: And let's try to run this thing from an ease and px

142
00:17:46.620 --> 00:17:49.500
Ryan Mehta: Yes node. And when our TypeScript file.

143
00:17:51.090 --> 00:17:52.620
Ryan Mehta: prints out rover, which

144
00:17:53.940 --> 00:17:56.400
Ryan Mehta: Is tied for the longest string. So it looks good.

145
00:17:59.400 --> 00:18:21.810
Ryan Mehta: If we try to do something crazy like put a number inside of our array. Now we know now names is no longer an array of strings. It's an array of strings or numbers you can kind of see this type definition here that TypeScript gives us names is a string or number array.

146
00:18:23.430 --> 00:18:36.990
Ryan Mehta: Since it's a string or number ray and no longer matches the type here. So we have our red underlining right here argument of type string or number array is not assignable to parameter of type string array.

147
00:18:37.860 --> 00:18:46.260
Ryan Mehta: So TypeScript is letting us know that our names array is no longer a valid argument to pass to fungus string.

148
00:18:49.320 --> 00:18:49.620
Cool.

149
00:18:53.010 --> 00:18:57.840
Ryan Mehta: Same thing would happen if we had an array of numbers. For example,

150
00:19:00.030 --> 00:19:02.340
Ryan Mehta: Now names is a number, Ray.

151
00:19:03.990 --> 00:19:13.440
Ryan Mehta: We have our red underlining right here. Number array is not assignable to parameters string array we tried to run this file, we would get

152
00:19:15.750 --> 00:19:17.010
Ryan Mehta: A compilation error.

153
00:19:18.570 --> 00:19:25.110
Thomas Stussi: Telling us the same thing if names was dynamic, it would just give it error on compiling

154
00:19:26.400 --> 00:19:31.500
Ryan Mehta: Names is dynamic, it would give you an error when you actually ran the file.

155
00:19:34.920 --> 00:19:45.060
Ryan Mehta: Because it would give you an error, right here, it would say something like accumulator dot length is not. It's like undefined or something, right.

156
00:19:47.250 --> 00:19:57.930
Ryan Mehta: It actually might not even error. It might just give you a shorter word because it would be like undefined less than undefined and have no idea what would happen there.

157
00:20:01.770 --> 00:20:06.450
Ryan Mehta: Alright so TypeScript gives us some nice checking of types like this.

158
00:20:10.800 --> 00:20:28.980
Ryan Mehta: Alright, we kind of thought, just a second ago. You can also compose types together. So back in our ad function instead of just saying that a has to be a number, we may want to say that A is a number or a string and be as a number or a string.

159
00:20:31.410 --> 00:20:39.570
Ryan Mehta: Or whatever. So you can compose types like this, saying that A can be one of either number string if you expect one or the other.

160
00:20:41.010 --> 00:20:42.420
Ryan Mehta: And you don't care about which one

161
00:20:46.320 --> 00:20:49.200
Brooke Perkins (she/her): Hey Ryan, what is the accumulator.

162
00:20:51.150 --> 00:20:52.110
Brooke Perkins (she/her): In the reduce

163
00:20:52.140 --> 00:20:52.980
It's like

164
00:20:54.600 --> 00:21:10.920
Ryan Mehta: Whenever you return from reduce it like return it adds whatever you return here becomes the next accumulator. So oftentimes people will be pushing to the accumulator new items. That's what people call it the accumulator usually

165
00:21:13.440 --> 00:21:13.860
Thank you.

166
00:21:16.800 --> 00:21:19.560
Ryan Mehta: In our case, it's really like long does

167
00:21:20.640 --> 00:21:22.380
Ryan Mehta: Like our potential longest string.

168
00:21:29.250 --> 00:21:36.360
Ryan Mehta: All right, let's make a few custom types and then talk about generics and then we will play around with React

169
00:21:38.310 --> 00:21:50.820
Ryan Mehta: There are two key words that you can use in React to create custom packs. There are interfaces and type. So you can make an interface.

170
00:21:52.530 --> 00:21:53.130
Ryan Mehta: DOD

171
00:21:54.390 --> 00:22:09.840
Ryan Mehta: Or you can make a type god there's some subtle differences between the two that we won't go too much into but you can look up there's tons of articles about the differences between the two. We're going to use type for all of our stuff today.

172
00:22:11.190 --> 00:22:13.350
Ryan Mehta: So we can make a new type dog.

173
00:22:14.520 --> 00:22:25.380
Ryan Mehta: A dog has a name which is a string. It has an age, which is a number and it has a weight, which is also a string.

174
00:22:27.540 --> 00:22:33.540
Ryan Mehta: What we're creating here is an object that has to have all three of these properties.

175
00:22:35.280 --> 00:22:39.090
Ryan Mehta: So we're specifying the shape that an object has to take

176
00:22:40.770 --> 00:22:41.700
Ryan Mehta: That makes sense.

177
00:22:44.460 --> 00:22:51.450
Ryan Mehta: So if we had a function called create dog that took him a name.

178
00:22:52.710 --> 00:22:55.740
Ryan Mehta: And age and the weight.

179
00:22:57.810 --> 00:23:00.630
Ryan Mehta: And returned a dog.

180
00:23:04.560 --> 00:23:24.360
Ryan Mehta: We're saying that create dog has to return an object with these three properties in it. So if we return an empty object TypeScript will get a red underline saying that type empty object is missing the following properties from dog named agent. Wait.

181
00:23:25.440 --> 00:23:28.650
Ryan Mehta: If we happen to return an object with only name in it.

182
00:23:29.940 --> 00:23:31.170
Ryan Mehta: We would still get an error.

183
00:23:32.580 --> 00:23:37.590
Ryan Mehta: Missing properties agent. Wait, so it's telling us that we need to have an object.

184
00:23:38.970 --> 00:23:44.370
Ryan Mehta: With this shape, since we're returning a dog, our object has to look like a dog.

185
00:23:45.870 --> 00:23:57.240
Ryan Mehta: This is where we go back to the duck typing stuff for the structural types. We're not actually creating a dog. Here we're creating an object with the shape that looks like a dog.

186
00:23:58.110 --> 00:24:18.120
Ryan Mehta: This is why it's kind of like duck typing right if it looks like a dog, and it has all the properties of a dog. It speaks like the dog, then it is a dog, as far as TypeScript is concerned. So as long as we retur.000 --> 00:16:31.110
Ryan Mehta: Maybe towards the end.

141
00:16:34.230 --> 00:16:36.090
Ryan Mehta: Okay, that's the switch.

142
00:16:37.380 --> 00:16:38.580
Ryan Mehta: One last thing.

143
00:16:40.260 --> 00:16:42.750
Ryan Mehta: Before getting into variables that I want to show

144
00:16:43.770 --> 00:16:51.660
Ryan Mehta: We've been we're kind of gotten used to using this browser router. There is another sort of popular router called the hash router.

145
00:16:54.240 --> 00:16:55.170
Ryan Mehta: Which will

146
00:16:56.700 --> 00:16:58.710
Ryan Mehta: Put a little hash here.

147
00:16:59.730 --> 00:17:01.590
Ryan Mehta: If you notice this little hash here.

148
00:17:03.120 --> 00:17:06.990
Ryan Mehta: And after the hash. This is where you put your actual pages.

149
00:17:10.350 --> 00:17:17.520
Ryan Mehta: Instead of just making it look like a regular pass it puts this little anchor this little hashtag.

150
00:17:19.410 --> 00:17:23.310
Ryan Mehta: Into the URL. This is for support for older browsers.

151
00:17:24.360 --> 00:17:24.960
Ryan Mehta: So,

152
00:17:26.220 --> 00:17:29.610
Ryan Mehta: older browsers used to not be able to let you

153
00:17:31.080 --> 00:17:33.990
Ryan Mehta: Go to different pages by changing the URL.

154
00:17:35.520 --> 00:17:43.350
Ryan Mehta: Because whenever you change the URL it thought that it made it needed to make a server call it didn't know that all of the routes limited locally.

155
00:17:44.490 --> 00:17:53.340
Ryan Mehta: So the way people got around that is by putting these little hashes and the URL and then putting the path that you wanted to go to after the hash.

156
00:17:54.570 --> 00:18:01.410
Ryan Mehta: It's really legacy stuff right now. But if you ever get a job using like phone gap or Cordova

157
00:18:02.790 --> 00:18:11.700
Ryan Mehta: Don't know if any of you heard of these things. These are things that let you take a website rapid into and wrap it into a phone application.

158
00:18:12.780 --> 00:18:21.660
Ryan Mehta: So it lets you make a iOS application or an Android application, based on your website.

159
00:18:22.860 --> 00:18:25.620
Ryan Mehta: Whenever you use Cordova or phone gap.

160
00:18:26.730 --> 00:18:31.800
Ryan Mehta: With your website, you have to use hash router for whatever reason they don't support browser router.

161
00:18:35.010 --> 00:18:39.630
Ryan Mehta: So I'm just meant. I'm only mentioning hash router, pretty much, because of that.

162
00:18:42.510 --> 00:18:44.700
Ryan Mehta: Nowadays, we only use browser router, though.

163
00:18:46.530 --> 00:18:50.310
Ryan Mehta: It looks much better looks like what people would expect much more

164
00:18:55.080 --> 00:19:04.620
Annalise Murphy: So the hash is like for older computing systems, then, like, working, working on legacy code, like you mentioned,

165
00:19:05.850 --> 00:19:20.670
Annalise Murphy: Okay yeah cuz I saw, I mean like looking at sort of the career track stuff I've been, you know, looking at some jobs things and it makes sense now because I guess crossing over, like I see a lot of these companies want to update everything

166
00:19:22.650 --> 00:19:23.010
So,

167
00:19:25.770 --> 00:19:26.280
Annalise Murphy: Interesting.

168
00:19:29.640 --> 00:19:30.330
Ryan Mehta: Yeah, totally.

169
00:19:32.160 --> 00:19:32.790
Ryan Mehta: Alright.

170
00:19:34.020 --> 00:19:36.600
Ryan Mehta: last little thing. Let me make sure it's the last little

171
00:19:36.630 --> 00:19:38.610
Thing, look at my notes.

172
00:19:42.090 --> 00:19:44.280
Ryan Mehta: Yes. Okay, last little thing.

173
00:19:46.530 --> 00:19:55.740
Ryan Mehta: Programs. So in addition to these sorts of routes. We can also make routes that take variables girls make a color out

174
00:19:58.140 --> 00:20:00.270
Ryan Mehta: That returns an H1.

175
00:20:06.180 --> 00:20:06.840
Is

176
00:20:09.750 --> 00:20:11.580
Ryan Mehta: So we want to make a new route.

177
00:20:12.990 --> 00:20:17.940
Ryan Mehta: Called slash color and we want to pass in a particular color to the route.

178
00:20:19.680 --> 00:20:22.500
Ryan Mehta: We can do that by adding a program to the URL.

179
00:20:24.450 --> 00:20:29.100
Ryan Mehta: This color name. This will allow us to go to slash

180
00:20:30.300 --> 00:20:33.540
Ryan Mehta: Color slash and then the name of of color.

181
00:20:36.030 --> 00:20:36.240
And

182
00:20:37.470 --> 00:20:53.610
Ryan Mehta: This variable. This right here is a variable, just like with express the stuff that comes after the colon is the name of the program that's in the URL. So we can put anything right here and this will get passed to our color component over here.

183
00:20:55.620 --> 00:21:06.240
Ryan Mehta: Since our color component is routed to buy this router, it automatically gets three different props, it gets a prop called match, it gets a prop called

184
00:21:07.380 --> 00:21:10.380
Ryan Mehta: Location and it gets a prop called history.

185
00:21:16.230 --> 00:21:26.760
Ryan Mehta: So any component that gets routed to directly by a route gets these three properties sent to automatically

186
00:21:29.400 --> 00:21:31.470
Ryan Mehta: YOU ALL OF US History Before right

187
00:21:36.390 --> 00:21:38.460
Ryan Mehta: Yeah, I think so. This is like when you did like history.

188
00:21:38.490 --> 00:21:40.980
Ryan Mehta: Dot push to redirect to a different page.

189
00:21:41.580 --> 00:21:49.320
Ryan Mehta: History is actually something that's built into the browser. It's the history, you are API its what controls these back and forward buttons.

190
00:21:52.890 --> 00:21:59.010
Ryan Mehta: So history is sort of like an array, where the last item in the array is the current page that you're on usually

191
00:22:00.420 --> 00:22:16.680
Ryan Mehta: And you can press back to go back to the previous item and Dr. Ray and back again to the previous item in the you are in the array. When you push a new item to history, you're pushing a new page on to the array and getting set to that page.

192
00:22:18.360 --> 00:22:18.990
Ryan Mehta: Right away.

193
00:22:20.550 --> 00:22:27.840
Ryan Mehta: So that's the same. This is our way of essentially redirecting two different pages programmatically. This one seem okay

194
00:22:29.760 --> 00:22:35.550
Ryan Mehta: All right, I guess I could demo it really quick. So let's say that if we click on

195
00:22:36.660 --> 00:22:44.880
Ryan Mehta: This H1. We want to push ourselves to the, I don't know about page.

196
00:22:48.930 --> 00:22:50.520
I'm going to turn something off really quick.

197
00:23:18.510 --> 00:23:20.370
Ryan Mehta: I just turned off the prop type checking

198
00:23:21.720 --> 00:23:23.190
Ryan Mehta: Because it's kind of annoying me

199
00:23:28.830 --> 00:23:38.370
Ryan Mehta: anymore so that whenever I click on this, we should get redirected to the about page because of this history push on click stuff.

200
00:23:39.750 --> 00:23:40.380
Here we go.

201
00:23:45.420 --> 00:23:51.480
Ron Yonker: Okay, but like, what's the syntax of the thing you're pushing inside of plush

202
00:23:52.770 --> 00:24:00.330
Ron Yonker: Cow. Are you referring to those things that are supposed to be in the history. And what happens if thing you're referring to isn't in history.

203
00:24:01.980 --> 00:24:05.850
Ryan Mehta: This is pushing a new item to history. So this is doing a redirect.

204
00:24:05.910 --> 00:24:09.000
Ryan Mehta: This is the same as like window location equals

205
00:24:10.530 --> 00:24:12.690
Ryan Mehta: About in vanilla JavaScript.

206
00:24:13.860 --> 00:24:25.290
Ryan Mehta: So all we're saying is, go to this about page. We're not saying like, go back to the about page. We're saying go to the about page by go to slash about

207
00:24:27.780 --> 00:24:28.980
Ryan Mehta: So when I click on

208
00:24:31.320 --> 00:24:34.230
Ryan Mehta: This it's just redirecting me to about

209
00:24:35.850 --> 00:24:51.330
Ryan Mehta: So that's sort of how history works. One thing to be very, very careful about is you would almost never use history got pushed like I'm currently using it as an on click thing you would always prefer a link here.

210
00:24:52.530 --> 00:24:54.300
Ryan Mehta: Over history dot push

211
00:24:56.100 --> 00:25:04.230
Ryan Mehta: Because that's what links are for right links. When you click on them push you to a new URL that kind of makes sense.

212
00:25:06.090 --> 00:25:14.160
Ryan Mehta: You almost only use this sort of thing on submit. So when you submit a form after the form is submitted, you push to a new URL.

213
00:25:16.320 --> 00:25:22.680
Ryan Mehta: Okay that's history. That's what it's useful for pushing to URLs redirecting user's

214
00:25:23.760 --> 00:25:29.880
Ryan Mehta: Location. You don't need very often but is a bit like

215
00:25:33.150 --> 00:25:37.290
Ryan Mehta: A bit like window location. Actually, it's almost identical to it.

216
00:25:45.060 --> 00:25:46.470
Ryan Mehta: It gives us

217
00:25:48.420 --> 00:25:56.040
Ryan Mehta: The current like information about the place that we currently are at. So information about what's in the URL bar.

218
00:25:58.080 --> 00:26:05.640
Ryan Mehta: The past name. This is the query the search parameters. So if I put a question mark. I was there.

219
00:26:06.810 --> 00:26:09.780
Ryan Mehta: It would show up in the search right here.

220
00:26:11.400 --> 00:26:17.490
Ryan Mehta: And the last one is the hash, if I put a hash. Hello.

221
00:26:18.840 --> 00:26:21.840
Ryan Mehta: The hash hello will show up under hash.

222
00:26:23.160 --> 00:26:26.640
Ryan Mehta: So it's just information about what's currently in the URL bar.

223
00:26:27.720 --> 00:26:29.490
Ryan Mehta: About our current location.

224
00:26:31.830 --> 00:26:32.730
Ryan Mehta: That makes sense.

225
00:26:35.940 --> 00:26:36.390
Ryan Mehta: All right.

226
00:26:37.230 --> 00:26:37.620
Ryan Mehta: What's the

227
00:26:40.050 --> 00:26:41.400
Ron Yonker: What's the command that you used

228
00:26:42.750 --> 00:26:44.160
Ryan Mehta: To get tWEBVTT

1
00:00:00.750 --> 00:00:01.469
Ryan Mehta: Alright.

2
00:00:02.939 --> 00:00:14.730
Ryan Mehta: So that is our vanilla JavaScript version of Redux. The main thing that's different with Redux is this state is handled by redirects automatically

3
00:00:15.929 --> 00:00:23.100
Ryan Mehta: And when we dispatch an action, it automatically calls the reducer for us and updates the state for us.

4
00:00:24.270 --> 00:00:27.600
Ryan Mehta: So in normal Redux we would have dispatched

5
00:00:29.400 --> 00:00:30.750
Ryan Mehta: This same action.

6
00:00:33.120 --> 00:00:47.160
Ryan Mehta: And is responsible for getting the current state passing the current state and this action to the reducer and updating state for us. That's the only syntax difference that really happens in every box.

7
00:00:54.000 --> 00:00:54.720
Ryan Mehta: seem okay

8
00:00:57.180 --> 00:01:02.640
Ryan Mehta: Alright, we are going to make two different applications today.

9
00:01:05.820 --> 00:01:16.170
Ryan Mehta: We are going well. We're going to make a JSON pretty function where you type in like ugly JSON on one line and it will spit out the JSON like properly nested

10
00:01:17.220 --> 00:01:19.620
Ryan Mehta: Have you all heard of the apple. I think so. Right.

11
00:01:21.270 --> 00:01:22.350
Ryan Mehta: It's like a JSON.

12
00:01:22.410 --> 00:01:23.430
Ron Yonker: Ish format.

13
00:01:24.510 --> 00:01:27.570
Ryan Mehta: We've been messing with the MO files every once in a while.

14
00:01:28.830 --> 00:01:39.450
Ryan Mehta: These files like our workflow GitHub files. This is GMO. It's actually an alternative to JSON. It's a bunch of key value pairs. So our little app will

15
00:01:41.850 --> 00:01:48.570
Ryan Mehta: Predefined the JSON and also convert it to gamble, so we can see the gamble side by side with the equivalent JSON.

16
00:01:49.890 --> 00:02:02.550
Ryan Mehta: And then we'll make our like typical list of things application. Also, before that will play a little bit with Redux so today we're going to introduce Redux the entire thing is going to be a lot there.

17
00:02:03.090 --> 00:02:10.950
Ryan Mehta: But we'll get to review tomorrow and the next day. So we're going to introduce the entirety of our Redux flow.

18
00:02:14.250 --> 00:02:19.500
Ryan Mehta: Alright. So to begin, I am going to

19
00:02:22.470 --> 00:02:24.390
Ryan Mehta: Create a new directory

20
00:02:27.180 --> 00:02:34.830
Ryan Mehta: With this MPM in it thing you're going to create a React application. Our first one is going to be Jason pretty

21
00:02:38.670 --> 00:02:42.090
Ryan Mehta: And while that's installing let's

22
00:02:44.850 --> 00:02:46.260
Ryan Mehta: Take a look at

23
00:02:52.530 --> 00:02:53.580
Ryan Mehta: Some stuff.

24
00:03:05.790 --> 00:03:06.930
Ryan Mehta: I forgot to run the

25
00:03:08.010 --> 00:03:23.130
Ryan Mehta: Slideshow code before. Okay, here it is. Alright, so we're going to introduce this flux architecture which is the same as Redux Redux is a library that lets us implement the flux architecture nicely.

26
00:03:25.470 --> 00:03:28.680
Ryan Mehta: You can take a look at some pictures flux are

27
00:03:33.510 --> 00:03:36.360
Ryan Mehta: The flux architecture with flex

28
00:03:37.800 --> 00:03:49.950
Ryan Mehta: But was the architecture that was first released when read when react was released. So the idea from the developers of React was that we were going to build applications, kind of like this.

29
00:03:51.300 --> 00:04:01.020
Ryan Mehta: You'd have a dispatcher a store and the view the view would dispatch actions that would update the store that would re render the view.

30
00:04:02.490 --> 00:04:11.040
Ryan Mehta: It's actually the same flow that happens in like normal react applications. Right. You have a container that's holding your state.

31
00:04:11.970 --> 00:04:29.670
Ryan Mehta: And presentational components that calls a function dispatch or dispatches an action right call some function that changes the store that causes the view to re render the same sort of flow that we've had in our normal react applications.

32
00:04:30.960 --> 00:04:32.070
Ryan Mehta: That kind of makes sense.

33
00:04:34.830 --> 00:04:37.620
Ryan Mehta: So the dispatcher of the store or containers.

34
00:04:41.490 --> 00:04:53.640
Ryan Mehta: All right, flux architecture. There are a few pieces that we have with this flux architecture or Redux there is the store, which is responsible for holding our application state.

35
00:04:54.180 --> 00:05:04.530
Ryan Mehta: For us, it's going to be a global object accessible from anywhere in the application. So we can always get access to that store, we can always grab that global object.

36
00:05:05.610 --> 00:05:12.180
Ryan Mehta: And that global object is going to contain all of our application state our character list or location list.

37
00:05:13.380 --> 00:05:20.580
Ryan Mehta: Whatever state we have in our application, the user who's currently logged in, will all be in this global object.

38
00:05:22.110 --> 00:05:28.860
Ryan Mehta: We also have actions actions are playing JavaScript objects PO Joe's. Some people call them.

39
00:05:31.470 --> 00:05:38.160
Ryan Mehta: That send data or events to our store actions. Always have a type to they always have a type

40
00:05:39.180 --> 00:05:40.860
Ryan Mehta: Which is the name of the event.

41
00:05:42.990 --> 00:05:48.330
Ryan Mehta: So actions are always playing JavaScript objects with the type

42
00:05:50.790 --> 00:05:58.170
Ryan Mehta: Additionally, they can have a payload so you can send more information along with your action in a payload key.

43
00:06:01.980 --> 00:06:05.100
Ryan Mehta: This is totally off the page like teasing, then

44
00:06:09.150 --> 00:06:12.960
Ryan Mehta: That one is so we also have producers.

45
00:06:16.680 --> 00:06:30.930
Ryan Mehta: Producers are functions, usually with switches and at least for us. There's much more elegant ways to read reduces about all the Redux documentation uses switches. So will we will follow their lead and the switches

46
00:06:32.760 --> 00:06:36.840
Ryan Mehta: We switch on the action type. And then we have a case for each

47
00:06:38.100 --> 00:06:41.670
Ryan Mehta: Action type that we want to do stuff with

48
00:06:44.100 --> 00:06:51.900
Ryan Mehta: The reducer is responsible for returning the updated state. The state that should result from this action coming in.

49
00:06:56.340 --> 00:06:58.710
Ryan Mehta: Yesterday we played around with us reducer.

50
00:07:00.390 --> 00:07:08.040
Ryan Mehta: User do sir takes a reducer function, the reducer functions job is to calculate state based on actions.

51
00:07:09.690 --> 00:07:14.460
Ryan Mehta: It also takes the initial state. What should the state start off as in our application.

52
00:07:17.070 --> 00:07:29.550
Ryan Mehta: It then returns our current state and a function that lets us dispatch an action when we dispatch an action, the producers job is to recalculate state based on the incoming action.

53
00:07:34.080 --> 00:07:35.070
Ryan Mehta: Make sense

54
00:07:38.700 --> 00:07:43.470
Ryan Mehta: Okay, here's a different example kind of an aggressive example, sorry.

55
00:07:44.610 --> 00:07:48.180
Ryan Mehta: It's like a little fighter game thing.

56
00:07:49.350 --> 00:07:49.650
Ryan Mehta: We have

57
00:07:51.060 --> 00:08:00.480
Nate Kruck: I have a question. Are these acting like it for the cases are these sort of like conditional because you can't use conditions within these switch cases.

58
00:08:01.770 --> 00:08:07.620
Ryan Mehta: They're like conditional, you can actually replace this whole thing with if outfits, if you wanted to.

59
00:08:07.980 --> 00:08:12.750
Nate Kruck: Get I was playing around today and I was running into a problem with it. And I just found out I didn't know like what the

60
00:08:14.280 --> 00:08:28.140
Ryan Mehta: Main thing was so yep it's just, it's the same as if it's just like if action type equals he'll else if action type equals updated experience. Else if action type equals attack enemy.

61
00:08:28.710 --> 00:08:42.600
Ryan Mehta: Whenever you have the same condition on the left hand side of the triple equals like it's if accident type if actually that type of action type effects are not tied up a factual type, you can shorthand that with switch cases. Okay, thank you.

62
00:08:45.870 --> 00:08:50.730
Ryan Mehta: So we have a character who has a health experience at some attack.

63
00:08:51.780 --> 00:08:59.430
Ryan Mehta: And an enemy who has health experience in some attack. Also, we then have a series of cases.

64
00:09:01.170 --> 00:09:04.860
Ryan Mehta: So here's our initial state, kind of like the same thing that we just went through.

65
00:09:10.200 --> 00:09:13.620
Ryan Mehta: We have a producer that takes our current state and an action.

66
00:09:14.850 --> 00:09:30.330
Ryan Mehta: And then a case for each action type. So on healing. We keep everything in state, the same the character stays the same, except their health bar increases by the actual payload about

67
00:09:32.280 --> 00:09:39.840
Ryan Mehta: This is again when spread starts becoming so so crucial because we spread everything all the time.

68
00:09:41.820 --> 00:09:57.120
Ryan Mehta: Update experience. We keep state, the same we update character keeping all of its properties, the same except experience where we take the characters current experience and add it by action payload, whatever that amount is

69
00:09:59.910 --> 00:10:09.420
Ryan Mehta: We can attack an enemy, where we keep everything and state, the same the enemy field updates we keep everything in the enemy the same except for their health.

70
00:10:10.140 --> 00:10:23.970
Ryan Mehta: Their health decreases. So we keep their current health minus the action or the state character dot attack. So we subtract the enemy's health by our attack value our characters attack value.

71
00:10:26.580 --> 00:10:40.320
Ryan Mehta: Of the enemy can also attack our character in this case we keep everything in sight. The saying we update our character we keep all of their properties, the same except for their health. We take their current health and subtracted by the enemy's attack.

72
00:10:41.490 --> 00:10:42.030
Value.

73
00:10:44.340 --> 00:10:49.710
Ryan Mehta: And then we can create a new enemy, we can set a new enemy where we keep everything in state, the same

74
00:10:50.880 --> 00:10:53.700
Ryan Mehta: Except we add a new enemy.

75
00:10:55.230 --> 00:10:57.210
Ryan Mehta: That we get from action dot payload.

76
00:10:59.310 --> 00:11:07.440
Ryan Mehta: So down below. We have a bunch of steps we heal recommend go through all of these, again, I feel so we just did this thing.

77
00:11:08.760 --> 00:11:10.680
Ryan Mehta: You can go through this. If you really want to

78
00:11:13.620 --> 00:11:16.740
Ryan Mehta: Yeah, so we can use all of these things to update our state.

79
00:11:19.920 --> 00:11:20.400
Ryan Mehta: Okay.

80
00:11:21.810 --> 00:11:28.020
Ryan Mehta: That's all seem okay so we're going to do the same sort of thing. But we're going to actually use Redux

81
00:11:29.070 --> 00:11:30.330
And just a second here.

82
00:11:32.430 --> 00:11:36.360
Ryan Mehta: Most of the syntax will remain the same, the same as what we did yesterday.

83
00:11:38.100 --> 00:11:41.970
Adrian Simental: Redux is going to replace the reducer. Does it also replace 32 to 43

84
00:11:43.410 --> 00:11:51.240
Ryan Mehta: It's not, we're actually still going to have a reducer. And we're still gonna have dispatches. But yeah, it changes the syntax of

85
00:11:53.340 --> 00:11:53.760
For sure.

86
00:11:58.020 --> 00:12:01.470
Ryan Mehta: Alright, let's see if we've installed stuff.

87
00:12:03.270 --> 00:12:05.550
Ryan Mehta: Let's start off by

88
00:12:07.740 --> 00:12:10.140
Ryan Mehta: Our JSON pretty thing.

89
00:12:13.110 --> 00:12:17.670
Ryan Mehta: And let's just play around with Redux for a second.

90
00:12:20.430 --> 00:12:39.210
Ryan Mehta: Alright, I am going to install Redux that is an PMI Redux. This will install that Redux library, which we're going to play around with in just a second here. I'm also going to install something that you all want need for your lab today called at Babel.

91
00:12:40.290 --> 00:12:43.230
Ryan Mehta: Node actually do I need to do that.

92
00:12:52.950 --> 00:12:54.270
I might not need to install it.

93
00:13:03.540 --> 00:13:15.240
Ryan Mehta: There was this like little library that will let us run front end code as if it were back and like in the terminal which is exactly what I want to do.

94
00:13:21.330 --> 00:13:21.930
Yes.

95
00:13:25.350 --> 00:13:26.040
Yes.

96
00:13:31.650 --> 00:13:33.720
Ryan Mehta: Okay, perfect. It's kind of slow

97
00:13:37.440 --> 00:13:53.460
Ryan Mehta: Okay, a little bit faster now. So the Babel node thing. This command will just let us run this index JS file as if it were running in the browser, instead of running in Node JS kind of cool. If you want to use some of the browser Babel stuff.

98
00:13:55.050 --> 00:13:59.910
Ryan Mehta: All right, first thing we're going to do is import from Redux

99
00:14:03.000 --> 00:14:09.240
Ryan Mehta: We're going to import a function called create score create store will create our Redux store for us.

100
00:14:10.530 --> 00:14:15.630
Ryan Mehta: So we'll be able to do something like costs store equals create store.

101
00:14:17.010 --> 00:14:19.230
Ryan Mehta: Create store takes a single

102
00:14:21.000 --> 00:14:41.160
Ryan Mehta: A single argument for us. For now, a reducer. So when we create our store we create it with a reducer that we're going to be using for right now. Don't think about this in connected to react. Let's just think about it, just with Redux by itself. You don't have to actually connect the two

103
00:14:42.600 --> 00:14:43.950
Ryan Mehta: So let's make a reducer.

104
00:14:45.330 --> 00:14:48.000
Ryan Mehta: A reducer always take state and an action.

105
00:14:49.140 --> 00:14:56.430
Ryan Mehta: Let's just make a kind of silly looking reducer. We're going to have a switch on action type

106
00:14:57.780 --> 00:15:01.980
Ryan Mehta: And we'll have a default where we just returned the current state.

107
00:15:04.620 --> 00:15:10.470
Ryan Mehta: Will have a case. Anybody have a silly example. Otherwise, I'm just going to make a counter

108
00:15:14.250 --> 00:15:15.450
Ryan Mehta: Counter okay

109
00:15:16.800 --> 00:15:24.120
Ryan Mehta: We'll have an increment case when we increment, we're going to return everything from state.

110
00:15:26.460 --> 00:15:31.980
Ryan Mehta: We will increase count by state count plus one.

111
00:15:33.780 --> 00:15:36.450
Ryan Mehta: And then we'll have a case that for a moment.

112
00:15:38.340 --> 00:15:40.710
Ryan Mehta: Where we will take everything from state.

113
00:15:42.090 --> 00:15:42.810
Ryan Mehta: And

114
00:15:44.160 --> 00:15:46.140
Ryan Mehta: Subtract one from the count.

115
00:15:47.730 --> 00:15:49.500
Ryan Mehta: And let's do one more.

116
00:15:51.240 --> 00:15:52.800
Ryan Mehta: Case, let's have a

117
00:15:53.970 --> 00:15:55.290
Ryan Mehta: Reset case.

118
00:15:57.150 --> 00:15:58.530
Ryan Mehta: The reset cases going to

119
00:15:59.550 --> 00:16:04.500
Ryan Mehta: Reuse our initial state, whatever initial state is. So let's define that also

120
00:16:06.750 --> 00:16:10.140
Ryan Mehta: Will set initial state to count zero

121
00:16:11.670 --> 00:16:15.540
Ryan Mehta: And when we get our reset. We will just return initial state.

122
00:16:17.310 --> 00:16:22.560
Ryan Mehta: So we'll go back to the original state, the application. This all look good.

123
00:16:26.190 --> 00:16:31.710
Ryan Mehta: And we will pass this reducer to our create store me rate in the live cam

133
00:16:42.360 --> 00:16:42.780
Jerud Moyer: Oh, cool.

134
00:16:43.590 --> 00:16:44.130
Ryan Mehta: Right now.

135
00:16:44.160 --> 00:16:53.850
Ryan Mehta: I don't really need a frame rate. It kind of looks like a video, but it's not actually a video. It's just like, Well, I guess the live camera defaults to 30 frames per second. Cool.

136
00:16:58.710 --> 00:17:01.590
Ryan Mehta: Alright, so that's a streaming our mask.

137
00:17:03.030 --> 00:17:10.680
Ryan Mehta: This next part. I couldn't keep so I had the goal of only like writing this whole thing in JavaScript.

138
00:17:11.820 --> 00:17:14.490
Ryan Mehta: But I couldn't keep that promise at this step.

139
00:17:16.080 --> 00:17:25.920
Ryan Mehta: So on Linux. It turns out that everything is a file which is very, very convenient for this because it means that webcams are files.

140
00:17:26.850 --> 00:17:37.200
Ryan Mehta: If we want to stream information to a webcam. We just need to continually right to the webcams file over and over and over again. And that's what creates our stream.

141
00:17:41.340 --> 00:17:52.380
Ryan Mehta: Yeah, it sounds. It sounded it sounded easy. I was like, I could totally do this in JavaScript. But it turned out that I could not do it in JavaScript for the life of me I share it, I'm sure. Like, like it's possible.

142
00:17:53.520 --> 00:17:56.640
Ryan Mehta: I just couldn't quite figure it out yesterday.

143
00:17:57.840 --> 00:18:07.020
Ryan Mehta: So what I did instead I made a C plus plus binding to node. This loop back C plus plus file.

144
00:18:08.130 --> 00:18:12.270
Ryan Mehta: In node, you can actually import C plus plus files and run them.

145
00:18:13.740 --> 00:18:14.520
Ryan Mehta: So,

146
00:18:16.590 --> 00:18:18.660
Ryan Mehta: I made this camera JS also

147
00:18:19.920 --> 00:18:22.260
Ryan Mehta: On the right I had this C plus plus file.

148
00:18:23.970 --> 00:18:32.280
Ryan Mehta: Which is going to export a function called start camera on the left hand side you can see me importing the start camera function.

149
00:18:33.750 --> 00:18:40.230
Ryan Mehta: Here and then invoking the start camera function somewhere down here.

150
00:18:41.370 --> 00:18:48.840
Ryan Mehta: So this start camera function when I invoke it actually invokes this C plus plus function of around the right hand side.

151
00:18:52.980 --> 00:19:11.970
Ryan Mehta: The whole point of this c++ file is to open the webcams file and tell it. Tell the file that it's about to receive webcam data video information. The real struggle that I had while trying to do this totally a node is the settings part

152
00:19:13.560 --> 00:19:23.430
Ryan Mehta: In the file at a particular memory location, you have to set each of these settings and I couldn't find references for what these values actually mean

153
00:19:24.570 --> 00:19:36.300
Ryan Mehta: Like these are just constants that c++ gives you, I could have just printed them all and like brought them over to node probably and use them, but I was way too lazy for that if that sounded painful to me.

154
00:19:38.610 --> 00:19:40.050
Ryan Mehta: So this whole thing is

155
00:19:41.700 --> 00:19:48.480
Ryan Mehta: Opening the webcam and then priming it to get to be written video data.

156
00:19:50.130 --> 00:19:57.780
Ryan Mehta: At the very top of this function, all of this stuff is its connection to the Node JS file.

157
00:20:00.000 --> 00:20:07.500
Ryan Mehta: In particular, these things are the arguments that it sect from when the function is called over on the left hand side.

158
00:20:08.550 --> 00:20:21.240
Ryan Mehta: So the first argument argument zero we convert into a string, because we give it a destination string. This is the location of the fake web like a fake webcam that I'm creating

159
00:20:22.860 --> 00:20:32.370
Ryan Mehta: File. So we're going to create a file that file is going to represent a webcam and this is the destination of that fake webcam some file on disk.

160
00:20:34.110 --> 00:20:36.270
Ryan Mehta: We're then grabbing the width and the height.

161
00:20:37.500 --> 00:20:50.160
Ryan Mehta: And we're setting it to the same width and height as the source camera. So we're going to have a source camera that's going to take my actual image the fake camera is going to have the same width and height of the actual image. So we're getting the

162
00:20:51.660 --> 00:20:56.250
Ryan Mehta: R zero r one r two.

163
00:20:57.750 --> 00:20:59.280
Ryan Mehta: Destination width and height.

164
00:21:00.390 --> 00:21:08.220
Ryan Mehta: The next big part of this is line 34 line 34 is where we open the devices file.

165
00:21:09.570 --> 00:21:12.690
Ryan Mehta: So we open that file and get ready to write to it.

166
00:21:14.370 --> 00:21:29.100
Ryan Mehta: And then we write these settings to that file. So this is our file descriptor. We create our settings. We're saying that we're about to write buffered video output to it.

167
00:21:30.090 --> 00:21:43.140
Ryan Mehta: The pixel format is going to be an RGB, actually, this is a very particular type of RGB. Also, there are a bunch of different ways that you can write RGB, it turns out, I have a little

168
00:21:44.430 --> 00:21:46.560
Ryan Mehta: Table here that I was referencing

169
00:21:48.240 --> 00:21:50.190
Ryan Mehta: So in actual memory.

170
00:21:52.680 --> 00:22:05.160
Ryan Mehta: Memory is kind of this array of buckets. Right. So there's like a bucket here. There's a bucket here. There's a bucket here. Here, etc.

171
00:22:07.050 --> 00:22:13.890
Ryan Mehta: Each of these buckets represent a single bite of information. So each bucket is a single bite.

172
00:22:16.080 --> 00:22:24.960
Ryan Mehta: From there we can decide how we're going to store RGB into all of these buckets. And here are all the different strategies. So this one.

173
00:22:26.460 --> 00:22:39.210
Ryan Mehta: They say, Geez, in the first three, but in the first bucket. Ours still in the first bucket a's and the second bucket. It's just like a crazy, like who would think to

174
00:22:40.740 --> 00:22:43.830
Ryan Mehta: Like G RA be seems weird

175
00:22:45.720 --> 00:22:48.930
Ryan Mehta: There's also this one. This is the one that I first considered using

176
00:22:50.310 --> 00:22:58.260
Ryan Mehta: which stores the RG and B's all in the same single bucket. So this would be RGB

177
00:22:59.310 --> 00:23:00.540
Ryan Mehta: All in the same bucket.

178
00:23:03.180 --> 00:23:08.220
Ryan Mehta: Turns out that that was too hard for me. I couldn't. It was like to condensed for what I wanted.

179
00:23:10.080 --> 00:23:14.940
Ryan Mehta: So I ended up with this strategy down here.

180
00:23:16.290 --> 00:23:17.910
Ryan Mehta: Which is like kind of the

181
00:23:19.230 --> 00:23:27.720
Ryan Mehta: The RGB strategy that we're most familiar with, like, this is the RGB strategy of CSS. It's kind of hard to see, but each of these

182
00:23:28.950 --> 00:23:31.110
Ryan Mehta: So are takes up a single bite.

183
00:23:32.250 --> 00:23:47.760
Ryan Mehta: G takes up a single bite and B takes up a single bite. So instead of having RGB in a single bucket. We have our in the first bucket G and the second bucket and be in the third bucket.

184
00:23:49.320 --> 00:23:51.210
Ryan Mehta: So if we had an array of pixels.

185
00:23:52.260 --> 00:23:54.060
Ryan Mehta: The array of pixels would have

186
00:23:56.610 --> 00:24:01.050
Ryan Mehta: These things. So three bytes per pixel is what ends up with

187
00:24:02.490 --> 00:24:08.430
Ryan Mehta: This is actually how we do CSS right and CSS, you have FF for the are

188
00:24:10.080 --> 00:24:16.380
Ryan Mehta: For the G. This is white and CSS. Each of these represents a single bite.

189
00:24:17.850 --> 00:24:23.070
Ryan Mehta: So you're storing F, F, F, F, F, F in RGB and creating your color.

190
00:24:24.330 --> 00:24:31.050
Ryan Mehta: We're going to do the same thing. We don't actually have to manually do that though, we just tell the library that we want to use

191
00:24:34.020 --> 00:24:37.800
Ryan Mehta: Whatever whichever one I showed here this one.

192
00:24:39.240 --> 00:24:42.000
Ryan Mehta: This one, as our

193
00:24:43.320 --> 00:24:44.370
Ryan Mehta: Pixel strategy.

194
00:24:46.050 --> 00:24:57.780
Ryan Mehta: So that's what this is, we're saying we want to use RGB one bite per our G, and B, which will be very convenient for us later we want to convert the RGB values and manipulate them.

195
00:24:59.310 --> 00:25:09.060
Ryan Mehta: And then we give stuff like the width and height of the frame the frame size, the color space, those sorts of things. A few more or less than less important things

196
00:25:11.430 --> 00:25:23.760
Ryan Mehta: After we create our settings we store the settings in the file. So there's some memory location on the file, it's this location right here. This is, this represents some digit

197
00:25:27.960 --> 00:25:35.700
Ryan Mehta: We store these settings into the file at some memory location and then we write an empty buffer.

198
00:25:36.930 --> 00:25:49.290
Ryan Mehta: So we just prime it for writing. That's a blank a black screen to begin with, until we actually start saying, sending it real frames. So the video will start off as a blank screen until we start sending it real friends.

199
00:25:53.160 --> 00:25:54.540
Ryan Mehta: That's what this file does

200
00:25:55.680 --> 00:26:01.590
Ryan Mehta: Kind of crazy to see some c++ may be, but I couldn't figure out how to do this without c++

201
00:26:07.290 --> 00:26:17.940
Ryan Mehta: And then down below. This stuff is particular to node. This tells us to export the method that's defined up here as start camera.

202
00:26:19.920 --> 00:26:24.030
Ryan Mehta: So this is what these lines here is what makes it so we can

203
00:26:25.740 --> 00:26:29.520
Ryan Mehta: Get this start camera function over on mine for

204
00:26:32.910 --> 00:26:39.660
Ryan Mehta: So if you write if you run this file, we would have a blank screen webcam running. It's a black screen.

205
00:26:44.040 --> 00:26:46.470
Ryan Mehta: Any questions about this file.

206
00:26:51.600 --> 00:26:54.720
Heather Peterson: And what's the advantage of c++ here.

207
00:26:55.950 --> 00:26:58.680
Ryan Mehta: Yeah, it's nothing with the language in

208
00:26:58.680 --> 00:26:59.520
Particular

209
00:27:00.570 --> 00:27:11.070
Ryan Mehta: I mean, it's probably slightly faster, but I wasn't using it for speed I was using it mostly because I have access to all of these constants

210
00:27:12.600 --> 00:27:19.110
Ryan Mehta: That I don't have access to in JavaScript. So I can import this import here.

211
00:27:20.130 --> 00:27:24.870
Ryan Mehta: Linux is, this is from Linux itself. So I'm importing a package from Linux.

212
00:27:26.730 --> 00:27:33.180
Ryan Mehta: And Linux is defining these all for me and I don't have to figure out what they are. I just have access to them.

213
00:27:34.260 --> 00:27:35.940
Ryan Mehta: Same with this IOC TL

214
00:27:36.180 --> 00:27:39.450
Ryan Mehta: I can write to this file descriptor in the right location.

215
00:27:39.510 --> 00:27:46.140
Ryan Mehta: I don't know what this location is. It's like some 3,000,500 at some constant number

216
00:27:47.580 --> 00:27:54.720
Ryan Mehta: That I don't know in JavaScript, but I can just import in my c++ and use without having to think about it. So that was a big advantage.

217
00:27:55.710 --> 00:28:04.560
Ryan Mehta: These constants and that was my real hindrance in writing this in JavaScript is that have to figure out the actual values of all of these constants

218
00:28:05.160 --> 00:28:12.510
Ryan Mehta: And in the source code. They don't actually show you the values of the constant. They have functions that figure out the values for you. So it'd be like

219
00:28:13.890 --> 00:28:20.340
Ryan Mehta: Figure out how each of these functions work to create the end value and they do like all this like bitwise transformation.

220
00:28:21.690 --> 00:28:25.290
Ryan Mehta: So yeah, you actually have to print them out to get the real values.

221
00:28:28.590 --> 00:28:30.270
Ryan Mehta: When it sounds too lazy to do so.

222
00:28:30.690 --> 00:28:31.380
Heather Peterson: Yeah, that's why.

223
00:28:40.050 --> 00:28:40.950
Ryan Mehta: The c++

224
00:28:48.630 --> 00:28:55.350
Ryan Mehta: So this file is what allows us to start priming our destination webcam or fake webcam.

225
00:28:58.560 --> 00:29:11.370
Ryan Mehta: We can now write to whatever file that is created right here, we can write pixels to it and the file will understand those pixels as video output.

226
00:29:14.880 --> 00:29:16.950
Ryan Mehta: Right, that's that thing.

227
00:29:19.140 --> 00:29:20.790
Ryan Mehta: So that's our leap back device.

228
00:29:22.830 --> 00:29:39.060
Ryan Mehta: Now kind of some of the cooler parts. We're going to slam all of these sections together. At this point, I was getting very abstract and like modular with my thinking because I felt like I was towards the end. So I started breaking down these things into multiple files.

229
00:29:41.100 --> 00:29:43.770
Ryan Mehta: I have this camera JS file.

230
00:29:46.020 --> 00:29:51.150
Ryan Mehta: Who's responsible for dealing with all of our cameras source cameras and destination cameras.

231
00:29:52.800 --> 00:29:59.520
Ryan Mehta: The main function here is this camera pipe function which takes a source.

232
00:30:00.870 --> 00:30:12.810
Ryan Mehta: Where we're going to get our, our webcam information from like the source webcam a destination file where fake webcam is and to transform function.

233
00:30:14.520 --> 00:30:26.370
Ryan Mehta: It's going to start the source camera using that video for Linux camera library. So very similar to what we did, by put it side by side over here.

234
00:30:27.900 --> 00:30:32.910
Ryan Mehta: It's just over here now and I'm specifying a little bit more about the

235
00:30:35.010 --> 00:30:36.480
Ryan Mehta: The format of the camera.

236
00:30:38.460 --> 00:30:49.230
Ryan Mehta: So it's using why you why the pixel configuration, the width and height of the camera. The interval which is the frame rate. This is 30 FPS

237
00:30:50.850 --> 00:30:57.270
Ryan Mehta: And then we're starting to source camera. So this will actually turn on my real webcam. Once I run this.

238
00:30:58.350 --> 00:31:01.500
Ryan Mehta: And then we're also on mine 35

239
00:31:02.970 --> 00:31:11.820
Ryan Mehta: Turning on our destination camera so running that C plus plus file to prime our destination camera to rich Steve frames.

240
00:31:14.430 --> 00:31:23.670
Ryan Mehta: And then we have this infinite loop we want to just continually read from the source camera continually capture images from the source.

241
00:31:25.110 --> 00:31:30.540
Ryan Mehta: So I extracted this whole capture thing into a promise.

242
00:31:31.980 --> 00:31:35.760
Ryan Mehta: Appear that returns the frame that we just captured

243
00:31:37.920 --> 00:31:57.240
Ryan Mehta: So while while my computer is turned on, we capture a frame from the source camera we transform the frame using a generic transform function, but that transformed function can do whatever it wants it just needs to return something that looks like a frame.

244
00:31:58.320 --> 00:32:02.340
Ryan Mehta: And then we're going to write the frame to the destination camera.

245
00:32:04.650 --> 00:32:09.330
Ryan Mehta: And right just as using the built in FS right from Node JS.

246
00:32:10.560 --> 00:32:20.550
Ryan Mehta: So there's nothing like super special about that right we write to a file and a buffer a frame which is just an array of pixels, pretty much.

247
00:32:22.620 --> 00:32:25.830
Ryan Mehta: And then we just continue to do that until the end of time.

248
00:32:27.330 --> 00:32:34.080
Ryan Mehta: So that's what camera pipe. Does it super generic it's actually super cool. It just starts a source camera starts a destination camera.

249
00:32:34.530 --> 00:32:44.490
Ryan Mehta: Takes frames off of the source camera runs the brain through any transformation function that we want and then writes the new frame to the destination camera.

250
00:32:46.320 --> 00:32:50.910
Ryan Mehta: What that looks like when we use it is

251
00:32:56.070 --> 00:32:57.180
This is the mask.

252
00:33:00.060 --> 00:33:07.230
Ryan Mehta: Something like this, we have our camera pipe here. So I put them side by side. So you can see them both.

253
00:33:09.450 --> 00:33:13.470
Ryan Mehta: I'll put the stream over on the right.

254
00:33:14.610 --> 00:33:29.160
Ryan Mehta: So the camera pipe takes our source webcam file. This happens to be my real webcam file a destination webcam file. This is my fake webcam and a function to run each train through

255
00:33:30.450 --> 00:33:46.800
Ryan Mehta: So in our stream mask file we load our model which loads that Tensorflow model and then we start piping the source frames to the destination frames. But in between we run it through this mask background function.

256
00:33:48.480 --> 00:33:51.210
Ryan Mehta: I'll show you this mask background function.

257
00:33:53.220 --> 00:33:56.460
Ryan Mehta: And put it over here on the left.

258
00:33:57.510 --> 00:34:10.860
Ryan Mehta: So the mass background function takes a frame this frame comes from the source camera with that frame it constructs an image and then it creates a tensor and a mask from the image.

259
00:34:12.690 --> 00:34:16.650
Ryan Mehta: The kind of crazy part is then we iterate through the mask.

260
00:34:18.030 --> 00:34:32.460
Ryan Mehta: If you remember, at the very beginning. The mask is an array of pixels, whereas zeros represent I always forget zeros represent people ones represent non people are the other way around. But we have

261
00:34:35.760 --> 00:34:42.420
Ryan Mehta: Like an array of pixels, right, if there's a zero. It's a person if it's a one, it's a non person.

262
00:34:43.560 --> 00:35:01.770
Ryan Mehta: But we decided that our camera is going to take RGB. So each pixel is represented by three buckets. So we're going to iterate through this mask and for each item in the mask. We are going to edit three pixels.

263
00:35:03.000 --> 00:35:11.160
Ryan Mehta: That's what we're doing in this for loop. So we're iterating through each item in the mask. If the mask.

264
00:35:13.080 --> 00:35:13.680
Ryan Mehta: Item

265
00:35:14.760 --> 00:35:18.900
Ryan Mehta: Is person pixel. So 01 or one person pixel is

266
00:35:22.590 --> 00:35:24.210
Ryan Mehta: I have these like little constant

267
00:35:25.500 --> 00:35:28.620
Ryan Mehta: Person pixel is a one non-person pixel a zero.

268
00:35:29.790 --> 00:35:40.140
Ryan Mehta: So if the mask the pixel app mask i is a person pixel, we will create a pixel value of 255 otherwise we'll create a pixel value zero.

269
00:35:41.490 --> 00:36:08.880
Ryan Mehta: And then we'll write to the frame. So on the frame will write either 000 or we will write 255255255 depending on the value here. So we'll take the like single bucket representation of a pixel and map it into a three bucket representation of a pixel, which is why we're doing

270
00:36:10.110 --> 00:36:11.310
Ryan Mehta: Three equals

271
00:36:12.690 --> 00:36:13.110
Here.

272
00:36:14.940 --> 00:36:17.100
Ryan Mehta: The R, G and the P value.

273
00:36:24.150 --> 00:36:24.930
Ryan Mehta: seem okay

274
00:36:28.440 --> 00:36:28.890
Ryan Mehta: All right.

275
00:36:30.330 --> 00:36:44.520
Ryan Mehta: So yeah, we pipe, we get a frame from video to that frame comes over to our mask background we convert the frame using that same like body segmentation library that we had before.

276
00:36:45.780 --> 00:36:56.730
Ryan Mehta: We take that mask that we output and rewrite a frame based on the mask. So if the mask has zero at a particular pixel area we're going to write

277
00:36:58.560 --> 00:37:04.320
Ryan Mehta: Like the appropriate color to the three pixel locations in the actual frame.

278
00:37:05.640 --> 00:37:08.700
Ryan Mehta: This is a little bit of math here to get to the right offset.

279
00:37:10.830 --> 00:37:13.920
Ryan Mehta: So what we're, what we're actually doing this picture is a bit

280
00:37:15.090 --> 00:37:23.070
Ryan Mehta: Inaccurate we have two huge arrays. We have one array which represents our terrain.

281
00:37:25.380 --> 00:37:32.400
Ryan Mehta: And we have another slightly smaller array. Actually, one third the size that represents our mask.

282
00:37:34.860 --> 00:37:46.140
Ryan Mehta: The original frame has a bunch of pixel values like 2550 170 whatever 30

283
00:37:48.240 --> 00:37:48.810
Worthy

284
00:37:55.230 --> 00:37:58.050
Ryan Mehta: Bunch of pixel values. This is the original frame.

285
00:37:59.520 --> 00:38:01.020
Ryan Mehta: In the original frame.

286
00:38:02.520 --> 00:38:07.110
Ryan Mehta: There are three pics there three values that represent a pixel

287
00:38:08.730 --> 00:38:19.440
Ryan Mehta: This is our, our G and B of a particular pixel. So if we were reading our image from left to right, top to bottom. Starting in the top left hand corner.

288
00:38:19.800 --> 00:38:30.660
Ryan Mehta: This right here would be the pixel that represents the very top left corner. This is the pixel that represents the pixel right next to it. And then the third pixel in the image.

289
00:38:33.390 --> 00:38:34.320
Ryan Mehta: That seem okay

290
00:38:36.900 --> 00:38:40.950
Ryan Mehta: In our second in our mask array we have

291
00:38:45.180 --> 00:38:46.560
Ryan Mehta: Zeros and ones.

292
00:38:47.850 --> 00:38:53.430
Ryan Mehta: Each of these zeros and ones tie to a particular group of pixels.

293
00:38:55.170 --> 00:38:56.070
Ryan Mehta: Or pixel

294
00:38:57.210 --> 00:39:03.870
Ryan Mehta: In our frame a pixel is represented by three numbers in our mask or pixel is represented by one number

295
00:39:05.100 --> 00:39:18.780
Ryan Mehta: So this for loop is iterating through this mask array for each item in the mask array, we need to go to the appropriate bucket in the frame array.

296
00:39:20.610 --> 00:39:32.100
Ryan Mehta: Since each pixel is represented by three numbers in the frame array, we need to multiply it by three to get to like the correct offset and then we

297
00:39:33.390 --> 00:39:43.110
Ryan Mehta: Have our, our, which is this one plus one is our G plus two is our be so in our first iteration. Let's say I zero

298
00:39:44.820 --> 00:39:49.560
Ryan Mehta: That means mask of i is zero or on this one.

299
00:39:51.870 --> 00:39:53.790
Ryan Mehta: We convert pixel value.

300
00:39:55.020 --> 00:39:55.410
Ryan Mehta: To

301
00:39:58.410 --> 00:40:10.080
Ryan Mehta: And then we see our frame. So right now I have zero so i times three is zero. So we start off here. The zero index and convert this to 255 which it already is.

302
00:40:11.460 --> 00:40:25.410
Ryan Mehta: I times three, zero plus one, we get to our second thing and convert this to 255 and our third I put times three, zero plus two is index to would convert this to 255

303
00:40:26.700 --> 00:40:35.190
Ryan Mehta: Now I as one because we're back at the top of the for loop we're over here at one mask of AI is one, so

304
00:40:36.240 --> 00:40:48.660
Ryan Mehta: We're now using zero as our pixel value one times three is three, so we're at this index the third index and we convert this to pixel value zero.

305
00:40:49.650 --> 00:41:02.190
Ryan Mehta: I times three. So one times three is three plus one is for we convert this i times three, one times three is three plus two is five, which is this value we change this to zero.

306
00:41:02.760 --> 00:41:09.180
Ryan Mehta: And we do the same thing over and over again until we're through the entire pixel and we're three the entire array.

307
00:41:10.710 --> 00:41:14.940
Ryan Mehta: So we're changing the frame from a like rich colored

308
00:41:16.410 --> 00:41:23.280
Ryan Mehta: Image to just black and white or black and white image where white is where I am and black is where I'm not

309
00:41:25.080 --> 00:41:33.150
Ryan Mehta: That's converting the frames to use that same mask representation. We're just an RGB instead of single color things

310
00:41:35.430 --> 00:41:37.440
Ryan Mehta: This transformer kind of makes sense.

311
00:41:43.020 --> 00:41:47.400
Ryan Mehta: Alright. Let's see it in action. And then we can see if there any other questions.

312
00:41:48.570 --> 00:41:50.550
Ryan Mehta: I'm going to run n an object with the same shape as our dog type this object is a dog for TypeScript.

187
00:24:25.020 --> 00:24:27.810
Ryan Mehta: Okay, so we've created our own custom type here.

188
00:24:31.050 --> 00:24:38.250
Ryan Mehta: We can also have optional properties for our dog like typically in our examples we make weight optional.

189
00:24:39.210 --> 00:24:56.490
Ryan Mehta: To make to give dog an optional property you put a question mark after the property name and this is saying that dog has to have a name. At age. But wait, is optional with sort of like in react when we were using prop types.

190
00:24:57.630 --> 00:24:58.740
Ryan Mehta: So we have like

191
00:25:00.870 --> 00:25:01.950
Prop types.

192
00:25:09.870 --> 00:25:12.150
Ryan Mehta: kind of mess. Yeah. God

193
00:25:17.910 --> 00:25:24.120
Ryan Mehta: When we were doing name types that spring is required.

194
00:25:26.760 --> 00:25:28.050
Ryan Mehta: Prop types.

195
00:25:34.380 --> 00:25:36.510
Ryan Mehta: Wait, we just need prop types.

196
00:25:40.350 --> 00:25:48.690
Ryan Mehta: Sort of the similar to this, where age isn't required and the prop types. Same thing for our type dog right here. Wait, isn't required

197
00:25:51.000 --> 00:26:00.750
Ryan Mehta: So back down in our create dog if we left off this weight field totally still matches the shape, since a weight isn't required

198
00:26:05.550 --> 00:26:09.750
Ryan Mehta: Some cool things also. What if we tried to add an extra fields.

199
00:26:14.010 --> 00:26:19.890
Ryan Mehta: Also gives us an error. This shape is not assignable. The dog has an extra field in it.

200
00:26:21.000 --> 00:26:29.340
Ryan Mehta: So a dog, since we're returning a dog should have only a name and an age optionally await and nothing else.

201
00:26:35.970 --> 00:26:36.570
Ryan Mehta: Look good

202
00:26:38.970 --> 00:26:44.370
Ryan Mehta: All right, let's make another type that's almost identical.

203
00:26:45.720 --> 00:26:47.610
Ryan Mehta: Let's make a person type

204
00:26:49.200 --> 00:27:01.020
Ryan Mehta: A person has a name which is a string and age, which is a number. And maybe, I don't know what else do people have phone number.

205
00:27:02.880 --> 00:27:03.840
Ryan Mehta: Two. The string.

206
00:27:07.620 --> 00:27:10.830
Nice, which is a Boolean. Okay.

207
00:27:13.710 --> 00:27:26.970
Ryan Mehta: Here is our person type that we just created every person has to have all four of these properties. Every object that is a person has all four of these properties and any object that has these properties is a person

208
00:27:27.420 --> 00:27:32.430
Ryan Mehta: So person has these properties any object with these properties as a person. It goes like both ways.

209
00:27:34.710 --> 00:27:40.110
Ryan Mehta: We can make a function. Now let's call it old this

210
00:27:42.210 --> 00:27:47.400
Ryan Mehta: Person our oldest person function takes an array of

211
00:27:48.630 --> 00:27:50.250
Ryan Mehta: People for since

212
00:27:53.010 --> 00:27:57.240
Ryan Mehta: Person array and returns a single person.

213
00:27:58.440 --> 00:28:03.570
Ryan Mehta: Okay. So, same way that we've created a raise of strings. We're now creating an array of person.

214
00:28:04.770 --> 00:28:05.970
People a people.

215
00:28:07.680 --> 00:28:09.690
Ryan Mehta: And we're returning a single person.

216
00:28:10.920 --> 00:28:17.460
Ryan Mehta: Right now we have this red thing here because our function is a returning anything but we're expecting it to return a person

217
00:28:20.310 --> 00:28:40.590
Ryan Mehta: Alright, so let's look through our array for the oldest person will do something similar to what we did before. For do reduce will have our oldest will have a person and will say if person dot age is greater than oldest

218
00:28:42.780 --> 00:28:48.720
Ryan Mehta: Age overturn person. Otherwise, we'll return oldest

219
00:28:52.320 --> 00:28:53.250
Return.

220
00:28:54.990 --> 00:28:56.580
Ryan Mehta: This is an arrow function.

221
00:28:59.490 --> 00:28:59.820
Okay.

222
00:29:02.700 --> 00:29:05.070
Ryan Mehta: So a few things about this one.

223
00:29:06.360 --> 00:29:25.140
Ryan Mehta: We made an arrow function. We have a person's array this anonymous arrow function right here is returning a single person. So we have person colon person and then the arrow after the type of the return

224
00:29:27.240 --> 00:29:31.680
Ryan Mehta: And then we're just iterating through our list of people were checking if

225
00:29:32.940 --> 00:29:43.950
Ryan Mehta: The person at a certain position is older than the oldest one that we've already seen if they are older, they become the oldest person if they aren't older the oldest person is still the oldest person.

226
00:29:46.500 --> 00:29:50.220
Ryan Mehta: So let's create a bunch of people

227
00:29:54.090 --> 00:29:55.830
Ryan Mehta: Person has a name.

228
00:30:06.150 --> 00:30:09.960
Ryan Mehta: I realize now that I shouldn't have put quite so many things in here.

229
00:30:18.060 --> 00:30:19.440
Ryan Mehta: So we have person a

230
00:30:22.410 --> 00:30:23.910
Ryan Mehta: B. C.

231
00:30:25.890 --> 00:30:27.510
Ryan Mehta: And D will make them.

232
00:30:30.030 --> 00:30:34.380
Ryan Mehta: Person B is 15% see is

233
00:30:35.430 --> 00:30:38.790
Ryan Mehta: 50 person D is

234
00:30:40.110 --> 00:30:40.560
Ryan Mehta: 30

235
00:30:42.870 --> 00:30:44.250
Ryan Mehta: Only person see is

236
00:30:47.490 --> 00:30:58.320
Ryan Mehta: So we have an array of people. Now since this is an array of people each one matches the person object type we can pass it to our oldest person function.

237
00:31:04.260 --> 00:31:05.400
Ryan Mehta: This person.

238
00:31:07.590 --> 00:31:17.730
Ryan Mehta: And it should return a individual person for us. So we should be able to run this file and hopefully see see as our output.

239
00:31:30.360 --> 00:31:31.470
Ryan Mehta: All right, look good.

240
00:31:34.290 --> 00:31:40.710
Ryan Mehta: Okay, let's make a final type a type called has name.

241
00:31:41.820 --> 00:31:44.250
Ryan Mehta: So we'll make a type called has named

242
00:31:45.240 --> 00:31:47.790
jasmin: Ryan, what would it look like if a person had a dog.

243
00:31:49.980 --> 00:31:53.250
Ryan Mehta: Person had a dog. Yeah.

244
00:31:54.270 --> 00:31:55.770
Ryan Mehta: It would be dog.

245
00:31:56.640 --> 00:31:57.150
Doc.

246
00:31:59.460 --> 00:32:02.460
jasmin: Okay, that was easy. Thanks. Yes.

247
00:32:03.240 --> 00:32:07.170
Ryan Mehta: They could also have dogs and have an array of dogs.

248
00:32:20.880 --> 00:32:22.890
Ryan Mehta: So let's have a has name.

249
00:32:25.170 --> 00:32:26.580
Ryan Mehta: Name is a string.

250
00:32:28.560 --> 00:32:37.440
Ryan Mehta: Type and then let's construct a function called find by name, which takes a name.

251
00:32:39.180 --> 00:32:41.160
Ryan Mehta: And returns a has main

252
00:32:42.510 --> 00:32:43.200
Object.

253
00:32:44.580 --> 00:32:47.700
Ryan Mehta: I guess it has to take a name and an array of

254
00:32:49.740 --> 00:32:50.400
Names.

255
00:32:54.450 --> 00:32:59.850
Ryan Mehta: Okay, so this function will iterate through this array of has names and find one with this name.

256
00:33:02.220 --> 00:33:03.990
Ryan Mehta: We can return

257
00:33:05.640 --> 00:33:07.500
Ryan Mehta: HS find

258
00:33:09.270 --> 00:33:10.530
Ryan Mehta: A staff name.

259
00:33:11.940 --> 00:33:23.280
Ryan Mehta: Last Name. All right, we're gonna have one big huge problem here. This thing returns either a has name or an undefined.

260
00:33:24.330 --> 00:33:33.780
Ryan Mehta: Right, it might might not be somebody with this name inside of the array. So instead of just returning a has name.

261
00:33:34.890 --> 00:33:37.290
Ryan Mehta: We are going to return to has name.

262
00:33:39.270 --> 00:33:39.900
Ryan Mehta: Or

263
00:33:42.480 --> 00:33:51.330
Ryan Mehta: Works. So this function doesn't always return it has name it returns a has name or the was nothing and the array with that a

264
00:33:54.330 --> 00:33:54.840
Good.

265
00:34:01.230 --> 00:34:06.840
Ryan Mehta: That's right. What if we tried to do find the name on our people you think would happen

266
00:34:16.260 --> 00:34:17.340
Ryan Mehta: totally works.

267
00:34:20.640 --> 00:34:33.210
Ryan Mehta: A person happens to match like potentially match this type to have a name inside ism. This is another thing with that typing, you can actually have a type like this that you pass to a function

268
00:34:34.590 --> 00:34:43.530
Ryan Mehta: As long as the type has one of the properties in it like a subset of this object matches all of the properties here.

269
00:34:44.550 --> 00:34:54.840
Ryan Mehta: You can totally pass it to find by name. So find by name connects to be used for an array of people. It could also be used for an array of dogs.

270
00:34:56.850 --> 00:34:57.450
Jacob Harrington: So Ryan.

271
00:34:58.500 --> 00:35:05.010
Jacob Harrington: If you were so since you're using has name is the typing here if in your, your function to use something rather than a name property, would it break

272
00:35:06.060 --> 00:35:07.110
Ryan Mehta: It would, yeah.

273
00:35:07.140 --> 00:35:09.930
Ryan Mehta: So you mean like after we find it by name.

274
00:35:10.350 --> 00:35:18.630
Jacob Harrington: Like anywhere like within your function like line 62 if instead of using name use like age or something with this and break now. Yep. Okay. Cool.

275
00:35:18.870 --> 00:35:19.410
Ryan Mehta: Yeah, so just

276
00:35:20.460 --> 00:35:20.670
Ryan Mehta: Because

277
00:35:21.000 --> 00:35:22.260
Jacob Harrington: We're all the other properties on

278
00:35:23.010 --> 00:35:24.870
Ryan Mehta: It ignores all of the other properties.

279
00:35:24.900 --> 00:35:25.410
Yeah.

280
00:35:26.670 --> 00:35:27.030
Ryan Mehta: Yeah.

281
00:35:27.540 --> 00:35:38.370
Ryan Mehta: Because there's no guarantee inside of this function that this item like an item and has made has any other properties, the only guarantee is that it has a

282
00:35:38.370 --> 00:35:38.760
Name.

283
00:35:39.990 --> 00:35:40.890
Jacob Harrington: Okay, cool.

284
00:35:45.030 --> 00:35:46.920
Ryan Mehta: We can console like this, I think,

285
00:35:48.600 --> 00:35:49.710
Ryan Mehta: This actually let's

286
00:35:52.290 --> 00:35:54.000
Ryan Mehta: Let's call this has made

287
00:35:55.080 --> 00:35:56.370
And then console archives

288
00:35:59.220 --> 00:36:20.790
Ryan Mehta: Right when we actually log this thing, we will see our entire person here. This is them found a at the bottom. But let's say that we don't want to just print that we don't want to print out the entire object. Let's say we just want to print out our purse whether a person is nice or not.

289
00:36:21.810 --> 00:36:23.850
Ryan Mehta: So typically we would do something like

290
00:36:26.250 --> 00:36:40.560
Ryan Mehta: Nice. We need to do the optional chaining because it could return undefined. So that's where we have the question mark dot but it won't actually let us access nice here in the ideas. Why take up your kind of onto it.

291
00:36:42.240 --> 00:36:43.380
Ryan Mehta: Because has named needs it.

292
00:36:44.430 --> 00:36:47.760
Ryan Mehta: Yeah, exactly how there's no guarantee that has made has this so

293
00:36:49.860 --> 00:37:12.420
Ryan Mehta: She has made has made would need this as part of its definition are five by name returns a has made the only guarantee that. So that means, this thing is a has name as far as TypeScript is concerned has made has no dot nice property. So we cannot access this nice property.

294
00:37:13.980 --> 00:37:19.980
Jacob Harrington: Oh, so even, even if the object returns with that property years you're still not gain access to it at all.

295
00:37:20.550 --> 00:37:20.970
Ryan Mehta: Yeah, because

296
00:37:21.000 --> 00:37:22.680
TypeScript can't guarantee it.

297
00:37:25.500 --> 00:37:26.940
Jacob Harrington: That's interesting. Yeah.

298
00:37:28.260 --> 00:37:29.160
Ron Yonker: Interesting.

299
00:37:30.900 --> 00:37:48.750
Ryan Mehta: Yeah, because at runtime. It'll be true that this is possible but TypeScript cannot guarantee that this is always true. It can't verify that has named has this property, all it can guarantee is that has made has a name property.

300
00:37:49.830 --> 00:38:01.740
Jacob Harrington: So then you can theory. Could you do the same thing that you're doing in line 61 is your return within has name. So then, nice would either equal a string or Boolean or undefined that how you get around them.

301
00:38:02.940 --> 00:38:03.450
Jacob Harrington: So,

302
00:38:03.630 --> 00:38:05.100
Ryan Mehta: You can get around it by

303
00:38:06.990 --> 00:38:07.830
Ryan Mehta: Passing it

304
00:38:09.150 --> 00:38:14.700
Ryan Mehta: So you can say that we have this thing called has made and it is a person

305
00:38:16.530 --> 00:38:18.780
Ryan Mehta: And then we can dot nice off it.

306
00:38:21.060 --> 00:38:22.470
Ryan Mehta: That's a way to get around it.

307
00:38:23.970 --> 00:38:37.110
Ryan Mehta: And this is called castings. So we're going to say that we, as the developer know a little bit more than TypeScript knows at this phase. I know that even though TypeScript thinks this is has name. It actually is a full person.

308
00:38:38.880 --> 00:38:41.010
And so I'm going to cast it as full person.

309
00:38:55.200 --> 00:38:55.680
Ryan Mehta: Okay.

310
00:39:02.250 --> 00:39:02.580
Ryan Mehta: Alright.

311
00:39:03.960 --> 00:39:06.240
Ryan Mehta: This is kind of not the best way to do it.

312
00:39:09.210 --> 00:39:13.890
Ryan Mehta: There is a nicer way to do this with something called generics.

313
00:39:14.940 --> 00:39:19.620
Ryan Mehta: generics. Let us write functions that use a tight that we don't know ahead of time.

314
00:39:21.450 --> 00:39:27.720
Ryan Mehta: What that ends up looking like. Let's break another function. Oh, this will break

315
00:39:33.270 --> 00:39:39.390
Ryan Mehta: Let's write another function called find by name generic

316
00:39:44.100 --> 00:39:57.990
Ryan Mehta: generic function is one that takes a type like this. So there's these extra kind of brand new things that you might be seeing less than side I type

317
00:39:58.440 --> 00:40:10.650
Ryan Mehta: That will specify when we run defined by name function and then we're going to say our array of things are HS from above is an array of those types.

318
00:40:11.700 --> 00:40:18.150
Ryan Mehta: Name is a string and this thing returns either that type or undefined.

319
00:40:19.710 --> 00:40:22.290
Ryan Mehta: Will go a little bit further and say that

320
00:40:23.340 --> 00:40:25.800
Ryan Mehta: Type has to extend

321
00:40:27.840 --> 00:40:28.590
Cause made

322
00:40:31.800 --> 00:40:45.840
Ryan Mehta: Some. So this is saying such a long line that we're going to pass tell find by name generic what type we're dealing with that type has to at least have a name field in it.

323
00:40:47.430 --> 00:40:54.600
Ryan Mehta: And then our HS here is going to be an array of those types and then we can do something similar return

324
00:40:55.620 --> 00:41:00.600
hs.me

325
00:41:01.950 --> 00:41:12.420
Ryan Mehta: Man within this function body here. We only really have access to this name because the only thing we know for sure about type T is that it has a name.

326
00:41:13.590 --> 00:41:15.840
Ryan Mehta: But down below. When we use this

327
00:41:19.410 --> 00:41:27.450
Ryan Mehta: We can use our fine by name generic function, we will specify that we have an array of person.

328
00:41:28.470 --> 00:41:31.170
Ryan Mehta: And then we will pass our people.

329
00:41:32.910 --> 00:41:33.570
And

330hat information.

229
00:26:44.700 --> 00:26:46.500
Ryan Mehta: Yeah, that's location.

230
00:26:50.190 --> 00:26:50.640
Ron Yonker: Okay.

231
00:26:52.830 --> 00:27:05.310
Ryan Mehta: And the final prop that we're always past if we are rendered by a route is something called match match gives us. Let's actually just look at it.

232
00:27:07.080 --> 00:27:09.150
Ryan Mehta: Match gives us an object.

233
00:27:10.170 --> 00:27:21.300
Ryan Mehta: With some information about our path. So it gives us the original path that we had colors slash colon color name the current URL that we're at

234
00:27:21.930 --> 00:27:38.490
Ryan Mehta: Whether or not it was an exact path route or not. And then the most important part of this for us is programs so match dot parameter gives us the current value of all of our variables, all of our URL path programs.

235
00:27:39.870 --> 00:27:47.430
Ryan Mehta: So color name is the key because color name was in our path and the current value of color name is purple.

236
00:27:49.620 --> 00:27:52.200
Ryan Mehta: So if we want to grab this color name.

237
00:27:53.580 --> 00:27:54.780
Ryan Mehta: And render it

238
00:27:55.830 --> 00:28:01.890
Ryan Mehta: To the page, we would do match.grams.com

239
00:28:04.290 --> 00:28:19.710
Ryan Mehta: So match, kind of like an express where we use direct dot programs and then the variable that we want to grab and now we see purple here if I put a different color here red would see right there.

240
00:28:22.680 --> 00:28:26.460
Ryan Mehta: If we decided to add multiple variables here.

241
00:28:27.600 --> 00:28:30.330
Ryan Mehta: Like color name and color hex.

242
00:28:31.350 --> 00:28:36.750
Ryan Mehta: For whatever reason, and we would then be able to add another variable.

243
00:28:38.970 --> 00:28:39.570
Ryan Mehta: Zero.

244
00:28:40.860 --> 00:28:43.230
Ryan Mehta: And that other variable would show up.

245
00:28:45.210 --> 00:28:47.490
Myself console. I can match. Yes.

246
00:28:57.480 --> 00:29:03.060
Ryan Mehta: In programs also sopranos now has both color name in it and hex in it.

247
00:29:08.400 --> 00:29:14.910
Ryan Mehta: And it has both of those, because the path has both color name in it and hex in it.

248
00:29:17.940 --> 00:29:21.960
Ron Yonker: Is this the react way of catching query programs.

249
00:29:23.730 --> 00:29:25.650
Ron Yonker: In state. Specifically, I guess.

250
00:29:27.900 --> 00:29:31.050
Ryan Mehta: Well, it's one thing that we can do you can still have query grams.

251
00:29:39.720 --> 00:29:42.210
Ryan Mehta: All right, that all seem okay

252
00:29:43.740 --> 00:29:48.210
Ryan Mehta: React router. That's really all that we really need for react router.

253
00:29:50.040 --> 00:29:56.520
Ryan Mehta: At least for now we'll make our list and detail pages we use match.

254
00:29:58.140 --> 00:30:07.020
Ryan Mehta: Dot prance probably.id to get to the detail page right and use that ID to fetch the detail view up some API.

255
00:30:11.160 --> 00:30:22.530
Ben Waples: I had a question about the deconstructs during the top for us browser router as a router Queen do that as and rename variables like wherever we're deconstructing

256
00:30:23.610 --> 00:30:24.000
Ryan Mehta: Yeah.

257
00:30:24.150 --> 00:30:26.760
Ryan Mehta: So, this you can rename these things.

258
00:30:29.220 --> 00:30:32.070
Ryan Mehta: Where are these all the red right now. What are they break

259
00:30:39.750 --> 00:30:44.010
Ryan Mehta: Okay. But yeah, you can rename anything but the soap we renamed switch

260
00:30:46.080 --> 00:30:46.320
Ryan Mehta: With

261
00:30:47.850 --> 00:30:48.600
Ryan Mehta: Sure.

262
00:30:50.010 --> 00:30:54.540
Ryan Mehta: Then down below where we use switch it would be switcher

263
00:30:57.210 --> 00:30:57.570
Sure.

264
00:30:59.730 --> 00:31:01.110
Everything was still work.

265
00:31:05.040 --> 00:31:05.430
Ben Waples: Thank you.

266
00:31:09.030 --> 00:31:17.520
Ron Yonker: So why do we care about these worldviews each of these things. These prompts are being passed along and router browser router.

267
00:31:18.600 --> 00:31:22.620
Ryan Mehta: Well, you're going to need these match. We need to your list detail stuff.

268
00:31:24.660 --> 00:31:25.710
Ryan Mehta: At the very least,

269
00:31:32.310 --> 00:31:36.090
Ryan Mehta: This is how you're going to pass the ID two different rounds.

270
00:31:44.460 --> 00:31:47.910
Ryan Mehta: Location will eventually use them on what to do pagination

271
00:31:49.980 --> 00:31:57.150
Ryan Mehta: And history Eagle us whenever you want to submit a form and after the form is submitted redirect to a different page.

272
00:32:03.720 --> 00:32:15.270
Annalise Murphy: Ryan's, would you do me a favor and just do a doodle with like an arrow on the match location in history, just so that I have something that will help me remember what these links to

273
00:32:17.250 --> 00:32:18.480
Annalise Murphy: Like history like

274
00:32:20.370 --> 00:32:21.210
Annalise Murphy: Doodling on it.

275
00:32:22.920 --> 00:32:26.310
Annalise Murphy: Like being like, ooh, this links to form.

276
00:32:28.710 --> 00:32:29.640
Annalise Murphy: don't do so well.

277
00:32:30.300 --> 00:32:30.870
Yeah.

278
00:32:32.130 --> 00:32:32.760
Ryan Mehta: Well,

279
00:32:33.270 --> 00:32:34.380
Annalise Murphy: Now, all right.

280
00:32:34.680 --> 00:32:38.820
Ryan Mehta: I'm thinking about it. I'm thinking about what I could say about these because

281
00:32:41.460 --> 00:32:46.710
Ryan Mehta: That's like probably where we're going to end up using history, but it's not your forms really

282
00:32:47.040 --> 00:32:51.960
Ryan Mehta: Okay, it's like anytime you want to push to a new URL.

283
00:32:52.860 --> 00:32:54.210
Annalise Murphy: Okay, gotcha. Yeah.

284
00:32:54.420 --> 00:32:55.350
Ryan Mehta: This is like

285
00:32:57.630 --> 00:32:59.490
Ryan Mehta: This is like redirecting

286
00:33:06.780 --> 00:33:09.180
Ryan Mehta: This one is client.

287
00:33:11.550 --> 00:33:18.420
Ryan Mehta: Information and this one is like URL programs.

288
00:33:23.670 --> 00:33:27.780
Annalise Murphy: Thank you, is visually helps me anchor the concepts.

289
00:33:31.050 --> 00:33:31.590
Annalise Murphy: Appreciate it.

290
00:33:32.700 --> 00:33:32.880
Annalise Murphy: Yeah.

291
00:33:32.940 --> 00:33:33.390
No problem.

292
00:33:36.870 --> 00:33:40.590
Ryan Mehta: All right, any other things with this router.

293
00:33:45.660 --> 00:33:54.300
Ryan Mehta: Okay, let's take a break. Let's come back at 955 and then we'll talk about react hooks fun stuff.

294
00:33:58.980 --> 00:33:59.700
Brooke Perkins (she/her): Yes.

295
00:34:01.050 --> 00:34:05.340
Ryan Mehta: All right, react hooks. Have you all heard of these things.

296
00:34:07.020 --> 00:34:07.530
Greg Mall: Read about

297
00:34:08.640 --> 00:34:09.300
Ryan Mehta: Nice.

298
00:34:09.720 --> 00:34:15.510
Ryan Mehta: So I believe that came out in February of 2019 so

299
00:34:16.680 --> 00:34:20.460
Ryan Mehta: You know, the key almost two years old. They're going to have a birthday soon.

300
00:34:22.710 --> 00:34:36.930
Ryan Mehta: Everybody was so hyped about these things when it first came out, because for the first time, we would be able to use state inside of a function component. So up until now, we've only had state in our class based components.

301
00:34:38.940 --> 00:34:43.050
Ryan Mehta: Hooks allow us to move state into function components as well.

302
00:34:46.020 --> 00:34:50.340
Ryan Mehta: So yeah rackets allows creating and managing state within a functional component

303
00:34:53.550 --> 00:35:00.570
Ryan Mehta: hooks are JavaScript functions, but they impose additional rule. So every hook that we're going to use as a JavaScript function.

304
00:35:02.250 --> 00:35:08.580
Ryan Mehta: And some of the rules of hooks a hook must start with the name you with us as a prefix.

305
00:35:12.120 --> 00:35:22.920
Ryan Mehta: Hooks cap to be called at the top level of a component that can't be nested inside of ifs or for loops or anything like that. They have to be at the top level a nested inside of the component

306
00:35:25.140 --> 00:35:37.500
Ryan Mehta: And you can only call hooks within a React function. So within a React function component. You can't call hooks from class based components or anywhere else.

307
00:35:38.460 --> 00:35:46.470
Ryan Mehta: There's one exception to that. You can also call hooks within other hooks. So when we start making custom hooks, you can call a hook within a custom hook

308
00:35:48.720 --> 00:36:01.710
Ryan Mehta: All right. On the right hand side, we're using some hooks to create a little application that lets just type into a box and display. What we take and click on a button to incremental counter

309
00:36:04.800 --> 00:36:11.040
Ryan Mehta: Over online for of the very right hand side we create a text piece of state.

310
00:36:12.330 --> 00:36:17.310
Ryan Mehta: Using the US state hook so you state creates a piece of state.

311
00:36:19.110 --> 00:36:22.650
Ryan Mehta: The initial value of our state will be an empty string.

312
00:36:24.450 --> 00:36:33.540
Ryan Mehta: Online five. We're also using a hook the same hook you state to create a piece of state that is initialized as the number zero

313
00:36:35.430 --> 00:36:38.730
Ryan Mehta: On the left hand side you'll see something a bit crazy.

314
00:36:40.140 --> 00:36:40.650
Ryan Mehta: Maybe

315
00:36:42.330 --> 00:36:45.450
Ryan Mehta: You stay always returns an array.

316
00:36:47.100 --> 00:36:59.850
Ryan Mehta: So you state returns in array, where the first item of the array is the state itself and the second item in the array is a center function. So kind of like this set state.

317
00:37:01.500 --> 00:37:04.380
Ryan Mehta: So this is the state itself.

318
00:37:05.490 --> 00:37:09.960
Ryan Mehta: And this is a function that lets us set state.

319
00:37:11.460 --> 00:37:16.110
Ryan Mehta: So you stay always returns in array with those two items in it.

320
00:37:21.210 --> 00:37:25.950
Ryan Mehta: All right, so we usually we typically D structure these arrays.

321
00:37:28.200 --> 00:37:29.880
Ryan Mehta: To get both items.

322
00:37:34.050 --> 00:37:39.300
Ryan Mehta: Any questions about this new state hook right now, off the top of your head.

323
00:37:41.730 --> 00:37:54.960
Ron Yonker: So functionally, it does about the same thing as set state, but it's also declaring the changer or update or function was the initial state.

324
00:37:59.310 --> 00:38:06.210
Ryan Mehta: So side by side, a class based component and a function based component that do exactly the same thing.

325
00:38:09.990 --> 00:38:10.620
Ryan Mehta: Right.

326
00:38:12.210 --> 00:38:23.430
Ryan Mehta: Here is where these two components and visualize their state on the left hand side we have state equals count initialized at zero and text initialize as an empty string.

327
00:38:24.180 --> 00:38:34.890
Ryan Mehta: On the right hand side, we have a piece of state called text that's initialized as an empty string and a piece of state called count that's initialized at zero.

328
00:38:36.330 --> 00:38:38.640
Ryan Mehta: So same thing happening on both sides.

329
00:38:41.190 --> 00:38:50.850
Ryan Mehta: On Left hand side we have a handle change function. This should say text. Let's let me change that really quick. So it's not confusing.

330
00:39:04.830 --> 00:39:05.220
Okay.

331
00:39:07.800 --> 00:39:08.340
Ryan Mehta: So,

332
00:39:10.980 --> 00:39:25.920
Ryan Mehta: On the left hand side, we have this handle change function. Whenever you type into an input it's going to change the text piece of state to whatever the target dot value has inside of it. We've seen this sort of thing before. Right.

333
00:39:27.480 --> 00:39:37.740
Ryan Mehta: So we set state we change the text piece of state to the target value on the right hand side, we have a handle fate change function that does the exact same thing.

334
00:39:39.330 --> 00:39:47.010
Ryan Mehta: So I handle change function, we get the target we set our text to whatever's in target value.

335
00:39:48.300 --> 00:39:59.220
Ryan Mehta: So the syntax ends up looking slightly different but they have the same effect with set state set state is allowed to change both the count piece of state.

336
00:39:59.760 --> 00:40:10.260
Ryan Mehta: And the text piece of state. So when we set state we have to specify that I want to change the text piece of state and I want to update it to this value.

337
00:40:11.850 --> 00:40:18.900
Ryan Mehta: On the right hand side, we have a center function whose job, whose only job is to change our text piece of steak.

338
00:40:19.470 --> 00:40:35.010
Ryan Mehta: So we don't have to tell it further. What piece of state, it needs to change. We invoke the set text function that we get back about we got back when we called you state and we passed that set state that set text function, the new value of text.

339
00:40:37.140 --> 00:40:44.490
Ryan Mehta: So this slide here on the right is equivalent to this line here.

340
00:40:47.490 --> 00:40:48.120
Ryan Mehta: With good

341
00:40:50.310 --> 00:40:59.970
Ryan Mehta: Alright, that is independent state change. We also have dependent state change. So whenever our state depends on the previous value of state.

342
00:41:00.330 --> 00:41:15.270
Ryan Mehta: We had to use set state we passed that state and arrow function, getting the previous state and then returning an object with our state transformation. So here we're saying, change the count piece of state.

343
00:41:16.620 --> 00:41:21.480
Ryan Mehta: And update it. So it takes the previous count and adds one to it.

344
00:41:22.710 --> 00:41:29.970
Ryan Mehta: Right, so the count piece of state will increment every time we call this increment function this left hand side, same. Okay.

345
00:41:32.730 --> 00:41:45.690
Ryan Mehta: On the right hand side, we're doing the same sort of thing we haven't increment function we set count we pass set count and arrow function where we get the previous count.

346
00:41:46.590 --> 00:41:48.930
Ryan Mehta: And we add one to the previous count.

347
00:41:50.280 --> 00:42:04.260
Ryan Mehta: So very similar to what we did on the left hand side. But this time, instead of set count being generic like set state is set state can change any piece of state. So we need to specify that we want to change this account piece of state.

348
00:42:05.100 --> 00:42:12.900
Ryan Mehta: On the right hand side set count is only able to change the account piece of state, it only refers to count.

349
00:42:14.460 --> 00:42:27.330
Ryan Mehta: So when you pass the arrow function here instead of the stuff on the left hand side of this arrow being our entire state. It's only the account piece of state. It's only the state that set count is in charge of

350
00:42:28.230 --> 00:42:38.310
Ryan Mehta: So we get the previous count. We take the previous counted add one to it, returning that FROM OUR ARROW function which updates are count piece of steak.

351
00:42:39.510 --> 00:42:48.030
Ryan Mehta: The big advantage of these two things are one nice thing about them is that they only interact with the piece of state.

352
00:42:49.470 --> 00:42:58.020
Ryan Mehta: That they're in charge of they don't interact with other pieces of state, so you don't have to be specific, like we did with that state.

353
00:43:01.290 --> 00:43:15.240
Ron Yonker: And why are you are you using an arrow and eight, I was reading the documentation. It used count and then just did count spawn. What's the difference between the two. So,

354
00:43:15.330 --> 00:43:27.750
Ryan Mehta: Anytime you have dependent state, you're supposed to pass an arrow function here. So anytime your state relieswith

124
00:16:33.000 --> 00:16:37.680
Ryan Mehta: With us. So one big difference between the US reducer. And this create store.

125
00:16:38.910 --> 00:16:47.400
Ryan Mehta: With our user do sorry past the initial state as the second argument here with Redux we actually do this sort of thing.

126
00:16:50.040 --> 00:17:00.480
Ryan Mehta: So we default state to our initial state in the reducer function itself. So if state is undefined. It's going to default to our initial state.

127
00:17:03.180 --> 00:17:03.750
Ryan Mehta: All right.

128
00:17:05.220 --> 00:17:21.360
Ryan Mehta: We now have a store the store has three different methods on it that we can use. There is a store that get state. There's a store dot dispatch and there's a store I think of store about subscribe

129
00:17:24.870 --> 00:17:26.460
Ryan Mehta: Okay, it's a store dot subscribe

130
00:17:30.060 --> 00:17:43.860
Ryan Mehta: Those are the three methods on our store object right here. You're kind of guess what these things do if I console log store state. What do you think will print

131
00:17:49.170 --> 00:17:52.290
ryan Diffenbaugh: Every Student Zero. Yep. Count

132
00:17:52.320 --> 00:17:53.520
Ryan Mehta: Zero. Try it.

133
00:17:57.330 --> 00:17:58.680
Ryan Mehta: We have our count zero

134
00:18:00.600 --> 00:18:04.500
Ryan Mehta: If we call store dot dispatch.

135
00:18:05.550 --> 00:18:05.940
Ryan Mehta: With

136
00:18:08.340 --> 00:18:09.750
Ryan Mehta: Type is

137
00:18:14.280 --> 00:18:18.330
Ryan Mehta: Let's call that three times and then console logs for

138
00:18:19.650 --> 00:18:20.400
Ryan Mehta: Gets state.

139
00:18:21.990 --> 00:18:23.670
Ryan Mehta: What do you think will print here.

140
00:18:31.860 --> 00:18:32.280
Greg Mall: Yeah.

141
00:18:32.310 --> 00:18:33.390
Ryan Mehta: I think you're probably right.

142
00:18:34.800 --> 00:18:42.990
Ryan Mehta: Here's our three. So it's the same thing that we're just dealing with a second ago with our vanilla JavaScript like Redux that we created.

143
00:18:44.190 --> 00:18:44.730
Ryan Mehta: Ron

144
00:18:45.060 --> 00:18:51.840
Ron Yonker: Yep, sorry, what's the difference between dispatch and passing in reducer function, then

145
00:18:52.860 --> 00:18:56.460
Ryan Mehta: Dispatch just calls the producer function for us. So it's

146
00:18:56.940 --> 00:18:57.780
Ryan Mehta: Slightly different

147
00:18:57.840 --> 00:19:09.630
Ryan Mehta: Because the store like manages our state for us. So this calls are reduced or function with this action and sets the store state to the result of calling the producer.

148
00:19:13.290 --> 00:19:14.190
Ryan Mehta: Does that make sense.

149
00:19:16.140 --> 00:19:24.780
Ron Yonker: A kind of abundance confusing. It just feels like it's a couple it's it's whatever it's more terminology

150
00:19:27.450 --> 00:19:32.970
Ryan Mehta: Yeah, this will call are reduced there for us with whatever the current state is and update that state.

151
00:19:34.110 --> 00:19:36.690
Ryan Mehta: It's all good so far most part.

152
00:19:38.250 --> 00:19:41.550
Thomas Stussi: I don't imagine create store as much. But can I look at it again.

153
00:19:43.140 --> 00:19:43.500
Ryan Mehta: Trigger

154
00:19:44.280 --> 00:19:45.900
Thomas Stussi: Is it so there's nothing else to it.

155
00:19:46.320 --> 00:19:49.020
Ryan Mehta: Yes, important. Okay, gotcha.

156
00:19:51.630 --> 00:20:01.620
Ryan Mehta: There's one last method is subscribed method I'm going to actually put this at the top, so we can kind of see what's going on. You can do store dot subscribe

157
00:20:03.660 --> 00:20:05.220
Ryan Mehta: It takes an arrow function.

158
00:20:09.480 --> 00:20:12.120
Ryan Mehta: Anybody have any intuitions what this thing might do.

159
00:20:18.810 --> 00:20:24.360
Ben Waples: Is it like an on change. So when the store changes at all console log i

160
00:20:25.440 --> 00:20:26.250
Ryan Mehta: Exactly, yeah.

161
00:20:26.280 --> 00:20:27.540
Ryan Mehta: Subscribes to store.

162
00:20:27.540 --> 00:20:35.880
Ryan Mehta: Changes. So in this case, since we changed the store the state three times, we should see Jai Jai Jai Jai Jai to three times.

163
00:20:40.470 --> 00:20:54.060
Ryan Mehta: So there's a three high highs. So if you ever want to be notified when state changes you can subscribe to the changes here so we could every time state changes store dot

164
00:20:55.320 --> 00:20:58.050
Ryan Mehta: just print out the new state.

165
00:21:00.330 --> 00:21:00.690
Ben Waples: And

166
00:21:00.930 --> 00:21:02.220
Ryan Mehta: I will. Yep, good.

167
00:21:02.400 --> 00:21:07.620
Ben Waples: If you modified state inside of that. Subscribe. Would you like, would it be endless

168
00:21:08.370 --> 00:21:10.140
Ryan Mehta: Jeff. Let's try it.

169
00:21:10.380 --> 00:21:10.590
Again,

170
00:21:14.430 --> 00:21:32.520
Ryan Mehta: Okay, let's try this first they could see are subscribed console logs. So you get those three subscribe console logs, every time we changed state it triggered. Let's try now in our subscribe store dot dispatch.

171
00:21:33.870 --> 00:21:34.200
Ryan Mehta: Hi.

172
00:21:40.530 --> 00:21:41.010
OK.

173
00:21:44.100 --> 00:22:00.330
Ryan Mehta: So now are subscribed function triggers the state change itself. I think we're probably end up. Yeah. So we ended up in a leap forever and our program actually crashed because of it. We ended up in an infinite loop.

174
00:22:02.880 --> 00:22:10.950
Ryan Mehta: And JavaScript. They call this maximum call stack exceeded in other programming languages is called a stack overflow, which is where the

175
00:22:12.750 --> 00:22:14.010
Ryan Mehta: Website gets its name.

176
00:22:15.780 --> 00:22:17.010
Ryan Mehta: overflowed the stack.

177
00:22:26.340 --> 00:22:38.460
Ryan Mehta: That's all of Redux that's the entire library you create a store, it gives you these three methods on it. And that's actually the entirety of the library. It's pretty small overall

178
00:22:40.050 --> 00:22:53.100
Ryan Mehta: The harder part is how do we connect this library to react so react has its own state management, which we've been using right you stay user do sir use effect. All of these things.

179
00:22:54.030 --> 00:23:06.420
Ryan Mehta: Or our class component state equals what people tend to do when they use. Well, a lot of people don't like that state management that react comes with they want to use a different state manager.

180
00:23:06.990 --> 00:23:17.400
Ryan Mehta: Redux is a state manager. The difficult part is how do we integrate this state management system into react. That's where a lot of the

181
00:23:18.240 --> 00:23:34.230
Ryan Mehta: Chaos comes in, I think, because Redux itself. It's just this. This is all that comes with Redux a way to get our current state, a way to update the current state and a way to get notified when state changes.

182
00:23:35.820 --> 00:23:37.440
Ryan Mehta: That is Redux

183
00:23:38.100 --> 00:23:40.590
Adrian Simental: Ryan, do we do with funk arguments.

184
00:23:42.060 --> 00:23:43.650
Ryan Mehta: will deal with Redux Thunk

185
00:23:45.450 --> 00:23:47.640
Ryan Mehta: Probably around 11 ish or so.

186
00:23:53.190 --> 00:23:53.640
Okay.

187
00:23:55.020 --> 00:24:00.120
Ryan Mehta: So let's try to implement use Redux

188
00:24:01.800 --> 00:24:05.520
Ryan Mehta: To implement our, our JavaScript.

189
00:24:06.720 --> 00:24:21.180
Ryan Mehta: privy a fire, but let's do all outside of React for now. So we're just going to make our producers or action creators of that will need to handle our JSON pretty fi thing.

190
00:24:22.800 --> 00:24:34.410
Ryan Mehta: Just so we can drop will draw the react side of it really quick, so we can kind of get a sense of what we need, but we're gonna focus on the Redux park to begin with.

191
00:24:35.850 --> 00:24:38.940
Ryan Mehta: So what I imagine is we'd have a browser like this.

192
00:24:40.500 --> 00:24:43.980
Ryan Mehta: On the very left hand side, we have a text input.

193
00:24:45.570 --> 00:24:50.610
Ryan Mehta: Like a text area where we put in some JSON.

194
00:24:58.170 --> 00:25:05.400
Ryan Mehta: And then in the middle, pain, we pretty a phi that JSON. So we take all that one line JSON and

195
00:25:07.410 --> 00:25:09.300
Ryan Mehta: Make it look human readable.

196
00:25:12.690 --> 00:25:13.200
Like that.

197
00:25:14.250 --> 00:25:19.290
Ryan Mehta: And then we also on the very right hand pane convert that to Jamba

198
00:25:25.230 --> 00:25:26.460
Which looks kind of like that.

199
00:25:27.960 --> 00:25:32.310
Ryan Mehta: So this is the application that we're going to be building this kind of makes sense.

200
00:25:34.350 --> 00:25:36.270
Ryan Mehta: All right, I think we have

201
00:25:37.530 --> 00:25:39.780
Ryan Mehta: A few different action types.

202
00:25:42.840 --> 00:25:46.560
Ryan Mehta: The first one actually. We just need one to begin with.

203
00:25:48.510 --> 00:25:49.470
Ryan Mehta: Except

204
00:25:52.020 --> 00:25:52.710
JSON.

205
00:25:53.970 --> 00:25:55.170
Ryan Mehta: Oh, I have

206
00:25:58.260 --> 00:26:16.650
Ryan Mehta: This set JSON action type which will add this raw JSON into our state and in the same set JSON action, we will convert that raw JSON into a pretty version of the JSON and will also convert that raw JSON into the Jambo version of the JSON.

207
00:26:18.030 --> 00:26:20.130
Ryan Mehta: So our state will end up looking like

208
00:26:23.970 --> 00:26:24.480
I

209
00:26:26.190 --> 00:26:29.670
Ryan Mehta: Why, okay, that's a curly brace.

210
00:26:31.440 --> 00:26:39.660
Ryan Mehta: We'll have our raw JSON. The like ugly version of the JSON will have are pretty JSON.

211
00:26:41.940 --> 00:26:45.420
Ryan Mehta: The pretty a five version of our JSON and we'll have the demo.

212
00:26:46.560 --> 00:26:49.860
Ryan Mehta: Version of that same JSON. All of this stored in our state.

213
00:26:50.970 --> 00:26:55.170
Ryan Mehta: And then eventually, we'll just take that state and display it in the three columns.

214
00:26:56.220 --> 00:26:56.910
Ryan Mehta: Make sense

215
00:26:58.920 --> 00:26:59.250
Ryan Mehta: Okay.

216
00:27:01.470 --> 00:27:17.220
Ryan Mehta: So let's start off with just the Redux part of this whole thing inside a source. I am going to create two folders of producers folder and an actions folder.

217
00:27:19.620 --> 00:27:30.150
Ryan Mehta: Inside of our actions folder will create our JSON actions such as an inside of our producers will create our JSON reducer stuff JS.

218
00:27:32.160 --> 00:27:37.530
Ryan Mehta: Will also create JSON juicers test JS.

219
00:27:38.550 --> 00:27:44.400
Ryan Mehta: And JSON actions actually want create test for that one.

220
00:27:45.900 --> 00:28:01.800
Ryan Mehta: So we'll have our producers test over here on the left and our reducer implementation over here on the right. First thing we're going to do is describe, I would say selling routine, sir. This is actually be singular, I think.

221
00:28:03.150 --> 00:28:04.890
Ryan Mehta: We only have one producer.

222
00:28:06.900 --> 00:28:07.260
Ryan Mehta: Okay.

223
00:28:08.520 --> 00:28:11.250
Ryan Mehta: So we're going to describe our JSON reducer.

224
00:28:13.440 --> 00:28:19.410
Ryan Mehta: The first thing that we said is it should handle the set JSON action.

225
00:28:22.860 --> 00:28:27.060
Ryan Mehta: So we want to make sure that it can take in this set JSON action.

226
00:28:28.440 --> 00:28:30.780
Ryan Mehta: And set state appropriately.

227
00:28:32.490 --> 00:28:44.460
Ryan Mehta: So let's start off with state. Our state by default will be raw empty string pretty empty string and gamble and the string.

228
00:28:46.740 --> 00:28:49.410
Ryan Mehta: Well, then we'll then construct an action.

229
00:28:51.270 --> 00:28:57.300
Ryan Mehta: Will create our action in our action creator file. So we'll have one single action.

230
00:28:58.500 --> 00:29:00.990
Ryan Mehta: All sexy, son.

231
00:29:03.690 --> 00:29:05.850
Ryan Mehta: And will create an action creator also

232
00:29:14.520 --> 00:29:17.940
Ryan Mehta: This will be sexy and the payload.

233
00:29:19.170 --> 00:29:21.510
Ryan Mehta: Will pass in our JSON.

234
00:29:26.190 --> 00:29:26.760
Ryan Mehta: Look good

235
00:29:29.760 --> 00:29:30.870
Ryan Mehta: So far, so good.

236
00:29:32.550 --> 00:29:34.290
Ryan Mehta: Will actually make it so

237
00:29:39.960 --> 00:29:47.190
Ryan Mehta: Yeah, that's good. Okay. So then we'll color set JSON with the JSON object like

238
00:30:02.730 --> 00:30:03.360
Ryan Mehta: Like that.

239
00:30:07.500 --> 00:30:09.150
Ryan Mehta: And then we will

240
00:30:13.110 --> 00:30:13.830
Ryan Mehta: Do, sir.

241
00:30:14.970 --> 00:30:16.230
Ryan Mehta: With state.

242
00:30:19.980 --> 00:30:26.730
Ryan Mehta: Alright. So back in our producer folder will create our initial state, which is raw

243
00:30:30.810 --> 00:30:31.140
Ryan Mehta: Yeah.

244
00:30:32.760 --> 00:30:37.980
Ryan Mehta: And then we will export the fault de ser expansion producer.

245
00:30:41.070 --> 00:30:45.840
Ryan Mehta: Producers take state which initialize is to our initial state and then action.

246
00:30:49.530 --> 00:30:53.040
Ryan Mehta: Will have a switch on action type

247
00:30:54.480 --> 00:30:57.540
Ryan Mehta: Will have a case for sex a son.

248
00:30:58.980 --> 00:31:02.310
Ryan Mehta: Will also have a default case or just returned state.

249
00:31:05.070 --> 00:31:06.090
Ryan Mehta: It's look good so far.

250
00:31:07.830 --> 00:31:14.130
Adrian Simental: All right you answered it. Is there anything else on action and we can pull besides just taking

251
00:31:15.000 --> 00:31:21.090
Ryan Mehta: Action and payload. So in our action right here we'd have both type and the x and payload.

252
00:31:25.500 --> 00:31:27.450
Ryan Mehta: And then we're going to return.

253
00:31:29.190 --> 00:31:33.450
Ryan Mehta: To keep all state to say, and even though we're going to be updating every single piece of it.

254
00:31:35.280 --> 00:31:38.160
Ryan Mehta: Raw is going to be

255
00:31:44.730 --> 00:31:47.850
Ryan Mehta: So it's actually going to be an object like that.

256
00:31:51.960 --> 00:31:52.890
Ryan Mehta: And then

257
00:31:54.660 --> 00:31:56.190
Ryan Mehta: Starts off like this, then

258
00:31:59.700 --> 00:32:04.050
Ryan Mehta: Pretty anybody know how to create pretty JSON from

259
00:32:07.140 --> 00:32:10.470
Ryan Mehta: A JSON object, like how to create a string version of this.

260
00:32:12.960 --> 00:32:13.920
Ryan Mehta: That looks nice.

261
00:32:15.570 --> 00:32:17.100
Ryan Mehta: How about just an ugly version of it.

262
00:32:19.350 --> 00:32:20.100
Thomas Stussi: You just do some

263
00:32:24.690 --> 00:32:29.550
Ryan Mehta: JSON that spring up I yep with our actual payload.

264
00:32:30.630 --> 00:32:41.370
Ryan Mehta: And then we can that there's this replace or thing that's a function that lets us replace parts of our JSON, if we wanted to. And then the number of spaces.

265
00:32:42.390 --> 00:32:52.740
Ryan Mehta: Between nesting levels. So this will say have two spaces between nesting levels and it will automatically pretty predict for us with like a line between each key.

266
00:32:55.260 --> 00:32:56.490
Ryan Mehta: Alright that look good.

267
00:32:58.350 --> 00:33:07.740
Ryan Mehta: So will store our raw JSON in this raw field will pretty a phi that raw JSON with this JSON string of phi peace.

268
00:33:08.880 --> 00:33:14.580
Ryan Mehta: And actually, before we get too far. Let's finish up our test. So you can see it fail.

269
00:33:20.940 --> 00:33:25.080
Ryan Mehta: Expect the state to be cool.

270
00:33:27.390 --> 00:33:31.980
Ryan Mehta:WEBVTT

1
00:00:00.000 --> 00:00:06.420
jbj: Similar today with you all to talk through it. But then this will be sort of like I take home you can have this for later.

2
00:00:06.779 --> 00:00:16.980
jbj: And then I also hope to have time at the end. I don't want to talk at you for two hours. I'm hoping that there's time where you can all try and do something using this this source code.

3
00:00:17.640 --> 00:00:26.160
jbj: And just make a little app. Um, okay, if I look to the side, it's because I have two monitors and I'm reading things I'm not looking away from you all.

4
00:00:26.730 --> 00:00:37.860
jbj: Um, so. My back's has a has a few major components you have you have the store context, right, the provider that's going to wrap the whole app.

5
00:00:38.220 --> 00:00:48.270
jbj: You have the store. And then you have what have what happens in your components in this inside the store, you're going to have observable values. So that's like whatever your information is

6
00:00:49.350 --> 00:00:56.850
jbj: It can be strings, arrays, you know, so it's like whatever user inputs. It's like your address and phone number. If it's an account center or something like that.

7
00:00:57.660 --> 00:01:14.370
jbj: Or a list of Rick and Morty quotes. If you are building a Rick and Morty app at alchemy, um, there also are multiple kinds of functions. There are actions which change the state of whatever is in the stores so it can

8
00:01:15.390 --> 00:01:26.640
jbj: It can be an API call or it can like change. It can be a function that like changes, whatever those values are. And then there are computed which allow us to derive

9
00:01:27.360 --> 00:01:39.540
jbj: Information from that state. So, like, if you have a to do app and action would be to add a to do, right, so that is changing the value of the array of to do's

10
00:01:40.140 --> 00:01:52.200
jbj: If you have a to do app and you have a computed. Maybe you have a function that returns the number of to do's that you have in your app. And so that computer function is just looking at your array and giving you the links.

11
00:01:52.890 --> 00:02:06.540
jbj: Or it could be like looking at the array and looking at the values in there and seeing which ones are completed or not. And they'll give you like the count of how many to do's you have left to do, right. So actions computed

12
00:02:08.700 --> 00:02:18.330
jbj: And then on the component side of things, you have your whole app wrapped in the provider and you wrap your components in a hook that's provided

13
00:02:18.900 --> 00:02:29.190
jbj: By the packages that you'll use called us observer, or observer. So you your components become observers and in a sense, they are subscribing to the store.

14
00:02:29.580 --> 00:02:38.250
jbj: So that whenever the store changes the app is told that the store change. And then because it's react it renders because there's a state change.

15
00:02:39.090 --> 00:02:46.800
jbj: So you don't have to subscribe every component to the store you subscribe the components that you need to re render on state change to the store.

16
00:02:47.670 --> 00:02:55.530
jbj: So it's just like me talking at you, kind of like the big basic concepts of how my backs works. It's very simple. It's mutable state.

17
00:02:55.830 --> 00:03:10.650
jbj: So you are actually changing the state in the store, rather than Redux where you are returning a new piece of state that has been updated you. This is just like the store object now equals this new thing.

18
00:03:12.210 --> 00:03:23.700
jbj: Um, so yeah. That's like the basic concept I want to just start typing some stuff so you can see what it looks like. But before I do that, I just want to open it up and see if there's any quick questions.

19
00:03:28.200 --> 00:03:33.360
jbj: Cool. Um, so I am going to share my screen.

20
00:03:35.550 --> 00:03:36.630
jbj: And

21
00:03:38.880 --> 00:03:41.670
jbj: Share hopefully

22
00:03:43.260 --> 00:03:51.540
jbj: move things around. Hopefully you can all see my screen that true like a VS Code. Awesome.

23
00:03:52.380 --> 00:04:02.460
jbj: So, um, you can do this in whatever the alchemy bootstrap repo. This is to create React app rainbow. It's similar work similarly

24
00:04:04.170 --> 00:04:16.620
jbj: And I have also installed already ma backs and My back's react my backs React is a package that allows ma backs and react to work together.

25
00:04:16.950 --> 00:04:31.410
jbj: And gives you some of the functions that you need, because one of the things that I didn't mention is that you can use my backs with other frameworks. It doesn't have to be react. You can use it with Angular. It can be used with pure JavaScript um okay so

26
00:04:33.030 --> 00:04:41.850
jbj: The first thing I want to start with, and I'm gonna pull up something else that I can look at so that I'm not making it

27
00:04:42.900 --> 00:04:46.110
jbj: Up. Thank you for your patience. It's Friday.

28
00:04:49.050 --> 00:04:54.480
jbj: And I have like four repos open right now from other work that I'm doing.

29
00:04:54.960 --> 00:05:04.980
jbj: So I have found the correct one. Okay. Um, alright, the first thing that I think makes sense for us to do is build the store, right. So we'll start with the store.

30
00:05:05.280 --> 00:05:15.600
jbj: Will make the provider, and then we'll work with the components and I have created empty files so that I don't have to create new files. Um, and I would also encourage you. I don't know if

31
00:05:16.050 --> 00:05:22.200
jbj: Y'all have talked about this before but not to code along right now. And to just like listen and watch because all the code is going to be there later.

32
00:05:23.310 --> 00:05:34.950
jbj: So we are going to make a very simple grocery store app like add our grocery list app just like adding and removing items, similar to it to do. So we'll start with the grocery store.

33
00:05:36.420 --> 00:05:45.030
jbj: Now you can set up a my back store in one of two ways. It can also it can either be a class or it can be a function that returns an object.

34
00:05:45.630 --> 00:05:58.830
jbj: I have examples of both of those in the repo that I sent you. I'm and I'm going to demo the function version because it's a little bit more update to the way we're writing react now but

35
00:05:59.640 --> 00:06:09.000
jbj: For example, in some of the work that I'm doing. I actually have a story that's a class. It happens. Um, so we are going to

36
00:06:10.110 --> 00:06:19.770
jbj: Let's see, we're going to read it. We're going to write a function we're going to write a function that returns an object. So we're going to create a grocery store.

37
00:06:22.170 --> 00:06:26.370
jbj: This is actually the first time that I have like live coated in front of people. I am

38
00:06:27.540 --> 00:06:34.260
jbj: I'm trying to harness Ryan meta chill. I don't have Ryan medis chill at all, so bear with me.

39
00:06:35.100 --> 00:06:41.340
jbj: I'm so we're going to return an object. So the first thing we need in here is just our grocery list right so it's going to be

40
00:06:42.240 --> 00:06:47.310
jbj: grocery list and we're going to be, it's going to be started out as an empty array that's pretty simple, right.

41
00:06:48.000 --> 00:07:08.400
jbj: Um, so then we want to probably have a method in here that add something to your grocery list and a method that remove something for our grocery list that's kind of like basically what our app is going to do add and remove. Um, so we'll add grocery item and then

42
00:07:09.900 --> 00:07:19.500
jbj: Grocery, I don't. And we're going to do this dot grocery list up, push

43
00:07:22.140 --> 00:07:22.680
jbj: Push.

44
00:07:24.960 --> 00:07:38.640
jbj: And I wanted to have a name and an ID. So I'm actually going to do, I'm going to pull in a package called nano ID that's just going to like auto generate an ID. And I think I have already installed that

45
00:07:39.930 --> 00:07:42.240
jbj: So it's just going to auto generate an ID number.

46
00:07:45.510 --> 00:07:49.050
jbj: ID. So when we push, we're going to create

47
00:07:51.180 --> 00:07:59.430
jbj: A object that's going to be like grocery item and then ID.

48
00:08:02.880 --> 00:08:06.480
jbj: And we'll just call the nano ID function and it's going to auto generate

49
00:08:07.500 --> 00:08:21.300
jbj: Okay, so we're referencing back to this grocery list. We're pushing in an item that's grocery item and the ID. Um, and then a remove function.

50
00:08:24.750 --> 00:08:42.780
jbj: Grocery item and please ignore all of my meeting reminders that I'm not going to, um, we're gonna that's gonna take in the ID. Um, and I forgot a comma.

51
00:08:44.760 --> 00:08:53.970
jbj: And here we're just going to do like this diet grocery list. We're going to have this one US dot filters. So, this

52
00:08:55.080 --> 00:08:58.890
jbj: grocery list filter, um,

53
00:09:00.210 --> 00:09:02.460
And gross grocery

54
00:09:06.570 --> 00:09:23.520
jbj: Grocery item ID does not equal the ID that you gave it. So you're going to give it an ID, you're going to return back the list without the item with that ID in it. So pretty straightforward. This is all like

55
00:09:24.300 --> 00:09:36.120
jbj: Just like vanilla JavaScript. Here we have a function. It's returning an object, it, it could take an argument, if you wanted. I have a store that takes in programs.

56
00:09:36.930 --> 00:09:43.170
jbj: That then like sends an API call using information from the programs. This one happens to not. It's really simple.

57
00:09:44.070 --> 00:09:58.050
jbj: It's just the the array and these two methods and then we want to probably want to export this or an export fault create grocery store. So that's our store. That's it. It's pretty simple, pretty straightforward.

58
00:09:59.250 --> 00:10:09.780
jbj: Now we have to use that store and create our context provider. I'm going to take a second. Take a break, see if anyone has any questions about the store. Before I move on to the provider.

59
00:10:13.620 --> 00:10:15.600
jbj: Cool okay um

60
00:10:16.620 --> 00:10:24.300
jbj: So the star provider. Um, we're gonna need to react for this react from react.

61
00:10:25.530 --> 00:10:27.570
jbj: We probably need our

62
00:10:28.620 --> 00:10:31.830
jbj: Create grocery store function.

63
00:10:40.620 --> 00:10:41.580
jbj: Yeah, there it is.

64
00:10:44.850 --> 00:11:03.270
jbj: OK, so the first thing we need to do is create the grocery store context. So grocery store context. So for those of you who worked with the react context API. We're going to be using React create context.

65
00:11:04.020 --> 00:11:11.100
jbj: Um, and so that's creating that's creating the API context that we can then pull a provider off of to wrap

66
00:11:11.700 --> 00:11:21.300
jbj: Our whole app. And then our app has access to that provider and that providers, given the store um hopefully that's something that is making sense to some of you.

67
00:11:21.930 --> 00:11:29.370
jbj: I'll type it all out. And if there are any questions around that we can chat about it but i like i said i pretty sure you talked a little bit about context already

68
00:11:30.480 --> 00:11:36.540
jbj: Um, so now we're going to make the provider. So we're going to export cons grocery provider.

69
00:11:37.680 --> 00:11:51.870
jbj: And that is going to take in children. And so the idea is that you can then pass like this will wrap around your app and the app is your children or if you're not robbing the whole app whatever page you want to wrap is the children.

70
00:11:55.920 --> 00:11:57.900
jbj: So then what we need to return here.

71
00:11:59.520 --> 00:12:00.870
jbj: Is our

72
00:12:02.370 --> 00:12:11.280
jbj: Grocery store context. And context comes with a provider on it that a pro vendor that comes from react. Right.

73
00:12:12.300 --> 00:12:15.570
jbj: So then we can put our children in here.

74
00:12:17.160 --> 00:12:26.430
jbj: Provider takes a prop called a value right and the value is the store that you want to give to the context provider. It's the store that you are

75
00:12:27.240 --> 00:12:43.350
jbj: Allowing the provider to provide the information to to the rest of your app. So this is where we need to call our create grocery store function so cons grocery store equals

76
00:12:44.460 --> 00:12:52.920
jbj: Create grocery store. Okay, so this seems like it's going to work. Right. And then we would just put grocery store in here.

77
00:12:53.730 --> 00:13:05.010
jbj: This seems like it's going to work. Except for the fact that the grocery store function is just returning an object. It's not returning and observable object. It's just returning an object so

78
00:13:05.940 --> 00:13:24.570
jbj: Mob x gives us a function that we can use a hook that we can use that will magically turn this function that returning an object into an object that is observable by your components. And so that is

79
00:13:25.770 --> 00:13:26.850
All import it.

80
00:13:28.110 --> 00:13:36.510
jbj: Use local observable and this is the first thing that we are importing in from

81
00:13:39.540 --> 00:13:51.750
jbj: My back's react so My back's react creates this hook. It's it is able to then wrap this function. And we have a function that is observable.

82
00:13:53.220 --> 00:13:55.500
jbj: By our components.

83
00:13:57.000 --> 00:13:57.690
jbj: So,

84
00:13:59.190 --> 00:14:12.420
jbj: Does any I'm going to like stop for a second, people can think about that it it then. So we have our store, we're able to feed it into the provider, we will wrap our app with the provider, and then we'll have access to that information in our components.

85
00:14:15.000 --> 00:14:23.430
jbj: There's one last thing that's going to make our lives easier. And I'm going to, we're going to write a hook called us grocery store.

86
00:14:24.660 --> 00:14:31.800
jbj: And that's going to use the react to use context hook so that we can

87
00:14:33.660 --> 00:14:47.940
jbj: Access grocery store in our app and in our components. So when we're writing our components will be able to access grocery store by using this hook so both create context and use context come from react.

88
00:14:48.570 --> 00:14:56.670
jbj: So they're no different than if we were just using the react context API. The difference here is that we're using the observable functionality of My back's

89
00:15:00.210 --> 00:15:00.630
jbj: Cool.

90
00:15:02.190 --> 00:15:11.040
jbj: Okay. Um, so as far as setting up your store and setting up your provider. We are now done so.

91
00:15:11.550 --> 00:15:37.800
jbj: I mean, obviously, if we had other functionality that we needed our store to do we would add methods into that object. Um, but this is what we need to do to create the mob X system, um, the final thing we want to do is add our at our provider. So we have our grocery provider.

92
00:15:41.520 --> 00:15:51.870
jbj: That we're going to put in here. And obviously we're going to have something else here when we write a component because wrapping our hey world in a provider isn't going to do anything for it.

93
00:15:52.590 --> 00:16:04.680
jbj: But at this point, we are now set up to add components into this app JS file that will now be able to access the provider. So I'm gonna stop again see if there's any questions.

94
00:16:05.490 --> 00:16:11.490
jbj: See how we're all doing. I can't see most of you. So if you're if you're like nodding your head or shaking your head. I don't know.

95
00:16:14.460 --> 00:16:14.880
Cool.

96
00:16:18.120 --> 00:16:40.410
jbj: Awesome. Okay. Um, let's write a couple components. So we're making a grocery list app. We probably want an input component. And we probably want to list component. So let's start with our input component. And most of these should look pretty similar to stuff that you've already done.

97
00:16:41.460 --> 00:16:47.25WEBVTT

1
00:00:01.230 --> 00:00:03.000
jared: Oh, perfect. Thank you. Yeah.

2
00:00:03.149 --> 00:00:03.840
Ryan Mehta: I brought my bad.

3
00:00:08.010 --> 00:00:13.049
jared: Yeah, so it can be a little bit cheaper as far as the amount of requests that you have to send

4
00:00:14.610 --> 00:00:25.290
jared: Some of the downfalls of giving the client a whole lot of leeway in what they're asking for. And they can over query that's something we're kind of going through right now.

5
00:00:26.340 --> 00:00:37.620
jared: They're just asking for quite a bit. And they're asking for quite a bit that they're not using thought they would. And they're not now. So it's that can take a hit on performance, which is a

6
00:00:39.690 --> 00:00:46.950
jared: You know it's relatively unregulated what the clients can ask for. So if you have an open API that's their choice. But if you're working

7
00:00:47.850 --> 00:01:01.710
jared: You know internally with your company. You might have to kind of audit your, your front ends usage of your API. But I don't know, that's just some kind of quick things. I'm crafty well is strongly typed.

8
00:01:03.390 --> 00:01:05.070
jared: Does anybody here know that means

9
00:01:10.200 --> 00:01:13.020
jared: No worries. Okay, let's see.

10
00:01:13.260 --> 00:01:17.460
Jake (TA): If they like specify your types, each time you're creating them are inserting a learning

11
00:01:18.510 --> 00:01:21.930
jared: Yeah, so if you work in TypeScript. You kind of know what that looks like.

12
00:01:23.430 --> 00:01:27.330
jared: This is basically a quick example of

13
00:01:29.160 --> 00:01:31.530
jared: Some types that kind of define a user

14
00:01:32.670 --> 00:01:37.080
jared: This is in a I sent a link in the Slack channel have a repo that I'm working from

15
00:01:38.580 --> 00:01:40.080
jared: Both will work through that.

16
00:01:41.220 --> 00:01:44.130
jared: So yeah, here's a user, they have ID specify types.

17
00:01:45.600 --> 00:01:46.830
jared: So if at some point.

18
00:01:48.210 --> 00:01:54.450
jared: You are returning name as an event or an object or an array or whatnot, kind of going to yell at you. It does validation on

19
00:01:55.020 --> 00:02:05.490
jared: Everything that the client send you and everything that you're returning to the client. So if it doesn't match up. It's probably gonna because customer issues which can be a good thing.

20
00:02:07.530 --> 00:02:07.860
But

21
00:02:08.970 --> 00:02:16.560
jared: Can also cause some problems. And, you know, slow down, but you're catching things before production. So I guess there's value add most the time there.

22
00:02:19.530 --> 00:02:27.000
jared: So I guess if everyone wants to follow along with what I'm doing. That's cool. I would

23
00:02:28.920 --> 00:02:30.210
jared: I would pull my repo down

24
00:02:31.500 --> 00:02:44.970
jared: You know, pretty classic get clone and PMI have some environment variables and files that will work off of this repo also supports multi environment.

25
00:02:45.630 --> 00:02:56.340
jared: Kind of setups. So you'll have em files for development and if you want production and all that's doing for me right now is changing what database I'm working in

26
00:02:57.390 --> 00:03:06.930
jared: So you can fool around and development kind of do whatever you want there and then kind of run your server on production works little safer and you won't screw up your data.

27
00:03:08.550 --> 00:03:11.940
jared: Will see data file to get us going and then

28
00:03:13.200 --> 00:03:17.130
jared: MPM scripts to run the server and you can run it locally, um,

29
00:03:19.260 --> 00:03:23.640
jared: Are there people who want to kind of follow along that are not ready yet.

30
00:03:34.740 --> 00:03:35.370
jared: Okay, I

31
00:03:36.000 --> 00:03:37.320
Mike Lambert: Guess we just getting over here.

32
00:03:38.370 --> 00:03:39.060
jared: What was that

33
00:03:39.720 --> 00:03:40.890
Mike Lambert: I said active group here.

34
00:03:41.430 --> 00:03:42.990
jared: Yeah, no worries.

35
00:03:45.390 --> 00:03:45.960
jared: So,

36
00:03:46.770 --> 00:03:47.670
The

37
00:03:51.450 --> 00:03:53.700
jared: The repo that I set up a kind of set up.

38
00:03:56.550 --> 00:04:02.700
jared: Theoretical app for people who garden or whatnot community gardens with users garden sheds and tools.

39
00:04:04.710 --> 00:04:09.090
jared: The authentication on here's garbage. Do not use it.

40
00:04:10.170 --> 00:04:15.870
jared: It said it's just kind of a placeholder. And if you want to expand and add your own off. That's cool.

41
00:04:16.650 --> 00:04:17.520
jared: If users.

42
00:04:19.650 --> 00:04:21.630
jared: If gardens, who are attached to

43
00:04:23.610 --> 00:04:31.650
jared: Her gardens were owners of, you know, you have owner. It's a user shed has an owner

44
00:04:33.420 --> 00:04:37.830
jared: Tools also have honor and they kind of connect together. So this, this should all work.

45
00:04:38.940 --> 00:04:49.980
jared: Right now, but there's also a branch called start in developer basically the same place right now where it's just users. So if we want to build out something that looks a little bit different. We can go ahead and do that.

46
00:04:54.390 --> 00:04:56.490
jared: And then the meat and potatoes.

47
00:04:57.750 --> 00:05:02.670
jared: Of graph que el are resolved and type definitions.

48
00:05:04.770 --> 00:05:05.640
jared: So,

49
00:05:09.150 --> 00:05:20.790
jared: Every any kind of have some console logs in here that kind of explaining what the output of our type def in resolve or files are right now.

50
00:05:22.380 --> 00:05:38.940
jared: So when app. I'm using Apollo server, which is a kind of a layer over graph you well it does quite a bit for you. You could think of this similarly into how mongooses over Mongo and kind of gives you some schema methods and whatnot. So you don't have to do all the work yourself.

51
00:05:40.860 --> 00:05:42.450
jared: So you create a new server.

52
00:05:43.650 --> 00:05:47.910
jared: You add you type deaths which is defining the shape of

53
00:05:49.290 --> 00:05:57.540
jared: Your queries is as well as a different user types or data types ever resolves which basically

54
00:05:59.220 --> 00:06:02.250
jared: Are doing all the work. So here we have

55
00:06:03.480 --> 00:06:05.340
jared: What you might think of is a route.

56
00:06:07.860 --> 00:06:15.150
jared: You're going to get a user and you're going to get one based on a filter right now filter can be

57
00:06:17.880 --> 00:06:22.740
jared: A good filter on ID monocle ID. You can search for name and username.

58
00:06:23.970 --> 00:06:28.770
jared: These are not partially matched, so you have to, you'd have to send an exact name or exact username.

59
00:06:30.450 --> 00:06:30.990
jared: So,

60
00:06:32.070 --> 00:06:34.710
jared: You just have users returning a list of users.

61
00:06:35.760 --> 00:06:45.810
jared: And then user create so adding a new user to the database those get all trapped in the result. So they kind of aggregated and put all in the same place. So

62
00:06:47.700 --> 00:06:55.080
jared: The result servers you have queries mutations and then types queries and kind of like the default request that you'll make

63
00:06:55.680 --> 00:07:07.320
jared: If you don't specify anything. Otherwise, you have to specify what you're doing is mutation, kind of, you know, it doesn't totally makes sense right now, but I'll show you in a minute, and then all these other types down here.

64
00:07:08.760 --> 00:07:11.580
jared: kind of break off into separate revolvers, which

65
00:07:12.810 --> 00:07:14.910
jared: You know, the kind of way. I have it set up is

66
00:07:17.520 --> 00:07:24.900
jared: Kind of this wind up being a function on top of everything else. So kind of switch branches, real quick.

67
00:07:29.370 --> 00:07:29.760
On this

68
00:07:32.100 --> 00:07:33.540
console logs gone. That's fine.

69
00:07:34.650 --> 00:07:36.150
jared: So basically if every user

70
00:07:39.570 --> 00:07:43.860
jared: And you want to get all of users gardens, instead of

71
00:07:45.270 --> 00:07:53.370
jared: hitting an endpoint grabbing a user and picking up all of their gardens within kind of your top level query results are

72
00:07:54.390 --> 00:07:57.480
jared: You returning user and that object will have

73
00:07:59.550 --> 00:08:15.090
jared: Basically this in it right here. And if the client also asked for gardens, you'll pop into this other resolved, grab the user ID and then find out gardens owner user ID and this will only happen if the client asked for it so

74
00:08:20.370 --> 00:08:28.380
jared: It's kind of hard just talking about it, but this is Greenfield playground. If anyone's familiar with this. It's pretty cool.

75
00:08:29.790 --> 00:08:34.710
jared: This is kind of a handy browser UI that would replace something like a post, man.

76
00:08:36.060 --> 00:08:39.390
jared: So you can test your queries in here. Here's a few to start

77
00:08:42.600 --> 00:08:47.400
jared: So here's a named query don't have to name them. If it's just a query. They'll still run

78
00:08:48.720 --> 00:08:56.850
jared: And I'm asking for a user and I'm searching by username and I'm requesting a name username, their gardens and their kids.

79
00:08:58.620 --> 00:09:00.270
jared: Come to us. Oh, so when I

80
00:09:01.290 --> 00:09:04.050
jared: Search for this user, I get one user

81
00:09:05.580 --> 00:09:07.470
jared: Names usernames gardens and sheds.

82
00:09:09.990 --> 00:09:11.520
jared: If I asked for less.

83
00:09:12.630 --> 00:09:13.410
jared: I get less

84
00:09:15.030 --> 00:09:24.330
jared: And that's basically how this works. These are whole separate rooms solvers or paging through gardens and asking

85
00:09:25.740 --> 00:09:29.910
jared: For up to three apparently there's only two in the database so

86
00:09:32.040 --> 00:09:33.870
jared: What's happening is

87
00:09:35.250 --> 00:09:36.630
jared: We're hitting user resolved.

88
00:09:38.820 --> 00:09:39.750
jared: This one right here.

89
00:09:41.820 --> 00:09:58.410
jared: Which returns just this data and then when it hits gardens pops up into here and returns out gardens with the user ID this ID is pulled out of the user object gets returned here so

90
00:10:00.480 --> 00:10:05.940
jared: Graph key. Well, being a graph, basically, is like fingers off and arm.

91
00:10:07.500 --> 00:10:12.600
jared: With the way that you can retrieve data, you don't need to resolve everything, every time.

92
00:10:15.840 --> 00:10:21.030
jared: A client has quite a bit of power, asking for exactly what they want and based on what they want.

93
00:10:23.130 --> 00:10:28.770
jared: Graph key. Well, we'll kind of split off a whole bunch of different functions that grabs data and returns it

94
00:10:30.960 --> 00:10:34.830
jared: There any questions so far, you know, it's like kind of confusing and what to look at, but

95
00:10:39.390 --> 00:10:45.450
Jerud Moyer: So all those data types are living on one graph then which your cross referencing us different.

96
00:10:47.700 --> 00:10:54.660
Jerud Moyer: Categories for some users gardens sheds all on the same graph.

97
00:10:55.380 --> 00:10:59.250
jared: Yes. Yeah. And so right now, a user

98
00:11:00.630 --> 00:11:04.710
jared: In our database is only an ID, name and username.

99
00:11:05.820 --> 00:11:06.450
jared: So,

100
00:11:07.560 --> 00:11:11.850
jared: When I'm in here and this is return look at

101
00:11:14.760 --> 00:11:16.980
jared: The of query types. So I'm in

102
00:11:18.630 --> 00:11:23.280
jared: This user right here in this argument matches directly up with

103
00:11:25.710 --> 00:11:29.310
jared: The query here user in an argument in a return object.

104
00:11:31.500 --> 00:11:37.860
jared: So I'm returning a user from music very obviously this user type maps to here.

105
00:11:39.210 --> 00:11:48.210
jared: So instead of only returning what's in Mongo this ID, name and username. We can optionally return that plus gardens sheds and tools.

106
00:11:50.490 --> 00:11:51.510
jared: These types.

107
00:11:52.710 --> 00:11:58.020
jared: matchup straight here. So this user object basically maps to this user object.

108
00:11:59.220 --> 00:12:04.560
jared: Anything that doesn't get returned in this main query resolved or will end up here.

109
00:12:06.420 --> 00:12:16.860
jared: And kind of branch out. So if I was asked for a bunch of users. Every time that returns a user type in, I asked for gardens, it will return to kind of this like

110
00:12:18.150 --> 00:12:19.110
jared: Graph resolve.

111
00:12:20.190 --> 00:12:22.050
jared: That returns just this type

112
00:12:24.720 --> 00:12:31.050
jared: So it kind of bounces around a bit and it's can be hard to just look at so we'll try and code away through some of it.

113
00:12:33.360 --> 00:12:41.550
Ryan Mehta: So does this mean that for every time you asked for gardens, you're making two queries to the database, instead of like he's you're not like joining or anything. Right.

114
00:12:42.360 --> 00:12:55.410
jared: Right, yeah. So every time that this user gets called in. You asked her garden you hit this resolved or once, which will ping the database and also grabbed from the database here.

115
00:12:56.970 --> 00:13:00.630
Ryan Mehta: Is there a way that to make it so when

116
00:13:01.650 --> 00:13:13.200
Ryan Mehta: You query for the users here and you know that they're also grabbing gardens to, like, change the query. So you issue a join instead of like two separate queries, or is that like

117
00:13:15.510 --> 00:13:21.000
jared: I'm not that I'm aware of, but I do know that

118
00:13:22.440 --> 00:13:32.550
jared: These are running parallel kind of behind gravity well so it won't be grab one user grab one garden and kind of be like grab all the users and grab all the gardens.

119
00:13:34.320 --> 00:13:35.130
At the same time,

120
00:13:36.660 --> 00:13:38.850
jared: Nice cool helps

121
00:13:42.600 --> 00:13:42.900
Yeah.

122
00:13:44.610 --> 00:13:47.550
jared: Yeah, I'm not sure that there's a way to like switch case in like

123
00:13:48.720 --> 00:13:53.280
jared: Do you mean like you kind of do like a Mongo aggregation and feel look up

124
00:13:53.910 --> 00:14:09.810
Ryan Mehta: Or yeah, like a join or like populate instead because then instead of issuing to queries to the database to issue one query which would be like a little bit more performant. But it's probably also a little bit more complicated. As far as the graph well queries, though. Like, how do you

125
00:14:11.430 --> 00:14:16.560
jared: Um, the thing is the gardens aren't actually on our database schema.

126
00:14:19.680 --> 00:14:21.150
jared: It's the kind of the other way around.

127
00:14:24.570 --> 00:14:26.490
jared: But you can ask for

128
00:14:30.720 --> 00:14:34.980
jared: Potentially, you could in a garden resolve.

WEBVTT

1
00:00:00.900 --> 00:00:07.890
Ryan Mehta: Yeah, when when you authenticated user that you should be global any component on the application should be able to access that user.

2
00:00:08.849 --> 00:00:19.470
Ryan Mehta: Same a theme, if you have like mode and dark mode you want all of your components to be able to figure out which theme is currently selected so they can display themselves correctly.

3
00:00:20.820 --> 00:00:30.390
Ryan Mehta: And preferred language, same sort of thing. If you choose English your component needs to know that so knows what text to display. If you choose Spanish your component also needs to know that.

4
00:00:31.590 --> 00:00:35.040
Ryan Mehta: Um, so these are some examples of things that we might want to store globally.

5
00:00:38.730 --> 00:00:47.100
Ryan Mehta: Our traditional story with React is we create components those components take props.

6
00:00:48.570 --> 00:00:57.690
Ryan Mehta: And whoever uses that component like this home component has to pass a prop to The Hacker explicitly this seem familiar

7
00:01:03.090 --> 00:01:06.960
Ryan Mehta: So component takes the prop another component passes the prop.

8
00:01:09.630 --> 00:01:16.560
Ryan Mehta: So here is the header receiving the prop. Here's the home component passing the prop to header.

9
00:01:18.390 --> 00:01:23.580
Ryan Mehta: That's good. Everyone standard. Okay. Then there's a traditional story.

10
00:01:25.710 --> 00:01:41.550
Ryan Mehta: With the context API. We have an alternative to passing data via props, you can still use props. If you're using the context API. But you no longer have to use props, you no longer have to explicitly pass data to other components.

11
00:01:44.460 --> 00:01:48.390
Ryan Mehta: So what that looks like. First step is creating a context.

12
00:01:49.710 --> 00:01:55.800
Ryan Mehta: Like this, a context is a bucket where we're going to put global data into

13
00:01:57.480 --> 00:02:00.990
Ryan Mehta: And this bucket will be able to be accessed by any component

14
00:02:04.350 --> 00:02:25.830
Ryan Mehta: After we create our context up here on line three. We create a context provider. The context provider provide some context to all of its children. So line five through 13 we're constructing a context provider this context provider is going to provide some value to all of its children.

15
00:02:28.350 --> 00:02:31.410
Ryan Mehta: In this case, we're creating some state online six

16
00:02:33.720 --> 00:02:37.860
Ryan Mehta: And then we're providing that state to all of our children online nine

17
00:02:41.460 --> 00:02:45.240
Ryan Mehta: And then to use that context provider that we just created.

18
00:02:46.470 --> 00:02:57.690
Ryan Mehta: So here's that same example that we just had inside of our home component we wrap the header with our context provider and then the header can always grab

19
00:02:59.100 --> 00:03:00.690
Ryan Mehta: From that context.

20
00:03:01.830 --> 00:03:02.460
Like so.

21
00:03:03.600 --> 00:03:05.040
Ryan Mehta: So it's a little bit different.

22
00:03:06.360 --> 00:03:13.680
Ryan Mehta: In our traditional story I'll go back to that context provider and the second to so we can look at that code again.

23
00:03:15.000 --> 00:03:16.620
Ryan Mehta: In our traditional story.

24
00:03:17.670 --> 00:03:18.780
Oh, where's my

25
00:03:20.250 --> 00:03:20.580
Okay.

26
00:03:22.590 --> 00:03:25.440
Ryan Mehta: Our traditional story. We have a home component

27
00:03:29.040 --> 00:03:33.900
Ryan Mehta: And we have a child of our hub component our header component

28
00:03:36.630 --> 00:04:00.300
Ryan Mehta: If our home component wants to pass data down to the header, it needs to do so via props. Right. So it might pass some text down to the header. The home component is the one doing the passing right the home component gives the header. It's props. So the data is flowing from top to the bottom.

29
00:04:02.580 --> 00:04:05.310
Ryan Mehta: In our new story over here on

30
00:04:06.540 --> 00:04:10.320
Ryan Mehta: The left, the right, we still have a home component

31
00:04:13.980 --> 00:04:15.150
Ryan Mehta: Our home component

32
00:04:16.710 --> 00:04:18.570
Ryan Mehta: Is using this provider.

33
00:04:22.350 --> 00:04:27.060
Ryan Mehta: And the provider has another child the header.

34
00:04:28.950 --> 00:04:37.500
Ryan Mehta: The big difference here besides the syntax which you all will get used to this syntax eventually is the flow of the data.

35
00:04:39.480 --> 00:04:51.450
Ryan Mehta: Back over here. Again, the flow the data, the pump component passed the text to the header. In this case, the header goes and asks for some data.

36
00:04:53.100 --> 00:04:58.710
Ryan Mehta: And up here, we have like our context, right, our little bucket of context.

37
00:05:00.930 --> 00:05:03.120
Ryan Mehta: So online five, you can see

38
00:05:04.410 --> 00:05:05.160
Ryan Mehta: The

39
00:05:07.290 --> 00:05:12.420
Ryan Mehta: Header component asking for data, it's no longer sent the data.

40
00:05:16.770 --> 00:05:35.580
Ryan Mehta: So it's like really the hardest part of getting through this context API stuff, besides just getting used to some of the new syntax is getting used to this flip in our react apps. We've gone from passing props components receiving data to compel minutes asking for data.

41
00:05:36.750 --> 00:05:56.940
Ron Yonker: If you kind of looks like the same as I'm setting some sort of prop or state you've passed in equal to this state, instead of doing that, you're just using the same restructuring and sitting equal to your custom book.

42
00:05:59.820 --> 00:06:02.880
Ryan Mehta: Yeah, totally accept this isn't a custom hook in this case.

43
00:06:03.870 --> 00:06:04.290
Ron Yonker: Okay.

44
00:06:04.380 --> 00:06:05.640
Ryan Mehta: This is a built in hook

45
00:06:07.920 --> 00:06:10.650
Ryan Mehta: This is saying like grab the global state.

46
00:06:12.540 --> 00:06:12.960
Does

47
00:06:15.420 --> 00:06:18.330
Jerud Moyer: So just quick question. If the car.

48
00:06:19.440 --> 00:06:26.790
Jerud Moyer: Sorry if the header is asking for context from that bucket way over there. What is the provider doing

49
00:06:28.440 --> 00:06:37.980
Ryan Mehta: The provider is telling when you go and ask for this context that provider is telling the header which context that it has access to

50
00:06:39.510 --> 00:06:42.570
Ryan Mehta: So the provider, because this providers here.

51
00:06:45.390 --> 00:06:56.430
Ryan Mehta: It's connected to some context. So when it goes in uses this context, some context, the providers like actually connecting the value so

52
00:06:57.570 --> 00:06:58.470
Ryan Mehta: Let's go back one.

53
00:07:00.870 --> 00:07:09.750
Ryan Mehta: The provider is actually the one that is putting this value into that bucket. So if you don't have the provider wrapping it there won't be anything in the bucket to grab from

54
00:07:11.880 --> 00:07:14.970
Ryan Mehta: So there's two sides right there's the context can

55
00:07:15.090 --> 00:07:15.360
Work.

56
00:07:17.250 --> 00:07:31.500
Ryan Mehta: In react, they call the context consumer, the person who reaches into the bucket to grab stuff. And there's the context provider. The person who's putting something into the bucket. You need both of those pieces, otherwise it won't work.

57
00:07:33.120 --> 00:07:34.440
Ron Yonker: Wha,

58
00:07:37.140 --> 00:07:41.250
Ryan Mehta: So yeah, back in our picture over here.

59
00:07:42.510 --> 00:07:45.510
Ryan Mehta: It's kind of deceptive because

60
00:07:46.800 --> 00:07:54.750
Ryan Mehta: The header is asking for the context, but the provider is the one who's putting something into that context box.

61
00:07:57.120 --> 00:08:03.060
Ryan Mehta: So you need this thing here. So there's something actually available in the box.

62
00:08:15.840 --> 00:08:16.380
Ryan Mehta: Okay.

63
00:08:17.790 --> 00:08:21.900
Annalise: And just to clarify, so the bucket in this context is our hook

64
00:08:24.360 --> 00:08:26.070
Ryan Mehta: Is this context.

65
00:08:26.130 --> 00:08:41.070
Ryan Mehta: Okay, which was created back over here. So this is constructing the bucket. Okay. And this is a component that we're creating that will put something into a bucket.

66
00:08:41.280 --> 00:08:42.780
Annalise: Okay. Okay. Thank you.

67
00:08:44.310 --> 00:08:55.620
ryan Diffenbaugh: Hey Ryan, is the provider just putting all the global state and the context bucket or is it putting whatever is requested by the child element into the bucket. So the header is requesting info.

68
00:08:56.040 --> 00:09:02.040
ryan Diffenbaugh: Does the private provider, then respond to that or it is the provided is always put whatever global data in the bucket.

69
00:09:02.280 --> 00:09:03.660
Ryan Mehta: It always puts whatever

70
00:09:03.690 --> 00:09:14.610
Ryan Mehta: Global data into the bucket. So in this case, it's putting these two things into the bucket text and set text because we have text in the bucket over

71
00:09:16.620 --> 00:09:20.430
Ryan Mehta: In our header were able to grab a text from the bucket.

72
00:09:27.810 --> 00:09:29.970
Ryan Mehta: All right, let's play around with these so we

73
00:09:30.420 --> 00:09:31.680
Ryan Mehta: In like real code.

74
00:09:31.740 --> 00:09:39.900
Ryan Mehta: So we can put everything side by side instead of in slides. Any questions, any last questions before we play with this and code.

75
00:09:45.180 --> 00:09:47.340
Brooke Perkins (she/her): I just need to see it a lot more

76
00:09:47.670 --> 00:09:48.150
Yeah.

77
00:09:49.230 --> 00:09:52.140
Ron Yonker: Make me understand it more than seeing it.

78
00:09:53.700 --> 00:09:57.360
Ryan Mehta: Totally. All right. Let's play around with some stuff.

79
00:09:59.820 --> 00:10:12.000
Ryan Mehta: Let's start off with, we're not going to write tests for our first little demo. Let's just play around with the provider. I am, however, going to make a few new directories for us to play in

80
00:10:13.290 --> 00:10:29.220
Ryan Mehta: I am going to make a hooks directory, kind of, we had this one yesterday. This will be where our custom hooks go and I am going to make a context directory. This is where we'll create our context and our context providers.

81
00:10:31.290 --> 00:10:34.950
Ryan Mehta: All right, let's make super

82
00:10:35.970 --> 00:10:41.040
Ryan Mehta: Simple app, kind of like our name tag app from

83
00:10:42.210 --> 00:10:42.990
Ryan Mehta: Last week,

84
00:10:46.560 --> 00:10:47.370
Ryan Mehta: We will have a

85
00:10:58.320 --> 00:11:00.270
Ryan Mehta: We will have a page.

86
00:11:02.010 --> 00:11:02.400
Ryan Mehta: On the

87
00:11:08.070 --> 00:11:08.700
No, Phil.

88
00:11:11.700 --> 00:11:12.750
Ryan Mehta: We will have a page.

89
00:11:14.940 --> 00:11:31.050
Ryan Mehta: On the page, we will have an input text input and under the text input we will type, would it will like display whatever we typed into the input. So if we type tie into the input underneath would have high

90
00:11:32.460 --> 00:11:33.180
Ryan Mehta: Missing good

91
00:11:35.520 --> 00:11:40.680
Ryan Mehta: We're gonna have we're gonna split this off into two components so we can kind of demo this global state.

92
00:11:42.090 --> 00:11:46.260
Ryan Mehta: Our first component is going to be our display component

93
00:11:48.060 --> 00:11:51.750
Ryan Mehta: Our second component is going to be our controls.

94
00:11:54.210 --> 00:12:02.910
Ryan Mehta: Both components are going to want to be connected to the same state. So they're going to both be wrapped by a provider and have access to the same context.

95
00:12:04.680 --> 00:12:09.030
Ryan Mehta: So over here we will have a context bucket.

96
00:12:10.440 --> 00:12:17.820
Ryan Mehta: Inside of the context bucket. We're going to have text and a set text function.

97
00:12:22.770 --> 00:12:31.200
Ryan Mehta: And then we both of these components will ask the context provider for some pieces of that context.

98
00:12:34.740 --> 00:12:34.980
Right.

99
00:12:37.380 --> 00:12:44.460
Ryan Mehta: Be how our app looks, let's start off by creating some presentational components.

100
00:12:45.990 --> 00:12:47.640
Ryan Mehta: Will call this our

101
00:12:50.250 --> 00:12:51.990
Ryan Mehta: What, what is this app called

102
00:12:52.500 --> 00:12:55.200
Annalise: Our title or title app.

103
00:12:56.700 --> 00:12:58.980
Ryan Mehta: Inside of title will have a display component

104
00:13:00.180 --> 00:13:03.780
Ryan Mehta: From this will be a function component of display.

105
00:13:05.010 --> 00:13:07.590
Ryan Mehta: It's going to receive no props.

106
00:13:09.120 --> 00:13:17.910
Ryan Mehta: In addition to our display component will actually fill in the valleys in a second, we're going to have our controls component

107
00:13:19.980 --> 00:13:25.740
Ryan Mehta: It's also going to receive no props. Both of these are going to ask the context.

108
00:13:30.120 --> 00:13:32.040
Ryan Mehta: For their information.

109
00:13:34.350 --> 00:13:36.120
Ryan Mehta: So that will be that one.

110
00:13:37.770 --> 00:13:41.130
Ryan Mehta: Okay, so we have these two components that we're setting up

111
00:13:43.230 --> 00:13:50.850
Ryan Mehta: Our display component of eventually is going to want to return an H1 you something some value in it.

112
00:13:52.890 --> 00:14:09.270
Ryan Mehta: Our controls component is eventually going to want to return an input type text for the value pull something and on change. It has to do something.

113
00:14:10.710 --> 00:14:14.160
Ryan Mehta: Right, we can write a little handle change function up here.

114
00:14:15.180 --> 00:14:24.420
Ryan Mehta: Where read the structure target off of the event. And then we went to actually make our change inside of this Campbell change function.

115
00:14:25.590 --> 00:14:28.260
Ryan Mehta: Does this kind of setup seem familiar ish

116
00:14:30.600 --> 00:14:31.050
Ryan Mehta: Okay.

117
00:14:32.250 --> 00:14:32.850
Ryan Mehta: Our

118
00:14:34.230 --> 00:14:47.340
Ryan Mehta: Our problem now is we actually want to get on the display side our text state and on our control side, we went to get our text state groups.

119
00:14:49.680 --> 00:14:55.800
Ryan Mehta: And we want to get our set text function from somewhere.

120
00:14:57.600 --> 00:15:03.600
Ryan Mehta: The only way to get this, since we're going to be setting up this global state is to create some context.

121
00:15:06.210 --> 00:15:15.330
Ryan Mehta: To get this information. So over my context holder. I'm going to create a title.

122
00:15:17.010 --> 00:15:18.090
Context.

123
00:15:19.530 --> 00:15:20.640
Ryan Mehta: J sex file.

124
00:15:22.620 --> 00:15:28.050
Ryan Mehta: And inside of this file. I am going to import react from

125
00:15:29.700 --> 00:15:30.120
Ryan Mehta: Yeah.

126
00:15:31.470 --> 00:15:33.420
Ryan Mehta: We're going to create

127
00:15:34.950 --> 00:15:36.210
Ryan Mehta: Title conthis stream mask.

313
00:41:51.870 --> 00:41:59.910
Ryan Mehta: File and at the same time, when you use FF play. This is a, like a command line tool that lets you

314
00:42:01.800 --> 00:42:05.790
Ryan Mehta: Like see what's on a webcam what you're currently streaming from a webcam.

315
00:42:06.930 --> 00:42:09.270
Ryan Mehta: So I'll run that and here is

316
00:42:10.290 --> 00:42:12.480
Ryan Mehta: What I see on my webcam right now.

317
00:42:13.650 --> 00:42:19.200
Ryan Mehta: So this has been outfitted to my webcam. Actually I think just, I guess, prove it a little bit more

318
00:42:22.020 --> 00:42:23.160
Ryan Mehta: Here's OBS

319
00:42:26.400 --> 00:42:28.620
Ryan Mehta: Same thing. It's kind of zoomed in a lot but

320
00:42:29.670 --> 00:42:31.350
Ryan Mehta: That's me on my webcam.

321
00:42:33.300 --> 00:42:35.280
Ryan Mehta: So I could string this to twitch if I wanted to.

322
00:42:35.610 --> 00:42:39.690
Annalise Murphy: We could get up and walk back since it's a body scan.

323
00:42:44.040 --> 00:42:45.270
Ryan Mehta: I'm behind my chair now.

324
00:42:47.640 --> 00:42:49.890
Ryan Mehta: I have wired headphones. I can't walk too far.

325
00:42:50.640 --> 00:42:51.300
Annalise Murphy: As awesome

326
00:42:54.630 --> 00:42:55.110
Ryan Mehta: All right.

327
00:42:56.220 --> 00:43:10.380
Ryan Mehta: So that is this. This is super cool at this point to this camera pipe, because you can really pass any function that you want to hear to, like, change the image and we're just happened to be doing these virtual background things

328
00:43:12.450 --> 00:43:16.980
Ryan Mehta: Any questions about either camera pipe or these like transformer functions.

329
00:43:29.460 --> 00:43:35.010
Ryan Mehta: All right one last transformer function to get to like our semi good result.

330
00:43:37.710 --> 00:43:40.230
Ryan Mehta: Here is my virtual background transformer

331
00:43:41.280 --> 00:43:55.980
Ryan Mehta: And the final result that I got to yesterday. I wasn't able to get it to have an image as the background. It's just like a back black background, but I don't think it's too much harder to put an image there.

332
00:43:57.570 --> 00:43:58.890
Ryan Mehta: We can see why in a second.

333
00:44:00.210 --> 00:44:11.100
Ryan Mehta: So kind of same setup as the last file we load our model and then we pipe from my real camera to my fake camera running each frame through this virtual background function.

334
00:44:12.240 --> 00:44:24.690
Ryan Mehta: And the left, we have our virtual background function we convert the brain to an image we get our body segmentation mask from that image and then we start iterating through the mask array.

335
00:44:26.040 --> 00:44:45.090
Ryan Mehta: This time, instead of always converting either to 55 or zero, we check if the mascot i is a non person then we convert the frame. All of the pixels to zeros. We black it out. Otherwise, we don't do anything we leave the pixels unchanged.

336
00:44:46.500 --> 00:44:56.040
Ryan Mehta: So at this point we there's the lacking black out a pixel or we keep the pixel unchanged, which gives us a black background.

337
00:44:57.360 --> 00:45:01.590
Ryan Mehta: So if I run the final product.

338
00:45:03.480 --> 00:45:09.750
Ryan Mehta: With FF play once the camera starts. This is me right now.

339
00:45:14.040 --> 00:45:14.520
blacked out

340
00:45:16.530 --> 00:45:19.710
Ryan Mehta: You can kind of also see that it wouldn't be too hard.

341
00:45:21.060 --> 00:45:21.450
Ryan Mehta: I mean,

342
00:45:22.980 --> 00:45:33.300
Ryan Mehta: It's not trivial. Maybe, but to change these zeros to something else like you could read another image here and then find the appropriate

343
00:45:34.200 --> 00:45:48.750
Ryan Mehta: pixel values inside of the original image that's what to put here using a similar strategy to right like instead of frame i times three. You do like frame i times three equals big image.

344
00:45:50.370 --> 00:45:51.690
Ryan Mehta: I times

345
00:45:53.970 --> 00:45:56.340
Ryan Mehta: And then big image I times three plus one.

346
00:46:01.590 --> 00:46:05.130
Ryan Mehta: So that's our little virtual background.

347
00:46:06.660 --> 00:46:11.250
Ryan Mehta: Thing. They're all open in OBS also I think I'm super zoomed in and lbs, though.

348
00:46:19.050 --> 00:46:23.790
Ryan Mehta: There's a lot of space here also and the model you can configure it.

349
00:46:24.870 --> 00:46:26.370
Ryan Mehta: Show that really quick.

350
00:46:28.320 --> 00:46:29.610
Ryan Mehta: I'm using like

351
00:46:30.870 --> 00:46:32.340
Ryan Mehta: Some sort of

352
00:46:33.360 --> 00:46:39.090
Ryan Mehta: Like configuration for speed. So I'm preferring speed over tightness of the mask and

353
00:46:41.790 --> 00:46:49.620
Ryan Mehta: Yeah over accuracy of the mask but you can config change these configurations, a little bit depending on the power of your machine.

354
00:46:50.790 --> 00:46:53.190
Ryan Mehta: To get a little bit tighter mask, you want to do.

355
00:46:59.100 --> 00:47:00.750
Ryan Mehta: Alright any questions.

356
00:47:12.990 --> 00:47:18.330
Ryan Mehta: So yeah, sorry that I didn't get to sequel, because I was working on this all day I got like wrapped up in it.

357
00:47:22.530 --> 00:47:29.670
Thomas Stussi: Did you were you upset with your position of the webcam. Now, with your new monitor that you needed to play with us.

358
00:47:30.390 --> 00:47:32.790
Ryan Mehta: Yeah, that was definitely on my mind. I've been

359
00:47:34.260 --> 00:47:42.060
Ryan Mehta: I've been putting my webcam because it's in such a bad have such a bad angle for anybody who hasn't seen lightning Google. It's a terrible

360
00:47:43.740 --> 00:47:46.380
Ryan Mehta: You're like, looking up at me. Oh, we

361
00:47:47.820 --> 00:47:49.230
Ryan Mehta: Need to stop this program.

362
00:47:50.670 --> 00:47:52.020
I can start my webcam.

363
00:47:58.620 --> 00:48:00.780
Ryan Mehta: Yeah, it's like straight up at me.

364
00:48:01.950 --> 00:48:03.810
Ryan Mehta: Because I've chosen to

365
00:48:04.830 --> 00:48:06.480
Ryan Mehta: Use vertical monitors.

366
00:48:07.260 --> 00:48:18.180
Ryan Mehta: Instead of side by side monitors, because I've been having neck pain, but I have been putting my webcam in between the two monitors here during our one on one. So at least I don't look so foolish.

367
00:48:22.920 --> 00:48:26.820
Patrick Wilson: They need to make monitors with webcams looking straight through the center of them.

368
00:48:27.570 --> 00:48:28.470
Ryan Mehta: Yeah, seriously.

369
00:48:31.110 --> 00:48:36.630
Thomas Stussi: They're developing under screen selfie cams for cell phones, so it's not too far off.

370
00:48:36.720 --> 00:48:37.350
Patrick Wilson: It'll happen.

371
00:48:41.070 --> 00:48:54.540
Ryan Mehta: I think my worst webcam experience Ron has the same webcam. I think on my Dell the webcam is at the bottom of the bezel instead of at the top of the bezel and it is the worst every time I type, you just see my big fingers.

372
00:48:55.980 --> 00:48:56.910
Front of the webcam.

373
00:49:04.140 --> 00:49:12.420
Ryan Mehta: Alright, well we could take a break, I guess, and come back and see if anybody has any final questions, but that's really all I really had for today.

374
00:49:13.770 --> 00:49:25.440
Ryan Mehta: By the way, well, let's take a break. Let's all come now I should say before because some people won't come back from a break. Next week, we're going to do react with TypeScript. So we'll play around with TypeScript and react.

375
00:49:27.480 --> 00:49:37.020
Ryan Mehta: The following week we're JB j is going to come and teach us about My back's they've been using MMA backs at their jobs. So they'll tell us about all this cool ma back stuff.

376
00:49:37.890 --> 00:49:50.910
Ryan Mehta: And then the following week for career track. This is you're going to already have started final projects at this point. But I think you'll have a little bit of time to dedicate the following week will do graph to well

377
00:49:52.350 --> 00:49:53.940
Ryan Mehta: Jared, who was

378
00:49:55.020 --> 00:49:59.850
Ryan Mehta: A TA for anybody have Jared as a TA there.

379
00:50:04.620 --> 00:50:05.130
Ryan Mehta: Was nobody

380
00:50:09.000 --> 00:50:09.360
Ryan Mehta: But

381
00:50:09.420 --> 00:50:10.590
Evan Andrewson: Richard was my kid.

382
00:50:11.010 --> 00:50:14.670
Ryan Mehta: Oh, nice. Okay, here does Evans TA

383
00:50:15.870 --> 00:50:17.160
Ryan Mehta: He will come back.

384
00:50:17.400 --> 00:50:18.000
Ryan Mehta: And

385
00:50:18.030 --> 00:50:21.360
Ryan Mehta: Tell us about graph que el he's been using graph que el at his job and

386
00:50:22.830 --> 00:50:33.330
Ryan Mehta: It's prepared to talk to us about it, which is nice. I thought it was a good one to have right as you're starting final projects because you could choose to use graph que el in your final project also just want to

387
00:50:38.730 --> 00:50:49.980
Ryan Mehta: Okay, so that's the schedule and then we'll be gone. November 20 that is our final presentation day for anybody that's not part of this cohort.

388
00:50:50.520 --> 00:51:01.710
Ryan Mehta: The following week is a holiday and we'll be back. December 4 there's a few people who have said that they would present on December 4 so we'll see materializes from that.

389
00:51:04.890 --> 00:51:14.160
Ryan Mehta: All right. Well, let's take a break. We can all come back and ask any questions that come up during a break. Let's come back at like 1105 or if you're done, you can also sign off.

390
00:51:17.850 --> 00:51:18.180
No.

0
jbj: Because it's just react so I'm gonna say console grocery input.

98
00:16:48.600 --> 00:17:03.510
jbj: It's gonna be a function and we're gonna return some stuff. So we're probably gonna want an input and it's probably going to be type Tex.

99
00:17:04.890 --> 00:17:05.700
jbj: And

100
00:17:06.900 --> 00:17:12.270
jbj: It needs a value. Right. Um, and it probably is going to want like an on change.

101
00:17:13.440 --> 00:17:14.580
jbj: Pretty typical

102
00:17:16.110 --> 00:17:20.130
jbj: Input function or input element so

103
00:17:21.420 --> 00:17:34.620
jbj: In this case for the for the unchanged, is we're gonna have a bargain. I have a ban on here too we can just use the react you state to manage the local state here. So we do like a constant grocery

104
00:17:36.360 --> 00:17:51.840
jbj: Item and set grocery item equals US state and you all are familiar with you stay cool. Okay, so we're just going to rationalize it as an empty string.

105
00:17:52.410 --> 00:18:08.310
jbj: The value here is going to be grocery item and then our unchanged can be. We have an event and we're gonna set the grocery item with the event target value.

106
00:18:09.330 --> 00:18:26.910
jbj: I'm relatively straightforward input button has state we're changing that state when the input changes and then we're going to have a button here. Um, and I did something wrong.

107
00:18:29.610 --> 00:18:30.990
jbj: Boop boop boop boop.

108
00:18:31.560 --> 00:18:32.040
Ryan Mehta: Around it

109
00:18:32.940 --> 00:18:33.480
jbj: What's that

110
00:18:35.490 --> 00:18:36.930
Ryan Mehta: You just need a fragment around it.

111
00:18:37.320 --> 00:18:38.250
jbj: Oh, thank you.

112
00:18:41.850 --> 00:18:48.000
jbj: Awesome. Um, so our but in like add grocery item.

113
00:18:49.320 --> 00:18:59.850
jbj: And our buttons gonna want and on click right so this is where we probably want to use our add grocery item function from our store.

114
00:19:00.390 --> 00:19:08.370
jbj: We have information here stored locally in grocery item, but we want to add that to our big grocery list.

115
00:19:08.790 --> 00:19:22.230
jbj: And so we want an on click that's going to call that add musher sorry I my, my initial example is like a mushroom collecting list. So if I say mushroom. I actually mean groceries.

116
00:19:22.680 --> 00:19:35.910
jbj: I'm just roll with it and we only eat mushrooms in my household, apparently. Um, so we'll want like a handle. Click that is going to call our ad grocery item function.

117
00:19:36.360 --> 00:19:53.280
jbj: But we need access to the store. Lucky for us, um, we made that really awesome hook a few minutes ago. I'm back over here. We made this us grocery store hook that allows us to access our store. Um, so that

118
00:19:53.940 --> 00:20:04.500
jbj: We can we can get that method off of the store. So if we want to say like constant grocery store equals us grocery store.

119
00:20:05.730 --> 00:20:15.060
jbj: Them, we now have access to the grocery store and we just have to notate off of grocery store because all it is is an object. So if we

120
00:20:17.610 --> 00:20:24.990
jbj: Let's put this like a handle, click and then cons handle click

121
00:20:27.030 --> 00:20:28.650
jbj: Equals

122
00:20:31.980 --> 00:20:36.360
jbj: Grocery store dot add

123
00:20:37.710 --> 00:20:39.660
jbj: grocery items that we call that

124
00:20:41.100 --> 00:20:42.180
jbj: At grocery item.

125
00:20:43.980 --> 00:20:45.720
jbj: Um, and then we pass in

126
00:20:47.190 --> 00:20:48.090
jbj: Grocery item.

127
00:20:52.620 --> 00:20:52.920
jbj: Yeah.

128
00:20:54.690 --> 00:20:56.700
jbj: Why is that not

129
00:20:58.260 --> 00:21:09.390
jbj: I spelled it wrong. I'm so Hannah click we notate off of the grocery store at grocery item we already wrote that method. It's going to add to the array.

130
00:21:09.870 --> 00:21:30.090
jbj: And because the state is mutable. We don't have to dispatch anything. We don't have to change anything. All we're doing is adding that grocery item to our grocery item in our store. Um, so that that's a, that's it. We've now we need to probably export this

131
00:21:32.010 --> 00:21:47.640
jbj: Who's portable across three input and add it to our app jazz. We can probably get rid of this. Let's, let's give ourselves a little heading here grocery list and grocery input.

132
00:21:49.170 --> 00:21:54.570
jbj: It's incredibly satisfying when it imports correctly. I'm just going to say that I'm

133
00:21:55.770 --> 00:22:03.390
jbj: In and that that's that. So let's open this up and see what we have going on MPM one start

134
00:22:04.740 --> 00:22:07.620
jbj: Let's hope it compiles and then I didn't do anything wrong.

135
00:22:09.270 --> 00:22:12.960
jbj: Dude, do that. I hold music

136
00:22:14.940 --> 00:22:16.350
jbj: And

137
00:22:18.630 --> 00:22:22.410
jbj: We have an error grocery stores.

138
00:22:37.380 --> 00:22:39.540
jbj: Think it might just be a

139
00:22:40.740 --> 00:22:57.570
jbj: Yes, it was just a default concert situation. I'm okay. I'm gonna pull this over here. So hopefully you can see sorry about all these so happens when you leave work for a couple hours, um,

140
00:22:58.710 --> 00:23:03.330
jbj: We have, we have an H1 and we have an input.

141
00:23:04.890 --> 00:23:10.440
jbj: And we can add things in here, but I'm not sure nothing's going to happen yet.

142
00:23:11.190 --> 00:23:36.630
jbj: If we if we console logged out grocery store, we would probably see that. So let's try that, before we make our list and see what happens. So in. How about in our grocery store on our or, let's see, actually, in our input. How about on our handle click we console log out the grocery store.

143
00:23:37.980 --> 00:23:54.540
jbj: And one thing to note about My back's is that when you console log in the store. It looks kind of funky so mob X includes a method called to JS that will just make your console logs look easier to see.

144
00:23:55.980 --> 00:23:58.080
jbj: Um, and

145
00:23:59.190 --> 00:24:06.810
jbj: Let's look at this is to see if see if we have our store. So let's see if we add an apple to our grocery item.

146
00:24:08.010 --> 00:24:08.460
jbj: I didn't

147
00:24:09.720 --> 00:24:16.500
jbj: I didn't refresh. So we have a bunch of crap that I wrote a second ago. And then we also have apple with an ID.

148
00:24:18.300 --> 00:24:23.730
jbj: If I refresh the page, it's going to clear the state. That's the wrong one, sorry. That's my work stuff.

149
00:24:26.340 --> 00:24:28.410
jbj: Local know my own

150
00:24:31.530 --> 00:24:35.190
jbj: What is create racked up is that 3000 yes I'm

151
00:24:38.910 --> 00:24:41.430
jbj: If we apple

152
00:24:43.980 --> 00:25:07.140
jbj: We have that one item in our array like that. So, um, if we want to actually see that on the page, let's create our list, which is a pretty straightforward list component. Um, so we want to construct grocery list.

153
00:25:10.110 --> 00:25:16.350
jbj: And then we're probably gonna turn some stuff maybe a UL

154
00:25:17.610 --> 00:25:24.210
jbj: And then here we probably want to iterate through the array in grocery store.

155
00:25:25.200 --> 00:25:36.600
jbj: So we're probably going to want to use a map function where we map through that array, and we return an Li. Um, so we can do that in here.

156
00:25:37.290 --> 00:25:53.310
jbj: But we probably need to get access to that grocery store first. So let's do a constant grocery store. He pulls us grocery stores not imported again and not important. Weird.

157
00:25:54.450 --> 00:25:57.240
jbj: I'm going to do that without a require

158
00:25:59.580 --> 00:26:00.720
jbj: Create Aaron.

159
00:26:03.090 --> 00:26:03.750
jbj: Groceries.

160
00:26:21.960 --> 00:26:22.470
jbj: Import

161
00:26:25.980 --> 00:26:32.730
jbj: Okay, so we can map through this and here we're going to take our grocery store dot nap or actually grocery store.

162
00:26:33.750 --> 00:26:40.470
jbj: grocery items dot map because we are actually iterating or grocery less radio reading through the grocery list.

163
00:26:42.300 --> 00:26:44.430
jbj: grocery lists dot map.

164
00:26:45.510 --> 00:26:49.290
jbj: And, for he item.

165
00:26:52.650 --> 00:26:54.360
jbj: We are going to return.

166
00:26:55.680 --> 00:26:56.490
jbj: An Li

167
00:26:58.110 --> 00:27:07.770
jbj: And ally is going to want to have a key. And that can be item.id because we gave the item an ID.

168
00:27:08.940 --> 00:27:15.990
jbj: So react will be happy with that. And then inside there. We're going to do item dot

169
00:27:17.190 --> 00:27:20.100
jbj: Grocery item for the name

170
00:27:21.810 --> 00:27:41.010
jbj: Yeah. And then that's going to give us our list that's pretty simple. Um, save it and let's export this export default grocery list. Um, and let's add that to our app.

171
00:27:42.510 --> 00:27:53.160
jbj: Gross high typing grocery lists. Okay. Alright, so this, this could work so

172
00:28:00.150 --> 00:28:04.020
jbj: Alright, so we have our grocery list here. Let's add

173
00:28:05.160 --> 00:28:05.850
jbj: An apple

174
00:28:07.170 --> 00:28:14.460
jbj: Okay, so we're seeing it in the store, but we're not seeing it here yet. Let's see. How about

175
00:28:15.480 --> 00:28:16.290
jbj: Banana.

176
00:28:17.490 --> 00:28:25.650
jbj: Alright, so it's clearly updating the store, but we're not getting our list here. Um, the reason why we're not getting our list there.

177
00:28:26.130 --> 00:28:38.280
jbj: Is because we haven't made our component observe the store yet. So the component isn't looking at the store to see if the State has changed. So we have to do that work.

178
00:28:38.970 --> 00:28:52.740
jbj: On list, we have to wrap this in the US in the US provider hook that's given to us by the mob X react package. So we're actually going to wrap our return

179
00:28:54.810 --> 00:28:58.170
jbj: And it is

180
00:29:00.120 --> 00:29:01.410
jbj: A call that

181
00:29:03.420 --> 00:29:20.790
jbj: And then we'll give it us observer pulled that in. So what that does is it now wraps everything that you're returning from this component in this observer function. So, this function now knows to look at the store.

182
00:29:22.350 --> 00:29:34.110
jbj: For for updates. So whenever you update the store this component should now react to it and it does. So we have our

183
00:29:35.310 --> 00:29:36.420
jbj: Our lists.

184
00:29:37.800 --> 00:29:45.810
jbj: And it's adding and that's, that's it. And we can add a remove button on our

185
00:29:48.510 --> 00:29:57.300
jbj: On here if we want to just complete the situation. So in our UL we can add a button.

186
00:30:02.760 --> 00:30:10.020
jbj: I'm that says maybe like remove item and then that button can get an on click

187
00:30:11.460 --> 00:30:14.490
jbj: That I'm

188
00:30:15.540 --> 00:30:29.340
jbj: Calls the grocery store. Remove item function and we give it the or I'm sorry, we give it the item ID. Um, so

189
00:30:30.900 --> 00:30:31.800
jbj: I don't miss not

190
00:30:35.760 --> 00:30:39.270
jbj: Probably want to do that inside the return statement. Yes.

191
00:30:40.680 --> 00:30:41.070
jbj: Hold on.

192
00:30:42.300 --> 00:30:43.920
jbj: Things happened when I saved.

193
00:30:45.480 --> 00:30:46.680
jbj: It moved things

194
00:30:55.620 --> 00:31:04.890
jbj: There we go. Cool. Um, so now we have an airline that has the name, and it's going to have a button next to the name that says remove item.

195
00:31:05.970 --> 00:31:14.070
jbj: So that we can now hopefully use the remove item function from the store. So Apple

196
00:31:15.420 --> 00:31:20.910
jbj: And pear. We don't actually want pair. So, oh, we can break it.

197
00:31:24.600 --> 00:31:25.710
jbj: breaking stuff is fun.

198
00:31:26.850 --> 00:31:30.240
jbj: I'm remove grocery item I named this wrong.

199
00:31:33.900 --> 00:31:34.560
jbj: Debugging.

200
00:31:36.030 --> 00:31:36.900
jbj: It's a good time.

201
00:31:39.330 --> 00:31:54.750
jbj: Let's try that again. Apple and then we remove it and it's gone. Um, so that is the basics of mob X. I really enjoy using it because I think it is incredibly simple and straightforward.

202
00:31:57.060 --> 00:32:12.690
jbj: Obviously, you can do a lot more with it when you get into more like intricate details in the store and you have more. I mean, I have a store that probably has like 14 or 15 different methods on it that does a ton of stuff to

203
00:32:13.500 --> 00:32:25.530
jbj: To the page. I'm working on. I work on a search results page that involves a very detailed filtering system. So we have a whole list of filter facets on one side.

204
00:32:26.040 --> 00:32:31.440
jbj: It's a car sales website. So it's like pricing make model and color and all that stuff.

205
00:32:31.800 --> 00:32:41.910
jbj: And I need some way when I reload the page to make sure that the state of all of those buttons and sliders is reflecting the query that was just

206
00:32:42.300 --> 00:32:46.380
jbj: Run. So we pull information out of the programs and then it sets.

207
00:32:46.860 --> 00:32:56.940
jbj: tons of different functions in my store that will then make sure that, like if a user had selected a hybrid car when they refresh. They're still selecting a hybrid car.

208
00:32:57.540 --> 00:33:06.240
jbj: So it can get really detailed and intricate, but the foundation of it is still I think incredibly simple because you're just working with very basic functions.

209
00:33:07.740 --> 00:33:12.630
jbj: So that is the bulk of what I wanted to demo and talk about and I wanted

210
00:33:12.990 --> 00:33:21.870
jbj: Instead of you listening to me talk for a really long time. I was hoping that we could take the rest of time to answer any questions. Let's see if you have any thoughts about stuff.

211
00:33:22.140 --> 00:33:30.330
jbj: And then actually you all like spin up a repo and make your own little app and see if you can get. My back's running on your own.

212
00:33:32.310 --> 00:33:33.180
jbj: So,

213
00:33:34.260 --> 00:33:46.140
jbj: To that end, I'm going to stop sharing my screen so that I can see you again because it's really weird to stare at a computer and talk to people and not see them at all.

214
00:33:47.940 --> 00:34:00.180
jbj: So, oh hi everyone again. It's really nice to see you. Um, so yeah, I wanted to like open it up, see if you have any questions and thoughts. If you're like, That sounds awesome. Or that looks really dumb. Um, I want to know what you think.

215
00:34:03.900 --> 00:34:19.230
Ben Waples: Looks. Hello. Hi. Thank you. That was really good. I'm loving seems awesome. I was wondering if like you've come across anything any issues with the state being mutable instead of just like creating a new state every time, like with Redux

216
00:34:20.160 --> 00:34:28.470
jbj: Yeah, um, I have not had issues with that. I think that that is obviously a fear of a lot of people, which is why Redux is a thing.

217
00:34:28.800 --> 00:34:42.780
jbj: Um, but I think that because it's such a simple kind of like pure in out function. It's like you have your old seat. You have your new state and you're fine. And you write tests, right, like you have your tests to make sure that your state is what it's supposed to be.

218
00:34:43.920 --> 00:34:59.790
jbj: But I have not personally run into any issues with that. I would say the one thing that is challenging about mob X versus Redux is that the mob X developer tools are not as robust as the Redux dev tools. Um, it's, it's just not as good.

219
00:35:00.630 --> 00:35:10.830
jbj: But also I haven't had to use them as much because of the fact that I'm just like resetting up of value. Does that make sense.

220
00:35:19.530 --> 00:35:21.570
Annalise: I kind of feel like, where's it's been129
00:14:40.440 --> 00:14:41.400
jared: I suppose

130
00:14:43.980 --> 00:14:48.480
jared: Instead of having an owner, kind of like branch grafters over

131
00:14:48.570 --> 00:14:51.000
jared: That you could populate or do a look up

132
00:14:53.460 --> 00:14:56.670
jared: Here and it would be less database calls

133
00:14:58.440 --> 00:15:03.750
Ryan Mehta: Right. But then you kind of don't know that you want the owner also

134
00:15:04.110 --> 00:15:08.790
Ryan Mehta: And readiness resolve or right you don't know that until you have, I can't. This resolved or

135
00:15:09.240 --> 00:15:10.980
jared: Right. So if you're only grabbing

136
00:15:12.120 --> 00:15:13.320
jared: Like name and type

137
00:15:14.550 --> 00:15:25.650
jared: It will be much quicker quicker goal. So that gets the onus gets put on the client. And if they have little more transparency, then maybe you can kind of work your way around it, but it's a very like

138
00:15:26.910 --> 00:15:29.160
jared: Choose your own adventure type API.

139
00:15:31.350 --> 00:15:32.340
Ryan Mehta: Cool. Thank you.

140
00:15:39.420 --> 00:15:41.850
jared: Yeah, so do

141
00:15:42.960 --> 00:15:45.300
jared: And there's also some cool stuff.

142
00:15:46.710 --> 00:15:47.310
jared: Let's see.

143
00:15:48.420 --> 00:15:48.720
Here.

144
00:15:50.190 --> 00:15:50.760
jared: So,

145
00:15:52.350 --> 00:15:56.820
jared: Rest API. Hey, I guess you could probably still do it this way. I'm

146
00:15:58.050 --> 00:16:00.150
jared: In a REST API, but

147
00:16:10.260 --> 00:16:15.150
jared: You can add arguments on fields as well, which is kind of neat.

148
00:16:17.640 --> 00:16:18.870
jared: And not just to

149
00:16:20.730 --> 00:16:21.540
See

150
00:16:27.720 --> 00:16:29.100
jared: Here I'm going to ask for a

151
00:16:30.540 --> 00:16:31.350
jared: Paging

152
00:16:33.000 --> 00:16:33.720
jared: Offset

153
00:16:43.380 --> 00:16:43.830
jared: Tool.

154
00:16:45.660 --> 00:16:48.480
jared: So need shed. There's a number of tools.

155
00:16:51.570 --> 00:16:54.210
jared: So if you have a shed that's got like main tools.

156
00:16:56.130 --> 00:16:59.370
jared: But you don't and you only want the first whatever

157
00:17:01.140 --> 00:17:01.680
jared: You

158
00:17:24.120 --> 00:17:29.580
jared: Different arguments are things like here, I'm doing paging but you could also

159
00:17:32.760 --> 00:17:39.330
jared: If you wanted only tools by certain names, you could add more arguments on on every single field.

160
00:17:40.530 --> 00:17:43.050
jared: You can continue to specify

161
00:17:45.330 --> 00:17:46.440
jared: Exactly what you want.

162
00:17:48.090 --> 00:17:54.210
jared: Which is kind of neat. We use it for paging we use it for retrieving media so

163
00:17:55.620 --> 00:18:11.220
jared: There's no media in these models. But say you have an event and you got an array of media objects on there. And if you want to return a bunch of media objects that can be quite expensive. So you can eat event and then page only one media on your return

164
00:18:12.570 --> 00:18:16.020
jared: Kind of data, which is definitely helping us out a lot. And that's pretty cool.

165
00:18:18.660 --> 00:18:26.400
jared: So obviously you can add whatever kind of arguments that you want in these main results that are in your queries and mutations.

166
00:18:28.590 --> 00:18:29.160
jared: But

167
00:18:38.670 --> 00:18:39.600
Evan Andrewson: Quick question.

168
00:18:40.920 --> 00:18:46.080
Evan Andrewson: What what actual piece of the shed resolve others is the resolve.

169
00:18:49.800 --> 00:18:55.710
Evan Andrewson: Is like the whole file resolve it, or is it the object online seven

170
00:18:57.030 --> 00:19:00.210
jared: So each of these kind of resolve errors.

171
00:19:01.920 --> 00:19:06.750
jared: makes its way into queries in each one of these as a result.

172
00:19:08.070 --> 00:19:12.360
jared: Result basically meaning, just like a function that's doing some work and returning data.

173
00:19:14.520 --> 00:19:16.110
jared: These are also results.

174
00:19:24.270 --> 00:19:24.990
jared: I'm doing

175
00:19:28.590 --> 00:19:29.040
jared: So,

176
00:19:30.720 --> 00:19:37.500
jared: This is kind of like an index for I'm combining all the resolve or some all the files. So we have resolves for queries.

177
00:19:50.400 --> 00:19:58.800
jared: In here basically any query mutation, which are like the top level queries so sheds is why

178
00:19:59.820 --> 00:20:01.290
jared: User is one

179
00:20:02.370 --> 00:20:11.370
jared: Garden is a top level resolve and those are query results. So this is me asking for information and then you have mutations, where you're

180
00:20:12.540 --> 00:20:16.410
jared: You're adding stuff or changing stuff in the database, which

181
00:20:17.850 --> 00:20:31.140
jared: You have to specifies me mutation. And you can do user create and know these are the kind of the ones that you can first type in when you're in the playground or you're, you know, you're querying the API from within your app.

182
00:20:32.970 --> 00:20:45.900
jared: And then you have resolved others that are on each type. So these like type resolved so user your garden Chen tool type revolvers, and those are the ones that I've put on the top, all these files.

183
00:20:47.880 --> 00:20:50.550
jared: In these have to do with

184
00:20:51.960 --> 00:20:52.920
jared: User types.

185
00:20:55.590 --> 00:21:00.000
jared: Those other files are basically this is a type querying

186
00:21:01.050 --> 00:21:02.010
jared: And these are the results.

187
00:21:03.120 --> 00:21:04.560
jared: That are that are here.

188
00:21:05.760 --> 00:21:07.410
jared: And kind of get put into

189
00:21:08.850 --> 00:21:13.980
jared: Either query and Morty mutation kind of object they get sent to app.

190
00:21:19.500 --> 00:21:22.710
jared: That help at all or is it still kind of confusing.

191
00:21:25.200 --> 00:21:25.770
Evan Andrewson: Yeah, totally.

192
00:21:29.670 --> 00:21:30.060
jared: It's

193
00:21:31.440 --> 00:21:32.850
jared: When I took over.

194
00:21:34.680 --> 00:21:48.360
jared: Kind of as the first and only back in debt for my company. We had a REST API. And my first job was basically to convert all of the rest endpoint into graph you well. And we did that, and you can do it and

195
00:21:49.950 --> 00:21:52.680
jared: You know it works and everything, but when you're

196
00:21:53.790 --> 00:22:00.360
jared: You know, if I was to redo it. I would structure things quite a bit differently and really think about them in more of a graph sense

197
00:22:02.160 --> 00:22:06.450
jared: You kind of got to structure your API quite a bit differently.

198
00:22:07.860 --> 00:22:15.390
jared: When you're building like a true graphically well API. So it's a it's a bit different to to think about

199
00:22:17.940 --> 00:22:21.810
jared: But I think it's pretty cool. I think it's it's powerful gives a lot of

200
00:22:22.920 --> 00:22:23.850
jared: A lot of power.

201
00:22:25.770 --> 00:22:29.670
jared: And it gives some transparency into like

202
00:22:30.840 --> 00:22:38.340
jared: What I can request and how I'm going to get it back. And what type of data. This is and I think it can make a lot of things easier and

203
00:22:39.420 --> 00:22:39.840
jared: Quicker and

204
00:22:41.460 --> 00:22:51.540
Mike Lambert: Have a quick question about what you were, you were just saying my experience with crack UL is usually just on little personal projects and things like that. Can I find myself when I'm

205
00:22:53.460 --> 00:22:58.680
Mike Lambert: When I'm creating a graph killer endpoint coming from rest that I just end up

206
00:22:59.760 --> 00:23:09.030
Mike Lambert: Creating a bunch of like little rest queries, I guess, and where I'm like, I'm going to create a user and an update of users to delete a user

207
00:23:10.290 --> 00:23:20.550
Mike Lambert: And wondering, what does that mean when you say you need to think about it a little bit differently. And do you have any advice in terms of like design patterns. Should we always just think about

208
00:23:22.590 --> 00:23:27.930
Mike Lambert: A resource, I guess, or, yeah. How do you think about it differently.

209
00:23:28.710 --> 00:23:43.590
jared: Yeah, so let's let's keep kind of with this example right now we have users garden shifting tools, a user can own any of these each garden can have, you know, multiple sheds and every shed can have multiple tools.

210
00:23:45.030 --> 00:23:46.410
jared: If you were in a

211
00:23:47.130 --> 00:23:55.470
jared: Arrest kind of API environment and you wanted to find all of the tools that he uses around

212
00:23:58.800 --> 00:24:05.250
jared: You could build out this separate endpoint, along with like, you know, I want to find out my tools and shows you tools.

213
00:24:07.530 --> 00:24:08.730
jared: And here.

214
00:24:09.840 --> 00:24:14.490
jared: Instead of building a new endpoint, you would either use tools or you would use user

215
00:24:15.990 --> 00:24:16.980
jared: To kind of do that.

216
00:24:18.840 --> 00:24:32.700
jared: And basically, you're trying to build in enough flexibility where you don't need to have so many endpoints that you can just gather the data off of each one of your like mean

217
00:24:33.960 --> 00:24:35.970
jared: preservers. So if I go over here.

218
00:24:40.920 --> 00:24:41.730
jared: User type

219
00:24:51.690 --> 00:24:53.430
jared: You would want to be able to

220
00:24:54.990 --> 00:25:03.600
jared: Either use just user to find your tools for just tool to find all the tools by user instead of

221
00:25:07.650 --> 00:25:08.340
jared: Bringing scramble

222
00:25:13.980 --> 00:25:22.680
jared: I think the big thing. I think comes down to adding the these extra like resolved so like Ryan, In the beginning was talking about.

223
00:25:33.090 --> 00:25:39.990
jared: populating data off of off the database Mongo is probably a little bit different.

224
00:25:43.170 --> 00:25:49.950
jared: Then what they're using now. I think they're just using sequel populate wouldn't be kind of equivalent to a look up

225
00:25:52.800 --> 00:25:54.210
jared: This is a bad example.

226
00:25:57.060 --> 00:25:58.230
Let's go to

227
00:26:29.220 --> 00:26:40.080
jared: Instead of trying to create a tool by user route and you're basically sending a user ID.

228
00:26:41.670 --> 00:26:43.080
Mike Lambert: Is totally what I do every

229
00:26:44.130 --> 00:26:44.370
Mike Lambert: Day.

230
00:26:45.300 --> 00:26:45.630
Yeah.

231
00:26:47.220 --> 00:26:49.110
jared: You're finding them by

232
00:26:50.700 --> 00:26:51.390
jared: Owner

233
00:26:54.150 --> 00:26:56.010
jared: You're doing user ID.

234
00:26:56.310 --> 00:26:59.790
jared: Right. And you're basically getting a list here.

235
00:27:00.960 --> 00:27:04.080
jared: So instead of doing something like that.

236
00:27:05.940 --> 00:27:07.650
jared: You would still

237
00:27:13.890 --> 00:27:17.700
jared: You would use your user results and you might even have off.

238
00:27:19.170 --> 00:27:28.650
jared: kind of trapped into this here, you can kind of search went on your own. If you have off and you have user in context, you could just return

239
00:27:32.070 --> 00:27:35.100
jared: We had like cons, get me.

240
00:27:42.570 --> 00:27:45.720
jared: And at this point, you wouldn't have any arguments.

241
00:27:47.610 --> 00:27:52.200
jared: You would get user kind of out of your author outs, you would just return

242
00:27:53.310 --> 00:27:53.880
jared: User

243
00:27:56.790 --> 00:28:09.390
jared: In from there, you could grab all your tools, based on user ID. So you wouldn't have to keep making routes get all tools by user get all sheds by user get all Gardens by user, you're still just using

244
00:28:12.270 --> 00:28:16.950
jared: Your user route and if here. You knew what your username was you could send your username.

245
00:28:18.210 --> 00:28:34.470
jared: You would get yourself and you would now be able to do the work of getting you getting all tools by you getting all sheds by you getting all Gardens by you, which would be three separate queries kind of from different

246
00:28:36.540 --> 00:28:39.990
jared: Collections and probably different files or different routes or whatnot.

247
00:28:41.970 --> 00:28:51.900
jared: So if you can kind of work with these types you can cut down on queries from different locations that are like still about referencing something else.

248
00:28:53.160 --> 00:28:54.240
jared: It was kind of a blab. Oh.

249
00:29:00.060 --> 00:29:01.380
jared: Yeah. Oh.

250
00:29:01.920 --> 00:29:02.760
Mike Lambert: Good, thank you.

251
00:29:04.920 --> 00:29:14.640
Ryan Mehta: Yes. Are you saying like, instead of thinking about routes and endpoints that you're creating. You're thinking about like entry nodes into the graph and then from the entry node you like collect all of your other data.

252
00:29:15.630 --> 00:29:18.630
jared: Yeah, basically, I'm

253
00:29:24.840 --> 00:29:25.710
jared: Social sobering.

254
00:29:36.330 --> 00:29:37.500
jared: Kind of crazy.

255
00:29:47.190 --> 00:29:52.860
jared: Now there's kind of this like weird looping pattern that you can do in graph key well

256
00:29:55.470 --> 00:30:01.080
jared: Where you can just continue to continue, continue to ask for different kinds of data in different ways.

257
00:30:02.670 --> 00:30:07.170
jared: Which sometimes good things. Sometimes it's terrible thing. This particular example would be terrible.

258
00:30:09.270 --> 00:30:12.240
jared: Just because it's going in a lot of circles.

259
00:30:14.580 --> 00:30:21.690
jared: But every node being a user chatter tool or a garden can kind of branch out and grab information about itself.

260
00:30:24.420 --> 00:30:33.270
jared: Which makes it like kind of cool to set up these types in these kind of like type or solvers in a certain

261
00:30:34.800 --> 00:30:38.760
jared: Kind of connected way you can get a lot of information with only having

262
00:30:40.470 --> 00:30:51.930
jared: Just a few few kind of query mutation endpoints, kind of like spreading out and like this node connected to node architecture which is you know that's what a graph is

263
00:30:54.510 --> 00:30:55.170
Tech speak.

264
00:30:59.670 --> 00:31:03.090
Ryan Mehta: Nice that query was hilarious. Can we see that again.

265
00:31:04.230 --> 00:31:06.720
jared: You can kind of just like going also

266
00:31:07.770 --> 00:31:17.820
jared: You're getting one user you finding the tools, who owns the tools which is you and then you're getting that owner sheds and then what tools are in there but name so

267
00:31:19.530 --> 00:31:36.540
Ryan Mehta: Terrible. Yeah, sorry. You just. Is this like live 14 the same thing that you basically got online 10 like 13 because all of all of the users tools existence. Some of their all of their shed so like the tools on 13 are the same as the tools on 10 right

268
00:31:37.770 --> 00:31:41.700
jared: They might not be actually. So if you're getting all of your tools.

269
00:31:43.890 --> 00:31:51.300
jared: And then obviously getting you again and then your sheds these tools might not be only your tools.

270
00:31:52.890 --> 00:31:55.890
jared: See I'm. GERALD. But now we figured out

271
00:31:57.060 --> 00:31:57.600
jared: You know,

272
00:31:58.770 --> 00:32:00.840
jared: In this particular shed.

273
00:32:07.980 --> 00:32:08.760
People

274
00:32:10.290 --> 00:32:21.720
jared: So like in the shed on the side and whatever garden. This is my tools here, but I know that Emily's also has tools in that particular shed so

275
00:32:23.700 -->WEBVTT

1
00:00:02.520 --> 00:00:14.490
Ryan Mehta: Yeah, so that is all that customers are one thing that you may notice right away is that this looks kind of similar to our containers that use hooks.

2
00:00:15.750 --> 00:00:21.150
Ryan Mehta: That's why we can slowly start migrating, a lot of the stuff that the container does into these custom hooks.

3
00:00:23.220 --> 00:00:32.700
Ryan Mehta: So naming convention all hooks. Start with the word us. So our hooks are all going to be used and then some word afterwards.

4
00:00:35.010 --> 00:00:49.590
Ryan Mehta: They manage their own state internally. So yesterday we said that you can't use hooks, except for in a React function component. The one exception to that is you can also use hooks inside of another hook instead of one of your custom hooks.

5
00:00:52.230 --> 00:00:57.630
Ryan Mehta: They have access to the React lifecycle. So you cannot see you sees effect inside of your hook.

6
00:00:58.920 --> 00:01:00.690
Ryan Mehta: And they export data.

7
00:01:03.960 --> 00:01:04.860
Ryan Mehta: Return data.

8
00:01:08.370 --> 00:01:15.120
Ryan Mehta: Um, here's how you would use that hook in a function component. So at the very top.

9
00:01:16.140 --> 00:01:26.730
Ryan Mehta: Of the function we utilize our hook us characters we get back a list of characters and then we can use that list of characters passing it to some other component and promoted to

10
00:01:29.970 --> 00:01:31.140
Ryan Mehta: clean things up a lot.

11
00:01:35.430 --> 00:01:37.380
Ryan Mehta: Any questions up to here.

12
00:01:42.900 --> 00:01:45.360
Ryan Mehta: Right, so we import the component and use it.

13
00:01:49.980 --> 00:01:54.810
Ryan Mehta: Okay that's it that's custom hex. That's all we're gonna be doing today. Cool.

14
00:01:56.310 --> 00:01:57.300
Ryan Mehta: Any questions.

15
00:02:03.990 --> 00:02:06.000
Ryan Mehta: All right, let's play with this stuff.

16
00:02:10.230 --> 00:02:11.430
Ryan Mehta: I have a little

17
00:02:12.870 --> 00:02:17.190
Ryan Mehta: Application started. Let me actually open

18
00:02:21.060 --> 00:02:21.750
Ryan Mehta: Repo

19
00:02:38.250 --> 00:02:40.230
Ryan Mehta: Alright, I believe I have a little

20
00:02:41.730 --> 00:02:42.270
Ryan Mehta: Yes.

21
00:02:45.780 --> 00:02:46.350
Ryan Mehta: Going

22
00:02:48.180 --> 00:03:03.090
Ryan Mehta: I didn't know why I was playing around with this, this person does not exist thing. So there's this this person does not exist, slash, slash image which will give you a random person image, but of a person that doesn't exist. So they must use some like

23
00:03:04.290 --> 00:03:08.280
Ryan Mehta: Image processing to create images of people that don't exist.

24
00:03:11.250 --> 00:03:22.680
Ryan Mehta: Anyways, so we have some person that doesn't exist randomly on the page. Every time I don't know. I don't know, was playing with that. But since funny to me at the time.

25
00:03:24.750 --> 00:03:29.400
Ryan Mehta: Okay, so we want to build a list of things application.

26
00:03:31.440 --> 00:03:39.960
Ryan Mehta: Just kind of like what you all did yesterday. I'm going to make sure that our application our list API also

27
00:03:40.710 --> 00:03:52.770
Ryan Mehta: Has some pagination stuff with it. So I'm going to use the brick and mortar the API, the brick and mortar the API gives us an array of characters, but it also tells us the total number of pages.

28
00:03:54.030 --> 00:04:00.660
Ryan Mehta: That we have and gives us some way to get to the next page. Page equals whatever page you want to go to

29
00:04:01.860 --> 00:04:08.130
Ryan Mehta: Somebody uses API because I know it has the pages and our character list.

30
00:04:09.150 --> 00:04:09.930
Ryan Mehta: Soon. Good.

31
00:04:11.520 --> 00:04:11.970
Okay.

32
00:04:13.830 --> 00:04:19.110
Ryan Mehta: So let's start off with the list page first

33
00:04:21.690 --> 00:04:24.720
Ryan Mehta: We're going to have a page.

34
00:04:26.700 --> 00:04:27.030
Should

35
00:04:28.110 --> 00:04:28.920
Ryan Mehta: Make this bigger

36
00:04:30.840 --> 00:04:31.800
Go here.

37
00:04:33.000 --> 00:04:33.690
clubs that

38
00:04:37.800 --> 00:04:38.850
Ryan Mehta: Have a page.

39
00:04:42.390 --> 00:04:50.340
Ryan Mehta: On this page, we're gonna have to start off with, let's say, an image and the character name.

40
00:04:51.660 --> 00:04:54.570
Ryan Mehta: Another image and the character name.

41
00:04:56.370 --> 00:04:59.550
Ryan Mehta: Will have our list of characters.

42
00:05:01.200 --> 00:05:02.010
Like this.

43
00:05:06.780 --> 00:05:10.140
Ryan Mehta: Etc. So for as many roses. We have characters.

44
00:05:11.610 --> 00:05:17.280
Ryan Mehta: We will call this component or individual character component A character.

45
00:05:21.180 --> 00:05:23.760
Ryan Mehta: Maybe character item. It's called a character item.

46
00:05:25.980 --> 00:05:30.540
Ryan Mehta: And then we'll have surrounding this thing a character list.

47
00:05:39.870 --> 00:05:40.290
So,

48
00:05:41.790 --> 00:05:52.410
Ryan Mehta: And then surrounding this whole thing like we've been doing, we will have our let's call it all characters.

49
00:05:55.350 --> 00:05:56.130
Ryan Mehta: Container

50
00:06:00.900 --> 00:06:01.680
Ryan Mehta: This look good.

51
00:06:03.030 --> 00:06:05.550
Ryan Mehta: So are all characters container will hold

52
00:06:06.570 --> 00:06:07.980
Ryan Mehta: Our character state.

53
00:06:10.620 --> 00:06:12.480
Ryan Mehta: And some loading state.

54
00:06:17.670 --> 00:06:23.700
Ryan Mehta: And let's actually finally start handling. Some of these errors. So an error piece of steak.

55
00:06:25.470 --> 00:06:27.930
Ryan Mehta: This kind of seemed like what you all been doing

56
00:06:28.980 --> 00:06:30.660
Ryan Mehta: This sort of setup. Okay.

57
00:06:31.680 --> 00:06:33.960
Ryan Mehta: So let's build this little application together.

58
00:06:36.600 --> 00:06:41.220
Ryan Mehta: And see how it works. I'm going to start off with our character item which is

59
00:06:43.710 --> 00:06:44.730
Ryan Mehta: I lost my mouse.

60
00:06:49.680 --> 00:06:53.820
Ryan Mehta: Which is a presentation or a component that displays an image and the name of a character.

61
00:06:55.260 --> 00:07:01.080
Ryan Mehta: So in my components directory. I'm going to create our characters.

62
00:07:02.310 --> 00:07:07.320
Ryan Mehta: Directory and that character item ASX file.

63
00:07:08.760 --> 00:07:13.110
Ryan Mehta: This will be a function component called character item.

64
00:07:14.220 --> 00:07:16.980
Ryan Mehta: Our character item is going to receive

65
00:07:18.090 --> 00:07:28.980
Ryan Mehta: Two things an image URL, which will be a string that is required and a name, the name of the character.

66
00:07:37.710 --> 00:07:40.920
Ryan Mehta: Well, the structure. These two things image URL.

67
00:07:44.370 --> 00:07:46.320
Ryan Mehta: Will put them inside of a figure

68
00:07:50.010 --> 00:07:57.870
Ryan Mehta: Our figure will have a big toxin with our characters name and it will also have an image.

69
00:07:59.580 --> 00:08:07.410
Ryan Mehta: Where the source is image URL and the alt is the name of the character.

70
00:08:10.260 --> 00:08:11.010
Ryan Mehta: That look

71
00:08:12.930 --> 00:08:13.350
Ryan Mehta: Good.

72
00:08:14.760 --> 00:08:18.930
Ryan Mehta: Cool. So this will be our character item each individual character will

73
00:08:19.950 --> 00:08:25.770
Ryan Mehta: Be represented by this, I am going to live that we don't actually need this cleanup thing.

74
00:08:26.820 --> 00:08:28.290
Ryan Mehta: I am going to

75
00:08:31.290 --> 00:08:32.940
Ryan Mehta: Create a snapshot test for

76
00:08:33.000 --> 00:08:34.320
Our character item.

77
00:08:39.930 --> 00:08:42.750
Ryan Mehta: And let's rename some of these things.

78
00:08:46.110 --> 00:08:46.410
Ryan Mehta: Okay.

79
00:08:47.520 --> 00:08:48.960
Ryan Mehta: Let's run these tests.

80
00:08:58.800 --> 00:09:03.210
Ryan Mehta: All right, we still have a little failure here. I think hopefully

81
00:09:04.860 --> 00:09:09.000
Ryan Mehta: Yeah. What, what went wrong here, would it would forget to do

82
00:09:14.400 --> 00:09:16.650
Jerud Moyer: Was to pass pass the props to character.

83
00:09:17.340 --> 00:09:21.480
Ryan Mehta: Exactly. Yeah. So even in our tests, we need to make sure that we pass

84
00:09:22.620 --> 00:09:33.030
Ryan Mehta: The appropriate props to kick dragon. It needs an image URL, we're in our tests, we can just make this up. It doesn't actually have to be able to fetch this URL. So I'm just gonna make something up like

85
00:09:35.400 --> 00:09:36.540
Ryan Mehta: And one of the

86
00:09:37.590 --> 00:09:38.340
Ryan Mehta: Flash.

87
00:09:41.940 --> 00:09:43.710
Ryan Mehta: And the name will be

88
00:09:45.270 --> 00:09:45.810
Ryan Mehta: More at

89
00:09:50.490 --> 00:09:58.380
Ryan Mehta: This point, we should update our snapshot and get passing tests without those errors anymore.

90
00:09:59.010 --> 00:10:12.690
Ryan Mehta: So make sure as you're going through this even we are snapshot testing, you still need to pass these props. If we look at our snapshots. We have our figure with our image and our fig caption looks perfect.

91
00:10:14.130 --> 00:10:18.780
Ryan Mehta: Okay, next component to build is our character list.

92
00:10:22.680 --> 00:10:27.570
Ryan Mehta: Our character list is also going to be a presentational components.

93
00:10:30.930 --> 00:10:37.770
Ryan Mehta: Our character list is going to receive one prop called characters, which is going to be an array of

94
00:10:40.620 --> 00:10:44.520
Ryan Mehta: It's going to be an array of objects. So we'll call it a shape.

95
00:10:45.810 --> 00:10:50.280
Ryan Mehta: Each object in that array is going to have an ID.

96
00:10:54.840 --> 00:10:56.700
Ryan Mehta: It's also going to have a name.

97
00:11:00.300 --> 00:11:02.010
Ryan Mehta: And an image URL.

98
00:11:05.730 --> 00:11:16.650
Ryan Mehta: And I flipped these in my last one. Some of that makes sure happened in the same order. We're going to need this ID, because we really want to use it for our key.

99
00:11:17.730 --> 00:11:21.420
Ryan Mehta: So I'm going to make sure that we have an ID when we pass it to the list.

100
00:11:23.280 --> 00:11:35.820
Ryan Mehta: Alright, we're going to return a UL will need to put something in that UL our character list gets our characters prop and we're going to iterate through this characters prop.

101
00:11:37.050 --> 00:11:40.950
Ryan Mehta: And construct at care or elements.

102
00:11:43.470 --> 00:11:57.510
Ryan Mehta: Array will map for characters for each character in the array will construct an Li, the key for our ally will be character.

103
00:11:59.070 --> 00:12:03.030
Ryan Mehta: ID. And then inside of the Li, we'll put our character.

104
00:12:08.520 --> 00:12:09.780
Ryan Mehta: Character item.

105
00:12:11.580 --> 00:12:20.970
Ryan Mehta: Our character item requires two props, the image URL and the name. So we'll pass an image URL.

106
00:12:24.690 --> 00:12:27.870
Ryan Mehta: We get our image URL from the individual character.

107
00:12:30.600 --> 00:12:33.180
Ryan Mehta: image URL. And we also need to pass it a name.

108
00:12:38.370 --> 00:12:46.800
Ryan Mehta: surpassing the two props that our character item requires to our character item in our list and then we will

109
00:12:49.980 --> 00:12:51.750
Ryan Mehta: Put our character elements here.

110
00:12:54.510 --> 00:13:04.290
Ryan Mehta: One shortcut that you can use if you don't want to pass these individually like this. So this is passing image URL and name oversteer.

111
00:13:05.460 --> 00:13:10.920
Ryan Mehta: Two things to know this is very different than doing this.

112
00:13:14.430 --> 00:13:18.930
Ryan Mehta: If I did something like this. Now I'm passing a single prop.

113
00:13:20.820 --> 00:13:30.450
Ryan Mehta: Called character, which is an object. So over on the right hand side I would no longer receive image URL, a name I would only be receiving

114
00:13:32.490 --> 00:13:33.060
Character.

115
00:13:34.530 --> 00:13:46.770
Ryan Mehta: Right, whatever is here on the left hand side of the equals is what the name of your prop that you're receiving is over here, the value of character would be an object with image URL and name.

116
00:13:48.300 --> 00:14:00.540
Ryan Mehta: If I'm expecting to if I have this on the right hand side. Then on the left hand side I need something like this. I need to pass both image URL and name here.

117
00:14:01.830 --> 00:14:04.050
Ryan Mehta: There is a little shortcut that you can take though.

118
00:14:05.880 --> 00:14:15.330
Ryan Mehta: Character right now is an object with image URL and name inside of it. You can actually spread that object. So when you do something like this.

119
00:14:17.940 --> 00:14:24.420
Ryan Mehta: React is smart enough to realize that this is an object. It's going to take the keys and that object.

120
00:14:25.470 --> 00:14:31.290
Ryan Mehta: And pass it as props, the key value pairs. So since our character is an object.

121
00:14:33.720 --> 00:14:43.080
Ryan Mehta: Level comment since character is an object with image URL some value and name.

122
00:14:46.200 --> 00:14:54.960
Ryan Mehta: Value reacted smart enough to realize that it needs to convert this object into image URL.

123
00:14:57.630 --> 00:14:58.260
Name.

124
00:15:04.440 --> 00:15:14.370
Ryan Mehta: So when you spread this characters like this into the component. It's changing the object into the proper react prop type notation.

125
00:15:15.570 --> 00:15:19.740
Ryan Mehta: So this is a shortcut. If you want if you don't want to pass the individual props.

126
00:15:20.550 --> 00:15:28.950
Adrian Simental: Ryan, if you want to change one of the props, like you would with a normal spread. Operator, can you after character put common name equals in a string.

127
00:15:30.360 --> 00:15:34.710
Ryan Mehta: You can't. So you don't do it after character you do after the curly brace.

128
00:15:36.210 --> 00:15:38.340
Ryan Mehta: We can change the name like so.

129
00:15:39.540 --> 00:15:40.590
Ryan Mehta: Its name would be string.

130
00:15:54.060 --> 00:15:55.230
Ryan Mehta: This component look good.

131
00:15:59.430 --> 00:16:02.670
Ryan Mehta: All right, let's snapshot test. This one also.

132
00:16:04.470 --> 00:16:05.790
Ryan Mehta: So I'm going to copy

133
00:16:11.310 --> 00:16:13.560
Ryan Mehta: This is our word character.

134
00:16:14.700 --> 00:16:15.360
Ryan Mehta: List.

135
00:16:19.830 --> 00:16:21.690
Ryan Mehta: And then let's just rename these things.

136
00:16:27.600 --> 00:16:28.200
Ryan Mehta: Save it.

137
00:16:29.280 --> 00:16:31.080
Ryan Mehta: We should get some sort of error.

138
00:16:34.050 --> 00:16:34.980
Ryan Mehta: Maybe not that one.

139
00:16:39.900 --> 00:16:44.010
Ryan Mehta: Do we forget to export our character list either know what is thistext.

128
00:15:41.040 --> 00:15:45.150
Ryan Mehta: So, so this is us creating this bucket over here.

129
00:15:46.500 --> 00:15:47.790
Ryan Mehta: We now have a bucket.

130
00:15:50.490 --> 00:15:54.960
Ryan Mehta: In addition to creating the bucket. We also want to create a title.

131
00:15:56.010 --> 00:15:58.410
Ryan Mehta: On text provider.

132
00:16:00.510 --> 00:16:04.620
Ryan Mehta: Our title context provider is going to take children.

133
00:16:10.350 --> 00:16:20.220
Ryan Mehta: Actually, I'm going to do this. I'm going to take a intermediate step before this. Okay, so we'll have our title context like this, we've created our bucket.

134
00:16:21.780 --> 00:16:25.620
Ryan Mehta: Back in app JS. I'm going to combine a few of these things.

135
00:16:26.730 --> 00:16:29.550
Ryan Mehta: So in app JS, we want to use

136
00:16:31.770 --> 00:16:34.410
Ryan Mehta: Our controls.

137
00:16:35.790 --> 00:16:37.770
Ryan Mehta: And our display.

138
00:16:45.000 --> 00:16:53.070
Ryan Mehta: But we want to connect our controls and display to a context to this bucket over here, give them access to it.

139
00:16:54.150 --> 00:16:57.600
Ryan Mehta: So we're going to import our title context.

140
00:16:59.370 --> 00:17:06.330
Ryan Mehta: And we're going to provide we're going to fill the context with some value.

141
00:17:07.440 --> 00:17:21.420
Ryan Mehta: Whatever we put into this value equals is what this display and this control will have access to this is us actually filling in this context bucket over here.

142
00:17:28.500 --> 00:17:35.310
Ryan Mehta: So let's just fill it in right now with an object with text that says hi there.

143
00:17:38.550 --> 00:17:42.240
Ryan Mehta: We're just going to fill the bucket with text that says hi there for now.

144
00:17:43.980 --> 00:17:52.020
Ryan Mehta: Back in our display. If we want to get the value of this context, grab the bucket, we can

145
00:17:53.250 --> 00:17:56.370
Ryan Mehta: Use a hook called us context.

146
00:17:58.770 --> 00:17:59.430
Make sure that

147
00:18:00.450 --> 00:18:02.400
You actually structures this correctly.

148
00:18:04.470 --> 00:18:15.720
Ryan Mehta: And then we provide the context, the bucket that we want to grab from in our case the bucket is called title context from the title contexts bucket. We want to get the text.

149
00:18:17.280 --> 00:18:19.260
Ryan Mehta: Value and display.

150
00:18:20.430 --> 00:18:21.540
That text value.

151
00:18:24.630 --> 00:18:33.210
Ryan Mehta: So this is the display asking for the value provided right here, the value that was added into the context bucket.

152
00:18:35.220 --> 00:18:37.110
Ryan Mehta: If we tried to run this application.

153
00:18:39.870 --> 00:18:41.340
Ryan Mehta: We should see

154
00:18:42.660 --> 00:18:43.110
Ryan Mehta: Where

155
00:18:46.200 --> 00:18:48.780
Ryan Mehta: We should see nothing. Okay, perfect.

156
00:18:52.740 --> 00:18:53.640
Ryan Mehta: Failed to build

157
00:18:55.980 --> 00:18:56.820
Ryan Mehta: Because

158
00:18:59.100 --> 00:18:59.370
Right.

159
00:19:05.790 --> 00:19:06.060
Now,

160
00:19:11.760 --> 00:19:12.330
Perfect.

161
00:19:14.970 --> 00:19:22.800
Ryan Mehta: Okay. So we see that little hi there over here, this hi there is coming from.

162
00:19:24.150 --> 00:19:24.720
Ryan Mehta: Here.

163
00:19:26.040 --> 00:19:34.380
Ryan Mehta: So we put hi there text hi there into our bucket. And then we're grabbing the text out of the bucket over here on the left hand side.

164
00:19:35.220 --> 00:19:42.210
Ryan Mehta: We're able to grab out of the bucket over on the left hand side because our display is a child of this provider.

165
00:19:42.930 --> 00:20:01.650
Ryan Mehta: To provider is providing the value every child of this provider child grandchild every ancestor of this provider has access to these values here. Another way to think about it is, every person, every ancestor of this title context provider.

166
00:20:02.670 --> 00:20:08.400
Ryan Mehta: Is implicitly being passed these as props and it can grab those props.

167
00:20:09.690 --> 00:20:17.940
Ryan Mehta: By using contest instead of like explicitly saying that you have these props, we have to ask for the props.

168
00:20:20.250 --> 00:20:20.730
Brooke Perkins (she/her): And you

169
00:20:21.840 --> 00:20:23.010
Brooke Perkins (she/her): Oh, I'm sorry. Go ahead. Run.

170
00:20:23.730 --> 00:20:28.140
Ron Yonker: I'm sorry. Okay, and would you mind showing the title context. Again, please.

171
00:20:31.950 --> 00:20:32.580
Ron Yonker: That's it.

172
00:20:34.920 --> 00:20:35.700
Ron Yonker: Yep, that's it.

173
00:20:41.100 --> 00:20:41.430
Brooke Perkins (she/her): So,

174
00:20:42.540 --> 00:20:45.720
Brooke Perkins (she/her): Just to double check. You do have to explicitly

175
00:20:47.670 --> 00:20:53.400
Brooke Perkins (she/her): Say the value and only what's in the value is being passed like only the text here.

176
00:20:53.970 --> 00:20:56.370
Ryan Mehta: All new the tech. Yeah, you can actually see

177
00:20:56.910 --> 00:21:00.120
Ryan Mehta: If we said like, let's call this thing bucket.

178
00:21:08.010 --> 00:21:10.140
Ryan Mehta: Just so we can see what's inside of their

179
00:21:11.820 --> 00:21:13.260
Ryan Mehta: Catalog in the bucket here.

180
00:21:17.640 --> 00:21:18.930
Let's clear the console.

181
00:21:20.790 --> 00:21:23.250
Ryan Mehta: So this is the bucket. It's an object.

182
00:21:24.630 --> 00:21:28.020
Ryan Mehta: Because we put an object here.

183
00:21:29.070 --> 00:21:32.850
Ryan Mehta: We did like text there. I

184
00:21:35.340 --> 00:21:39.060
Ryan Mehta: Bought all of this stuff would be in that same bucket now.

185
00:21:40.320 --> 00:21:43.200
Ryan Mehta: Our bucket has all three of those things.

186
00:21:46.860 --> 00:21:47.370
Brooke Perkins (she/her): Gotcha.

187
00:21:47.880 --> 00:21:48.930
Ryan Mehta: It gets a little bit crazy.

188
00:21:48.960 --> 00:22:04.680
Ryan Mehta: You don't actually have to even put an object here either. We could put the value could just be a number five, which case, our bucket itself. I don't know if this is going to get confusing is just five

189
00:22:08.220 --> 00:22:18.030
Ryan Mehta: So whatever we set value equal to is what bucket will be over here in our case are sending equal to an object, so we can have key value pairs put more than one thing.

190
00:22:19.230 --> 00:22:19.650
Ryan Mehta: In there.

191
00:22:21.150 --> 00:22:28.500
Brooke Perkins (she/her): And so it's probably do you can you have multiple buckets or just one bucket.

192
00:22:29.310 --> 00:22:36.930
Ryan Mehta: Can have multiple contexts and then pass like have multiple contexts providers in your app.

193
00:22:37.740 --> 00:22:40.140
Brooke Perkins (she/her): You can have multiple values in each bucket.

194
00:22:41.370 --> 00:22:48.330
Ryan Mehta: If you put, if you put a object in the bucket, then that's how we're kind of simulating multiple values of the bucket.

195
00:22:49.560 --> 00:22:49.920
Okay.

196
00:22:53.100 --> 00:22:56.850
Brooke Perkins (she/her): Oh, I'm sorry. I have so many questions about this. Go ahead. Emily's

197
00:22:57.090 --> 00:23:00.270
Annalise: Um, yeah, I was just okay so

198
00:23:01.500 --> 00:23:08.340
Annalise: With the bucket. Let's say it was very like over filled with values. Is there a way to like refactor.

199
00:23:09.540 --> 00:23:16.830
Annalise: The values of the bucket and then have it just, I guess. Yeah, called on from like line eight or something.

200
00:23:17.880 --> 00:23:23.070
Annalise: Or is it going to be a little temperamental about the sort of functioning, I guess.

201
00:23:24.660 --> 00:23:33.510
Ryan Mehta: Well, I guess it could be over filtered values, but we don't they wouldn't affect anything unless it's so big that it makes your app slow

202
00:23:33.690 --> 00:23:42.570
Annalise: I'm just saying, like, what if, what if you don't like aesthetically like the look of, like, here's some tax and then this thing and then this other thing. And then, and it's just this

203
00:23:43.440 --> 00:23:53.370
Annalise: jumble of a lot of code. I'm like, Is it possible to clean it up or would it just need to be like all through the bucket not manner.

204
00:23:55.740 --> 00:23:59.850
Ryan Mehta: Yeah, so like you're saying if this was super long, long line.

205
00:24:00.120 --> 00:24:02.940
Ryan Mehta: Yeah. Well, we could say like

206
00:24:04.470 --> 00:24:06.570
Ryan Mehta: Rocket cause. OK.

207
00:24:07.830 --> 00:24:08.160
Annalise: OK.

208
00:24:09.000 --> 00:24:11.460
Ryan Mehta: And then pass this here.

209
00:24:13.680 --> 00:24:15.720
Ryan Mehta: So you can kind of make it a little bit.

210
00:24:16.320 --> 00:24:17.100
Ryan Mehta: More nicer.

211
00:24:17.400 --> 00:24:21.690
Ryan Mehta: Okay. You could also have multiple contexts and

212
00:24:24.360 --> 00:24:28.620
Ryan Mehta: Like split up your values that way between a bunch of different contexts.

213
00:24:28.980 --> 00:24:30.330
Okay, thank you.

214
00:24:33.480 --> 00:24:35.400
Patrick Wilson: And I'm guessing we can have a function in there too.

215
00:24:36.930 --> 00:24:37.320
Ryan Mehta: Yep.

216
00:24:39.060 --> 00:24:41.010
Ryan Mehta: That's going to be the next thing that we add

217
00:24:43.290 --> 00:24:48.930
Adrian Simental: And just to clarify on 13 and 14 of those file names are those function names.

218
00:24:50.280 --> 00:24:50.970
Ryan Mehta: These things

219
00:24:51.300 --> 00:25:00.390
Adrian Simental: Is it getting display the file like can access the context in that entire flight alone. Look, we're just inside the display.

220
00:25:01.170 --> 00:25:03.720
Ryan Mehta: Just inside of the component

221
00:25:04.920 --> 00:25:06.090
Ryan Mehta: Because this was getting just a

222
00:25:06.090 --> 00:25:14.580
Ryan Mehta: Component this display is the default export of components. So you only really have access inside of the component

223
00:25:15.750 --> 00:25:26.610
Adrian Simental: Okay, if we had two components in the display file, would we have to reference them separately or can we reference an entire file and use the context of the entire file and multiple components.

224
00:25:27.480 --> 00:25:29.760
Ryan Mehta: If you had multiple components in the file.

225
00:25:31.080 --> 00:25:33.240
Ryan Mehta: You would have to make when you use that other

226
00:25:33.240 --> 00:25:34.920
Adrian Simental: Component of display.

227
00:25:35.220 --> 00:25:35.760
To

228
00:25:37.680 --> 00:25:40.740
Ryan Mehta: Now display to would have access

229
00:25:41.490 --> 00:25:47.340
Adrian Simental: There's no way to just like go oh I want this entire file that have access to the conduct.

230
00:25:47.730 --> 00:25:50.310
Ryan Mehta: Well, it's not by file that's why

231
00:25:53.550 --> 00:25:57.570
Ryan Mehta: Yeah, you can't you can't have you can't use context outside of a component

232
00:25:59.730 --> 00:26:01.800
Greg Mall: So with like children of display.

233
00:26:02.130 --> 00:26:03.840
Greg Mall: Have access to that.

234
00:26:04.200 --> 00:26:06.210
Ryan Mehta: Children have display would have access to

235
00:26:06.210 --> 00:26:06.480
It.

236
00:26:07.500 --> 00:26:15.510
Ryan Mehta: I mean, you could remove this slide and say that display to has access to the context, but because you don't have display on the app.

237
00:26:15.840 --> 00:26:25.860
Ryan Mehta: Like you're not putting it anywhere. It's never going to be rendered in your ways. So it may have access to the context, but it's not being drawn on the screen. So it's not doing anything.

238
00:26:26.940 --> 00:26:37.620
Ron Yonker: Okay, and why, why does it work this way instead of just passing it into the component whenever you're calling it in app.

239
00:26:39.270 --> 00:26:42.660
Ryan Mehta: Like, why not just pass the text to display.

240
00:26:43.650 --> 00:26:44.070
Yeah.

241
00:26:45.090 --> 00:26:45.600
Ryan Mehta: You could

242
00:26:45.660 --> 00:26:46.740
Ryan Mehta: You could totally do that.

243
00:26:46.770 --> 00:26:47.160
Ron Yonker: You could

244
00:26:47.610 --> 00:26:49.710
Ryan Mehta: Totally do something like hi there.

245
00:26:50.910 --> 00:26:53.580
Ryan Mehta: And then he would get your text.

246
00:26:55.350 --> 00:26:59.220
Ryan Mehta: Like, so this is just using normal props at that point.

247
00:27:03.540 --> 00:27:05.400
Ryan Mehta: The big advantage of this is that

248
00:27:07.080 --> 00:27:13.830
Ryan Mehta: Let's say that you wanted to pass text, not to display, but to one of displays. Great, great, great grandchildren.

249
00:27:15.840 --> 00:27:20.220
Ron Yonker: Okay, so that's why yeah for question I was going to ask.

250
00:27:23.250 --> 00:27:24.960
Brooke Perkins (she/her): We, I'm sorry. Can you say that again.

251
00:27:25.980 --> 00:27:26.820
Ryan Mehta: Yeah, so

252
00:27:26.880 --> 00:27:28.380
Ryan Mehta: In the traditional story.

253
00:27:29.550 --> 00:27:45.000
Ryan Mehta: We're, we're passing props. Let's say we had some app, it would be hard to write this app because it would take a lot of time. But let's say we had an app that had a child display.

254
00:27:46.740 --> 00:27:48.930
Ryan Mehta: And then display had another child.

255
00:27:51.750 --> 00:27:59.250
Ryan Mehta: Whatever the this play her and it had another child.

256
00:28:00.960 --> 00:28:01.740
Ryan Mehta: Called title.

257
00:28:04.260 --> 00:28:10.770
Ryan Mehta: Let's say title was defined way up here in app. So App had the title value.

258
00:28:12.750 --> 00:28:27.390
Ryan Mehta: And it wanted to pass that title to this title component, the only way that it would be able to do that is by passing it to display display would be responsible for passing it to display or and display or would pass it to title.

259
00:28:29.460 --> 00:28:40.860
Ryan Mehta: If none of these components really need that title. It's just very cumbersome to like pass it to all these middle people these middle components, when really only this last component needs it.

260
00:28:41.880 --> 00:28:52.830
Ryan Mehta: With context, you have the exact opposite story. You don't have to pass it to display and then to display and then to title. Title would just ask for the title.

261
00:28:55.320 --> 00:28:58.530
Ryan Mehta: So it saves you the headache of passing props everywhere.

262
00:28:59.910 --> 00:29:08.040
Brooke Perkins (she/her): But then, did you say like, if you are passing title to display or that title would have access to title.

263
00:29:10.980 --> 00:29:11.310
Brooke Perkins (she/her): That up

264
00:29:11.670 --> 00:29:14.580
Ryan Mehta: If you're using the provider totally

265
00:29:16.470 --> 00:29:24.660
Brooke Perkins (she/her): So in okay so if you're passing title to display air. It's not like normal props.

266
00:29:25.710 --> 00:29:35.310
Brooke Perkins (she/her): Where title would just have access from this player, um, you would you would have to like explicitly is the provider and title as well.

267
00:29:36.510 --> 00:29:47.430
Ryan Mehta: Maybe, so I guess there's only two stories. There's the one that we're used to where you're like explicitly passing props down the line. So each component would say like my

268
00:29:48.180 --> 00:29:58.500
Ryan Mehta: Display would have prop types of title display or would have prop types of title and title would have prop types of title and your past title from app to display to display to title.

269
00:29:59.820 --> 00:30:03.600
Ryan Mehta: The second story is, you wouldn't pass any props to anyone.

270
00:30:05.010 --> 00:30:16.950
Ryan Mehta: So display wouldn't receive props display or wouldn't much the props and title wouldn't receive props, but since titlWEBVTT

1
00:00:03.090 --> 00:00:06.750
Ryan Mehta: Okay, so the idea that I have is

2
00:00:09.360 --> 00:00:16.890
Ryan Mehta: Like I number guessing application, kind of, it's like a kid's application for learning numbers.

3
00:00:18.840 --> 00:00:37.800
Ryan Mehta: So our little MVP hopefully will be a page on the page, it will display a number and then we have to say that number in order to move on to another number. So then we verbally, say for the computer checks that we said the right number and then will display a new number

4
00:00:39.060 --> 00:00:45.330
Ryan Mehta: That'll be our little number not really guessing number speech game or something.

5
00:00:46.530 --> 00:00:53.910
Ryan Mehta: I think it would be cool. Going forward, something that you all can write into this application that we probably won't get to all together.

6
00:00:54.750 --> 00:01:06.480
Ryan Mehta: Is to instead of displaying the number maybe display like three triangles and say, like, how many triangles are on the page, and then they have to say three or displaying

7
00:01:08.820 --> 00:01:10.530
Ryan Mehta: Like five circles.

8
00:01:12.480 --> 00:01:22.980
Ryan Mehta: How many circles are on the page and they say five and they get it right. So this is a sort of application that will build up and then you can extend going forward this afternoon.

9
00:01:24.930 --> 00:01:26.160
Ryan Mehta: How we're going to do it.

10
00:01:27.600 --> 00:01:28.770
Ryan Mehta: There is

11
00:01:31.710 --> 00:01:36.930
Ryan Mehta: This Tensorflow model called speech commands.

12
00:01:39.510 --> 00:01:42.900
Ryan Mehta: That give us a set of verbal commands that we can use.

13
00:01:44.220 --> 00:01:59.880
Ryan Mehta: That that understands so understands all 10 digits. If there's a better list of things here and understands all 10 digits, which are the main things that we're going to use it also understands, up, down, left, right, go. Stop. Yes and no.

14
00:02:01.470 --> 00:02:13.410
Ryan Mehta: So you could use that to build your own features like maybe the game doesn't start in your game until they say go, and then it counts or score after they say stop or something, whatever.

15
00:02:14.580 --> 00:02:35.310
Ryan Mehta: We're going to only be using the numbers in hours. I have this like little tiny started going proof of concept that is very few lines of code that already works. So, like I say 01234 the computer knows

16
00:02:36.480 --> 00:02:40.080
Ryan Mehta: The one thing. It's really bad at with me if if I say yes.

17
00:02:41.850 --> 00:02:54.000
Ryan Mehta: Knows that but if I whenever I say no, it never comes up. No, I think it says like, I'm saying the word like to know something. But if I say a really no then it

18
00:02:55.020 --> 00:02:57.090
Ryan Mehta: Then it thinks I'm saying, oh, super funny.

19
00:02:58.740 --> 00:03:00.690
Ryan Mehta: You have to like kind of shouted for know

20
00:03:01.800 --> 00:03:11.400
Ryan Mehta: But this is our little proof of concept that will build on during class time to do the guessing game. It takes a surprisingly few lines of code.

21
00:03:12.990 --> 00:03:15.990
Ryan Mehta: Right now we just kind of hacked it together and app JS.

22
00:03:17.610 --> 00:03:30.000
Ryan Mehta: There's a single piece of state called word there is a use effect that starts up the like the word recognizer the speech command Recognizer. And then we listen

23
00:03:31.350 --> 00:03:40.620
Ryan Mehta: As we're listening, it gives us a prediction on the word that was just said so results score is an array of the words that we could have said.

24
00:03:42.090 --> 00:03:51.030
Ryan Mehta: And it's prediction like between zero and one. If it's zero. That means the computer is 100% sure that we didn't say the word

25
00:03:51.960 --> 00:03:59.250
Ryan Mehta: If results dot scores at a particular position is one that means 100% sure that we did say the word

26
00:04:00.000 --> 00:04:08.100
Ryan Mehta: So here we're just iterating through the list of words that we could have said and checking to see if the computers 90% sure that we said the word

27
00:04:08.910 --> 00:04:23.640
Ryan Mehta: If it's 90% sure we said the word we set the word and to state and then we display the word on the page. So as I'm saying these words, if I say five it was at least 90% sure that I just said the word five

28
00:04:25.140 --> 00:04:32.400
Ryan Mehta: That's sort of how this little proof of concept works surprisingly few lines of code right to utilize this model.

29
00:04:34.470 --> 00:04:41.310
Ron Yonker: Is this something that we could maybe use and incorporate in the final project. This is awesome.

30
00:04:42.090 --> 00:04:42.570
Ryan Mehta: Totally

31
00:04:42.630 --> 00:04:44.730
Ryan Mehta: You can totally use this in a final project.

32
00:04:45.960 --> 00:04:49.530
Ryan Mehta: TensorFlow has a few different kind of cool models that you can use.

33
00:04:50.970 --> 00:04:52.530
Ryan Mehta: TensorFlow models.

34
00:04:54.270 --> 00:04:55.470
Ryan Mehta: They have

35
00:04:58.260 --> 00:05:08.160
Ryan Mehta: Labeling stuff posts net. Let's see those ones aren't super cool. The body pics is the one that I did for that hack day to do the background.

36
00:05:11.010 --> 00:05:13.920
Ryan Mehta: This is the speech commands that we're going to be using today.

37
00:05:15.630 --> 00:05:20.790
Ryan Mehta: A sentence and coding can also take a sentence and tell you how toxic. It is

38
00:05:22.320 --> 00:05:25.440
Ryan Mehta: This is kind of cool. I guess if you like, that kind of thing.

39
00:05:31.080 --> 00:05:33.390
Classify classify

40
00:05:34.680 --> 00:05:46.200
Ryan Mehta: Classify classify okay so it says that it's not a threat or toxic. But if I say like, Hi, everyone. You are bad.

41
00:05:47.400 --> 00:05:49.080
Ryan Mehta: I bet you that's kind of toxic.

42
00:05:49.920 --> 00:05:51.300
Brooke Perkins (she/her): Seems pretty toxic Ryan.

43
00:05:52.020 --> 00:05:52.590
You're

44
00:05:55.140 --> 00:05:57.060
Ryan Mehta: I hate everyone

45
00:06:04.680 --> 00:06:09.990
Ryan Mehta: So it's not toxic at all. That's not toxic you are

46
00:06:10.230 --> 00:06:12.330
Brooke Perkins (she/her): Done. Maybe that was just

47
00:06:12.390 --> 00:06:13.200
Honest.

48
00:06:15.600 --> 00:06:22.650
Ryan Mehta: This is both an insult and toxic. Okay, anyways, you could play around with this thing to do have some other models here.

49
00:06:23.940 --> 00:06:26.190
Ryan Mehta: Maybe you can think of ideas for these models.

50
00:06:27.660 --> 00:06:28.290
Ryan Mehta: That are cool.

51
00:06:32.010 --> 00:06:43.410
Ryan Mehta: Alright, so that's what we're going to be building today, this little number. I don't know what to call it, not guests are number learning, learning game kids number game.

52
00:06:45.420 --> 00:06:53.070
Ryan Mehta: But before we get to that we're going to use a new React concept today to build this use reducer.

53
00:06:55.080 --> 00:07:07.110
Ryan Mehta: User to be sort of as an alternative to US state it accepts over do sir, a reducer is a function that takes the current state and an action and returns a new piece of state.

54
00:07:07.650 --> 00:07:18.720
Ryan Mehta: So it's like an event right the producer takes what our state currently looks like the event that happens and then changes the state based on the event that comes in.

55
00:07:24.120 --> 00:07:38.220
Ryan Mehta: So looks kinda like this on the left hand side, we have our classic US state counter. And on the right hand side we have the reducer version of that which is diversity, you can already tell us much more complex.

56
00:07:39.300 --> 00:07:46.380
Ryan Mehta: It's really not good for this case, it's really much better for more complex pieces of state, but on the left hand side.

57
00:07:47.310 --> 00:07:56.880
Ryan Mehta: We are creating our count and we're initializing it at zero, we have an increment function that takes our current count and adds the one to it.

58
00:07:57.510 --> 00:08:08.910
Ryan Mehta: We have a detriment function that takes our current count and subtracts one from it and then two buttons, an increment of a detriment button. And we also display the current count.

59
00:08:12.420 --> 00:08:15.060
Ryan Mehta: That should just say count not state count.

60
00:08:16.650 --> 00:08:21.060
Ryan Mehta: Seem. Okay. Left hand side makes sense for the most part counter

61
00:08:22.830 --> 00:08:23.640
Ryan Mehta: Left hand side

62
00:08:24.690 --> 00:08:26.970
Ryan Mehta: Right hand side is a bit more complicated.

63
00:08:28.110 --> 00:08:33.480
Ryan Mehta: On the right hand side we create our state.

64
00:08:34.590 --> 00:08:34.920
Ryan Mehta: Line.

65
00:08:36.810 --> 00:08:38.220
Ryan Mehta: Using us reducer.

66
00:08:39.240 --> 00:08:58.980
Ryan Mehta: We pass user do sir reducer function, which we'll talk about in a second. And the initial state. In this case, the initial state is an object with count of zero. So kind of similar to what we did here except instead of passing just zero would pass an object with a count of zero.

67
00:09:01.230 --> 00:09:13.830
Ryan Mehta: We also passed it. This reducer function, the reducer function is defined here from line three to 12 it takes the current state and an action.

68
00:09:15.330 --> 00:09:24.540
Ryan Mehta: And then depending on the actions type it either adds one to count or it subtract one from count.

69
00:09:29.760 --> 00:09:37.710
Ryan Mehta: This user user will come back to this function again in a second. Once we talk about dispatching actions like what do these actions look like

70
00:09:39.000 --> 00:09:45.870
Ryan Mehta: This user do sir hook returns and array with two things in it. The current state and a dispatch function.

71
00:09:46.860 --> 00:09:54.240
Ryan Mehta: The dispatch function is a function that lets us send an action to the producer and initialize a stage change.

72
00:09:55.080 --> 00:10:15.420
Ryan Mehta: So online 17 and 18 we create these incremental detriment functions, the increment function dispatches an action. So we dispatch an action where the type of the action is increment among 18 we dispatch an action where the type of the action is detriment.

73
00:10:16.920 --> 00:10:24.330
Ryan Mehta: So this dispatch function receives an object with a type. Oops.

74
00:10:25.590 --> 00:10:28.260
Ryan Mehta: With a type inside of the object.

75
00:10:29.460 --> 00:10:36.150
Ryan Mehta: Whenever you dispatch here this object gets sent to the reducer as action.

76
00:10:37.560 --> 00:10:45.090
Ryan Mehta: And then the producer is responsible for changing the state based on the action that it receives

77
00:10:51.480 --> 00:10:56.880
Ryan Mehta: Kind of crazy right very, very hard to figure out how all the pieces are fitting together.

78
00:11:00.150 --> 00:11:01.350
Ryan Mehta: So the big

79
00:11:03.780 --> 00:11:04.800
Ryan Mehta: The big like

80
00:11:06.060 --> 00:11:06.780
Ryan Mehta: I guess.

81
00:11:10.290 --> 00:11:21.150
Ryan Mehta: mental model that this user reducer is working with is that on a web page every piece of state transformation happens in response to an event.

82
00:11:22.020 --> 00:11:35.940
Ryan Mehta: So a user clicks on something. So we changed state change state that's an event, the user opens the sidebar. That's an event, the user scrolls. That's an event everything on the page is an event.

83
00:11:37.740 --> 00:11:45.480
Ryan Mehta: In this reducer land we call events actions, the user take some action some action happened on the page.

84
00:11:47.400 --> 00:11:50.040
Ryan Mehta: What we have is a reducer function.

85
00:11:53.490 --> 00:11:59.970
Ryan Mehta: The reducer function is called reducer for the same reason that the array method is called reducer.

86
00:12:01.500 --> 00:12:10.710
Ryan Mehta: This reducer function. So this is kind of like our accumulator state is the accumulator and action is an action in an array.

87
00:12:11.460 --> 00:12:31.800
Ryan Mehta: The whole assumption of this is that any piece of state that you have is the result of running through a series of actions. So if a user clicks on something and then scrolls on that page and then types into an input box and then presses a submit button. They did a series of actions.

88
00:12:33.060 --> 00:12:40.830
Ryan Mehta: And that series of actions if the user does that series of actions. Again, they'll always have this same resulting stake

89
00:12:42.030 --> 00:12:52.110
Ryan Mehta: So let's say we have an array, where a user clicks on a button and then types into an input field and then press the submit button.

90
00:12:55.980 --> 00:13:01.800
Ryan Mehta: Whenever a user does this exact same thing they're always going to get out the same state.

91
00:13:04.320 --> 00:13:15.420
Ryan Mehta: That kind of makes sense, like from a in theory. Anyways, if you do the same actions, you get the same state. You do the same things on a webpage, you get the same results.

92
00:13:17.460 --> 00:13:30.030
Ryan Mehta: This whole flow is meant to handle this in a nice way. So the reducer is able to take an array of events that happen and output a state.

93
00:13:31.260 --> 00:13:38.610
Ryan Mehta: A dispatcher say I want to add a new event to this array like the user just did something new.

94
00:13:40.380 --> 00:13:41.940
Ron Yonker: So how this ends up looking

95
00:13:42.270 --> 00:13:43.710
Is we have a reducer.

96
00:13:46.950 --> 00:13:48.540
Ryan Mehta: The reducer outputs.

97
00:13:50.610 --> 00:13:51.120
Ryan Mehta: State.

98
00:13:53.520 --> 00:13:56.820
Ryan Mehta: Whenever a state changes we re render

99
00:13:58.380 --> 00:13:59.460
Ryan Mehta: Or application.

100
00:14:01.320 --> 00:14:12.030
Ryan Mehta: And then we sit down and wait for users to interact with our website. When a user interacts with our website, put this in a different color they dispatch an action.

101
00:14:16.710 --> 00:14:32.760
Ryan Mehta: When an action is dispatched it goes into our reducer function or reducer function takes the current state and the action that just happened and its whole job is to figure out what the new stage should look like. Based on that action.

102
00:14:36.390 --> 00:14:38.910
Ryan Mehta: This is like the flow of the application.

103
00:14:40.410 --> 00:14:49.260
Ryan Mehta: So if we look back at this piece of code here are reducer this function. Just think about it in isolation for a second. Outside of react.

104
00:14:50.790 --> 00:15:03.450
Ryan Mehta: This function right here can take a piece of state our current state and an action that just happened. And then it has the switch statement.

105
00:15:04.200 --> 00:15:18.930
Ryan Mehta: That lets it know how to change state based on the action. So if the actions type was increment, then it's going to return a new piece of state where the count is one more than the previous count.

106
00:15:20.100 --> 00:15:29.910
Ryan Mehta: If the actions type was detriment, it's going to return a new piece of state where the count is one less than the previous count.

107
00:15:31.050 --> 00:15:37.920
Ryan Mehta: So its whole job is. And this is all it does. It's like a pure JavaScript function which is super, super nice for test stability.

108
00:15:39.840 --> 00:15:57.030
Ryan Mehta: You can actually run this function outside of a React application and it would run just fine. It's a pure JavaScript function. It takes some state and it takes an action and based on those two things, it returns a new piece of steak.

109
00:15:59.220 --> 00:16:06.600
Ryan Mehta: One three inject this into our react application we create a we use it in our use reducer hook

110
00:16:07.770 --> 00:16:21.720
Ryan Mehta: This us reduce or hook is saying that anytime we dispatch an action run the action through the reducer that will be defined right here. And let's start WEBVTT

1
00:00:00.750 --> 00:00:03.300
Ryan Mehta: So we're going to use the reddit API.

2
00:00:04.440 --> 00:00:16.800
Ryan Mehta: They have this endpoint. The hot endpoint. If you've ever used read it. You can choose. Like, do you want to categorize things by the hottest articles, the top articles. The most controversial, whatever.

3
00:00:18.330 --> 00:00:27.150
Ryan Mehta: One cool thing about this hot endpoint is that you can also select a country or a state.

4
00:00:28.350 --> 00:00:42.450
Ryan Mehta: One of the United States. I thought, what would be cool is to be able to choose a subreddit and choose a state and see the difference between the hot articles between two different states. So compare the two states.

5
00:00:45.090 --> 00:00:52.620
Ryan Mehta: How I sort of want this thing to look i've never built this thing, by the way. So we're going to have to figure it out together a little bit.

6
00:00:54.570 --> 00:00:59.250
Ryan Mehta: But my idea right now is that will have three different pages.

7
00:01:00.450 --> 00:01:06.540
Ryan Mehta: At the top of every single page will have some sort of form that lets us type in a subreddit

8
00:01:09.300 --> 00:01:15.870
Ryan Mehta: It lets us choose state one and state to and this probably a submit button.

9
00:01:16.950 --> 00:01:22.890
Ryan Mehta: And then underneath it. There will be a list of all of the articles for state one on that subreddit

10
00:01:26.040 --> 00:01:29.550
Ryan Mehta: And then there'll be a list of articles for state to

11
00:01:32.250 --> 00:01:33.990
Ryan Mehta: And this will be like our homepage.

12
00:01:36.510 --> 00:01:40.350
Ryan Mehta: Will have another page will call it our

13
00:01:41.400 --> 00:01:47.610
Ryan Mehta: diff page. It will also have this header component on it. I'm just going to

14
00:01:48.660 --> 00:01:49.830
Ryan Mehta: Draw that for the header.

15
00:01:51.900 --> 00:01:59.670
Ryan Mehta: But instead of showing all of the articles, it will only show actually there one of them be a split here certain eraser.

16
00:02:01.380 --> 00:02:03.870
Eraser racer.

17
00:02:06.690 --> 00:02:08.280
Ryan Mehta: There has to be an eraser. Right.

18
00:02:12.600 --> 00:02:15.990
Jerud Moyer: Here really does have to be an eraser. Yeah.

19
00:02:18.960 --> 00:02:20.520
Ryan Mehta: I mean, you would assume

20
00:02:22.500 --> 00:02:23.370
Ryan Mehta: What if we do

21
00:02:23.700 --> 00:02:24.210
This

22
00:02:26.250 --> 00:02:26.580
Okay.

23
00:02:28.050 --> 00:02:29.640
Ryan Mehta: It's kind of like an eraser.

24
00:02:31.140 --> 00:02:41.400
Ryan Mehta: Okay, whatever. So, this one will show all of the articles that are different that aren't shared by the state, the two states.

25
00:02:42.900 --> 00:02:44.940
Ryan Mehta: And then we'll have a

26
00:02:47.310 --> 00:03:01.530
Ryan Mehta: Like common page same header and this one will show a list of articles that are shared by the same state. So, this one will be all or if we are drawing a Venn diagram.

27
00:03:02.820 --> 00:03:08.100
Ryan Mehta: Like these are the articles for state one state to this first page would show

28
00:03:09.360 --> 00:03:10.770
Ryan Mehta: All articles.

29
00:03:12.930 --> 00:03:19.950
Ryan Mehta: The second one we had our Venn diagram would only show the articles that are different. So whether

30
00:03:21.240 --> 00:03:27.450
Ryan Mehta: The stuff outside of this Union piece and this one would show on the articles and common

31
00:03:29.460 --> 00:03:30.180
That piece.

32
00:03:33.750 --> 00:03:35.910
Ryan Mehta: That's what is the key about making

33
00:03:37.980 --> 00:03:40.020
Ben Waples: Female user uses the state.

34
00:03:40.230 --> 00:03:41.640
Ben Waples: And then we grabbed the articles.

35
00:03:43.110 --> 00:03:46.080
Ryan Mehta: The user selects the state. Yeah. And we grabbed the articles.

36
00:03:48.420 --> 00:03:50.850
Ryan Mehta: Um, it's actually super cool the reddit API.

37
00:03:51.900 --> 00:04:04.350
Ryan Mehta: So if you go to like reddit.com slash news or whatever you'd see a slash are slash news right our news, you'll see

38
00:04:05.640 --> 00:04:11.850
Ryan Mehta: Your normal Reddit view. If you put dot JSON on the end of this, you will be now hitting the API.

39
00:04:14.430 --> 00:04:20.670
Ryan Mehta: So we'll be hitting this API, I think, but instead of news. It'll be like slash hot

40
00:04:23.760 --> 00:04:25.710
Ryan Mehta: Was 100 and

41
00:04:26.730 --> 00:04:28.920
Ryan Mehta: I think he was que je

42
00:04:30.120 --> 00:04:32.310
Ryan Mehta: Je equals us

43
00:04:35.490 --> 00:04:36.240
Ryan Mehta: Mexico.

44
00:04:38.040 --> 00:04:40.740
Ryan Mehta: And this would be like the hot articles in New Mexico.

45
00:04:45.990 --> 00:04:48.660
Ryan Mehta: I wonder if they'll be any differences between the states.

46
00:04:49.920 --> 00:04:51.390
Ryan Mehta: I wonder if it actually works.

47
00:04:53.160 --> 00:04:54.780
Ryan Mehta: All right, the same. Okay.

48
00:04:56.160 --> 00:04:56.730
Ryan Mehta: This thing.

49
00:04:58.050 --> 00:05:01.110
Ryan Mehta: Okay, let's plan it a little bit.

50
00:05:02.220 --> 00:05:03.720
Ryan Mehta: I am going to

51
00:05:05.250 --> 00:05:06.930
Ryan Mehta: Go into this directory

52
00:05:10.680 --> 00:05:11.820
Ryan Mehta: Our app.

53
00:05:15.330 --> 00:05:16.950
Ryan Mehta: What are we going to call this read it.

54
00:05:18.030 --> 00:05:18.660
Ryan Mehta: Compare

55
00:05:33.930 --> 00:05:36.600
Ryan Mehta: Let's make a readme and put a plan inside of here.

56
00:05:38.400 --> 00:05:38.880
Ryan Mehta: So,

57
00:05:39.930 --> 00:05:44.070
Ryan Mehta: We have at least three different pages home diff and

58
00:05:45.360 --> 00:05:46.770
Ryan Mehta: Common Good called it

59
00:05:55.140 --> 00:05:55.680
Ryan Mehta: What are they

60
00:05:58.110 --> 00:06:04.470
Ryan Mehta: What are the set, but there's like names for these things right. This is like union, I think.

61
00:06:07.620 --> 00:06:09.600
Ryan Mehta: Correct. This is

62
00:06:12.570 --> 00:06:17.130
Ryan Mehta: Something else anybody that's diff. I think that is actually called Death rate.

63
00:06:18.480 --> 00:06:21.630
Ryan Mehta: And am I making any sense, does anybody know what I'm talking about.

64
00:06:26.640 --> 00:06:27.210
Brooke Perkins (she/her): Know,

65
00:06:29.730 --> 00:06:33.840
Ryan Mehta: There are unions union, intersection and compliment

66
00:06:35.640 --> 00:06:37.020
Ryan Mehta: Oh, that's not what we

67
00:06:37.020 --> 00:06:44.850
Ryan Mehta: Want symmetric difference okay so symmetric difference intersection and union.

68
00:06:46.440 --> 00:06:49.260
Ryan Mehta: So this will be our reunion.

69
00:06:54.240 --> 00:06:59.340
Ryan Mehta: So that makes sense. It's just like the words that people use in math, or these things.

70
00:06:59.970 --> 00:07:00.360
Yeah.

71
00:07:01.560 --> 00:07:03.330
Ryan Mehta: Alright. So those are three pages.

72
00:07:04.620 --> 00:07:05.730
Ryan Mehta: What kind of steak.

73
00:07:06.480 --> 00:07:10.080
Ryan Mehta: Do you all think we'll have to organize this

74
00:07:11.280 --> 00:07:16.200
Ryan Mehta: Is a few different ways that I can think of off the top of my head. Does anybody have any good ideas.

75
00:07:16.380 --> 00:07:19.170
Jerud Moyer: Stories right verse

76
00:07:22.230 --> 00:07:24.540
Ryan Mehta: Yeah, totally. There's some sort of stories.

77
00:07:27.270 --> 00:07:30.810
Ryan Mehta: There's two separate arrays of stories, though, right, there's like

78
00:07:34.980 --> 00:07:42.120
Ryan Mehta: Yeah. Do you know anybody have any good names because there's like this list of stories or articles and this list of stories.

79
00:07:43.500 --> 00:07:48.930
Ryan Mehta: Do I mean I'm trying to avoid calling it like stories one and stories too.

80
00:07:51.330 --> 00:07:56.580
Thomas Stussi: Everything is just a very done that in my head like alpha stories and beta stories or something.

81
00:07:57.180 --> 00:07:58.020
Ryan Mehta: Yeah yeah

82
00:08:00.780 --> 00:08:02.940
Patrick Wilson: In my app, I would use stories wanting to

83
00:08:08.250 --> 00:08:19.500
Ryan Mehta: Yeah, like the things are coming to my head or like stories left and stories, right, and like stories one story is two story source stories destination. But that doesn't even make sense. Really.

84
00:08:20.340 --> 00:08:22.650
Thomas Stussi: Stories prime stores.

85
00:08:25.530 --> 00:08:29.370
Ryan Mehta: Because this how a and b. Okay. That doesn't help us.

86
00:08:31.530 --> 00:08:35.100
Ryan Mehta: Okay, let's go, let's go with like articles.

87
00:08:37.050 --> 00:08:37.590
Ryan Mehta: A

88
00:08:39.210 --> 00:08:40.650
Ryan Mehta: Close to be

89
00:08:42.690 --> 00:08:52.950
Ryan Mehta: Alright so articles for the left hand side and articles for the right hand side, we can always come back to it and fix it. What other state, do we have in our application.

90
00:08:56.490 --> 00:08:58.140
Ben Waples: State in state be

91
00:09:00.150 --> 00:09:01.980
Ryan Mehta: Yeah, stay in state be

92
00:09:03.570 --> 00:09:05.610
Ryan Mehta: What's called location, a

93
00:09:07.770 --> 00:09:11.730
Ryan Mehta: Via voice will be confusing. Like, is it the state of the application or

94
00:09:14.490 --> 00:09:18.240
Ryan Mehta: Whatever so location and location be what other state. Do we have

95
00:09:32.880 --> 00:09:37.350
Ryan Mehta: Probably subreddit right we'll need to store the subreddit that we're searching

96
00:09:41.880 --> 00:09:50.520
Ryan Mehta: Those things. I think it gets a little bit more complicated, too, because we don't actually want to

97
00:09:52.230 --> 00:10:04.470
Ryan Mehta: Like there's a there's a difference, right. You can type into this box change this state, and this other state, but it won't be reflected in on the bottom until you press the submit button.

98
00:10:05.250 --> 00:10:23.490
Ryan Mehta: So it's almost like the states are duplicated. There is the state and subreddit, that is showing up inside of these input boxes and there's also the subreddit, and states that are used by these components down here, the lists of things.

99
00:10:25.380 --> 00:10:27.750
Ryan Mehta: Um, so I think we may have to duplicate

100
00:10:28.890 --> 00:10:29.730
This stuff.

101
00:10:30.810 --> 00:10:36.570
Ryan Mehta: Once for like the header component and then once for what's actually used on the articles.

102
00:10:38.190 --> 00:10:39.270
Ryan Mehta: Does that make sense.

103
00:10:41.940 --> 00:10:45.270
Ryan Mehta: So I think we actually end up having maybe

104
00:10:46.620 --> 00:10:49.800
Ryan Mehta: subreddit input location in

105
00:10:55.830 --> 00:10:58.470
Ryan Mehta: The actual subreddit that we're using.

106
00:11:02.340 --> 00:11:03.630
Ryan Mehta: Currently in our search

107
00:11:06.570 --> 00:11:08.880
Ryan Mehta: I think we'll need all of those

108
00:11:10.140 --> 00:11:18.000
Ben Waples: Um, why wouldn't like 12 and 15 be the same because one of the user changes 12 one and it changed 15

109
00:11:18.660 --> 00:11:23.760
Ryan Mehta: We could have a do that instead. Right now, there's this button, though, that they're supposed to click

110
00:11:24.720 --> 00:11:25.020
OK.

111
00:11:28.380 --> 00:11:32.040
Ryan Mehta: Yeah, we can redesign this header, too. So if we zoomed in on this header.

112
00:11:33.960 --> 00:11:36.720
Ryan Mehta: I think there's two header designs that we could choose

113
00:11:38.310 --> 00:11:48.120
Ryan Mehta: This is a header design where you have the subreddit, the state another state, and you press Submit. We could also have the subreddit here.

114
00:11:48.900 --> 00:12:07.710
Ryan Mehta: And then like the state state one here or location one here and they submit button for it location to here or location be there and a submit button for it so you can change these things independently, instead of having to resubmit the entire form.

115
00:12:10.050 --> 00:12:13.140
Ryan Mehta: I don't know. Does anybody have a preference between

116
00:12:14.700 --> 00:12:16.500
Ryan Mehta: This style or this style.

117
00:12:20.520 --> 00:12:21.360
Ryan Mehta: So minor

118
00:12:21.720 --> 00:12:24.540
Jerud Moyer: I think it'd be cool to be able to submit a differently.

119
00:12:25.740 --> 00:12:26.430
Ryan Mehta: This style.

120
00:12:26.640 --> 00:12:29.250
Ryan Mehta: Yeah. Yeah. Should we vote on it.

121
00:12:30.570 --> 00:12:32.280
Ryan Mehta: How many people like this style.

122
00:12:36.240 --> 00:12:37.470
Josh Olloqui: Next, yay.

123
00:12:38.880 --> 00:12:45.210
Ryan Mehta: How many people, okay. Lots of people or something. Yeah, let's raise our hands. If we like this style.

124
00:12:50.850 --> 00:12:51.300
Okay.

125
00:12:52.650 --> 00:12:54.690
Sarah Rector: Sorry. It was submitting them differently.

126
00:12:55.230 --> 00:12:56.760
Ryan Mehta: Yeah. Yeah, exactly.

127
00:12:59.610 --> 00:13:05.670
Ryan Mehta: Okay, cool. Let me clear all the hands, how many people like I can't clear

128
00:13:12.210 --> 00:13:13.410
Ryan Mehta: the clear button does nothing.

129
00:13:14.730 --> 00:13:16.380
Ryan Mehta: How many people like

130
00:13:19.650 --> 00:13:23.280
Ryan Mehta: This style here I stole pants.

131
00:13:28.410 --> 00:13:30.900
Jerud Moyer: I can't get my hand down. Oh well.

132
00:13:32.550 --> 00:13:35.340
Ryan Mehta: It looks like maybe three people. I think this one has one

133
00:13:36.360 --> 00:13:37.530
Ryan Mehta: On enthusiasm.

134
00:13:38.880 --> 00:13:40.380
Ryan Mehta: So we'll go with this style.

135
00:13:42.750 --> 00:13:45.030
Ryan Mehta: Does that change anything for us.

136
00:13:45.660 --> 00:13:50.280
Brooke Perkins (she/her): I go with the first one. But it just took me until the second one to remember how to raise my hand.

137
00:13:50.700 --> 00:13:51.060
Nice.

138
00:13:55.170 --> 00:14:00.420
Ryan Mehta: Alright, so I still think we'll need all of this state, but we just have to keep that in mind.

139
00:14:00.960 --> 00:14:15.240
Ryan Mehta: For this step. How do we want to break this down into producers because we're going to have to have some sort of producer that holds this state. And how many producers are we going to have in which producers are going to hold. Which of these states.

140
00:14:18.390 --> 00:14:19.080
Ryan Mehta: Ideas.

141
00:14:20.130 --> 00:14:23.010
Thomas Stussi: Do we want like an A and a B reducer.

142
00:14:24.000 --> 00:14:26.790
Ryan Mehta: That's a good question. Yeah. Do we want that.

143
00:14:27.330 --> 00:14:34.200
Thomas Stussi: And then it would store like articles, a location A. I don't know where the subreddit goes

144
00:14:35.400 --> 00:14:39.510
Ryan Mehta: Souls so proposals, a producer.

145
00:14:42.120 --> 00:14:43.740
Ryan Mehta: And it would hold

146
00:14:45.750 --> 00:14:47.640
Ryan Mehta: Articles a

147
00:14:49.320 --> 00:14:50.910
Ryan Mehta: Location a

148
00:14:52.380 --> 00:1 thing me

140
00:16:52.110 --> 00:16:52.590
Could be.

141
00:16:56.100 --> 00:16:58.290
Edgar Cuellar: spelled that wrong. The name of the

142
00:17:01.080 --> 00:17:01.290
Edgar Cuellar: Book

143
00:17:04.080 --> 00:17:04.530
Ryan Mehta: Thank you.

144
00:17:10.170 --> 00:17:10.680
Ryan Mehta: Okay.

145
00:17:11.730 --> 00:17:14.280
Ryan Mehta: Let's see what's the legit areas.

146
00:17:18.300 --> 00:17:22.860
Ryan Mehta: All right. Any ideas what this one is this huge wall of red

147
00:17:23.580 --> 00:17:27.120
Thomas Stussi: You're passing in an object, instead of an array. Is that right,

148
00:17:28.410 --> 00:17:31.380
Ryan Mehta: Yeah, pretty much. So back in the tests, you mean

149
00:17:32.160 --> 00:17:32.490
Yeah.

150
00:17:33.540 --> 00:17:33.990
Ryan Mehta: Yeah.

151
00:17:34.140 --> 00:17:36.090
Ryan Mehta: So what's it actually pass to character.

152
00:17:36.090 --> 00:17:36.660
List.

153
00:17:39.210 --> 00:17:40.950
Thomas Stussi: An array of characters instead

154
00:17:41.970 --> 00:17:44.370
Ryan Mehta: Yes, I need to give it an array.

155
00:17:44.520 --> 00:17:46.080
Ryan Mehta: It's given one character.

156
00:17:46.890 --> 00:17:48.180
ID one

157
00:17:51.330 --> 00:17:53.970
Ryan Mehta: I want to steal that image URL so lazy.

158
00:17:57.030 --> 00:17:59.640
Ryan Mehta: That was so lazy that to win more keystrokes.

159
00:18:03.840 --> 00:18:05.520
Ryan Mehta: Image your name.

160
00:18:18.480 --> 00:18:20.190
Ryan Mehta: Okay. Does that look okay

161
00:18:21.690 --> 00:18:38.580
Ryan Mehta: So make sure that we're passing a prop called characters characters is an array of characters character objects. So we need to make sure that the prop that we're passing the character list matches are expected prop text over here.

162
00:18:40.410 --> 00:18:45.930
Ryan Mehta: If we go to our snapshot, we see a UL with the single Li in it.

163
00:18:47.700 --> 00:18:48.870
Ryan Mehta: Which is what we expect.

164
00:18:52.500 --> 00:18:57.330
Ryan Mehta: With good. Any questions about this snapshot test or the implementation.

165
00:19:00.270 --> 00:19:02.310
Ryan Mehta: Alright, on to our container, then

166
00:19:03.570 --> 00:19:05.850
Ryan Mehta: We're going to write our container three ways.

167
00:19:07.140 --> 00:19:10.980
Ryan Mehta: Seems like a cooking show or something container three ways.

168
00:19:14.670 --> 00:19:15.720
Ryan Mehta: We'll have

169
00:19:16.560 --> 00:19:29.010
Ryan Mehta: We'll write it as a class with hooks and with custom hooks. So let's make our containers. We're going to call it our characters and we'll make our first all characters.

170
00:19:30.390 --> 00:19:31.020
Container

171
00:19:32.790 --> 00:19:36.450
Ryan Mehta: Will also make our all characters.

172
00:19:38.010 --> 00:19:43.890
Ryan Mehta: Tests J SX make both of those. I'm going to close all of these open files.

173
00:19:44.910 --> 00:19:48.270
Ryan Mehta: Go back to a sane world.

174
00:19:50.760 --> 00:19:59.610
Ryan Mehta: Alright, in our test. We're going to import react from react. We're also going to import render and screen from

175
00:20:00.840 --> 00:20:06.690
Ryan Mehta: Testing library. Yeah, we're going to describe our all

176
00:20:12.630 --> 00:20:19.140
Ryan Mehta: Alright, first thing that we wanted to do it displays a loading page.

177
00:20:22.020 --> 00:20:31.680
Ryan Mehta: So we wanted to display some sort of loading more first go to the container. We're going to render our all character container.

178
00:20:35.460 --> 00:20:36.990
Ryan Mehta: This is going to fail.

179
00:20:38.010 --> 00:20:41.310
Ryan Mehta: Miserably. Because we have no

180
00:20:43.500 --> 00:20:44.430
Well, that's

181
00:20:45.720 --> 00:20:46.560
Ryan Mehta: pretty silly.

182
00:20:48.090 --> 00:20:49.680
Ryan Mehta: Why don't. Why doesn't see it.

183
00:20:50.910 --> 00:20:51.480
Just

184
00:20:53.250 --> 00:20:54.090
Patrick Wilson: Need to import it.

185
00:20:55.440 --> 00:20:56.520
Ryan Mehta: Oh, well, it didn't even see the

186
00:20:56.520 --> 00:21:00.240
Patrick Wilson: Test at first. Now it does

187
00:21:00.420 --> 00:21:14.250
Ryan Mehta: Totally, totally need to import it. We get this failure all characters is not defined. We can't even import it right now though because we haven't export anything on the right hand side, let's make sure we actually scaffold this out.

188
00:21:17.580 --> 00:21:18.510
Ryan Mehta: A little bit.

189
00:21:21.630 --> 00:21:23.100
Ryan Mehta: Export the fault.

190
00:21:24.570 --> 00:21:25.110
Ryan Mehta: All

191
00:21:30.210 --> 00:21:31.350
Ryan Mehta: Component.

192
00:21:33.690 --> 00:21:34.860
Ryan Mehta: Render method.

193
00:21:36.780 --> 00:21:37.530
Ryan Mehta: Turn

194
00:21:47.220 --> 00:21:48.300
Ryan Mehta: Turn hi for now.

195
00:21:50.490 --> 00:21:51.600
Ryan Mehta: Import this side.

196
00:21:55.080 --> 00:21:56.010
Ryan Mehta: Should pass

197
00:21:58.920 --> 00:22:01.050
Ryan Mehta: Render render

198
00:22:13.140 --> 00:22:14.370
Important, it should be.

199
00:22:16.500 --> 00:22:18.240
Ryan Mehta: Okay, now we should be good.

200
00:22:19.770 --> 00:22:25.620
Ryan Mehta: Everything passes. Let's do a little bit more work here. We also expect

201
00:22:28.470 --> 00:22:29.640
Ryan Mehta: To be able to

202
00:22:31.980 --> 00:22:37.980
Ryan Mehta: Wonder if we can do this screen to text content loading.

203
00:22:40.770 --> 00:22:44.640
Ryan Mehta: So expect to the text content loading to be on the screen.

204
00:22:45.750 --> 00:22:46.860
Ryan Mehta: This fails.

205
00:22:49.980 --> 00:22:51.300
Ryan Mehta: Well, we're not allowed to do that.

206
00:22:53.670 --> 00:22:56.670
Ryan Mehta: That sucks. Oh, sorry. That's no good.

207
00:23:00.720 --> 00:23:02.550
Ryan Mehta: Would have been really cool if we could do that.

208
00:23:04.320 --> 00:23:05.490
Ryan Mehta: What's a better way.

209
00:23:10.500 --> 00:23:11.070
Ryan Mehta: Get

210
00:23:14.310 --> 00:23:14.940
Ryan Mehta: Taxed

211
00:23:18.900 --> 00:23:24.510
Ryan Mehta: All right. I think that's enough. We can, we should be able to get something by the text loading.

212
00:23:25.710 --> 00:23:31.110
Ryan Mehta: This will fail because there's nothing on the screen with the text loading right now.

213
00:23:35.010 --> 00:23:35.310
Ryan Mehta: Right.

214
00:23:35.370 --> 00:23:36.660
Ryan Mehta: This thing automatically

215
00:23:36.660 --> 00:23:37.140
Ryan Mehta: Fails.

216
00:23:37.170 --> 00:23:39.180
Ryan Mehta: If it can't find the thing

217
00:23:40.440 --> 00:23:44.250
Thomas Stussi: Right. Is there a way to check for an image.

218
00:23:46.770 --> 00:23:48.060
Ryan Mehta: You can buy

219
00:23:49.410 --> 00:23:50.040
Ryan Mehta: Sort of

220
00:23:51.240 --> 00:23:57.180
Ryan Mehta: You can get by alt text and get the text of the image. Okay.

221
00:23:58.440 --> 00:24:07.080
Thomas Stussi: Because my loading screen yesterday was an image, and I didn't know how to how to find it. So I just like added some text that said, and also

222
00:24:10.590 --> 00:24:13.050
Ryan Mehta: Nice. Yeah, we could do the alt text, I think.

223
00:24:14.460 --> 00:24:17.730
Ryan Mehta: So loading it fails. Let's return loading.

224
00:24:20.190 --> 00:24:24.990
Ryan Mehta: And should pass. Cool. Let's make this two lives.

225
00:24:26.580 --> 00:24:29.790
Ryan Mehta: Let's get a little bit more advanced now it

226
00:24:31.170 --> 00:24:34.380
Ryan Mehta: displays a list of care.

227
00:24:38.280 --> 00:24:40.260
Ryan Mehta: So we're going to render

228
00:24:42.510 --> 00:24:44.970
Ryan Mehta: Our all characters.

229
00:24:46.320 --> 00:24:50.010
Ryan Mehta: We're then going to try to grab that list of characters.

230
00:24:52.230 --> 00:25:03.900
Ryan Mehta: In order to grab the list of characters. We need to give it a test ID. So I'm going to go back to our character list and give our character list a test ID.

231
00:25:08.730 --> 00:25:11.160
Ryan Mehta: And then we will attempt to

232
00:25:14.550 --> 00:25:16.770
Ryan Mehta: Our character list.

233
00:25:17.940 --> 00:25:19.860
Ryan Mehta: Await will find

234
00:25:23.730 --> 00:25:24.960
Ryan Mehta: Test ID.

235
00:25:27.060 --> 00:25:30.090
Ryan Mehta: Characters need to make this a sink.

236
00:25:32.850 --> 00:25:36.390
Ryan Mehta: And I think at this point, this will probably fail.

237
00:25:37.830 --> 00:25:38.010
Ryan Mehta: Yeah.

238
00:25:39.510 --> 00:25:45.990
Ryan Mehta: Okay, so it can never find our character list because it never gets rendered to the screen.

239
00:25:47.370 --> 00:25:48.060
Ryan Mehta: Make sense

240
00:25:49.080 --> 00:26:01.470
Ryan Mehta: So we need to conditionally render this loading thing sometimes, it should show loading. Other times, once we're out of the loading phase, we should display our list of characters.

241
00:26:02.850 --> 00:26:04.620
Ryan Mehta: So we'll need any piece of state.

242
00:26:06.300 --> 00:26:10.110
Ryan Mehta: Will need our loading state. We're going to start off with loading true

243
00:26:12.570 --> 00:26:14.670
Ryan Mehta: And then we'll do something kind of

244
00:26:16.650 --> 00:26:23.790
Ryan Mehta: kind of silly to begin with. When the component first mounts, we will set our loading state to false.

245
00:26:26.970 --> 00:26:31.260
Ryan Mehta: And then in our Render, we will grab our loading state.

246
00:26:35.220 --> 00:26:41.670
Ryan Mehta: If we're loading will return our H1 loading.

247
00:26:43.650 --> 00:26:47.880
Ryan Mehta: Otherwise we will return our character list.

248
00:26:55.350 --> 00:26:59.040
Ryan Mehta: And let me open that file, so I can auto import it.

249
00:27:02.940 --> 00:27:07.260
Ryan Mehta: For now, let's just past our character list an empty array is

250
00:27:09.300 --> 00:27:20.010
Ryan Mehta: This implementation with a super slow, but like, not the coding style is super slow we're going like such a little tiny steps here feels like

251
00:27:22.080 --> 00:27:22.620
Ryan Mehta: Nice.

252
00:27:23.100 --> 00:27:24.930
Annalise: bite size pieces, you know,

253
00:27:26.280 --> 00:27:26.820
Ryan Mehta: Totally

254
00:27:27.060 --> 00:27:28.770
Annalise: Festival bite size pieces.

255
00:27:31.440 --> 00:27:34.440
Ryan Mehta: So now we don't have our loading thing ever.

256
00:27:35.730 --> 00:27:44.190
Ryan Mehta: Which is a shame. I guess we can wrap this in a set time out to mimic by we actually have some

257
00:27:46.110 --> 00:27:47.850
Ryan Mehta: loading time

258
00:27:50.520 --> 00:27:50.970
Okay.

259
00:27:55.020 --> 00:27:55.830
Ryan Mehta: How does that work.

260
00:28:07.380 --> 00:28:08.370
Ryan Mehta: Okay, that's okay.

261
00:28:10.410 --> 00:28:21.840
Ryan Mehta: So both of these tests, pretty much past, we kind of are faking an API call right here with the set timeout, we should actually make an API call. Because that's what we really want to do

262
00:28:23.430 --> 00:28:39.900
Ryan Mehta: Let's pause on our container for a second and create a service that will do the API call stuff for us. So I'm gonna make a services directory. And let's call it Rick and more the API JS.

263
00:28:41.730 --> 00:28:46.800
Ryan Mehta: inside of here, we're going to make our API call need a function

264
00:28:49.350 --> 00:28:50.640
Ryan Mehta: That character characters.

265
00:28:52.560 --> 00:29:04.530
Ryan Mehta: That will fetch from that API for us. So we're going to make a fetch request to that API. We're then going to get a response with parse the responses JSON.

266
00:29:05.880 --> 00:29:20.640
Ryan Mehta: We're then going to get our JSON, the JSON is going to contain a results to look back at the API has this results results as an array of characters.

267
00:29:21.180 --> 00:29:39.000
Ryan Mehta: We really only care about the ID, the name and the image of our character. So we'll massage this data a little bit so we get only those pieces. We also called our image image URL. So we need to make sure we rename this key to image URL.

268
00:29:41.520 --> 00:29:56.520
Ryan Mehta: And we'll do that by mapping through the JSON actually going to call this will map through the JSON for each character we're going to return an object with an ID.

269
00:29:59.190 --> 00:29:59.850
Ryan Mehta: A name.

270
00:30:02.940 --> 00:30:03.600
Ryan Mehta: URL.

271
00:30:21.450 --> 00:30:27.630
Ryan Mehta: All right. Before we get too far in our tests, we should also mock this thing.

272
00:30:30.240 --> 00:30:33.510
Ryan Mehta: So we're going to mark our Rick and Morty service.

273
00:30:35.190 --> 00:30:45.000
Ryan Mehta: And then we're going to bring in our get characters. We're going to mock a result value.

274
00:30:46.590 --> 00:30:52.890
Ryan Mehta: We expect it to return an array with a character in it so ID.

275
00:31:01.560 --> 00:31:02.790
Ryan Mehta: A character name.

276
00:31:10.170 --> 00:31:11.700
Ryan Mehta: From both of our tests.

277
00:31:16.680 --> 00:31:27.900
Ryan Mehta: That look. Okay, so we're mocking the service over here the service returns and array with ID image URL and name. So we're mocking that in our test.

278
00:31:30.000 --> 00:31:31.980
Ryan Mehta: All right, back in our container.

279
00:31:34.260 --> 00:31:44.820
Ryan Mehta: On mounting our container you no longer need this set time out. We actually want to get our list of characters. We're then going to get our batch.

280
00:31:48.720 --> 00:31:50.670
Ryan Mehta: With the access is called characters.

281
00:31:52.620 --> 00:32:04.110
Ryan Mehta: With these characters we want to set a piece of state some characters face. So let's add characters here which will start off as an empty array.

282
00:32:05.190 --> 00:32:08.670
Ryan Mehta: We will set our state.

283
00:32:10.770 --> 00:32:12.570
Ryan Mehta: Two characters.

284
00:32:13.980 --> 00:32:17.700
Ryan Mehta: And then after the API call finishes will finally

285
00:32:19.410 --> 00:32:21.990
Ryan Mehta: set our loading state.

286
00:32:24.210 --> 00:32:25.050
To false

287
00:32:29.100 --> 00:32:43.920
Ryan Mehta: Make this bigger so we can see it. So we get our characters we set our character state and we set load into false down below. We're going to get that character state and pass it to our characters list.

288
00:32:47.790 --> 00:32:51.540
Ryan Mehta: Let's check out our test, they all still pass

289
00:32:55.020 --> 00:32:59.640
Ryan Mehta: Right, I'm gonna, I'm also going to add a little test over here.

290
00:33:01.470 --> 00:33:06.120
Ryan Mehta: So eventually I should have done this before, but we're gonna wait for

291
00:33:07.560 --> 00:33:28.140
Ryan Mehta: After the promise resolves and we actually have a list of characters we expect our character list. This is the one that we have been doing and not to be empty DOM element, but we can get a little bit more specific. We also expect character list to

292
00:33:29.550 --> 00:33:31.020
Ryan Mehta: text content.

293
00:33:33.660 --> 00:33:37.380
Ryan Mehta: Right, it should have the word Rick as text content somewhere.

294
00:33:38.640 --> 00:33:40.260
Ryan Mehta: Let's see why this fails.

295
00:33:41.880 --> 00:33:45.600
Ryan Mehta: Oh, does it perfect. So a little bit more particular

296
00:33:47.490 --> 00:33:52.320
Ryan Mehta: We don't just want it to not be empty, we actually want the character to render to the screen.

297
00:33:55.170 --> 00:33:59.490
Ryan Mehta: Let's drop this an app JS and just see how it is behaving.

298
00:34:00.540 --> 00:34:01.320
Ryan Mehta: Right now.

299
00:34:03.690 --> 00:34:05.550
So let's drop

300
00:34:07.530 --> 00:34:08.100
So big

301
00:34:13.530 --> 00:34:18.810
Ryan Mehta: LWEBVTT

1
00:00:01.110 --> 00:00:03.090
Ryan Mehta: Alright, I'm going to pick somebody random

2
00:00:06.660 --> 00:00:08.460
Ryan Mehta: Share their lab.

3
00:00:28.080 --> 00:00:31.770
Ryan Mehta: All right, Craig. You got you were the random selection.

4
00:00:32.070 --> 00:00:34.260
Greg Mall: I knew it's going to be lucky me

5
00:00:35.340 --> 00:00:39.600
Greg Mall: All right, I'm what am I sharing the code or the function for both

6
00:00:40.170 --> 00:00:40.890
Ryan Mehta: The code.

7
00:00:41.430 --> 00:00:41.880
Okay.

8
00:00:45.870 --> 00:00:54.780
Greg Mall: Well it works. But I think after looked at the instructions. I don't know if I set it up correctly.

9
00:00:55.800 --> 00:00:59.250
Greg Mall: What I did was I have my one container here.

10
00:01:00.270 --> 00:01:03.150
Greg Mall: Which is new search and that has

11
00:01:05.070 --> 00:01:08.160
Greg Mall: It has the handle change and handle submit

12
00:01:11.190 --> 00:01:12.090
Greg Mall: Functions.

13
00:01:13.980 --> 00:01:17.610
Greg Mall: Stores state loading texts and the articles.

14
00:01:19.980 --> 00:01:26.730
Greg Mall: I this I called search. I think it was supposed to be called articles list or something. Anyway, this is where

15
00:01:27.960 --> 00:01:29.430
Greg Mall: My search happens

16
00:01:32.460 --> 00:01:33.480
Greg Mall: It's on a form

17
00:01:35.850 --> 00:01:40.650
Greg Mall: It gets taxed on changing the on submit functions and on submit

18
00:01:41.940 --> 00:01:44.010
Greg Mall: It returns

19
00:01:48.570 --> 00:01:51.450
Greg Mall: Back to here and then articles is where it

20
00:01:53.010 --> 00:01:54.420
Greg Mall: Renders out here.

21
00:01:57.390 --> 00:01:57.750
Greg Mall: So I

22
00:01:59.400 --> 00:02:03.390
Greg Mall: I kind of did it. And then when I went back and looked and I think I didn't

23
00:02:04.500 --> 00:02:07.710
Greg Mall: Follow the exact directions, but I mean I got a functional

24
00:02:08.820 --> 00:02:10.620
Greg Mall: Look at all the search terms.

25
00:02:13.980 --> 00:02:15.180
Greg Mall: Yeah, so I mean

26
00:02:16.920 --> 00:02:17.700
Greg Mall: It works.

27
00:02:19.410 --> 00:02:26.640
Greg Mall: Like I said, I don't know if I set it up correctly. And I saw other people doing it a lot differently, like I

28
00:02:27.870 --> 00:02:28.920
Greg Mall: In my search

29
00:02:30.330 --> 00:02:32.430
Greg Mall: Part I mapped out the

30
00:02:37.530 --> 00:02:40.110
Greg Mall: Search my articles from all over the place.

31
00:02:41.460 --> 00:02:45.240
Greg Mall: Like I mapped out the article here and just returned

32
00:02:45.540 --> 00:02:46.590
Greg Mall: The elements there.

33
00:02:49.050 --> 00:02:49.470
Greg Mall: So,

34
00:02:51.720 --> 00:02:52.350
Greg Mall: Yeah.

35
00:02:52.920 --> 00:02:54.960
Ryan Mehta: Sorry. It looks good, I think.

36
00:02:55.200 --> 00:03:09.570
Greg Mall: It works. And I haven't finished testing was an issue for me and I still have to do the tests on the container. I did test for the other ones finally figured out how to get them to work. So I'm sure gonna be missing points there, but I hope to make that up.

37
00:03:10.650 --> 00:03:12.330
Greg Mall: Tomorrow, or this weekend so

38
00:03:13.380 --> 00:03:16.110
Ryan Mehta: Yeah, I think if this is

39
00:03:17.400 --> 00:03:22.710
Ryan Mehta: A little bit of feedback. I think if if you're gonna like while you're going through this application.

40
00:03:23.280 --> 00:03:32.400
Ryan Mehta: I would start with, like, sort of the way that you were developing the application. So I'd probably start like just showing the presentational components of this is what you're going to see on the screen.

41
00:03:33.210 --> 00:03:43.170
Ryan Mehta: So start here because you kind of started at the container level which is showing the interactions. I think it's easier to follow the show like these are like, this is my article list.

42
00:03:44.190 --> 00:03:48.030
Ryan Mehta: Because we all wrote the app. Also, so we kind of know the interactions and then

43
00:03:48.210 --> 00:03:53.610
Ryan Mehta: You know the search functionality and then follow up with like the actual container.

44
00:03:54.810 --> 00:03:58.560
Greg Mall: That's good advice I'm terrible at presenting. I wasn't prepared.

45
00:03:59.310 --> 00:04:00.960
Ryan Mehta: Yeah. Yeah. Totally. Totally fine.

46
00:04:02.250 --> 00:04:08.760
Ryan Mehta: I think a cool thing to do. Now I'm going to go down the participants list so Adrian, you're going to be first.

47
00:04:09.780 --> 00:04:12.810
Ryan Mehta: And if Greg, you bring up your articles death sex.

48
00:04:14.220 --> 00:04:15.120
Ryan Mehta: Right there. Yep.

49
00:04:16.380 --> 00:04:23.700
Ryan Mehta: Adrian unit explained to us what's going on in this file and maybe any critiques that you would give to Greg to help

50
00:04:26.160 --> 00:04:27.930
Ryan Mehta: Anything that you would improve in this file.

51
00:04:31.380 --> 00:04:34.590
Adrian Simental: No, I don't know that there's anything I didn't crew.

52
00:04:38.070 --> 00:04:50.160
Adrian Simental: Yeah, he's taking the article elements that he's getting and mapping over them and creating an ally element with the title, author and description and a link to it and then returning returning the list.

53
00:04:52.980 --> 00:04:53.880
Ryan Mehta: Totally, yeah.

54
00:04:54.150 --> 00:04:54.600
And

55
00:04:55.830 --> 00:04:58.170
Ron Yonker: Is it okay if I try, man. I have something

56
00:04:59.220 --> 00:04:59.640
Ron Yonker: Without

57
00:05:01.320 --> 00:05:01.980
Ron Yonker: Um,

58
00:05:03.030 --> 00:05:20.340
Ron Yonker: What I did, and would do differently. He is instead of mapping out all the HTML, I would have an article like sub components. So this looks like your article list to me.

59
00:05:23.340 --> 00:05:26.880
Ron Yonker: I'm so spread out all of the

60
00:05:27.960 --> 00:05:36.300
Ron Yonker: Properties into a component and map across that that would be the change that I would make and

61
00:05:36.840 --> 00:05:44.340
Greg Mall: I'd seen other people doing that and thought, oh, I must have done it wrong. That looks like the better way to probably do it but

62
00:05:44.910 --> 00:05:52.860
Greg Mall: More point I was already had it working like I'm not gonna tear it down and rebuild, but maybe next time. That's how I would go about it.

63
00:05:54.840 --> 00:05:59.820
Ryan Mehta: Yeah, so I think Ron's comment for anybody who's not quite clear is that

64
00:06:00.900 --> 00:06:12.840
Ryan Mehta: He would either put this stuff into its own component or maybe this entire Li into its own component and then as you're iterating through the list of articles use that singular article

65
00:06:14.310 --> 00:06:15.600
Ron Yonker: Yeah, that's exactly what I did.

66
00:06:18.030 --> 00:06:20.610
Ryan Mehta: Cool. Anybody else have any comments on this file.

67
00:06:27.780 --> 00:06:38.640
Ryan Mehta: I think a few things that I would change. I would probably put a space in between, like, two, and three. I usually have a single new line between my imports and like anything else.

68
00:06:38.730 --> 00:06:43.830
Greg Mall: That, you know, I was just gonna say, I've been getting a lot of critiques on my white spacing.

69
00:06:43.890 --> 00:06:44.520
Greg Mall: Too much

70
00:06:44.820 --> 00:06:46.470
Greg Mall: And so now I've got two little

71
00:06:46.740 --> 00:06:49.620
Greg Mall: I gotta find the the just write the Goldilocks

72
00:06:50.430 --> 00:06:51.300
Greg Mall: Spacing so

73
00:06:51.990 --> 00:06:55.680
Ryan Mehta: Yeah, I mean so happy. Yeah. Awesome. Too much spacing down at the bottom.

74
00:06:58.410 --> 00:06:59.280
Ryan Mehta: There at the bottom.

75
00:06:59.460 --> 00:07:00.450
Greg Mall: It's a combination

76
00:07:00.720 --> 00:07:05.550
Brooke Perkins (she/her): I do that all the time, Greg. I always have like spaces at the bottom for no reason.

77
00:07:05.880 --> 00:07:14.250
Greg Mall: It was probably because I had it all spread out and then I was trying to adjust my spacing and didn't, you know, delete from the bottom by just

78
00:07:15.750 --> 00:07:15.990
Greg Mall: So,

79
00:07:16.500 --> 00:07:18.420
Ryan Mehta: And then I would have a space right here.

80
00:07:19.800 --> 00:07:22.710
Ryan Mehta: In the half. I wouldn't have a space on 17

81
00:07:22.920 --> 00:07:25.740
Ryan Mehta: Okay, but I would have a space.

82
00:07:27.120 --> 00:07:28.590
Ryan Mehta: Online 15 and a half.

83
00:07:30.570 --> 00:07:33.180
Ryan Mehta: You have an extra indent here. It looks like.

84
00:07:34.560 --> 00:07:39.450
Ryan Mehta: It also looks like perhaps shirt. Yes. Linda isn't going right now and then I'll have spaces.

85
00:07:40.740 --> 00:07:42.000
Ryan Mehta: In between those

86
00:07:42.030 --> 00:07:43.560
Ryan Mehta: Curly braces and article

87
00:07:44.940 --> 00:07:46.740
Ryan Mehta: Course okay let's lovely now.

88
00:07:48.570 --> 00:08:02.220
Annalise Murphy: What's weird because it says the Iceland is like going right right at the bottom right corner. Next to the go live. I thought that would be showing up is is limb wasn't present. Yeah.

89
00:08:02.250 --> 00:08:04.080
Annalise Murphy: It's a weird huh

90
00:08:04.350 --> 00:08:09.960
Patrick Wilson: I agree. Go to problems. Can you hit the light bulb to turn it on or maybe they're too.

91
00:08:10.050 --> 00:08:12.450
Greg Mall: Much just wants to burn it to

92
00:08:12.900 --> 00:08:15.600
Patrick Wilson: Or down next to your terminal. If you click on problems.

93
00:08:19.050 --> 00:08:20.280
Greg Mall: Problems. Okay.

94
00:08:21.000 --> 00:08:24.900
Patrick Wilson: My mind always has a light bulb there that have to click the tournament. Yes.

95
00:08:25.650 --> 00:08:26.250
Okay.

96
00:08:33.480 --> 00:08:37.440
Patrick Wilson: Yeah. Cuz there's a semicolon missing online to that it should have cut

97
00:08:40.140 --> 00:08:43.350
Greg Mall: You're right. I didn't turn it off. I swear it just

98
00:08:44.610 --> 00:08:48.960
Thomas Stussi: I feel like I had to turn it on for this project for some reason as well.

99
00:08:50.370 --> 00:08:52.170
Greg Mall: I didn't even think about it, it was

100
00:08:53.880 --> 00:08:57.090
Greg Mall: There was at one point, I know that.

101
00:08:57.630 --> 00:09:01.770
Ryan Mehta: Like you know the cycle VS code and get the dairies again.

102
00:09:05.160 --> 00:09:07.080
Ryan Mehta: That's just me like turn on and off.

103
00:09:07.140 --> 00:09:09.090
Ryan Mehta: Like close VS code and open it again.

104
00:09:09.660 --> 00:09:13.320
Greg Mall: Sure, an awesome. Yeah. Should I do that our

105
00:09:13.770 --> 00:09:17.400
Ryan Mehta: Yeah, let's do it. Just so we can see some yes what things

106
00:09:20.220 --> 00:09:21.060
Greg Mall: Put it here.

107
00:09:22.650 --> 00:09:23.160
And

108
00:09:25.410 --> 00:09:25.920
Greg Mall: Whoops.

109
00:09:26.310 --> 00:09:27.900
Brooke Perkins (she/her): Look at that gorgeous button.

110
00:09:28.500 --> 00:09:36.300
Greg Mall: Right. Mm hmm. I thought it was. It was beautiful. It's like the only color on the whole thing. So I was trying to make it stand out.

111
00:09:41.040 --> 00:09:44.970
Ryan Mehta: I don't know if I did anything. Let's take away some semi colon somewhere something

112
00:09:47.850 --> 00:09:51.930
Ryan Mehta: Okay, you're yes lint is broken will probably have to debug it later.

113
00:09:52.260 --> 00:09:58.920
Ryan Mehta: Okay, um, let's go and look at your articles dot test sex. Is there anything interesting there.

114
00:10:01.170 --> 00:10:04.860
Greg Mall: That's how I got it to work. Yeah. Yeah, it was.

115
00:10:06.750 --> 00:10:07.560
Ryan Mehta: An interesting

116
00:10:07.920 --> 00:10:08.970
Greg Mall: It's not interesting. Yeah.

117
00:10:09.060 --> 00:10:12.810
Ryan Mehta: What about your CSS. Do you have anything interesting in your CSS file.

118
00:10:13.560 --> 00:10:14.910
Greg Mall: Very young

119
00:10:16.770 --> 00:10:21.870
Ryan Mehta: Yeah, I guess just little white space thing there. You don't need that extra tab on line five

120
00:10:22.050 --> 00:10:22.590
OK.

121
00:10:24.150 --> 00:10:36.780
Ryan Mehta: OK, let's take a look at your search assets, then let's go down the list and Elise, do you want to tell us what's going on in this file and any critiques that you have

122
00:10:37.770 --> 00:10:57.840
Brooke Perkins (she/her): I'm sorry, I have a question about white space before we move on. I don't want it to get too far ahead but so I was some files want like one line of white space at the end of the file, but I've noticed some don't. And I don't know the rule there.

123
00:10:59.610 --> 00:11:02.130
Ryan Mehta: Every files to have one line of white space.

124
00:11:02.220 --> 00:11:02.400
Oh,

125
00:11:03.540 --> 00:11:10.620
Brooke Perkins (she/her): Yeah. Okay, great. It's just that sometimes I guess it yells at me to do that. And sometimes it doesn't. So

126
00:11:10.950 --> 00:11:13.800
Ryan Mehta: Yeah, your JavaScript files, it'll yell at you to do that.

127
00:11:15.270 --> 00:11:23.100
Ryan Mehta: I haven't turned on in my VS code. So if you go to the gear on the top left hand or the bottom left hand corner. Greg really quick caress.

128
00:11:24.150 --> 00:11:25.500
Ryan Mehta: And go to settings.

129
00:11:27.000 --> 00:11:29.580
Ryan Mehta: And then look for, I think, new line.

130
00:11:34.740 --> 00:11:35.760
Ryan Mehta: Yeah, so

131
00:11:36.840 --> 00:11:39.930
Ryan Mehta: Right here. This will make it so actually

132
00:11:41.850 --> 00:11:47.940
Ryan Mehta: That's not what I want. Let me look up where it is on mine, can you do new live without a space in it.

133
00:11:54.630 --> 00:11:56.850
Ryan Mehta: Oh, I was trying to type into your box.

134
00:11:57.780 --> 00:12:03.930
Annalise Murphy: In it, the second one. When enabled and sort of final new line at the end of the file one saving it.

135
00:12:03.960 --> 00:12:06.720
Ryan Mehta: Isn't it. Yeah, yeah. Insert final new line.

136
00:12:09.720 --> 00:12:12.990
Ryan Mehta: Greg. If you make your terminal smaller, do you have that also

137
00:12:20.340 --> 00:12:23.670
Ryan Mehta: If you make this like terminal a bit smaller. Do you have another thing.

138
00:12:26.700 --> 00:12:28.230
Greg Mall: What do you mean terminal smaller

139
00:12:28.740 --> 00:12:34.560
Ryan Mehta: Just like grab right here and drag down, drag your terminal down so it's smaller.

140
00:12:37.320 --> 00:12:40.560
Annalise Murphy: Not the terminal is yeah, there

141
00:12:41.910 --> 00:12:42.300
Greg Mall: So,

142
00:12:42.510 --> 00:12:45.780
Ryan Mehta: Oh, I'm not looking at your script I was looking at something

143
00:12:45.900 --> 00:12:46.440
Ryan Mehta: I WEBVTT

1
00:00:02.939 --> 00:00:04.859
Ryan Mehta: Okay, so

2
00:00:07.350 --> 00:00:11.370
Ryan Mehta: Last time we made a full stack app. We did what I would call a data driven

3
00:00:13.110 --> 00:00:18.480
Ryan Mehta: Pack like I don't know patterns right word but data driven

4
00:00:19.980 --> 00:00:22.650
Ryan Mehta: Strategy while constructing our application.

5
00:00:24.300 --> 00:00:25.620
Ryan Mehta: So we started

6
00:00:29.160 --> 00:00:29.820
Ryan Mehta: On

7
00:00:32.430 --> 00:00:35.370
Ryan Mehta: The back end of this is so fast.

8
00:00:36.600 --> 00:00:39.000
Ryan Mehta: So we started by building a

9
00:00:40.020 --> 00:00:40.890
Ryan Mehta: Let's try that again.

10
00:00:44.550 --> 00:00:55.290
Ryan Mehta: Our model like figure out what our data looks like we've constructed our model and then our backend controller and then our front end service.

11
00:00:55.890 --> 00:01:16.020
Ryan Mehta: And then our view, this is the way that we approached everything and today we're going to do it sort of in the exact or at least that kind of opposite order. We're going to start with our view and then move on to our model controller service.

12
00:01:17.310 --> 00:01:21.750
Ryan Mehta: We're going to start with the view this time, this will be called our design driven

13
00:01:26.520 --> 00:01:27.990
Ryan Mehta: Design driven development.

14
00:01:31.800 --> 00:01:40.170
Ryan Mehta: Or some people call a DVD I hardly ever abbreviate DVD because this strategy appears called Data Driven Development.

15
00:01:42.450 --> 00:01:44.280
Ryan Mehta: It's also dvd

16
00:01:47.130 --> 00:01:48.450
Ryan Mehta: DVD.

17
00:01:50.460 --> 00:01:52.980
Ryan Mehta: So DD is kind of like a useless.

18
00:01:54.630 --> 00:01:56.670
Ryan Mehta: Thing to use or these things but

19
00:01:57.840 --> 00:02:02.070
Ryan Mehta: Today will do this approach. The difference between the two kind of makes sense.

20
00:02:05.640 --> 00:02:06.750
Ryan Mehta: Yeah. Yeah, man.

21
00:02:07.140 --> 00:02:09.030
Brooke Perkins (she/her): Data Driven Development that's done.

22
00:02:10.680 --> 00:02:22.470
Ryan Mehta: This is a way that I've almost always constructed apps in the past this way is like the way that people like hipsters are talking about nowadays hipster dads are talking about nowadays.

23
00:02:23.070 --> 00:02:23.850
Brooke Perkins (she/her): They would

24
00:02:24.300 --> 00:02:26.520
Brooke Perkins (she/her): Is there any benefit to design driven

25
00:02:29.040 --> 00:02:32.010
Ryan Mehta: It puts your, your view, the focus on the view.

26
00:02:33.570 --> 00:02:36.930
Ryan Mehta: Which makes a lot of sense. Like you really care about what users see

27
00:02:37.950 --> 00:02:44.910
Ryan Mehta: And then everything falls from there. So you choose what your data looks like. Based on what you want your users to see

28
00:02:47.610 --> 00:02:53.160
Brooke Perkins (she/her): I guess I'm having a hard time maybe I'm a hipster. I can't understand why you wouldn't want it to be that way.

29
00:02:54.000 --> 00:03:00.000
Ryan Mehta: Yeah, I mean I think this makes a lot of sense. If you are in a position to start with your view.

30
00:03:01.470 --> 00:03:09.330
Ryan Mehta: Sometimes you're given data, though, and you already know what the data looks like before you even begin the application. And so there's no like flexibility there.

31
00:03:13.740 --> 00:03:22.050
Ryan Mehta: But for us, we're going to go with this style design driven development. So we're going to start with our presentational components and then move our way to the back end.

32
00:03:24.150 --> 00:03:28.110
Ryan Mehta: So let's open up our front end code.

33
00:03:32.010 --> 00:03:39.030
Ryan Mehta: And get started, I just have our little front end application bootstrapped here.

34
00:03:40.620 --> 00:03:44.490
Ryan Mehta: We should be able to start it and see. Hello World.

35
00:03:49.830 --> 00:03:52.530
Ryan Mehta: Okay, here's our little hello world application.

36
00:03:54.330 --> 00:03:58.320
Ryan Mehta: To start off with, we're going to start building a form

37
00:03:59.880 --> 00:04:01.590
Ryan Mehta: So we'll build something

38
00:04:04.830 --> 00:04:11.940
Ryan Mehta: will build our signup form, it'll have a section for email a section for a password.

39
00:04:13.470 --> 00:04:14.520
Ryan Mehta: And submit button.

40
00:04:19.680 --> 00:04:26.490
Ryan Mehta: I think we've all seen sign up form. So probably seems like totally an interesting design here.

41
00:04:28.980 --> 00:04:31.080
Ryan Mehta: Let's go to our source directory

42
00:04:32.370 --> 00:04:36.630
Ryan Mehta: Under components. I'm going to make a directory called off.

43
00:04:41.220 --> 00:04:46.530
Ryan Mehta: And let's make a sign up that sex. This is where we'll put our signup form.

44
00:04:47.940 --> 00:04:50.730
Ryan Mehta: So it'll be a function called sign up

45
00:04:52.110 --> 00:04:54.240
Ryan Mehta: Mobile haven't taken any props.

46
00:04:55.860 --> 00:04:56.700
Ryan Mehta: At least for now.

47
00:04:58.260 --> 00:05:01.620
Ryan Mehta: And then we're going to make it return a

48
00:05:05.610 --> 00:05:14.070
Ryan Mehta: Performer is going to have an input type text is there type email for for inputs. Is that a thing.

49
00:05:15.900 --> 00:05:16.380
Annalise: Yeah.

50
00:05:16.890 --> 00:05:17.400
Ryan Mehta: It is

51
00:05:17.760 --> 00:05:19.440
Annalise: I thought I saw one actually

52
00:05:20.490 --> 00:05:20.760
Edgar Cuellar: Do

53
00:05:21.870 --> 00:05:22.680
Ryan Mehta: Maybe it has like

54
00:05:22.770 --> 00:05:24.510
Ryan Mehta: You know validation for us.

55
00:05:29.490 --> 00:05:30.900
Ryan Mehta: So there's type button.

56
00:05:30.900 --> 00:05:39.810
Ryan Mehta: checking email a feel for editing and email looks like a text input, but has validation parameters and relevant keyboard.

57
00:05:40.500 --> 00:05:54.120
Ryan Mehta: In supportive browsers and devices with dynamic keyboards. So you know how sometimes when you click on an input, it'll have like.com as one of the buttons that you can press. I think this would give you that sort of thing.

58
00:05:58.050 --> 00:05:59.100
Ryan Mehta: So let's use that

59
00:06:00.750 --> 00:06:02.040
Ryan Mehta: So we'll have an email.

60
00:06:07.110 --> 00:06:13.410
Ryan Mehta: Jamie J style when she was writing her components, she did this.

61
00:06:16.020 --> 00:06:25.830
Ryan Mehta: And then like immediately press enter here so smart. I'm like, have been backwards. This whole time I've been reading it all on a single line and then

62
00:06:27.090 --> 00:06:28.200
Ryan Mehta: fixing everything

63
00:06:30.150 --> 00:06:30.540
Ryan Mehta: Okay.

64
00:06:31.920 --> 00:06:34.590
Ryan Mehta: So we'll have a tight email. We need to give it a value.

65
00:06:35.940 --> 00:06:37.620
And on change.

66
00:06:42.540 --> 00:06:45.420
Ryan Mehta: We also want our forum to probably have

67
00:06:47.460 --> 00:06:56.010
Ryan Mehta: A tight passwords. They value for the password and on change function also

68
00:06:58.590 --> 00:07:00.210
Ryan Mehta: And then we'll have a button.

69
00:07:07.680 --> 00:07:08.790
Ryan Mehta: Seems all expected

70
00:07:10.380 --> 00:07:19.980
Ryan Mehta: All right, let's add some placeholders to our email to so placeholder email and a placeholder.

71
00:07:21.840 --> 00:07:22.650
Ryan Mehta: Password.

72
00:07:23.790 --> 00:07:37.350
Ryan Mehta: And instead of using labels will use placeholders so the user knows what has to go into the input field, and then we'll use local state to hold our password and email as the users typing constructs email state.

73
00:07:42.240 --> 00:07:44.010
Ryan Mehta: And password state.

74
00:07:51.330 --> 00:07:58.170
Ryan Mehta: And then let's create construct a handle change function that will take the target.

75
00:08:01.980 --> 00:08:08.850
Ryan Mehta: Actually, I'm going to be kind of lazy. I'm going to avoid the handled change function and just write it in line. So we'll write our

76
00:08:13.080 --> 00:08:13.680
Ryan Mehta: Email

77
00:08:15.420 --> 00:08:19.740
Ryan Mehta: That way I don't have to do all those like if you normally do.

78
00:08:27.540 --> 00:08:27.870
Alright.

79
00:08:29.580 --> 00:08:30.690
I'm not gay.

80
00:08:35.250 --> 00:08:36.960
Thomas Stussi: And an equal sign on the arrows luncheon.

81
00:08:41.310 --> 00:08:44.580
Ryan Mehta: Alright, so we have a little form that we can type into now.

82
00:08:46.560 --> 00:08:50.430
Ryan Mehta: We should probably create some sort of handle submit though.

83
00:08:55.500 --> 00:08:58.410
Ryan Mehta: Get an event and we will prevent default

84
00:09:02.730 --> 00:09:06.570
Ryan Mehta: And pass this handle submit to the on submit of our form.

85
00:09:09.960 --> 00:09:12.240
Ryan Mehta: The good sign up form.

86
00:09:14.280 --> 00:09:14.820
Ryan Mehta: All right.

87
00:09:17.610 --> 00:09:27.120
Ryan Mehta: How we're going to do this is I want to sort of store the currently logged in user and all the stuff about the user inside of an off provider.

88
00:09:28.260 --> 00:09:33.780
Ryan Mehta: The user state who's currently logged and seems like it should be global to our entire application.

89
00:09:34.410 --> 00:09:51.090
Ryan Mehta: As we're writing this stuff. We have no idea which components in the future will need access to the currently logged in user, it seems like it's going to be needed all over the place. The header is probably going to need it in our application. So it can display like the users face.

90
00:09:52.410 --> 00:09:56.040
Ryan Mehta: The main body of the application is probably going to need it right

91
00:09:57.480 --> 00:10:06.030
Ryan Mehta: We're going to have private routes, the private route is going to need to know if somebody logged in, if they're logged in, show the private information otherwise redirect to login page.

92
00:10:07.710 --> 00:10:19.050
Ryan Mehta: It's going to be all over. And it's really hard to predict exactly where we'll need this user state as they're constructing our application because of that it seems like it's best to store it globally for the entire application.

93
00:10:20.400 --> 00:10:22.020
Ryan Mehta: Which means we're going to need some sort of

94
00:10:23.490 --> 00:10:26.910
Ryan Mehta: Provider off provider for application.

95
00:10:28.080 --> 00:10:33.600
Ryan Mehta: So I'm going to create an author provider. Let's make it all about

96
00:10:34.950 --> 00:10:37.050
Ryan Mehta: Sex and

97
00:10:42.840 --> 00:10:45.150
Ryan Mehta: We will also construct the

98
00:10:46.740 --> 00:11:00.540
Ryan Mehta: Well, in order to get this off provider rolling. We're going to need some sort of off context, right, so I will construct or create a context folder.

99
00:11:02.610 --> 00:11:14.460
Ryan Mehta: off.js file here will import react react and we will export context, context.

100
00:11:20.550 --> 00:11:23.610
Ryan Mehta: Will construct our off context. Let's look good.

101
00:11:25.740 --> 00:11:31.710
Ryan Mehta: So now with that off context constructed, we can create our off provider.

102
00:11:32.880 --> 00:11:36.630
Ryan Mehta: Or off provider is going to be a component that takes children.

103
00:11:40.950 --> 00:11:43.050
Ryan Mehta: And then eventually returns

104
00:11:44.760 --> 00:11:47.400
Ryan Mehta: Off on text off provider.

105
00:11:48.600 --> 00:11:49.050
So,

106
00:11:50.550 --> 00:11:54.960
Ron Yonker: Children refers to all the child components or

107
00:11:56.430 --> 00:12:02.970
Ryan Mehta: Children is all the children of our off provider. So makes it so we can use the OT provider.

108
00:12:04.920 --> 00:12:06.240
Ryan Mehta: And give it children to their

109
00:12:09.810 --> 00:12:15.360
Ryan Mehta: Children are all the things that go in between the opening and closing tags of our off provider.

110
00:12:16.050 --> 00:12:16.770
Ron Yonker: Okay, thank you.

111
00:12:19.050 --> 00:12:20.130
Ryan Mehta: export this

112
00:12:23.490 --> 00:12:24.480
Ryan Mehta: But good so far.

113
00:12:26.070 --> 00:12:30.660
Ryan Mehta: Alright, are off provider is going to export some value.

114
00:12:33.450 --> 00:12:47.430
Ryan Mehta: Will say we'll call this we call this bucket in the past, but that seems kind of like a silly word for this thing. It's kind of like a word that maybe somebody that's just learning this would call it our bucket of state. Let's call this our

115
00:12:48.450 --> 00:12:48.870
Ryan Mehta: Family

116
00:12:51.960 --> 00:12:56.400
Ryan Mehta: Okay. Sorry, I can't think of a better name, actually, but it seems just fine.

117
00:12:57.810 --> 00:13:05.910
Ryan Mehta: We can come back to it and see if we can find a better name for this object that we're providing maybe it's like off state or something.

118
00:13:10.530 --> 00:13:10.920
Sure.

119
00:13:13.110 --> 00:13:19.080
Ryan Mehta: Few things that we're going to need to have. We're going to have the current user who's currently logged in.

120
00:13:24.210 --> 00:13:30.750
Ryan Mehta: And by default, that will be no before anybody's logged in, we have no current user makes sense.

121
00:13:34.200 --> 00:13:36.390
Ryan Mehta: Will provide this current user

122
00:13:38.130 --> 00:13:48.060
Ryan Mehta: In our state will also want some loading state, are we currently in an authentication loading like are we currently trying to figure out if some of these logged in.

123
00:13:51.150 --> 00:13:58.500
Ryan Mehta: And we'll start this off as true to begin with. We're trying to figure out if the users logged in or not.

124
00:14:02.280 --> 00:14:04.050
Ryan Mehta: Will provide this over here.

125
00:14:06.000 --> 00:14:18.780
Ryan Mehta: And then I think we also want to provide some functions for other other files to us. We want to provide a signup function and login function to start with, let's just create our signup function.

126
00:14:20.880 --> 00:14:31.800
Ryan Mehta: When you sign up, you need to provide the email address and the password that somebody's going to use to sign up and then inside of here. We want to make a call to

127
00:14:40.680 --> 00:14:45.300
Ryan Mehta: Make sense and then we will provide sign up also

128
00:14:48.180 --> 00:14:53.730
Ryan Mehta: In order to do this, will need a service will need a backend model will need a back end route and all of those things.

129
00:14:57.450 --> 00:15:06.390
Ryan Mehta: But eventually, once we have those. We're going to use this sign up method or the signup function over here on the right hand side.

130
00:15:08.940 --> 00:15:14.640
Ryan Mehta: Inside of our handles submit or press the submit button. We want to use this signup function from the provider.

131
00:15:16.140 --> 00:15:20.730
Ryan Mehta: To get that I am going to add a little hook here to make it easier to get that

132
00:15:22.590 --> 00:15:23.370
Sign up

133
00:15:25.260 --> 00:15:26.190
Ryan Mehta: That will

134
00:15:27.720 --> 00:15:28.950
Ryan Mehoff the initial state. Start off state equaling count of zero.

111
00:16:23.190 --> 00:16:32.580
Ryan Mehta: And then use reducer is going to give us access to the current state and the function that lets us send an action to the producer and recalculate state.

112
00:16:33.780 --> 00:16:37.440
Ryan Mehta: When we click on this increment button we dispatch.

113
00:16:38.820 --> 00:16:47.640
Ryan Mehta: An action where the type is increment when we dispatch this action, the action heads into the reducer with the current state.

114
00:16:49.620 --> 00:16:51.300
Ryan Mehta: It transforms the state.

115
00:16:52.380 --> 00:16:59.250
Ryan Mehta: And then we get a new piece of state here right count has been incremental by one. Same with detriment.

116
00:16:59.940 --> 00:17:13.080
Ryan Mehta: We send this deck from an object into the reducer the reducer knows the current state or gets past the current state and that action. This time the action type is detriment. So, it returns a new piece of state.

117
00:17:14.670 --> 00:17:16.410
Ryan Mehta: Where the count is one less

118
00:17:17.910 --> 00:17:19.950
Ryan Mehta: And the component renders based on that.

119
00:17:21.690 --> 00:17:23.610
Brooke Perkins (she/her): That's what's happening. And this huge producer.

120
00:17:26.280 --> 00:17:32.220
Ron Yonker: Why can't it just say that. Why does it have to have this many layers of abstraction. You have to look at

121
00:17:34.680 --> 00:17:46.830
Ryan Mehta: Yeah, I mean, it depends on what you're trying to do with your state. This is such a great way to handle state that is global and changing all the time and different ways that you can't always predict

122
00:17:50.340 --> 00:17:54.360
Ryan Mehta: So for complicated objects. This might be a really great way to handle state.

123
00:17:55.320 --> 00:18:00.930
Thomas Stussi: Like you could write this reducer function to change all kinds of different state.

124
00:18:01.740 --> 00:18:03.330
Thomas Stussi: Not just one property of

125
00:18:03.330 --> 00:18:08.430
Thomas Stussi: State, they could change all your properties of state based on different cases.

126
00:18:09.060 --> 00:18:10.560
Exactly. Okay.

127
00:18:11.700 --> 00:18:13.620
Brooke Perkins (she/her): Is it common practice. Oh, I'm sorry.

128
00:18:13.980 --> 00:18:14.520
Ryan Mehta: No, go ahead.

129
00:18:14.910 --> 00:18:22.050
Brooke Perkins (she/her): Um, so is this always called a, it's a reducer function. So it'll always be called reducer.

130
00:18:23.760 --> 00:18:25.890
Ryan Mehta: Yeah, by convention, it's called your do so you could

131
00:18:26.220 --> 00:18:27.450
Ryan Mehta: Call this something else though.

132
00:18:27.930 --> 00:18:30.420
Brooke Perkins (she/her): Sure. But I'm wondering, like,

133
00:18:31.980 --> 00:18:39.840
Brooke Perkins (she/her): I know this isn't really important, but this is where my brain jumps calling it reducer. Is it because like we're reducing

134
00:18:41.580 --> 00:18:49.650
Brooke Perkins (she/her): Like a kind of sort of complicated series of functions into this sort of more simple way of dealing with state.

135
00:18:50.910 --> 00:18:52.530
Brooke Perkins (she/her): Like that the idea or

136
00:18:53.370 --> 00:19:10.110
Ryan Mehta: So it is because we're reducing something we're reducing a bunch of actions into a single piece of state because you could dispatch five actions right when you dispatch those five actions those five actions get reduced into a single piece of state.

137
00:19:10.740 --> 00:19:12.750
Brooke Perkins (she/her): I see. Okay, cool. Thank you.

138
00:19:13.410 --> 00:19:20.490
Ryan Mehta: So yeah any piece of state that you're currently at is just a result of calling all of the actions beforehand, reducing them all.

139
00:19:21.600 --> 00:19:22.950
Ryan Mehta: Gotcha. Thanks, that's helpful.

140
00:19:27.000 --> 00:19:37.500
Ben Waples: Is it weird that online that initial state is the second thing passed in to the function, but it's the state is the first deconstructed

141
00:19:38.400 --> 00:19:39.930
Ben Waples: Are here, right, is that weird

142
00:19:42.780 --> 00:19:47.370
Ryan Mehta: Yeah. Do you feel like it should be opposite dispatch should be first and sake should be second

143
00:19:48.030 --> 00:19:56.400
Ben Waples: Yeah, but I mean, how it is right now it's like how we've been doing with you state. But yeah, I guess it's just, is there any reason for that, or is that just the way it is.

144
00:19:57.210 --> 00:19:58.770
Ryan Mehta: I think, Well, it's because I

145
00:19:58.860 --> 00:20:06.810
Ryan Mehta: Think you always have to pass this reducer. But you could leave off initial state and have your state start off with undefined.

146
00:20:07.470 --> 00:20:09.690
Ryan Mehta: If you wanted to that sort of they have it past second

147
00:20:10.530 --> 00:20:11.580
Ben Waples: Okay. All right.

148
00:20:14.940 --> 00:20:15.240
Ryan Mehta: Yeah, now

149
00:20:16.560 --> 00:20:23.310
Ryan Mehta: As we start building these things up. The really nice thing is we start having we're like separating again.

150
00:20:23.370 --> 00:20:32.070
Ryan Mehta: Out how our state changes from the component itself. Eventually the component itself just needs to know what just happened.

151
00:20:33.180 --> 00:20:46.320
Ryan Mehta: The name of the action like reset form or submit form and then the producers responsible for figuring out based on that action that just happened, how do we actually need to change state.

152
00:20:47.520 --> 00:20:48.870
Ryan Mehta: So the very separated

153
00:20:51.990 --> 00:21:03.030
Sarah Rector: So Ryan This may be a silly question, but is this like something you could use like on a forum to do your handle change and handle summit and all of those things like at the same time.

154
00:21:03.930 --> 00:21:06.690
Ryan Mehta: Totally, totally performs

155
00:21:08.280 --> 00:21:12.150
Ron Yonker: Wire. Why is there an uppercase count in a lowercase count.

156
00:21:15.540 --> 00:21:16.260
Count

157
00:21:17.520 --> 00:21:17.820
Ryan Mehta: Oh,

158
00:21:20.250 --> 00:21:22.560
Ryan Mehta: That's just what's going to display on the page.

159
00:21:22.830 --> 00:21:26.640
Ryan Mehta: So on the page. When you render this is going to be

160
00:21:27.150 --> 00:21:27.990
Ron Yonker: Okay, yeah.

161
00:21:28.110 --> 00:21:29.490
Ryan Mehta: Count and then the actual

162
00:21:29.550 --> 00:21:31.230
Ryan Mehta: number next to it.

163
00:21:33.540 --> 00:21:38.880
Thomas Stussi: So in like a real project, maybe like that return statement.

164
00:21:40.110 --> 00:21:42.420
Thomas Stussi: Might be in a component file.

165
00:21:43.530 --> 00:21:46.560
Thomas Stussi: But like everything else would be like a hook file.

166
00:21:48.000 --> 00:22:02.910
Ryan Mehta: Yeah, so like we're actually going to as we build this up and get closer and closer Redux our file structure is going to get kind of a bit crazy. We're going to end up with the producers folder, an action folder and the selectors folder.

167
00:22:05.610 --> 00:22:05.940
Thomas Stussi: Okay.

168
00:22:11.580 --> 00:22:17.520
Ben Waples: I'm just like we're passing the type permanent. Could we pass in like a comma like value.

169
00:22:18.600 --> 00:22:18.870
Ben Waples: Or

170
00:22:19.080 --> 00:22:25.620
Ben Waples: Totally okay and then that way you can like change state with a value and case. Yep.

171
00:22:25.680 --> 00:22:26.640
Ryan Mehta: Exactly. Um,

172
00:22:27.000 --> 00:22:32.580
Ryan Mehta: We'll start playing with that also by convention that thing with the value in it will be called payload.

173
00:22:33.870 --> 00:22:36.030
Ryan Mehta: So you'll have action type in action payload.

174
00:22:39.930 --> 00:22:43.500
Jerud Moyer: So if we have if we have a producers folder.

175
00:22:44.940 --> 00:22:49.440
Jerud Moyer: You're implying that we will have multiple of these functioning throughout a nap.

176
00:22:52.020 --> 00:22:56.400
Jerud Moyer: Right. But if you say it was convention to name it reducer like. How's that work.

177
00:22:57.120 --> 00:23:01.590
Ryan Mehta: Yeah, we're going to have multiple reducer. So we're going to have a reduced source folder.

178
00:23:02.430 --> 00:23:04.020
Ryan Mehta: With multiple producers.

179
00:23:04.350 --> 00:23:08.100
Ryan Mehta: Inside of each file inside of the folder you can name this reducer still

180
00:23:10.950 --> 00:23:11.700
Jerud Moyer: Important

181
00:23:12.990 --> 00:23:27.000
Ryan Mehta: Yep. And then we're going to have this thing called the combine reducer that will take multiple producers and actually create a good one single reducer out of multiple producers for us automatically

182
00:23:28.140 --> 00:23:34.020
Ryan Mehta: So the only reason why we're splitting it up this so our function stays shorter, but ultimately we want them.

183
00:23:34.650 --> 00:23:46.680
Ryan Mehta: All handling one really large global peace of state. So we're going to combine all of the research together with this combined producer function that will see probably tomorrow or Wednesday.

184
00:23:47.430 --> 00:23:52.410
Adrian Simental: Could we not just create our own giant producer instead of having to compile a little later.

185
00:23:52.890 --> 00:23:55.350
Ryan Mehta: You could totally create your own giant reducer.

186
00:23:56.640 --> 00:23:57.180
Ryan Mehta: She's

187
00:23:57.570 --> 00:24:07.650
Ryan Mehta: Written with a bunch of different cases, but you might end up with like five or 600 line file. If you do that, depending on how complicated your app is

188
00:24:09.390 --> 00:24:24.750
Ron Yonker: Yeah, so that's kind of moving me to ask, why would I ever want to do this, ever. What problem is this solving that I have to go through a few layers of abstraction and dependent hawks to accomplish.

189
00:24:25.620 --> 00:24:32.700
Ryan Mehta: Yeah, it solves a bunch of really good problems. First, it solves the problem of how do you manage global state.

190
00:24:34.140 --> 00:24:39.570
Ryan Mehta: When your state gets larger and larger and it's all stuffed into one large global state object.

191
00:24:40.530 --> 00:24:54.870
Ryan Mehta: becomes really hard to figure out how you want to transform that state, especially if the state is interconnected in some ways, like if I fire this event. I don't want to just change this one field and state. I want to change multiple fields and state.

192
00:24:57.090 --> 00:25:03.390
Ryan Mehta: When you're writing your component. You don't want to have to figure out which fields, you need to change you want to have a function that does

193
00:25:03.390 --> 00:25:06.150
Ryan Mehta: All of that stuff for you. So when you have a bunch of

194
00:25:06.180 --> 00:25:13.020
Ryan Mehta: Interconnected state pieces of state having a reducer function and something like this becomes really nice.

195
00:25:14.280 --> 00:25:17.700
Ryan Mehta: Secondly, it gives us a really nice pattern that scales.

196
00:25:18.900 --> 00:25:26.070
Ryan Mehta: I wouldn't say effortlessly, but it scales, much better than this pattern where we have like a state.

197
00:25:27.210 --> 00:25:31.980
Ryan Mehta: Isolated to a single component that we pass a big props to other components.

198
00:25:33.840 --> 00:25:47.820
Ryan Mehta: This becomes very limited as our application grows. When we go from, like, five pages to 200 pages, figuring out where we should define our state to get to all the different components that need it becomes really hard.

199
00:25:48.540 --> 00:25:55.500
Ryan Mehta: And we push that all up to global state and then create functions that we can dispatch.

200
00:25:58.530 --> 00:26:06.660
Ryan Mehta: It just becomes super, super scalable for as many pages that as we have and as many developers as we have just far more scale.

201
00:26:07.440 --> 00:26:28.560
Ron Yonker: That this is for when we have a lot of stake has to go to a lot of different moving individual components, some of which the state might be interacting with each other arm but not writing this for a lot of different components, just for the global level.

202
00:26:30.060 --> 00:26:36.360
Ryan Mehta: Right, yeah, you wouldn't do this for each individual component you would do this probably more so for global state.

203
00:26:37.290 --> 00:26:37.950
Ryan Mehta: Because highly

204
00:26:38.070 --> 00:26:42.210
Ron Yonker: How would you pass around state across different pages, maybe

205
00:26:43.410 --> 00:26:48.090
Ryan Mehta: You'd use a provider and you drop that provider around app JS.

206
00:26:50.310 --> 00:26:50.670
Ron Yonker: OK.

207
00:26:52.530 --> 00:26:53.700
Ron Yonker: OK, I can see that.

208
00:26:54.750 --> 00:27:07.650
Ron Yonker: So for something like login information or profile information for somebody across the site that might display preferences or something just grabbing something off the top of my head.

209
00:27:14.880 --> 00:27:21.480
Thomas Stussi: Am I correct and understanding that this is kind of like the groundwork of understanding what for ducks is going to do.

210
00:27:22.560 --> 00:27:23.340
Ryan Mehta: It is, yeah.

211
00:27:23.490 --> 00:27:26.370
Ryan Mehta: This is actually what we do today and tomorrow.

212
00:27:26.880 --> 00:27:34.380
Ryan Mehta: Before we actually do Redux will be the same as what Redux does it just so happens that Krieger Redux

213
00:27:36.090 --> 00:27:41.610
Ryan Mehta: Now works for Facebook and brought a lot of the Redux principles into core react.

214
00:27:43.110 --> 00:27:47.910
Ryan Mehta: So, this used to not exist in React until very recently.

215
00:27:49.740 --> 00:27:54.420
Ryan Mehta: Now, it exists in React and it looks almost identical to what Redux looks like.

216
00:27:56.310 --> 00:27:57.210
Ryan Mehta: We looked at, like,

217
00:28:04.050 --> 00:28:04.740
Quickly.

218
00:28:10.440 --> 00:28:11.790
Ryan Mehta: They have a place

219
00:28:14.400 --> 00:28:14.730
With

220
00:28:35.130 --> 00:28:35.820
Ryan Mehta: Producer

221
00:28:39.810 --> 00:28:40.620
Producer

222
00:28:49.980 --> 00:29:05.280
Ryan Mehta: Kind of see a reducer in Redux it just like our reducer gets the current state and an action has a switch case on action types. And then depending on the action will return a new piece of state.

223
00:29:07.560 --> 00:29:11.040
Ryan Mehta: So it's going to be the same principles that we use in Redux

224
00:29:18.570 --> 00:29:20.040
Ryan Mehta: I don't like that. This is recording

225
00:29:26.730 --> 00:29:29.370
Ryan Mehta: Okay, the same have the same good

226
00:29:31.620 --> 00:29:32.040
All right.

227
00:29:33.570 --> 00:29:37.980
Ryan Mehta: Any other questions here before we start playing around with the reducer a little bit

228
00:29:41.880 --> 00:30:01.860
Ryan Mehta: All right before we go to our main application. I want to build two smaller applications using this reducer concept will build this exact same application a counter together and then we'll build our classic color picker with a reducer and then we'll go into our game with a reducer.

229
00:30:03.990 --> 00:30:06.600
Ryan Mehta: All right, let's start off

230
00:30:09.300 --> 00:30:10.290
Ryan Mehta: With our

231
00:30:12.720 --> 00:30:19.020
Ryan Mehta: Here's a little proof of concept that I just showed up probably just comment this out so we can refer back to it later.

232
00:30:27.870 --> 00:30:30.870
Ryan Mehta: Let's just make sure we can get back to a Hello World.

233
00:30:34.170 --> 00:30:35.100
Ryan Mehta: Application.

234
00:30:44.220 --> 00:30:47.460
Ryan Mehta: Okay, there's our little hello world application.

235
00:30:49.170 --> 00:30:55.380
Ryan Mehta: To start off with, I'm going to make a component inside of a directory called counter

236
00:30:59.520 --> 00:31:00.240
4:56.820
Ryan Mehta: And we could also hold in your idea, would it also hold the location A input.

149
00:14:58.170 --> 00:14:58.980
Thomas Stussi: Yes.

150
00:15:03.840 --> 00:15:04.860
Ryan Mehta: Producer

151
00:15:05.880 --> 00:15:07.980
Ryan Mehta: hold our calls

152
00:15:15.630 --> 00:15:20.700
Ryan Mehta: And then we would have a guess. Read it producer.

153
00:15:23.310 --> 00:15:25.560
Ryan Mehta: Called the current subreddit

154
00:15:31.260 --> 00:15:31.890
Ryan Mehta: Like that.

155
00:15:33.540 --> 00:15:34.680
Ryan Mehta: Will call this

156
00:15:35.970 --> 00:15:36.660
Ryan Mehta: A

157
00:15:38.790 --> 00:15:41.070
Ryan Mehta: What, what do you want to title your proposal.

158
00:15:42.990 --> 00:15:43.890
Thomas Stussi: AB read it.

159
00:15:44.730 --> 00:15:51.330
Ryan Mehta: And be ready. Okay, anybody else have any other proposals for producers.

160
00:15:52.500 --> 00:15:55.710
Patrick Wilson: Would be like lecture, maybe like an input output.

161
00:15:57.750 --> 00:15:58.200
So like

162
00:16:01.620 --> 00:16:02.100
Ryan Mehta: What

163
00:16:03.510 --> 00:16:06.090
Ryan Mehta: What would you say you'd have an input reducer.

164
00:16:06.450 --> 00:16:08.640
Ryan Mehta: Yeah, and that would hold

165
00:16:09.780 --> 00:16:13.020
Patrick Wilson: The location A and B inputs and the subreddit

166
00:16:23.940 --> 00:16:24.840
Ryan Mehta: Output reducing

167
00:16:26.970 --> 00:16:27.450
Patrick Wilson: The rest.

168
00:16:49.170 --> 00:16:50.610
Ryan Mehta: Anybody else have any other

169
00:16:51.870 --> 00:16:53.430
Ryan Mehta: Producer structures.

170
00:17:06.270 --> 00:17:08.670
Ryan Mehta: I guess there's like a compromise between the two.

171
00:17:09.810 --> 00:17:12.990
Ryan Mehta: We could have like compromise.

172
00:17:14.370 --> 00:17:20.040
Ryan Mehta: You would have an a reducer that would hold articles. A and

173
00:17:21.810 --> 00:17:22.230
Ryan Mehta: A

174
00:17:23.280 --> 00:17:25.470
Ryan Mehta: Good have a the user

175
00:17:36.030 --> 00:17:36.930
Ryan Mehta: Or maybe it's called

176
00:18:04.620 --> 00:18:09.150
Ryan Mehta: And then still we're kind of at a loss to where to put the actual subreddit

177
00:18:17.400 --> 00:18:19.350
Ryan Mehta: So I guess you could have that also

178
00:18:20.100 --> 00:18:22.380
Patrick Wilson: Or you could have the one reduce her double the mall.

179
00:18:22.950 --> 00:18:25.290
Ryan Mehta: We can have one reduced to hold everything. Yeah.

180
00:18:26.370 --> 00:18:30.360
Ryan Mehta: We'll call this mano a mano.

181
00:18:33.030 --> 00:18:33.810
Ryan Mehta: de ser

182
00:18:36.000 --> 00:18:37.650
Ryan Mehta: Which would have everything. Yeah.

183
00:18:55.980 --> 00:18:58.320
Ryan Mehta: Producer structures that people can think of.

184
00:19:01.020 --> 00:19:03.390
Ryan Mehta: Endless right we could just keep doing this for days.

185
00:19:06.900 --> 00:19:07.980
Ryan Mehta: Look at also do like

186
00:19:10.350 --> 00:19:13.560
Ryan Mehta: And I don't know what to call this title.

187
00:19:15.840 --> 00:19:18.990
Thomas Stussi: Because there's what being on a project team. It's like in the real world.

188
00:19:19.440 --> 00:19:20.760
Ryan Mehta: Yeah, pretty much.

189
00:19:21.000 --> 00:19:21.720
Were like

190
00:19:23.820 --> 00:19:26.130
Ryan Mehta: Yeah, you just spend my time doing this for like

191
00:19:26.160 --> 00:19:28.380
Ryan Mehta: A few hours and then

192
00:19:30.360 --> 00:19:34.560
Ryan Mehta: After the few hours, you wouldn't start working on, you'd be like, let's let's sleep on it.

193
00:19:35.670 --> 00:19:38.580
Ryan Mehta: And then start coding like two weeks from now.

194
00:19:42.240 --> 00:19:53.100
Ryan Mehta: So articles group do sir, which would hold articles. A and articles, we

195
00:19:54.750 --> 00:19:57.870
Ryan Mehta: Have our search committee, sir.

196
00:19:59.400 --> 00:20:02.790
Ryan Mehta: Which would have the inputs.

197
00:20:06.840 --> 00:20:07.950
Ryan Mehta: And then

198
00:20:11.130 --> 00:20:12.330
Ryan Mehta: We're missing the

199
00:20:13.740 --> 00:20:15.510
Ryan Mehta: These ones. Maybe this is called the

200
00:20:17.790 --> 00:20:21.510
Ryan Mehta: reducer. This is called the switch.

201
00:20:28.950 --> 00:20:30.570
Ryan Mehta: So there's this one also.

202
00:20:38.970 --> 00:20:46.620
Ryan Mehta: Did we ever do the one where these two are combined and the input reducer is is that, yeah, that's kind of this one.

203
00:20:48.390 --> 00:20:55.350
Ryan Mehta: Okay, so we have like a bunch of different proposals here. Last chance for anybody else to come up with a proposal.

204
00:21:06.990 --> 00:21:09.960
Ryan Mehta: No. No other categories. Alright, so we vote on

205
00:21:11.610 --> 00:21:20.850
Ryan Mehta: These things I'm going to do a straw poll, because the, oh no, there's a zoom voting mechanism right zoom pole.

206
00:21:22.020 --> 00:21:23.460
Annalise: Yeah, there are polls, you can make

207
00:21:25.590 --> 00:21:27.060
Annalise: Let's make a poll together.

208
00:21:31.500 --> 00:21:33.330
Already have a few polls enter

209
00:21:41.190 --> 00:21:41.580
Okay.

210
00:21:42.690 --> 00:21:43.290
Ryan Mehta: What's

211
00:21:45.870 --> 00:21:47.520
Ryan Mehta: Our boosters.

212
00:21:48.930 --> 00:21:50.490
Ryan Mehta: We have the AB.

213
00:21:59.370 --> 00:22:01.770
Ryan Mehta: Press the red button. Okay.

214
00:22:03.330 --> 00:22:06.510
Ryan Mehta: Not always lost compromise.

215
00:22:13.410 --> 00:22:15.810
Ryan Mehta: The monolithic and the by category.

216
00:22:24.030 --> 00:22:24.720
Ryan Mehta: See

217
00:22:29.070 --> 00:22:31.770
Ryan Mehta: So, now can I execute this poll

218
00:22:34.620 --> 00:22:42.120
Ryan Mehta: Poll, and while that's going, I will try to make it so we can show all of them.

219
00:22:43.500 --> 00:22:44.280
Ryan Mehta: At once.

220
00:22:49.980 --> 00:22:49.980
It's

221
00:23:06.750 --> 00:23:08.430
Ryan Mehta: Kind of hard to read but it's like

222
00:23:19.440 --> 00:23:21.120
Jerud Moyer: Live updates on this. Are you guys

223
00:23:25.710 --> 00:23:26.250
Brooke Perkins (she/her): Totally. Can you

224
00:23:26.310 --> 00:23:26.790
Ryan Mehta: See that

225
00:23:27.390 --> 00:23:28.650
Thomas Stussi: No, we can't see that.

226
00:23:31.470 --> 00:23:37.140
Ryan Mehta: That's unfortunate it right now. The AB producers are winning by a single vote.

227
00:23:38.670 --> 00:23:40.680
Ryan Mehta: In second place the input output.

228
00:23:40.680 --> 00:23:41.550
Thomas Stussi: Producers

229
00:23:41.970 --> 00:23:46.500
Ryan Mehta: And by category, your time. There is no compromise or monolithic boats yet.

230
00:23:48.360 --> 00:23:51.480
Ryan Mehta: So don't throw your vote away with the model it up. Okay.

231
00:23:51.540 --> 00:23:53.760
Ryan Mehta: There's one single vote for the monolithic

232
00:23:54.870 --> 00:23:56.310
Annalise: Counts everybody bow.

233
00:23:56.820 --> 00:23:57.660
Is this ring.

234
00:23:59.100 --> 00:24:00.780
Thomas Stussi: Voted for monolithic

235
00:24:01.980 --> 00:24:02.280
Jerud Moyer: Top

236
00:24:02.730 --> 00:24:04.560
Jerud Moyer: Shelf top counting

237
00:24:04.920 --> 00:24:06.720
Patrick Wilson: I almost voted for monolithic

238
00:24:10.500 --> 00:24:12.120
Ryan Mehta: That's too bad. It's outstanding.

239
00:24:13.380 --> 00:24:14.940
Ryan Mehta: It's probably TTS

240
00:24:15.600 --> 00:24:19.560
Thomas Stussi: I just thought of a new model. So we should redo the whole election.

241
00:24:20.910 --> 00:24:30.720
Thomas Stussi: I want I want a model where it's totally illogical like location A input and like location be are in the same input.

242
00:24:31.680 --> 00:24:36.150
Ryan Mehta: Yeah, it's like yeah articles. A and location be are in the same reducer.

243
00:24:37.530 --> 00:24:38.130
Thomas Stussi: Yes.

244
00:24:40.440 --> 00:24:41.700
Ryan Mehta: All right, well,

245
00:24:41.880 --> 00:24:44.970
Ron Yonker: You know, I haven't demanded a recount five times.

246
00:24:46.650 --> 00:24:48.690
Ryan Mehta: Share results so

247
00:24:49.050 --> 00:24:50.220
Ryan Mehta: It was pretty close.

248
00:24:51.360 --> 00:24:55.320
Ryan Mehta: But the AB reduce hers have has taken it.

249
00:24:56.730 --> 00:24:58.890
Ryan Mehta: Hopefully this democratic.

250
00:25:00.660 --> 00:25:03.900
Ryan Mehta: way of figuring out how we're going to do it doesn't end up killing off from the end.

251
00:25:05.160 --> 00:25:06.750
Ryan Mehta: But we will go with

252
00:25:09.210 --> 00:25:11.850
Ryan Mehta: Success. I'm not, I'm not trying to read. I'm

253
00:25:11.910 --> 00:25:13.530
Ryan Mehta: not making any plans or

254
00:25:13.590 --> 00:25:19.230
Annalise: No, I'm laughing It's, I can only laugh at this in the state of the world. So thank you.

255
00:25:20.550 --> 00:25:27.570
Ryan Mehta: So this is our we should keep that for a we should keep our proposals proposals.

256
00:25:31.980 --> 00:25:33.090
Ryan Mehta: About these

257
00:25:34.890 --> 00:25:38.280
Ryan Mehta: So we thought about all of those. So at least people will think

258
00:25:40.710 --> 00:25:46.650
Ryan Mehta: If anybody comes back to this document, they'll at least think we we did our due diligence. If we have totally messed up.

259
00:25:51.810 --> 00:26:02.460
Ryan Mehta: That's something I guess you also do at work. You like you keep your plan there. So, like, if this plan ends up failing you can at least say like, Yeah, but we thought about the right direction. It's just that we chose to go

260
00:26:03.690 --> 00:26:05.970
Ryan Mehta: We made a mistake, small mistake.

261
00:26:08.430 --> 00:26:12.510
Ryan Mehta: Alright, so we will use that as our structure.

262
00:26:15.330 --> 00:26:18.960
Ryan Mehta: Let's go back to pages and make a little bit

263
00:26:21.360 --> 00:26:22.560
Components.

264
00:26:23.580 --> 00:26:25.470
Ryan Mehta: So for the homepage.

265
00:26:27.450 --> 00:26:35.430
Ryan Mehta: We're going to have the homepage will just be this bottom part because the header will be its own component

266
00:26:37.230 --> 00:26:43.650
Ryan Mehta: Header and that will be on every single page the homepage will have a list of articles.

267
00:26:45.000 --> 00:26:47.040
Ryan Mehta: Twice. Right, so it'll have

268
00:26:48.060 --> 00:26:49.470
Ryan Mehta: Articles

269
00:26:50.580 --> 00:26:51.630
Ryan Mehta: Article list.

270
00:26:52.680 --> 00:26:53.490
Ryan Mehta: Times to

271
00:26:55.350 --> 00:26:57.060
Ryan Mehta: The page.

272
00:27:01.980 --> 00:27:07.200
Ryan Mehta: It's just like a single list of articles. So we can use article

273
00:27:08.280 --> 00:27:08.910
Ryan Mehta: List.

274
00:27:11.010 --> 00:27:11.670
Once

275
00:27:13.530 --> 00:27:17.040
Ryan Mehta: And I think the same for the common page.

276
00:27:18.960 --> 00:27:19.710
Common

277
00:27:24.990 --> 00:27:28.050
Ryan Mehta: So we actually don't have very many components that will end up with

278
00:27:29.520 --> 00:27:34.530
Ryan Mehta: Those things and then article list itself missile product here.

279
00:27:36.300 --> 00:27:38.340
Ryan Mehta: It will use article

280
00:27:39.630 --> 00:27:40.350
Ryan Mehta: And then

281
00:27:41.850 --> 00:27:42.810
Ryan Mehta: Article

282
00:27:44.730 --> 00:27:53.130
Ryan Mehta: Will take some props, it'll take the title. Maybe that's it just displays a single title. Maybe we don't even need a component, then

283
00:27:56.250 --> 00:27:57.810
Ryan Mehta: I think this is it. Right.

284
00:28:02.220 --> 00:28:02.760
Ryan Mehta: Look good

285
00:28:05.580 --> 00:28:08.190
Ryan Mehta: And we decided to do this header here.

286
00:28:09.990 --> 00:28:10.260
Okay.

287
00:28:13.980 --> 00:28:16.050
Ryan Mehta: Plan is a bit messy, but

288
00:28:17.310 --> 00:28:19.800
Ryan Mehta: I don't know. Anybody else want to add anything to this plan.

289
00:28:28.200 --> 00:28:29.220
Ryan Mehta: No, we're good.

290
00:28:31.170 --> 00:28:40.920
Ryan Mehta: Maybe we should say something about the service that we want. You want a service called get articles.

291
00:28:44.460 --> 00:28:46.770
Ryan Mehta: That is going to use

292
00:28:48.000 --> 00:28:50.220
Ryan Mehta: Let's put a link to this thing and their

293
00:28:53.490 --> 00:28:54.570
Ryan Mehta: Articles

294
00:28:56.640 --> 00:28:57.330
Service.

295
00:29:07.200 --> 00:29:07.830
Ryan Mehta: Read it.

296
00:29:09.810 --> 00:29:10.950
Ryan Mehta: Will give a link to that.

297
00:29:13.260 --> 00:29:14.160
Ryan Mehta: And then

298
00:29:16.890 --> 00:29:20.820
Ryan Mehta: We'll put an example, example call

299
00:29:25.980 --> 00:29:38.400
Ryan Mehta: This is a huge data structure to read through. But I think what we have is data inside of data we have children, which is an array of each article

300
00:29:39.480 --> 00:29:46.290
Ryan Mehta: And then each child has data also with a title, hopefully.

301
00:29:48.840 --> 00:29:53.220
Ryan Mehta: Yeah title. So the dot notation into it is

302
00:29:54.360 --> 00:30:01.860
Ryan Mehta: We're going to get our JSON data children. And that's going to be an array of articles.

303
00:30:03.900 --> 00:30:05.400
Ryan Mehta: Let's put that in our plan.

304
00:30:07.530 --> 00:30:20.490
Ryan Mehta: So JSON data children is our array of articles each child has data dot title to get to the actual title of the article.

305
00:30:22.110 --> 00:30:23.010
Ryan Mehta: So then

306
00:30:24.480 --> 00:30:26.100
Ryan Mehta: The child.

307
00:30:27.180 --> 00:30:27.900
Is

308
00:30:34.560 --> 00:30:39.270
Ryan Mehta: That makes sense. So we're going to eventually have to do something like

309
00:30:42.120 --> 00:30:49.080
Ryan Mehta: JSON data got still dread map for each article or each child.

310
00:30:51.690 --> 00:30:59.520
Ryan Mehta: Will child data title to get an array of the titles super nested

311
00:31:04.410 --> 00:31:11.850
Ryan Mehta: Yeah, because we have data children each child is one of these huge objects.

312
00:31:13.350 --> 00:31:21.330
Ryan Mehta: It has a data key inside of the data key. We have a title key. So we have to nest pretty deep to get to the right thing.

313
00:31:26.190 --> 00:31:26.640
Ryan Mehta: Okay.

314
00:31:27.750 --> 00:31:29.310
Ryan Mehta: Maybe that's it. We have a plan.

315
00:31:32.190 --> 00:31:32.640
Ryan Mehta: Okay.

316
00:31:34.020 --> 00:31:39.360
Ryan Mehta: Where should we start your idea. So we just scaffold out Redux maybe to begin with.

317
00:31:42.000 --> 00:31:46.710
Ryan Mehta: All right, I'm gonna MPM I Redux React redux

318
00:31:48.390 --> 00:31:50.070
Ryan Mehta: React router.

319
00:31:52.710 --> 00:31:53.940
Ryan Mehta: I will also need

320
00:32:00.270 --> 00:32:06.000
Ryan Mehta: A minister structure this whole thing slightly different than what we have been doing what we did yesterday.

321
00:32:06.750 --> 00:32:16.500
Ryan Mehta: I'm going to change where the router and the provider go because I've noticed, we've been struggling with the tests the tests have been super annoying because we have to like wrap everything in our tests.

322
00:32:16.980 --> 00:32:22.860
Ryan Mehta: With this memory router thing and the provider. So I'm going to swap where those two things go

323
00:32:24.840 --> 00:32:32.310
Ryan Mehta: Inside of our index JS file. This is where I'm going to put our router. So I'm going to import

324
00:32:34.320 --> 00:32:38.190
Browser router as router.

325
00:32:40.080 --> 00:32:41.070
From

326
00:32:42.600 --> 00:32:47.430
Ryan Mehta: React router DOM. I'm going to put this router here instead

327
00:32:50.190 --> 00:33:04.98WEBVTT

1
00:00:01.500 --> 00:00:02.159
Greg Mall: Yes.

2
00:00:02.490 --> 00:00:03.149
Yay.

3
00:00:05.339 --> 00:00:07.620
Ryan Mehta: So we're going to build a full stack application.

4
00:00:10.170 --> 00:00:12.330
Ryan Mehta: See how that whole process goes

5
00:00:13.380 --> 00:00:15.599
Ryan Mehta: My ideas to build a deck builder.

6
00:00:17.100 --> 00:00:23.700
Ryan Mehta: Because card deck builder. I don't think we'll get through the whole process of building the entire card deck builder because

7
00:00:24.840 --> 00:00:32.640
Ryan Mehta: It needs between two and three models, but will at least make the cards model and all the credit routes for that cards model.

8
00:00:35.220 --> 00:00:41.160
Ryan Mehta: If we were to build the whole thing could just like model out our models really quick.

9
00:00:42.210 --> 00:00:46.680
Ryan Mehta: If we were to build the whole thing we would need our cards table.

10
00:00:48.630 --> 00:00:50.910
Ryan Mehta: Which would have like the idea of the card.

11
00:00:53.550 --> 00:00:57.000
Ryan Mehta: The name of the card, maybe like the description

12
00:01:01.500 --> 00:01:04.320
Ryan Mehta: What else the card Jews. They have like the cost

13
00:01:05.400 --> 00:01:10.380
Ryan Mehta: Of the card. This is like a like Magic the Gathering game or something.

14
00:01:12.810 --> 00:01:21.720
Ryan Mehta: Maybe color, but that would probably go on costs would have to probably make that a little bit more complicated for Magic the Gathering. But just like a simple card might look like this. Right.

15
00:01:23.010 --> 00:01:23.730
Ryan Mehta: And it's very good.

16
00:01:24.060 --> 00:01:32.370
Annalise: Um, so we're doing like like Pokemon or Magic the Gathering cards, not like the 52 card deck. Just for clarification.

17
00:01:32.730 --> 00:01:33.570
Ryan Mehta: Correct, yeah.

18
00:01:34.770 --> 00:01:35.580
Ryan Mehta: What are they thinking

19
00:01:36.150 --> 00:01:38.430
Annalise: I don't I don't play the game so I know no

20
00:01:38.880 --> 00:01:40.170
Ryan Mehta: tradable card games.

21
00:01:40.260 --> 00:01:41.430
Annalise: Okay, thank you. Okay.

22
00:01:42.180 --> 00:01:47.190
Ryan Mehta: Like Pokemon or Magic the Gathering. Yeah. And then we would have a

23
00:01:47.340 --> 00:01:48.000
Decks

24
00:01:50.670 --> 00:01:53.610
Ryan Mehta: Table that would have an ID.

25
00:01:54.720 --> 00:02:03.270
Ryan Mehta: And then maybe like a user ID or something, but at least ID and then like name of the deck and maybe a description for the deck.

26
00:02:04.590 --> 00:02:13.020
Ryan Mehta: You can build a bunch of different decks. Right. So you'd want to name them and describe them and then you'd have another table like a deck.

27
00:02:14.610 --> 00:02:21.060
Ryan Mehta: A deck card table that would have ID card ID.

28
00:02:22.230 --> 00:02:26.850
Ryan Mehta: And a deck ID. So this is how you would associate a card to a deck.

29
00:02:27.960 --> 00:02:32.610
Ryan Mehta: And then you just have a bunch of these deck card rose to connect cards decks.

30
00:02:33.960 --> 00:02:43.080
Ryan Mehta: So we probably won't be able to get to all three of these tables, but at least we'll be able to finish this card table.

31
00:02:46.380 --> 00:02:54.570
Ryan Mehta: And then if you can do the card table. You could do the deck table. They're going to be the same. The only hard part or different part is the deck card, which is a relation between the two.

32
00:02:55.470 --> 00:03:04.110
Ryan Mehta: For there's some join there. But let's just focus in on the simple credit application with cards for now.

33
00:03:06.360 --> 00:03:21.300
Ryan Mehta: One thing that we should start seeing, I think there's like a reoccurring pattern that all of our applications take a reoccurring pattern of layers seems like all of our applications. Always have a data layer.

34
00:03:24.300 --> 00:03:26.670
Ryan Mehta: They always have some sort of domain layer.

35
00:03:28.620 --> 00:03:34.350
Ryan Mehta: Like our business logic, what makes our app unique and then they have some sort of view layer.

36
00:03:36.030 --> 00:03:54.060
Ryan Mehta: These layers gets bigger or smaller, depending on the application like on the front end this view layers usually pretty heavy. Right. It's all of our presentational components, while the data layers pretty thin, it's just the service calls to some API.

37
00:03:55.230 --> 00:04:05.640
Ryan Mehta: On the backend this data layer is usually pretty thick. It's our model we specify the model we tell it how to make sequel queries, all of that sort of stuff.

38
00:04:06.030 --> 00:04:24.870
Ryan Mehta: And the view layer is very, very thin. It's like the JSON that will returning from our application. And then the domain layer is our endpoints and our services. We have any services. So on the backend our data layer. Our is our models.

39
00:04:26.730 --> 00:04:29.130
Ryan Mehta: Our domain layer. Our endpoints.

40
00:04:32.910 --> 00:04:44.910
Ryan Mehta: And our services. So like when we were doing user authentication our user service as part of our domain layer and the view layer is our JSON.

41
00:04:47.310 --> 00:04:53.580
Ryan Mehta: When we're doing front end applications, our data layer or there's little services that we have

42
00:04:56.130 --> 00:05:01.200
Ryan Mehta: We kind of have a confusing naming convention, because we have services in both areas.

43
00:05:02.340 --> 00:05:11.160
Ryan Mehta: And then our domain layer. Our controllers are sorry. Our can painters are custom hooks.

44
00:05:13.080 --> 00:05:21.570
Ryan Mehta: Those sorts of things are there in our view layer. Our is our J SX our presentational components.

45
00:05:27.240 --> 00:05:33.390
Ryan Mehta: As we're programming. We're always going to be programming in one of these, one of these layers here.

46
00:05:36.750 --> 00:05:42.120
Ryan Mehta: Okay. Oh, and I guess this is like our usually our reduces and stuff.

47
00:05:44.970 --> 00:05:49.920
Ryan Mehta: Producers actions, all the Redux stuff is technically in this domain layer.

48
00:05:52.320 --> 00:05:52.740
Ryan Mehta: Okay.

49
00:05:54.210 --> 00:05:57.150
Ryan Mehta: I think it helps out when we're programming to keep

50
00:05:58.530 --> 00:06:03.450
Ryan Mehta: This in mind. So we know what lever and we know what we're sort of dealing with as we're programming.

51
00:06:05.340 --> 00:06:13.740
Ryan Mehta: There's another big concept that we kind of throw around all the time, but don't really have to always think about what it means.

52
00:06:16.830 --> 00:06:17.550
Ryan Mehta: API.

53
00:06:21.780 --> 00:06:33.150
Ryan Mehta: It seems like nowadays whenever people say API, they mean like some sort of web request right some sort of HTTP requests that gets us data. Anybody know what API stands for

54
00:06:35.310 --> 00:06:37.620
Ron Yonker: application programming interface.

55
00:06:37.770 --> 00:06:40.500
Ryan Mehta: Exactly application programming interface.

56
00:06:41.430 --> 00:06:42.990
Ron Yonker: Data Flow contract.

57
00:06:43.980 --> 00:06:44.400
Yep.

58
00:06:46.620 --> 00:06:50.310
Ryan Mehta: So I pulled this up on Wikipedia, so we can all sort of read

59
00:06:53.190 --> 00:06:56.550
Ryan Mehta: About API's. It's an application programming interface.

60
00:06:58.350 --> 00:07:11.550
Ryan Mehta: Which defines interactions between multiple software intermediaries, it defines the kind of calls or requests that can be made, how to make them the data format that should be used the conventions to follow.

61
00:07:13.980 --> 00:07:23.760
Ryan Mehta: An API can be entirely custom specific to a component or it can be designed based on the industry through information hiding. Anybody know it information hiding might be

62
00:07:26.100 --> 00:07:42.060
Ryan Mehta: Like that information hiding is just our way of like the API sits in front of our implementation details, whoever uses the API has no idea how the API is working behind the scenes. It just knows that it exposed as public function for us to use

63
00:07:43.260 --> 00:07:51.930
Ryan Mehta: So three information hiding API's enable modular programming which allows users to use interfaces, independent of implementation.

64
00:07:52.950 --> 00:07:54.270
Ryan Mehta: That's very, very wordy.

65
00:07:55.920 --> 00:08:03.480
Ryan Mehta: But what it basically means is that, as we've been programming. We've been actually creating tons of API's.

66
00:08:05.220 --> 00:08:08.340
Ryan Mehta: So when we created our models.

67
00:08:09.960 --> 00:08:15.390
Ryan Mehta: On our models we put a few different methods, right, we put an insert method.

68
00:08:16.980 --> 00:08:20.610
Ryan Mehta: We put a get method, or do we call it find

69
00:08:21.810 --> 00:08:23.190
Ryan Mehta: A find all method.

70
00:08:24.270 --> 00:08:25.530
Ryan Mehta: An update method.

71
00:08:27.420 --> 00:08:28.530
Ryan Mehta: And the delete method.

72
00:08:29.910 --> 00:08:47.910
Ryan Mehta: Right. All of our models had all of these things. This is us constructing an API, the user of our model has no idea how any of these things work right when you call the insert method, we know that it's making some sort of sequel call but we go over to the domain layer.

73
00:08:49.620 --> 00:08:51.000
Ryan Mehta: One of our endpoints.

74
00:08:54.810 --> 00:08:55.860
So like an endpoint.

75
00:08:57.960 --> 00:09:02.430
Ryan Mehta: It's going to be using our model might do something like model.

76
00:09:04.350 --> 00:09:05.010
Ryan Mehta: FIDE

77
00:09:09.330 --> 00:09:13.530
Ryan Mehta: Right, this sort of thing it's calling our find

78
00:09:14.910 --> 00:09:31.080
Ryan Mehta: Method over here, but it has no idea how the five method works. It's actually using our models API, an application programming interface that high implementation detail from the user of the API.

79
00:09:32.190 --> 00:09:36.360
Ryan Mehta: So we're actually in constructing these API's even in our own programs locally.

80
00:09:39.180 --> 00:09:40.260
Ryan Mehta: This kind of makes sense.

81
00:09:41.550 --> 00:09:45.180
Ryan Mehta: So this is technically an API. It's just not a web API.

82
00:09:47.580 --> 00:10:07.080
Ryan Mehta: In addition to these types of API's. The thing that we often mean by API. Nowadays, our web APIs which are application programming interfaces for either web servers or web browsers. So it's the same sort of interface, except for connection between a server and a browser.

83
00:10:08.820 --> 00:10:14.730
Ryan Mehta: Go back to our little picture over here, this is how it looks on our backend when all of the code is local.

84
00:10:17.790 --> 00:10:19.170
Ryan Mehta: If we had

85
00:10:21.090 --> 00:10:23.280
Ryan Mehta: Let's say our backend server.

86
00:10:24.570 --> 00:10:27.000
Ryan Mehta: And our front end server over here.

87
00:10:28.560 --> 00:10:31.740
Ryan Mehta: Are frightened server wants to find a list of

88
00:10:32.850 --> 00:10:38.760
Ryan Mehta: Models right for our thing a list of cards. It's going to make a web request.

89
00:10:40.440 --> 00:10:54.990
Ryan Mehta: And received a web response with the list of cards. This whole interaction here is an API call. Right. The front end knows that it needs to hit API V1.

90
00:10:55.950 --> 00:11:11.010
Ryan Mehta: Cards. This is it's it calling a method. Just like when we did model dot find it's just a different looking method. It's fetch from an API fetch from a URL, but it's still invoking some function on the back end.

91
00:11:11.700 --> 00:11:20.610
Ryan Mehta: Right when the front end does this and invokes a function on the back end the back end runs that function and send a response back to the front end.

92
00:11:21.240 --> 00:11:39.330
Ryan Mehta: Just like the model does right we call model dot find it invokes a function in the model. The model returns a response back to the collar. It's just that this happens to be a request over internet right over WWW.

93
00:11:40.860 --> 00:11:44.160
Ryan Mehta: Instead of over like the computers own

94
00:11:47.610 --> 00:11:48.810
Ryan Mehta: Over the computer CPU.

95
00:11:51.900 --> 00:12:08.910
Ryan Mehta: Alright, so both of these things are called API's. This is just a web API. And nowadays when people say API's. Most of the time they mean these web API's. But we shouldn't get too confused or like to divorced from the original intent.

96
00:12:10.080 --> 00:12:17.070
Ryan Mehta: Really these web API's are just a different way to call a method on a computer. Some other computer in the cloud.

97
00:12:18.450 --> 00:12:22.800
Ryan Mehta: Right where we hit one of these routes. We're just telling the other computer to run a function

98
00:12:27.360 --> 00:12:28.290
Ryan Mehta: Kind of makes sense.

99
00:12:29.250 --> 00:12:36.690
Jerud Moyer: So we should not think of servers as API's so much as like the communication between

100
00:12:38.970 --> 00:12:40.830
Jerud Moyer: The pipeline is more the API.

101
00:12:41.400 --> 00:12:46.800
Ryan Mehta: Exactly. Yeah, all the routes that we're exposing our the API's are like our method calls

102
00:12:49.440 --> 00:13:01.320
Ryan Mehta: Some people would call that there used to be these things that people talked about all the time RPC API's remote Remote Procedure remote procedural proceed.

103
00:13:03.330 --> 00:13:05.190
Annalise: Proceed. Yo, your

104
00:13:05.970 --> 00:13:07.620
Ryan Mehta: remote procedure call

105
00:13:10.020 --> 00:13:10.290
Well,

106
00:13:11.400 --> 00:13:12.060
Call

107
00:13:13.260 --> 00:13:26.700
Ryan Mehta: Which is just like remote function call, right, this is a different word for functions. So what you're saying is that you're going to make a you're going to call a function by making an HTTP request.

108
00:13:27.960 --> 00:13:30.510
Ryan Mehta: Which is kind of an interesting way to think about the words.

109
00:13:35.400 --> 00:13:42.210
Ryan Mehta: Okay, so this is what we're going to build. We're going to build our little back

110
00:13:43.470 --> 00:13:45.060
Ryan Mehta: Up sorry back end API.

111
00:13:46.440 --> 00:13:53.610
Ryan Mehta: Will talk about exactly where we're making API's and who the consumers of these API's are

112
00:13:56.070 --> 00:14:03.960
Ryan Mehta: To begin with, let's make our first model, or at least our first table. We're going to drop table.

113
00:14:05.430 --> 00:14:07.290
Ryan Mehta: This cards.

114
00:14:08.400 --> 00:14:09.990
Ryan Mehta: And then we're going to create

115
00:14:11.490 --> 00:14:12.630
Ryan Mehta: Cards.

116
00:14:14.190 --> 00:14:22.320
Ryan Mehta: And it's going to have an ID, which will be big event generated always as

117
00:14:25.290 --> 00:14:30.840
Ryan Mehta: Our cards will have a name. We said to be some text and the name can't be no

118
00:14:32.370 --> 00:14:34.800
Ryan Mehta: It'll have a description.

119
00:14:39.750 --> 00:14:40.980
Ryan Mehta: I'm actually going to use

120
00:14:42.780 --> 00:14:44.940
Ryan Mehta: We don't want the names to be over like

121
00:14:47.070 --> 00:14:50.610
Ryan Mehta: I don't know 50 characters seems totally reasonable for a name.

122
00:14:54.480 --> 00:15:00.270
Ryan Mehta: And it seems like 256 characters is totally reasonable for description.

123
00:15:02.220 --> 00:15:03.000
Ryan Mehta: And costs.

124
00:15:04.290 --> 00:15:05.370
Ryan Mehta: Which will be

125
00:15:06.660 --> 00:15:08.970
Ryan Mehta: A integer

126
00:15:11.790 --> 00:15:12.180
To say

127
00:15:13.800 --> 00:15:18.930
Ryan Mehta: And what check to make sure that cost is greater than

128
00:15:19.950 --> 00:15:24.030
Ryan Mehta: Zero and cost is less than

129
00:15:25.410 --> 00:15:31.140
Ryan Mehta: 10. So the cost for this card game are between one and 10 or one in nine

130
00:15:33.000 -->ta: Grab the

135
00:15:35.790 --> 00:15:36.930
Ryan Mehta: Off context.

136
00:15:43.830 --> 00:15:51.330
Ryan Mehta: Okay, so we're gonna have this hook that will get that sign up piece off of the provider that sign up. It's coming from over here.

137
00:15:55.350 --> 00:15:58.380
Ryan Mehta: So we'll be able to use that hook over fear.

138
00:16:00.120 --> 00:16:02.490
Ryan Mehta: Sign up you sign up

139
00:16:03.960 --> 00:16:18.150
Ryan Mehta: And this is grabbing this function over here for us. So after we handle summit, we will call sign up with the email and the password of the person that we want to sign up under application with good

140
00:16:20.340 --> 00:16:20.820
Ryan Mehta: Alright.

141
00:16:21.930 --> 00:16:32.670
Ryan Mehta: So we have to fill in this information, called the backend to create a user who said that we're going to go through this flow where we start off with the design how everything looks on the page and then make our way back to the back end.

142
00:16:33.480 --> 00:16:39.720
Ryan Mehta: Right now this signup form seems like it's exactly what we need a visually.

143
00:16:41.160 --> 00:16:44.190
Ryan Mehta: And we can put it on the page, just to double check.

144
00:16:46.920 --> 00:16:48.480
Ryan Mehta: Our sign up

145
00:16:49.650 --> 00:16:50.730
Ryan Mehta: On the page.

146
00:16:51.930 --> 00:16:54.330
Ryan Mehta: App JS and make sure it looks good.

147
00:17:00.630 --> 00:17:02.670
Ryan Mehta: Oh, right. If we do that, we're going to need

148
00:17:05.370 --> 00:17:07.710
Ryan Mehta: To wrap everything with her off provider.

149
00:17:11.790 --> 00:17:15.780
Ryan Mehta: Okay so rapper with our off provider. So has access to that.

150
00:17:17.580 --> 00:17:21.600
Ryan Mehta: This context here and then we should be able to

151
00:17:22.620 --> 00:17:23.640
Ryan Mehta: See our little

152
00:17:24.750 --> 00:17:31.380
Ryan Mehta: Thing you can type into these boxes we look at our signup state it's changing appropriately.

153
00:17:33.060 --> 00:17:33.600
Ryan Mehta: Look good

154
00:17:35.760 --> 00:17:45.390
Ryan Mehta: Okay, so let's make our way back to the back end. Then we want to connect this sign up function to a backend call that will actually do the sign up for us.

155
00:17:46.500 --> 00:17:54.570
Ryan Mehta: To get there, we need to open up our backend code and start creating the model that will do this for us.

156
00:17:55.770 --> 00:17:59.400
Ryan Mehta: So the start with, I'm going to create a table.

157
00:18:04.050 --> 00:18:05.250
Ryan Mehta: Called users.

158
00:18:08.820 --> 00:18:13.110
Ryan Mehta: Our users table will have an ID, which will be a big event.

159
00:18:21.810 --> 00:18:23.220
Ryan Mehta: Which will be our primary key.

160
00:18:24.300 --> 00:18:28.350
Ryan Mehta: They'll have an email which will be some text that is unique.

161
00:18:29.700 --> 00:18:32.790
Ryan Mehta: And a password which will also be

162
00:18:34.080 --> 00:18:34.830
Ryan Mehta: Will call this

163
00:18:41.640 --> 00:18:42.630
Ryan Mehta: password hash.

164
00:18:50.550 --> 00:19:03.180
Ryan Mehta: Look like a good enough user email password. We could add more stuff here like first name or profile image, any of those other things here. If we wanted those types of things in our application.

165
00:19:07.410 --> 00:19:07.890
Ryan Mehta: Look good

166
00:19:09.780 --> 00:19:10.080
Ryan Mehta: Okay.

167
00:19:11.820 --> 00:19:14.820
Ryan Mehta: So let's make our way to our models, then

168
00:19:16.890 --> 00:19:18.510
Ryan Mehta: We're going to make the user

169
00:19:20.610 --> 00:19:22.470
Ryan Mehta: User JS model.

170
00:19:25.920 --> 00:19:28.170
Ryan Mehta: This is going to be a class.

171
00:19:30.330 --> 00:19:31.380
Ryan Mehta: Called user

172
00:19:33.300 --> 00:19:38.940
Ryan Mehta: Our user has an ID an email and a password hash.

173
00:19:40.230 --> 00:19:49.080
Ryan Mehta: Or make a constructor, which will take a row will set ID to row ID will set email.

174
00:19:50.580 --> 00:20:05.940
Ryan Mehta: To grow email and then we'll set password hash to throw dot password underscore hash we're translating the sequel row into our JavaScript.

175
00:20:07.020 --> 00:20:08.700
Ryan Mehta: Style camel casing.

176
00:20:10.650 --> 00:20:18.090
Ryan Mehta: And then the first thing that we want to be able to do is insert a user. So we'll create a static a sink insert

177
00:20:19.170 --> 00:20:21.030
Ryan Mehta: method that takes a user

178
00:20:22.620 --> 00:20:27.000
Ryan Mehta: You will get a row back from calling query.

179
00:20:39.180 --> 00:20:43.830
Ryan Mehta: We're going to Insert into Users

180
00:20:45.480 --> 00:20:46.230
losers.

181
00:21:14.280 --> 00:21:16.830
Ryan Mehta: Email the password.

182
00:21:19.980 --> 00:21:20.310
Ryan Mehta: So,

183
00:21:21.600 --> 00:21:35.130
Ryan Mehta: We're not going to use the crypt here. We're going to stay that first service. So in our model, we're just going to be responsible for inserting stuff are not responsible for any be scripting or J WT stuff in this file.

184
00:21:36.750 --> 00:21:38.880
Ryan Mehta: And then we'll return a new user

185
00:21:40.050 --> 00:21:41.790
Ryan Mehta: With the rose zero

186
00:21:43.890 --> 00:21:45.870
Ron Yonker: semi colon on the end of long six

187
00:21:47.760 --> 00:21:48.630
Six.

188
00:21:51.720 --> 00:21:53.820
Ron Yonker: Better. Sorry, that was bothered me.

189
00:21:56.430 --> 00:21:57.990
Ryan Mehta: This insert look good to everyone.

190
00:21:59.700 --> 00:22:03.120
Ryan Mehta: Okay, so we have a way to insert new users.

191
00:22:04.530 --> 00:22:09.780
Ryan Mehta: But we want to do a little bit more than just inserting the users. We also want to be able to hash their password.

192
00:22:10.260 --> 00:22:27.630
Ryan Mehta: To do that we're going to use the crypt, which is a hashing algorithm that will take plain text and create a hash for us. So in live. I'm going to create a services directory and they users for this.js file.

193
00:22:29.730 --> 00:22:34.590
Ryan Mehta: And then this is where we're going to put all of our little user services that we want to

194
00:22:36.600 --> 00:22:41.220
Ryan Mehta: Create the first one that we want to create is a create

195
00:22:42.540 --> 00:22:43.830
Ryan Mehta: Just call it a create

196
00:22:46.650 --> 00:22:49.770
Ryan Mehta: Service or maybe a sign up

197
00:22:51.780 --> 00:23:06.480
Ryan Mehta: Sign up service. The signup service is going to take a user's email and a user's password and eventually it's going to call the user dot insert method that we created in our model file. Makes sense so far.

198
00:23:07.620 --> 00:23:12.780
Ryan Mehta: Before we can call this though, we need to create a password.

199
00:23:14.610 --> 00:23:15.300
Ryan Mehta: Cash

200
00:23:16.860 --> 00:23:28.830
Ryan Mehta: Right, we need to somehow past the user's password to do that we're going to use be crypt JS, which I need to install. So I'm going to MPM ID crypt JS.

201
00:23:34.260 --> 00:23:37.530
Ryan Mehta: And then at the top of this file. I am going to

202
00:23:39.000 --> 00:23:39.630
Ryan Mehta: Be Chris

203
00:23:47.220 --> 00:23:48.930
Ryan Mehta: Our password hash.

204
00:24:02.370 --> 00:24:05.910
Ryan Mehta: I think we give it the number four ounce. Right. It's a 14 for now.

205
00:24:07.470 --> 00:24:09.060
Ryan Mehta: Let's make this an object.

206
00:24:14.550 --> 00:24:14.910
Be

207
00:24:17.820 --> 00:24:20.910
Ryan Mehta: I wasn't gonna write any tests today but I totally could

208
00:24:21.180 --> 00:24:23.580
Annalise: I was gonna say, if you were to change that hashtag for

209
00:24:25.170 --> 00:24:33.750
Ryan Mehta: Yeah, we should we should probably make an environment variable for this thing, right. So, that way in our tests, we can make it faster and in production. We can make it slower.

210
00:24:41.580 --> 00:24:42.810
Ryan Mehta: Convert it to a number

211
00:24:46.950 --> 00:24:53.190
Ryan Mehta: All right, does this look good, everyone. We first hash our password. And then we insert our user

212
00:24:56.700 --> 00:24:57.210
Ryan Mehta: Good.

213
00:24:59.550 --> 00:25:12.120
Ryan Mehta: I'm going to change this to a sync function and instead of using the hash think I am going to use regular hash and await it in the ideas what the differences are between these two.

214
00:25:13.320 --> 00:25:16.020
Ryan Mehta: Between this and this.

215
00:25:23.250 --> 00:25:24.090
Ben Waples: Is hash thing.

216
00:25:30.720 --> 00:25:35.280
Jerud Moyer: I was just wondering if Hash. Hash thing, something provided by be crips as a way to

217
00:25:37.260 --> 00:25:37.920
Jerud Moyer: Give you time

218
00:25:41.760 --> 00:25:42.210
Jerud Moyer: From

219
00:25:48.090 --> 00:25:48.930
Jerud Moyer: Needed rain.

220
00:25:50.820 --> 00:25:57.780
Ryan Mehta: I was needed be be correct. Yeah, the hashtag is provided by the crypt, and it does have to do with

221
00:25:59.370 --> 00:26:01.260
Ryan Mehta: Timing. That's true.

222
00:26:03.510 --> 00:26:10.110
Ryan Mehta: If we look at hash think remember the event loop. Are you checking it against like making sure

223
00:26:10.170 --> 00:26:17.310
Annalise: Like they can't create the hash unless the email and password are placed is that one.

224
00:26:18.420 --> 00:26:19.170
Ryan Mehta: Hash think

225
00:26:19.380 --> 00:26:28.440
Ryan Mehta: Yeah so sinks in this case stands for synchronous. So we have either has sync synchronous or without the sink. It's

226
00:26:28.440 --> 00:26:29.940
Ryan Mehta: Going to do it asynchronously.

227
00:26:32.670 --> 00:26:37.350
Ryan Mehta: If we do it synchronously. It's going to block the event loop.

228
00:26:38.460 --> 00:26:48.990
Ryan Mehta: So if we do it synchronously. No other passwords will be able to be hashed no other users will be able to make a request for application until the hashes created

229
00:26:50.610 --> 00:27:00.810
Ryan Mehta: So let's say it takes one second to create the be crypt Tash during that one second. No other user is able to use our application.

230
00:27:02.190 --> 00:27:03.540
Ryan Mehta: They'll start forming a line.

231
00:27:05.100 --> 00:27:07.950
Ryan Mehta: In JavaScript. We're only allowed to do one thing at a time.

232
00:27:09.000 --> 00:27:17.130
Ryan Mehta: Since this hashtag could take some time and we want it to take some time, if we use the sink version, it means that only one person will be able to use

233
00:27:17.820 --> 00:27:26.400
Ryan Mehta: Our application, only the person being currently hashed will be able to be using our application during that one second. Everybody else will just be waiting

234
00:27:28.590 --> 00:27:32.100
Ryan Mehta: It's not terribly bad if we just have one user creating it.

235
00:27:33.810 --> 00:27:54.990
Ryan Mehta: Like signing up every few days but if we have 1000 users signing up every minute that's 1000 seconds that other people have to wait while people are creating passwords, which is more than a minute. So it sounds like will continually backup, right, we won't be able to scale very well.

236
00:27:56.550 --> 00:27:58.710
Ryan Mehta: If we use the regular hash.

237
00:28:00.600 --> 00:28:02.670
Ryan Mehta: Instead of blocking the event loop.

238
00:28:03.900 --> 00:28:16.020
Ryan Mehta: Node will tell somebody else to go, and hash the password and let it know when the hashing is done and it will continue to process other requests, while the hashing is being done by somebody else.

239
00:28:16.740 --> 00:28:28.620
Ryan Mehta: So hash think makes node have to do this work, you can kind of use this as a mental model makes node have to do this work and notebook node can't process any other incoming requests while it's running line five

240
00:28:29.970 --> 00:28:32.070
Ryan Mehta: But if you use the normal hash.

241
00:28:34.860 --> 00:28:39.450
Ryan Mehta: Node is going to go and do other things while it's a waiting for this password to be hashed

242
00:28:42.630 --> 00:28:50.760
Ryan Mehta: And so it can process other user request during the time that it takes to hash this password. The password hashes and to be done by somebody else.

243
00:28:52.200 --> 00:28:54.810
Ryan Mehta: To use like a cooking analogy, I guess.

244
00:28:55.920 --> 00:28:57.450
Ryan Mehta: If we use hash sync.

245
00:28:58.890 --> 00:29:02.490
Ryan Mehta: We're making it a synchronous tasks. So if we were like microwaving

246
00:29:05.340 --> 00:29:08.760
Some food in a microwave. Oh, no.

247
00:29:10.080 --> 00:29:18.060
Ryan Mehta: It's kind of looks like a microwave hash sink would mean that you sit here and look at the microwave while it's doing its work.

248
00:29:19.110 --> 00:29:21.900
Ryan Mehta: The hash one you would have the same microwave

249
00:29:23.010 --> 00:29:28.980
Ryan Mehta: But while you're microwaving stuff you like walk over and I don't know watch TV or something.

250
00:29:30.060 --> 00:29:31.200
Ryan Mehta: You do something else.

251
00:29:33.090 --> 00:29:36.600
Ryan Mehta: This way. Seems like nobody would really do it this way.

252
00:29:37.200 --> 00:29:55.740
Ryan Mehta: This way. Seems like how everybody actually behaves. We want JavaScript and behave like this. Also, especially since it's busy. It's probably not watching TV, it's going and helping some other user. It's like JavaScript has a line of microwaves. This is good. It has like 20 microwaves.

253
00:29:58.170 --> 00:30:14.670
Ryan Mehta: And you can have JavaScript either microwave something and wait at the single microwave or you can have a gold. Move on to the next microwave as other requests come in by using this regular hash you allow JavaScript to use all of its microwaves.

254
00:30:16.350 --> 00:30:17.010
Ryan Mehta: Team. Okay.

255
00:30:17.190 --> 00:30:21.390
Ron Yonker: Well tracking your calling the side processes microwaves.

256
00:30:21.780 --> 00:30:22.350
Right, yeah.

257
00:30:23.730 --> 00:30:24.720
Ryan Mehta: Yeah, totally.

258
00:30:28.860 --> 00:30:33.990
Ryan Mehta: I had an interview question once somebody asked me to design a microwave in the area.

259
00:30:35.370 --> 00:30:35.730
Ryan Mehta: Yeah.

260
00:30:39.120 --> 00:30:41.100
Brooke Perkins (she/her): Are we gonna need to be able to do that.

261
00:30:42.180 --> 00:30:42.720
Ryan Mehta: I don't know.

262
00:30:43.710 --> 00:30:46.200
Josh Olloqui: Well, I mean, microwaves have Alexa now so

263
00:30:49.620 --> 00:30:50.640
Brooke Perkins (she/her): That is frightening.

264
00:30:51.600 --> 00:30:52.830
Ryan Mehta: Or you don't have to know the internal

265
00:30:52.830 --> 00:31:13.980
Ryan Mehta: Those like how would you lay out the buttons like for people. Yeah. Alright, so here's our little user service, we can use it to sign up and create our password hash. From here we can start using this inside of our controller. Let's make a controllers to F3.

266
00:31:20.340 --> 00:31:22.080
Ryan Mehta: Scaffold this out a bit.

267
00:31:34.440 --> 00:31:36.660
Ryan Mehta: So it's gonna be post to sign up

268
00:31:38.520 --> 00:31:40.710
First response next

269
00:31:42.480 --> 00:31:47.880
Ryan Mehta: All right before we forget we should also go to app JS and add this thing here.

270
00:31:49.290 --> 00:31:51.300
So API V1.

271
00:31:53.460 --> 00:31:56.310
Ryan Mehta: And we will bring in our off controller.

272
00:32:06.180 --> 00:32:15.480
Ryan Mehta: Also, before I forget, I'm going to end PM I Corps, so we don't run into any issues when we go and set this up.

273
00:32:18.540 --> 00:32:19.110
On our friends.

274
00:32:23.040 --> 00:32:28.860
Ryan Mehta: So I'm going to add course here. I'm also going to add course takes a few configuration options that we're going to want to use hewas looking at

144
00:12:48.450 --> 00:12:49.290
Ryan Mehta: Me yes code.

145
00:12:49.470 --> 00:12:50.880
Annalise Murphy: Yeah. Okay. Okay.

146
00:12:54.540 --> 00:12:57.210
Ryan Mehta: Yeah, insert final new line so that thing.

147
00:12:57.600 --> 00:12:57.870
Okay.

148
00:12:58.890 --> 00:13:03.690
Ryan Mehta: So brick. If you have that also it'll automatically insert those final new lines for you.

149
00:13:04.530 --> 00:13:06.060
Brooke Perkins (she/her): Oh, I've enabled it now.

150
00:13:07.770 --> 00:13:09.390
Annalise Murphy: Very excited about it. Thank you.

151
00:13:12.540 --> 00:13:17.790
Ryan Mehta: Alright so Annalise Jonah. Jonah guide us through this search file.

152
00:13:18.000 --> 00:13:20.910
Annalise Murphy: Sure, I'm still waking up, so bear with me.

153
00:13:23.970 --> 00:13:26.550
Annalise Murphy: Yeah, so the search file.

154
00:13:28.500 --> 00:13:34.860
Annalise Murphy: It was said state of texts and on chain, we have a function on change and function for once.

155
00:13:36.630 --> 00:13:43.800
Annalise Murphy: We have a form here, and we're calling in the ID. The idea needs to be text as well as the type the name the value

156
00:13:45.510 --> 00:13:49.470
Annalise Murphy: It looks like the value has an object or text inside of an object.

157
00:13:50.730 --> 00:13:53.250
Annalise Murphy: And so it should react on change.

158
00:13:54.990 --> 00:13:59.970
Annalise Murphy: Linking to that button. The submit button searching the news from there and then

159
00:14:01.170 --> 00:14:02.520
Annalise Murphy: Down below.

160
00:14:04.350 --> 00:14:18.240
Annalise Murphy: then iterate through the prop. I guess it sets the prop tights correctly so that it can grab the proper function. This is an error. I was running into last night. That's why I'm like, ooh prom dates, a little tricky.

161
00:14:19.230 --> 00:14:26.640
Ryan Mehta: Yeah, yeah. These are just specifying that these props up above. So the text prop has to be a string.

162
00:14:27.030 --> 00:14:32.340
Ryan Mehta: Right on change has to be a function and on submit has to be a function

163
00:14:33.810 --> 00:14:44.430
Ryan Mehta: Which makes sense, because you're using on submit as a function you're using on change as a function and you're assuming text is tax.

164
00:14:44.760 --> 00:14:45.270
Yeah.

165
00:14:47.940 --> 00:14:50.070
Ryan Mehta: Cool. Thanks. Any critiques on this file.

166
00:14:50.970 --> 00:14:51.720
I'm

167
00:14:57.060 --> 00:15:10.080
Annalise Murphy: Gonna give that a little break, break, um, I'd probably just get rid of the white space on 24 I'm closing up the form and that's about it. But I think it looks good.

168
00:15:10.710 --> 00:15:11.010
Cool.

169
00:15:12.390 --> 00:15:13.380
Ryan Mehta: Anybody else

170
00:15:17.940 --> 00:15:22.830
Thomas Stussi: On the line on 25 and add a line on 26 and a half. Agreed.

171
00:15:23.640 --> 00:15:24.840
Patrick Wilson: And I'm 33 and a half.

172
00:15:25.950 --> 00:15:26.880
Patrick Wilson: Above the export.

173
00:15:36.360 --> 00:15:36.780
Nice.

174
00:15:38.220 --> 00:15:39.630
Greg Mall: Nobody. No comments on that.

175
00:15:42.930 --> 00:15:44.220
Thomas Stussi: I gotta break too so

176
00:15:45.000 --> 00:15:48.930
Patrick Wilson: You can also use CSS to give it like a block.

177
00:15:49.440 --> 00:15:55.860
Greg Mall: I know before I added CSS, literally, the last thing I did. I had brake lines on everything.

178
00:15:56.430 --> 00:16:03.120
Annalise Murphy: When you drop the brake on 22 and a half, you could drop that underneath the finishing on the input line.

179
00:16:03.510 --> 00:16:04.110
Greg Mall: Well, this

180
00:16:06.000 --> 00:16:08.520
Greg Mall: The only yeah I guess that would be

181
00:16:08.550 --> 00:16:15.570
Patrick Wilson: And I think it looks like a weird color because it needs a space between the are in the slash and then take the last space out

182
00:16:15.660 --> 00:16:17.700
Annalise Murphy: Yeah. Nice. Yeah.

183
00:16:17.730 --> 00:16:18.660
Patrick Wilson: Otherwise, it looks fine.

184
00:16:18.870 --> 00:16:19.710
Greg Mall: It works. But yeah.

185
00:16:20.460 --> 00:16:21.810
Annalise Murphy: Probably just get rid of 21

186
00:16:22.170 --> 00:16:23.370
Greg Mall: How about this space is that

187
00:16:23.520 --> 00:16:24.630
Annalise Murphy: I'd get rid of that space.

188
00:16:26.490 --> 00:16:26.790
Annalise Murphy: Her

189
00:16:28.320 --> 00:16:31.980
Patrick Wilson: And then maybe 28

190
00:16:32.730 --> 00:16:36.900
Greg Mall: Always think that you should have spaces there, but I guess that's not convention.

191
00:16:37.140 --> 00:16:38.970
Annalise Murphy: I mean I feel like if the data.

192
00:16:39.870 --> 00:16:42.330
Greg Mall: Here to, I don't know if that is correct or not.

193
00:16:42.570 --> 00:16:43.170
Patrick Wilson: Take it out.

194
00:16:44.910 --> 00:16:53.280
Annalise Murphy: Yeah, I think if the data is pretty like compact and not, it's not like a very long like function or

195
00:16:53.940 --> 00:17:02.310
Annalise Murphy: I feel like if it's like, yeah, I don't know how to put it. If it's compact it, then it's easier to just kind of like, get rid of a lot of the white space, um,

196
00:17:03.180 --> 00:17:12.900
Annalise Murphy: But I think that if you're dealing with a very long like function. And it's just like calling and everything about it then. Yeah. You want to have it spaced out. So it's more legible.

197
00:17:13.200 --> 00:17:20.760
Patrick Wilson: There's an extension called prettier and whenever you can set it up to whenever you save it, it'll automatically like manage all your white spaces for you.

198
00:17:21.090 --> 00:17:23.580
Greg Mall: You serious prayer. Yeah.

199
00:17:23.910 --> 00:17:29.310
Patrick Wilson: I had it can, it was conflicting with my yes left side to take it off but I found it like

200
00:17:30.600 --> 00:17:37.380
Patrick Wilson: After staring at that for quite a while. That's kind of the white space convention that I ended up using so

201
00:17:37.980 --> 00:17:40.470
Greg Mall: I'll probably get that and I can use

202
00:17:41.490 --> 00:17:50.730
Greg Mall: A lot of it to me as a matter, cuz I look at that and I see, wow, I would just looks crowded. But that's just me and I don't know, I feel like

203
00:17:52.650 --> 00:17:53.340
Greg Mall: I don't know.

204
00:17:53.850 --> 00:17:55.560
Annalise Murphy: Yeah, I mean I would, yeah.

205
00:17:55.650 --> 00:18:01.380
Greg Mall: It's, I guess it's convention I gotta learn what convention is it's not what my taste is it's more of what

206
00:18:02.520 --> 00:18:04.380
Greg Mall: People expect to see so

207
00:18:04.830 --> 00:18:06.240
Patrick Wilson: Yeah. And once you get used to it.

208
00:18:06.270 --> 00:18:07.020
Greg Mall: You'll be used to it.

209
00:18:08.550 --> 00:18:12.000
Ryan Mehta: Yeah, totally. Greg, you can come up with your own convention for yourself.

210
00:18:12.750 --> 00:18:18.750
Ryan Mehta: Every company is going to be slightly different with the white space stuff if you like the spaces here.

211
00:18:19.890 --> 00:18:26.910
Ryan Mehta: It's fine, as long as you're consistent across files so like if your articles has the same thing, then it's fine.

212
00:18:28.080 --> 00:18:34.140
Ryan Mehta: But I would make sure that like right here. That shouldn't be indented. That seems like pretty

213
00:18:36.480 --> 00:18:37.230
Ryan Mehta: 23

214
00:18:38.550 --> 00:18:39.870
Ryan Mehta: Shouldn't be indented

215
00:18:41.640 --> 00:18:42.030
Greg Mall: Okay.

216
00:18:43.650 --> 00:18:54.570
Ryan Mehta: Those types of things I'd make sure that you stay like pretty conventional on but like extra spaces here. I think around the text and around these objects, I think, is OK.

217
00:18:56.730 --> 00:19:13.740
Ryan Mehta: One thing also is you want to be symmetrical as much as possible. I think to like you have this extra space online 10 which is fine, but if you're going to have that you should have a space between 22 and 23 also or you shouldn't have this space on 10 and have it on 23

218
00:19:14.040 --> 00:19:15.090
Greg Mall: Okay, that makes sense.

219
00:19:18.360 --> 00:19:22.950
Ryan Mehta: Okay, looks good. You're just getting pounded on your white face.

220
00:19:22.980 --> 00:19:25.260
Greg Mall: That's okay, I need the

221
00:19:25.440 --> 00:19:26.400
Greg Mall: Criticism because

222
00:19:26.430 --> 00:19:28.050
Annalise Murphy: Hey, at least it's just white

223
00:19:29.910 --> 00:19:38.220
Greg Mall: I mean, that's what I've been getting some critiques on that. And I'm like, oh well better. You know, I don't want to under white space either so got a plan.

224
00:19:38.670 --> 00:19:41.400
Annalise Murphy: I kind of wish I had just wait spacing issues.

225
00:19:42.420 --> 00:19:50.040
Greg Mall: Well, yeah. Like I said, I worked on testing this morning from like 6am till the classes started I yeah

226
00:19:50.610 --> 00:19:51.240
Annalise Murphy: I feel you, man.

227
00:19:52.980 --> 00:19:54.840
Annalise Murphy: I like your little loading, though.

228
00:19:57.000 --> 00:19:59.190
Greg Mall: You're nice nice suggestion.

229
00:19:59.640 --> 00:20:01.980
Annalise Murphy: Yeah, I was like, Oh, this is so Greg here.

230
00:20:04.320 --> 00:20:06.030
Ryan Mehta: Let's take a look at your services.

231
00:20:07.980 --> 00:20:10.650
Greg Mall: That's kind of ugly, but let's look at it, it's not that

232
00:20:11.850 --> 00:20:12.180
Greg Mall: It's not

233
00:20:13.710 --> 00:20:21.630
Ryan Mehta: Yes, it's nice and short. Ben, do you want to tell us what's going on in this file and any critiques that you have

234
00:20:24.510 --> 00:20:26.250
Ben Waples: Yes. Okay.

235
00:20:29.760 --> 00:20:39.630
Ben Waples: So could we on like line one we do export default function and just save one does the same thing.

236
00:20:44.490 --> 00:20:47.130
Ben Waples: It looks great. You could delete line to

237
00:20:48.240 --> 00:20:55.170
Ben Waples: If we're if we're still on the white spacing thing, you know, then yeah that looks very, uh,

238
00:20:56.220 --> 00:21:04.020
Ben Waples: Yeah. Is there like a preference between exploiting on the first line or at the end of the file. Is it like a performance difference

239
00:21:04.950 --> 00:21:07.950
Ryan Mehta: There's no performance difference. It's like totally up to you.

240
00:21:08.970 --> 00:21:15.660
Ryan Mehta: But yeah, I think that's a good idea. I say, if you're going to end up with multiple like functions in this file potentially

241
00:21:16.410 --> 00:21:22.920
Ben Waples: Okay, so do you just add export in front of function and then not have default is that or is it an export default

242
00:21:23.130 --> 00:21:23.850
Ryan Mehta: You can do either one.

243
00:21:24.450 --> 00:21:31.890
Ben Waples: Okay. Um, yeah. So, well, I don't want to ruin up where you import it. So, um,

244
00:21:32.940 --> 00:21:42.360
Ben Waples: Any online one do export default and then just in front of the function just put them on the function that he couldn't delete line six

245
00:21:45.450 --> 00:21:46.530
Ben Waples: Yeah, and then

246
00:21:49.050 --> 00:21:49.260
Yeah.

247
00:21:50.370 --> 00:21:50.910
Ben Waples: Um,

248
00:21:52.290 --> 00:21:54.750
Greg Mall: I'll say it right off the bat, I know I should put that in.

249
00:21:56.460 --> 00:22:00.810
Greg Mall: Which I didn't. I was going to do that, but I just totally space doing that.

250
00:22:00.900 --> 00:22:02.220
Greg Mall: Looking at it. I wish I had

251
00:22:02.580 --> 00:22:07.920
Patrick Wilson: That we heard this morning. There might be problems with the envy. Oh, okay.

252
00:22:08.610 --> 00:22:09.570
Annalise Murphy: Is that what's up.

253
00:22:10.230 --> 00:22:16.560
Ryan Mehta: It works as long as you're not using the new version of node node teen. It's crazy. This weekend so crazy.

254
00:22:18.030 --> 00:22:21.990
Ryan Mehta: Person and know released a new version. And it's breaking like everything

255
00:22:22.320 --> 00:22:25.500
Annalise Murphy: Oh my god, that probably way I got Littleton move

256
00:22:28.380 --> 00:22:43.470
Ron Yonker: Okay, Ryan, I have a question. So noticing that he's got on containers alongside his components directory. I mean, services, um,

257
00:22:44.670 --> 00:23:09.210
Ron Yonker: So whenever I tried to do that for whatever reason like Intel a sense stopped working and the application just refused to actually find the JS file I have in there. But when I brought the directory in the file down a couple levels, it was you have an idea what might cause that

258
00:23:10.050 --> 00:23:12.900
Ryan Mehta: Nothing that would seem like a weird issue to me.

259
00:23:14.040 --> 00:23:16.560
Ryan Mehta: It should be able to find it no matter where you put the directory

260
00:23:17.700 --> 00:23:17.910
Ben Waples: So,

261
00:23:20.280 --> 00:23:28.860
Ben Waples: I guess there is one more we can do with the date because as of right now online to it's always just going to pull the news from

262
00:23:29.970 --> 00:23:30.810
Ben Waples: Two days ago.

263
00:23:32.580 --> 00:23:40.560
Ben Waples: So we can make like a date object and make it so it's always whenever it hits that fetch function that it's a of the day.

264
00:23:40.680 --> 00:23:43.920
Greg Mall: That's why I need. I didn't even think about that. Good. I

265
00:23:44.850 --> 00:23:54.300
Ben Waples: Yeah, so if you do a little below line one or 1.5 I guess inside of the yeah the curly persons.

266
00:23:55.320 --> 00:23:58.260
Ben Waples: But you could do concept now and then.

267
00:24:00.420 --> 00:24:02.220
Ben Waples: Let's get a function here.

268
00:24:04.680 --> 00:24:05.610
Patrick Wilson: Is it new date.

269
00:24:06.270 --> 00:24:08.130
Ben Waples: Yeah, new day. That's what it is. Yeah.

270
00:24:08.610 --> 00:24:10.470
Patrick Wilson: There might be a space between new end date.

271
00:24:12.300 --> 00:24:13.830
Patrick Wilson: But I think they'd stuck. Yeah, like that.

272
00:24:17.910 --> 00:24:20.730
Patrick Wilson: But it might be formatted weird, we might have to get

273
00:24:22.410 --> 00:24:24.300
Patrick Wilson: Like the year, month and day separated

274
00:24:26.130 --> 00:24:34.230
Ben Waples: Literal in there. So like you're using template literal already see if you delete that. And then do dollar sign curly persons.

275
00:24:35.280 --> 00:24:38.670
Ben Waples: And then now dot year, I think.

276
00:24:40.290 --> 00:24:41.460
Ben Waples: Get full year.

277
00:24:43.530 --> 00:24:44.040
Ben Waples: Alone.

278
00:24:44.520 --> 00:24:45.420
Patrick Wilson: Yeah, full year.

279
00:24:45.570 --> 00:24:47.280
Ben Waples: Before your and then, you know, call it

280
00:24:49.680 --> 00:24:50.010
Greg Mall: Call it

281
00:24:50.700 --> 00:24:52.080
Ben Waples: Yeah, and then

282
00:24:53.190 --> 00:24:58.290
Ben Waples: Put a dash after we. How we doing with the curly persons.

283
00:24:59.970 --> 00:25:02.460
Ben Waples: Oh, yeah. So yeah, close the curly and then put a dash

284
00:25:04.050 --> 00:25:12.660
Ben Waples: And then another curly person and then you have to do now get day or is it gets full year return year day year, month, day,

285
00:25:13.230 --> 00:25:14.310
Ryan Mehta: Just returning the year

286
00:25:14.820 --> 00:25:15.270
Okay.

287
00:25:16.440 --> 00:25:20.130
Greg Mall: So curly template literal

288
00:25:20.430 --> 00:25:21.180
Ben Waples: Yep, yep.

289
00:25:26.340 --> 00:25:28.920
Greg Mall: Now get for day

290
00:25:30.420 --> 00:25:31.530
Ben Waples: Yeah.

291
00:25:34.410 --> 00:25:35.610
Patrick Wilson: Good, good. Be month

292
00:25:36.630 --> 00:25:38.490
B 00:15:36.030
Ryan Mehta: Or you could have different constraints, if you had a different game. This

131
00:15:37.830 --> 00:15:39.690
Ryan Mehta: This table definition makes sense.

132
00:15:41.970 --> 00:15:42.420
Ryan Mehta: Okay.

133
00:15:43.920 --> 00:15:46.470
Ryan Mehta: So we have our little table definition.

134
00:15:47.820 --> 00:15:50.070
Ryan Mehta: Let's start building a model.

135
00:15:51.960 --> 00:15:53.430
Ryan Mehta: No cynical, read me

136
00:15:54.540 --> 00:15:55.020
Here.

137
00:15:57.630 --> 00:16:01.170
Ryan Mehta: And a flow. So, this what we're gonna do, we're gonna

138
00:16:02.430 --> 00:16:09.180
Ryan Mehta: Build model methods and then we're going to build and point

139
00:16:10.410 --> 00:16:14.160
Ryan Mehta: And then we're going to build service.

140
00:16:17.790 --> 00:16:23.250
Ryan Mehta: So building the model methods will happen on the back end building the endpoint is a backend thing.

141
00:16:24.300 --> 00:16:32.160
Ryan Mehta: Service on the front end and then view on the front end. So this is going to be like our continuous flow as we go through the application.

142
00:16:33.480 --> 00:16:36.750
Ryan Mehta: So let's do the first step we're going to build our model method.

143
00:16:39.300 --> 00:16:43.290
Ryan Mehta: We don't have a model yet, so I will create a models directory

144
00:16:45.180 --> 00:16:48.810
Ryan Mehta: And we're building a card JS file.

145
00:16:51.720 --> 00:16:53.880
Ryan Mehta: It's a class called card.

146
00:16:59.910 --> 00:17:01.650
Annalise: Models models.

147
00:17:02.610 --> 00:17:03.240
Models.

148
00:17:04.440 --> 00:17:05.850
Ryan Mehta: Dinosaur models.

149
00:17:06.780 --> 00:17:07.830
Annalise: So I was asking.

150
00:17:08.730 --> 00:17:09.390
Ryan Mehta: I tell them is

151
00:17:13.080 --> 00:17:23.010
Ryan Mehta: Our card. Let's put the side by side. So we will remember what it has has an ID a name a description and they cost.

152
00:17:25.590 --> 00:17:27.330
Ryan Mehta: Will have a constructor.

153
00:17:28.680 --> 00:17:35.220
Ryan Mehta: That will take a row and then set ID to add

154
00:17:36.900 --> 00:17:38.490
Ryan Mehta: Me to grow.

155
00:17:49.650 --> 00:17:56.580
Ryan Mehta: Okay, so kind of just scaffolding out this model our model has these four fields.

156
00:17:57.870 --> 00:18:14.070
Ryan Mehta: And then we want to build our first method. Before we start building our first method, though, we're going to write a test that will test this method and the end point simultaneously will do that by creating an AP test.

157
00:18:15.810 --> 00:18:18.270
Ryan Mehta: So first AP test it.

158
00:18:19.980 --> 00:18:22.470
Ryan Mehta: Creates a card. The

159
00:18:24.120 --> 00:18:38.670
Ryan Mehta: Post. We just need this one test because if the post route works. That means the insert method works will be testing, both of those things simultaneously since the post route will be using our insert method.

160
00:18:40.410 --> 00:18:47.640
Ryan Mehta: So we're going to return. We're going to make a request of our app. It's going to be a POST request to API V1 cards.

161
00:18:48.690 --> 00:18:52.860
Ryan Mehta: We're going to send it something that looks like a card mean

162
00:18:54.930 --> 00:18:55.320
Ryan Mehta: I don't know.

163
00:19:03.990 --> 00:19:04.410
Ryan Mehta: True.

164
00:19:06.840 --> 00:19:07.590
Ryan Mehta: Cost

165
00:19:14.580 --> 00:19:17.130
Ryan Mehta: Whatever semi fictional card.

166
00:19:19.140 --> 00:19:31.590
Ryan Mehta: After we make that request we then expect to get back a response. We expect the response body to equal an object with some ID.

167
00:19:33.360 --> 00:19:36.090
Ryan Mehta: Number. Actually, it's going to be a spring.

168
00:19:37.470 --> 00:19:38.970
Ryan Mehta: We expect a name.

169
00:19:40.620 --> 00:19:42.180
Ryan Mehta: Description

170
00:19:44.880 --> 00:19:45.780
Ryan Mehta: And the past

171
00:19:47.520 --> 00:19:50.850
Ryan Mehta: So expect all of these to come back from our API.

172
00:19:53.400 --> 00:19:54.210
Make sense

173
00:19:56.010 --> 00:19:57.630
Good. All right.

174
00:20:04.080 --> 00:20:06.660
Ryan Mehta: Let's, let's rename this file.

175
00:20:10.200 --> 00:20:11.310
Ryan Mehta: Alright and around it.

176
00:20:15.690 --> 00:20:20.220
Ryan Mehta: Now we can start getting to a place where this will pass

177
00:20:21.270 --> 00:20:28.860
Ryan Mehta: We're going to write our insert method. So we're going to insert a card into our database.

178
00:20:29.910 --> 00:20:36.540
Ryan Mehta: We're going to get some rows back by a waiting list needs to be facing

179
00:20:40.440 --> 00:20:43.200
Ryan Mehta: I think it's cool dot query.

180
00:20:45.420 --> 00:20:48.000
Ryan Mehta: And then we'll pass it a sequel.

181
00:20:49.050 --> 00:20:52.770
Ryan Mehta: Insert into cards.

182
00:20:55.200 --> 00:20:55.620
This

183
00:20:56.940 --> 00:20:58.110
Cost

184
00:21:12.960 --> 00:21:19.560
Ryan Mehta: Okay, so we have our little sequel query here, insert into cards name, description cost.

185
00:21:21.060 --> 00:21:27.210
Ryan Mehta: And our three properties we need to send those by putting an array here with card.

186
00:21:28.530 --> 00:21:30.720
Ryan Mehta: Card subscription.

187
00:21:32.280 --> 00:21:32.760
Costs.

188
00:21:35.040 --> 00:21:40.980
Ryan Mehta: Okay, so our little sequel statement and then we're going to return a new

189
00:21:42.090 --> 00:21:44.100
Ryan Mehta: Card with

190
00:21:45.390 --> 00:21:46.110
Rose.

191
00:21:51.690 --> 00:21:52.260
Ryan Mehta: Look good

192
00:21:54.900 --> 00:22:04.320
Ryan Mehta: Alright, so we have our insert method. Let's go into our library, we're going to create a controllers.

193
00:22:05.880 --> 00:22:18.270
Ryan Mehta: Folder and a card stock JS file and then before I forget, and app JS. I am going to use for API V1 cards.

194
00:22:19.320 --> 00:22:22.740
Ryan Mehta: That controller, we just created.

195
00:22:25.860 --> 00:22:31.080
Ryan Mehta: Excel. So whenever we go to this route. We're going to be hitting the cards.

196
00:22:32.550 --> 00:22:32.910
Route

197
00:22:34.890 --> 00:22:35.280
Right.

198
00:22:36.870 --> 00:22:41.340
Ryan Mehta: So back in our cards and split the model and the route side by side.

199
00:22:43.170 --> 00:22:47.490
Ryan Mehta: Wouldn't we constructed this method right here. We constructed

200
00:22:48.990 --> 00:22:50.130
Ryan Mehta: An API call.

201
00:22:51.210 --> 00:23:01.650
Ryan Mehta: This is our model exposing a public method, an API. It's an interface that anybody can use to insert a card.

202
00:23:02.850 --> 00:23:17.730
Ryan Mehta: Whoever uses this method doesn't need to know how the method works. They just need to know the purpose of the method, what it does. On the right hand side we're going to make use of this API. So we're going to bring in our router.

203
00:23:22.260 --> 00:23:25.860
Ryan Mehta: Express. We're going to exports.

204
00:23:28.110 --> 00:23:37.710
Ryan Mehta: And we're going to dock folks stock of it. You'll notice we've actually used another API in this file dot post is an API call to router.

205
00:23:38.340 --> 00:23:50.400
Ryan Mehta: We don't know how dot post works behind the scenes. We just know the intention of it dot post is making it so when somebody goes to that path. It's going to invoke this function.

206
00:23:52.290 --> 00:23:56.640
Ryan Mehta: Right. We've used an express API. At this point, the POST method.

207
00:23:57.930 --> 00:24:01.320
Ryan Mehta: That makes sense. It's just an API that we didn't create

208
00:24:04.170 --> 00:24:11.760
Ryan Mehta: Okay. So when somebody goes to this post for out. We are going to use our card model, you're going to insert

209
00:24:13.110 --> 00:24:27.180
Ryan Mehta: A card which we're going to get from wrecked out body. We're then going to get back the inserted card. We will send the card if there's an error. We will catch that error and call

210
00:24:28.620 --> 00:24:36.690
Ryan Mehta: Our next function. I think that's to get our test to pass or be surprised if it didn't have shocked.

211
00:24:39.090 --> 00:24:39.810
Ryan Mehta: Card.

212
00:24:41.130 --> 00:24:42.960
Ryan Mehta: Oh, this should be static.

213
00:24:46.950 --> 00:24:47.370
This

214
00:24:54.060 --> 00:24:57.810
Ron Yonker: Is a card being sent and responses JSON.

215
00:24:59.910 --> 00:25:02.580
Ryan Mehta: The card is being sent as JSON. Yeah.

216
00:25:05.970 --> 00:25:08.340
Ryan Mehta: Hold on, let me start Postgres.

217
00:25:09.570 --> 00:25:10.650
Ryan Mehta: And never started it.

218
00:25:15.690 --> 00:25:17.700
Ryan Mehta: And I don't have an end file.

219
00:25:20.670 --> 00:25:21.090
Okay.

220
00:25:22.770 --> 00:25:24.600
Ryan Mehta: All right, there's are passing tests.

221
00:25:27.420 --> 00:25:35.250
Ryan Mehta: So we used our card API to insert a card into our database in our route that look good.

222
00:25:37.380 --> 00:25:42.150
Ryan Mehta: By doing this, we've also exposed another API that people can use

223
00:25:43.200 --> 00:25:57.450
Ryan Mehta: So by creating this route we now have an API, a web API that people can use by posting to API V1 cards. When somebody posts to API V1 cards. This function is going to be invoked.

224
00:25:58.680 --> 00:26:10.830
Ryan Mehta: And then we're going to respond back to them with this same thing happened with the API that we just called this card one right when I write this bit of code card insert

225
00:26:12.150 --> 00:26:17.610
Ryan Mehta: This function over here gets invoked. And they respond with this return line.

226
00:26:20.640 --> 00:26:27.150
Ryan Mehta: So again, when some of the post to API V1 cards. They're going to be invoking this function here.

227
00:26:28.140 --> 00:26:44.130
Ryan Mehta: And we're going to be responding with this. So all those effects calls that we're doing on the front end are just ways of invoking a function somewhere else, potentially, one that we control because we wrote it, but also potentially one that we don't like when we hit a third party API.

228
00:26:45.570 --> 00:27:00.510
Ryan Mehta: The big difference between the third party API's and the API that we're creating is that we're in control of this function here, we wrote it. The third party API's. They have a function like this on their back end. We just can't see it. It's invisible to us on the front end.

229
00:27:03.330 --> 00:27:10.440
Ryan Mehta: Actually over in our tests, you can see that we make a request we post to that route we send them some data.

230
00:27:11.010 --> 00:27:24.720
Ryan Mehta: And they get a response. They don't actually know what the internals are of this function. They just know that they expect this sort of flow to happen. They expect to be of the post of that route and get this sort of response back.

231
00:27:30.180 --> 00:27:34.260
Ryan Mehta: Alright, so we've created our first little web a API endpoint.

232
00:27:36.120 --> 00:27:43.590
Ryan Mehta: Our next step is to consume that API in a service call on the front end. So we're going to migrate now.

233
00:27:44.760 --> 00:27:49.920
Ryan Mehta: To a front end application and connect our back end to our friend.

234
00:27:51.540 --> 00:27:55.680
Ryan Mehta: So let's go over here. Here is our front end application.

235
00:27:58.170 --> 00:28:08.550
Ryan Mehta: Typical for and application. We're going to connect these two things by in source, creating a services folder and a cards.

236
00:28:09.780 --> 00:28:15.480
Ryan Mehta: API that JS will be connecting to that cards API that just constructed

237
00:28:17.640 --> 00:28:25.620
Ryan Mehta: Our first thing that we're going to want to be able to do is post a card right create a new card.

238
00:28:28.710 --> 00:28:42.750
Ryan Mehta: We're going to get a card of card that we want to post our service doesn't know what card at wants to create right, it should be able to create any card. So somebody is going to have to hand it the card that we want to create

239
00:28:43.830 --> 00:28:47.850
Ryan Mehta: We're then going to use fetch to make an API call.

240
00:28:49.440 --> 00:29:07.560
Ryan Mehta: We have to figure out where the endpoint exists in order to do this right, we know for sure that API V1 cards, but the first part of this URL is unknown to us, or at least can change given environment right now. We could hard code. This

241
00:29:09.360 --> 00:29:16.500
Ryan Mehta: With local host 7890 because this is where our backend is running locally in development mode.

242
00:29:17.940 --> 00:29:33.750
Ryan Mehta: But once we deploy this. We don't want people to try to connect to our laptop and we don't expect them to be running our backend on their laptops, we expect them to hit some URL in the cloud. So eventually this will be our deployed back ends.

243
00:29:36.030 --> 00:29:36.960
Route right

244
00:29:38.640 --> 00:29:45.330
Ryan Mehta: Because of that, I'm going to put it in an environment variable. It's an environment variable because it changes based on environment.

245
00:29:47.700 --> 00:29:49.620
Ryan Mehta: So let's just put

246
00:29:50.850 --> 00:29:54.240
Ryan Mehta: Process dot dot API.

247
00:29:55.410 --> 00:29:56.100
URL.

248
00:29:58.350 --> 00:30:02.340
Ryan Mehta: Here and then let's construct a dot csv file.

249
00:30:04.920 --> 00:30:07.530
Ryan Mehta: With our API URL.

250
00:30:09.660 --> 00:30:12.990
Ryan Mehta: And for right now, that will be local host separate zero

251
00:30:17.550 --> 00:30:21.600
Ryan Mehta: So this is local host 7890 for us at least right now.

252
00:30:23.040 --> 00:30:40.140
Ryan Mehta: So we're going to make it that fetch request. It's not just any old Brett fetch request it needs to be a post so we need to make sure that we're sending a POST request. We also need to tell this API, since we're sending a data we need to tell it what type of data are we sending it

253
00:30:41.160 --> 00:30:46.800
Ryan Mehta: In a web requests. We do that by specify a content type pattern.

254
00:30:48.180 --> 00:30:52.080
Ryan Mehta: Ours is going to be apathetic creation JSON.

255
00:30:53.220 --> 00:30:57.300
Ryan Mehta: And then we'll send a body which is going to be a string of FIDE

256
00:30:58.860 --> 00:31:03.240
Ryan Mehta: Object a JSON. We're going to JSON a phi our card.

257
00:31:05.850 --> 00:31:11.070
Ryan Mehta: And then we'll get a response. We will parse the responses JSON.

258
00:31:14.310 --> 00:31:16.530
Ryan Mehta: What's actually be like legit here. Let's

259
00:31:18.240 --> 00:31:21.570
Ryan Mehta: Let's change this to an a sync function.

260
00:31:24.300 --> 00:31:25.770
Ryan Mehta: Let's cards.

261
00:31:26.910 --> 00:31:28.320
Ryan Mehta: Await that thing.

262
00:31:31.980 --> 00:31:46.770
Ron Yonker: Process an API underscore URL that works for any location you want to actually host the server. So say if you put that up on hero goo. For example, that's still valid.

263
00:31:48.270 --> 00:31:57.960
Ryan Mehta: Yep, because I'm in the DMV file. We're going to be specifying what that actually ends up equaling okay you

264
00:32:02.640 --> 00:32:05.970
Ryan Mehta: See the sun or I guess I've card.

265
00:32:10.140 --> 00:32:19.050
Ryan Mehta: And then we'll say, if we're not. Okay. We will grow our card, otherwise the lectern covered

266
00:32:21.060 --> 00:32:23.010
Ryan Mehta: Just so we can have a little bit of air handling.

267
00:32:24.210 --> 00:32:24.540
Here.

268
00:32:28.080 --> 00:32:28.350
Alright.

269
00:32:29.520 --> 00:32:30.570
Ryan Mehta: Well, good everyone

270
00:32:32.880 --> 00:32:44.160
Ryan Mehta: All right, we have our postcard service. Now this is calling this API. So when we run this what we're actually doing is

271 on the previous piece of state on another piece of state, you're supposed to pass an arrow function here.

355
00:43:29.220 --> 00:43:32.550
Ryan Mehta: Actually have this in their documentation. So if you look at

356
00:43:39.180 --> 00:43:41.280
Their date.

357
00:43:47.430 --> 00:43:50.220
Ryan Mehta: I probably made up the word dependent on

358
00:43:59.970 --> 00:44:02.280
Ryan Mehta: How will I find this here.

359
00:44:07.350 --> 00:44:08.670
Ryan Mehta: So this whole thing.

360
00:44:10.050 --> 00:44:11.310
Ryan Mehta: Is probably about that.

361
00:44:12.690 --> 00:44:22.830
Ryan Mehta: May update. So because this stop props in this state may update asynchronously. You should rely on their Valley, you should not rely on their values to calculate the next state.

362
00:44:23.310 --> 00:44:31.800
Ryan Mehta: For example, this code fails to update the counter. So this is not using an arrow function but relying on old pieces of state.

363
00:44:32.790 --> 00:44:41.370
Ryan Mehta: To fix it. Use a second former said state that accepts a function, rather than an object that function will use the state as the first argument and props, blah, blah, blah.

364
00:44:42.870 --> 00:44:48.930
Ryan Mehta: So according to the documentation whenever you have state that relies on the old

365
00:44:50.310 --> 00:44:55.050
Ryan Mehta: Like a piece of state, you're supposed to pass an arrow function here instead

366
00:44:57.150 --> 00:44:59.520
Ryan Mehta: So, this how you do that in both

367
00:45:01.230 --> 00:45:03.930
Ryan Mehta: Hook way and not halfway

368
00:45:05.430 --> 00:45:12.990
Adrian Simental: Running, just to be clear on four and five. On the right side we can name set text and say account, whatever we want. Right. Yeah.

369
00:45:13.020 --> 00:45:13.590
Totally

370
00:45:14.790 --> 00:45:14.970
Adrian Simental: Yeah.

371
00:45:15.030 --> 00:45:16.530
Ryan Mehta: These can be called whatever

372
00:45:30.930 --> 00:45:34.650
Ryan Mehta: All right. Any question about these two things.

373
00:45:38.280 --> 00:45:40.290
Ryan Mehta: Kind of makes sense, seeing them side by side.

374
00:45:42.180 --> 00:45:44.400
Ryan Mehta: It's very cool. Cool.

375
00:45:44.670 --> 00:45:58.110
Annalise Murphy: That's a cool, it's cool to see it like just create it and like kind of hold its own state and just make it instantly. You know, I'm to like building on the classes and the thing

376
00:45:58.950 --> 00:46:01.710
Ryan Mehta: Yeah, ends up being slightly less lines of code.

377
00:46:04.500 --> 00:46:11.250
Ryan Mehta: And it's like, it feels a little bit more like JavaScript like normal JavaScript to either and

378
00:46:11.850 --> 00:46:20.850
Annalise Murphy: I feel like in a weird way. It's a little bit more legible or like like readable. I guess like it just makes more sense. Totally.

379
00:46:22.110 --> 00:46:29.610
Brooke Perkins (she/her): I have a question. I guess I wonder, like, how common practice it the right is versus the left

380
00:46:30.720 --> 00:46:31.380
Ryan Mehta: Good question.

381
00:46:32.520 --> 00:46:41.130
Ryan Mehta: I think you'll probably see this left hand side more although that may be not the case anymore.

382
00:46:43.170 --> 00:46:48.030
Ryan Mehta: But you will get a job because you know how to do the right hand side. So

383
00:46:50.250 --> 00:46:54.240
Ryan Mehta: This way is like the because this way existed since the beginning of react.

384
00:46:55.290 --> 00:47:03.300
Ryan Mehta: Most legacy react applications. So most older applications older than 2019 will have this style with it.

385
00:47:04.830 --> 00:47:09.720
Ryan Mehta: But because of the hype surrounding react hooks every application post

386
00:47:12.180 --> 00:47:16.080
Ryan Mehta: Will have been written this way and all of those applications from pre

387
00:47:18.360 --> 00:47:23.820
Ryan Mehta: Probably have some ticket on their board saying convert all components from this to this.

388
00:47:25.140 --> 00:47:31.170
Ryan Mehta: So while you might see this more often people I'm work cited about this and what this skill more

389
00:47:31.560 --> 00:47:32.820
So they're both important that

390
00:47:34.170 --> 00:47:34.650
ryan Diffenbaugh: Gotcha.

391
00:47:40.530 --> 00:47:40.920
ryan Diffenbaugh: Okay.

392
00:47:44.280 --> 00:47:47.250
Ryan Mehta: There was one other hook that I want to talk about today.

393
00:47:50.340 --> 00:47:52.380
Ryan Mehta: That is this use effect. Tuck

394
00:47:53.760 --> 00:48:00.360
Ryan Mehta: So use effect allows us to perform side effects changes that don't depend on what we pass to our component

395
00:48:02.160 --> 00:48:04.020
Ryan Mehta: Kind of a weird way of saying something.

396
00:48:05.610 --> 00:48:24.060
Ryan Mehta: Typically, our function components. If you pass it props, the same props, you'll get the same view every time. Right, like if there's that kind of makes sense. These are called pure functions when you pass a function like the ad function one and two, you're always going to get back three

397
00:48:24.780 --> 00:48:26.490
Annalise Murphy: Is this a way of meditating.

398
00:48:28.050 --> 00:48:31.260
Ryan Mehta: This is the way of mutated. Yeah. So it's a way of having side effects.

399
00:48:31.260 --> 00:48:32.370
Ryan Mehta: So you

400
00:48:32.400 --> 00:48:33.360
Annalise Murphy: Can pass

401
00:48:33.420 --> 00:48:41.910
Ryan Mehta: The same props every time. But once your component loads. It's going to do some extra work to set its own state and this case.

402
00:48:42.720 --> 00:48:55.200
Ryan Mehta: You can see over here we're grabbing something from an API and setting our state based on the API call. And the reason why this is a side effect that you might not always get the same result every single time.

403
00:48:56.340 --> 00:49:07.590
Ryan Mehta: Is the API may change and give you a different list of characters or you may fail to fetch from API users and connected to the internet. So you can't connect to the API. So you get a different

404
00:49:07.590 --> 00:49:09.060
Annalise Murphy: Result Rudy against me.

405
00:49:10.080 --> 00:49:10.410
Annalise Murphy: Know,

406
00:49:11.610 --> 00:49:12.300
Thomas Stussi: And I'll just mute.

407
00:49:13.260 --> 00:49:13.740
Annalise Murphy: Oh, sorry.

408
00:49:15.690 --> 00:49:18.180
Ryan Mehta: So these are side effects.

409
00:49:19.590 --> 00:49:30.420
Ryan Mehta: In our case, we're going to be using us effect in place in our function components in place of React life cycles. So right now we also have these life cycles in class face component

410
00:49:31.020 --> 00:49:40.440
Ryan Mehta: Um, that's a component did mount component will and Mount component did update. We don't have the same access to life cycles and our function components.

411
00:49:41.460 --> 00:49:45.930
Ryan Mehta: To get the same functionality, though, we will use music fact

412
00:49:50.340 --> 00:49:58.080
Ryan Mehta: So in this case we have a component that wants to fetch a list of characters from an API.

413
00:49:59.850 --> 00:50:02.310
Ryan Mehta: The component gets a page number

414
00:50:03.720 --> 00:50:07.710
Ryan Mehta: And then fetches a list of characters on that page.

415
00:50:08.940 --> 00:50:18.450
Ryan Mehta: It gets a response. So it gets back the list of characters and it sets its character state to the list of characters effects from the API.

416
00:50:20.310 --> 00:50:23.160
Ryan Mehta: And this is all wrapped by a US effect.

417
00:50:26.220 --> 00:50:36.780
Ryan Mehta: So this is saying run this piece of code, only when the component first mounts when the component first gets drawn drawn on the screen fetch your list of characters.

418
00:50:40.770 --> 00:50:49.860
Ryan Mehta: There are few things to notice about this use effect takes an arrow function as its first parameter

419
00:50:51.090 --> 00:50:53.010
Ryan Mehta: So you pass it an arrow function.

420
00:50:54.720 --> 00:51:01.890
Ryan Mehta: And this arrow function will always get run when the component first mounts when our component is first drawn on the screen.

421
00:51:03.990 --> 00:51:07.500
Ryan Mehta: And then it takes a second parameter also

422
00:51:08.970 --> 00:51:11.760
Ryan Mehta: This empty array for right now.

423
00:51:15.660 --> 00:51:23.460
Ryan Mehta: This empty array controls. When this use effect callback here, when else it will get called besides on mouth.

424
00:51:25.020 --> 00:51:27.600
Ryan Mehta: So there's three things that we can pass to this.

425
00:51:28.740 --> 00:51:42.450
Ryan Mehta: As a second argument. The second parameter we can pass an empty array like we're doing right now. This tells the use effect to only run this arrow function when the component first mounts and never again.

426
00:51:44.220 --> 00:51:50.550
Ryan Mehta: So if you pass an empty array here this will only run when the component first mounts.

427
00:51:52.380 --> 00:52:12.780
Ryan Mehta: You can pass. Nothing there undefined. If you pass undefined tier this arrow function will run when ever the component renders so whenever state or props change this use effect will be invoked. There's actually a little gotcha here.

428
00:52:14.970 --> 00:52:20.580
Ryan Mehta: If you tried to use this code right now. You would cause an infinite rendering loop.

429
00:52:23.850 --> 00:52:25.140
Ryan Mehta: Why, me why.

430
00:52:26.730 --> 00:52:33.180
Ryan Mehta: Because whenever you change state you trigger a re render everybody have this intuition.

431
00:52:34.320 --> 00:52:44.820
Ryan Mehta: Change state re render when our component first mounts. We always run our use effect. They use effect changes state which causes a re render

432
00:52:45.360 --> 00:52:45.750
Ron Yonker: Yeah.

433
00:52:46.020 --> 00:52:57.510
Ryan Mehta: If you pass. Nothing here, you always run this us effect. Whenever a re render happens. So we run this us effect. Again, we change state which causes a re render

434
00:52:57.540 --> 00:53:00.660
Ryan Mehta: Whenever re render happens we run these effect which changes.

435
00:53:00.660 --> 00:53:14.760
Ryan Mehta: State, which causes a re render which causes this to run again forever. So you have to be very careful about passing nothing here if you pass. Nothing here and you use effect changes state, you will end up in an infinite re render

436
00:53:17.340 --> 00:53:31.800
Ryan Mehta: And then the third thing that we can pass here an array with items inside of it. This tells the user effect to run once when the component first bounce and then again whenever

437
00:53:32.340 --> 00:53:44.190
Ryan Mehta: One of the items in this array changes. So right now, we're saying get our characters on first mount and then if this page ever changes get our characters again.

438
00:53:48.270 --> 00:53:55.440
Ryan Mehta: So those are the three things that you can pass an empty array which says, so let me actually draw this.

439
00:53:56.730 --> 00:53:59.280
Ryan Mehta: If you pass an empty array.

440
00:54:00.600 --> 00:54:05.250
Ryan Mehta: Then you only run the US effect on now.

441
00:54:07.020 --> 00:54:09.930
Ryan Mehta: That means it will only ever run one time.

442
00:54:12.270 --> 00:54:19.050
Ryan Mehta: You can pass nothing. So I'll just do that as an underscore, and this means

443
00:54:20.460 --> 00:54:23.370
Ryan Mehta: Called the US effect on Mount

444
00:54:25.140 --> 00:54:27.300
Ryan Mehta: And each

445
00:54:28.350 --> 00:54:29.160
Ryan Mehta: Re render

446
00:54:32.040 --> 00:54:35.430
Ryan Mehta: And then there's a final one, which I'll put down here.

447
00:54:36.990 --> 00:54:37.380
Ryan Mehta: With

448
00:54:42.120 --> 00:54:46.230
Ryan Mehta: With items. So you can have as many items in this array as you want.

449
00:54:47.280 --> 00:54:49.320
Ryan Mehta: This is run it on Mount

450
00:54:51.870 --> 00:54:52.650
Ryan Mehta: And

451
00:54:53.880 --> 00:54:54.630
Ryan Mehta: When

452
00:54:56.880 --> 00:54:59.550
Programs change.

453
00:55:03.000 --> 00:55:03.930
Ryan Mehta: That makes sense.

454
00:55:07.440 --> 00:55:11.220
Ryan Mehta: This is going to be the one that takes the longest to use effect is

455
00:55:13.290 --> 00:55:17.310
Ryan Mehta: Notorious notoriously hard to like gain some good intuitions about

456
00:55:18.510 --> 00:55:21.930
Ryan Mehta: But you'll get some practice with it and eventually build some of those up.

457
00:55:24.540 --> 00:55:24.900
Yeah.

458
00:55:26.490 --> 00:55:29.310
Ryan Mehta: For us, we're almost never going to use this one.

459
00:55:30.780 --> 00:55:35.160
Ryan Mehta: We will be using this one. Quite often, and this one.

460
00:55:36.600 --> 00:55:37.530
Somewhat often

461
00:55:44.640 --> 00:55:48.960
Ryan Mehta: All right. Those are the two hooks that we're going to play with today. You stay and use effect.

462
00:55:58.770 --> 00:56:03.180
Ryan Mehta: Any final questions about those two hooks. Before we start playing with them a little bit

463
00:56:05.190 --> 00:56:12.720
Ben Waples: When we pass page and the array or the second argument, right, is that I see that it's like linked to

464
00:56:14.190 --> 00:56:27.840
Ben Waples: Props. So that'd be like when something in the parent component state for like what's being passed to it changes, then it would cause of re render of this component as well. Exactly.

465
00:56:27.960 --> 00:56:28.320
Yeah.

466
00:56:29.760 --> 00:56:35.040
Ryan Mehta: So if we were to draw this application tree we would probably have something like

467
00:56:36.690 --> 00:56:38.190
Ryan Mehta: At the top, a

468
00:56:41.850 --> 00:56:46.530
Ryan Mehta: Care tears, like all characters component

469
00:56:48.270 --> 00:56:52.140
Ryan Mehta: And then it would have two children, it would have our character list.

470
00:56:56.190 --> 00:57:00.510
Ryan Mehta: Which is this component right here and a pagination

471
00:57:04.530 --> 00:57:05.940
Ryan Mehta: component which is

472
00:57:08.010 --> 00:57:16.200
Ryan Mehta: Like two buttons, but he go back and forth between pages, what we'd end up with is a page with a list of characters.

473
00:57:17.550 --> 00:57:23.340
Ryan Mehta: And then a button at the top that. Let's just go back a page and a button at the top that lets us go forward a page.

474
00:57:24.510 --> 00:57:27.780
Ryan Mehta: The all characters container appear

475
00:57:29.400 --> 00:57:36.240
Ryan Mehta: Or like the all characters common parent would have two pieces or would have a piece of state for the correct page.

476
00:57:38.220 --> 00:57:48.720
Ryan Mehta: When you clicked on one of these buttons pagination would go and update that current page and the all characters are past page to character list.

477
00:57:50.430 --> 00:57:54.630
Ryan Mehta: If you didn't have this page right here inside of

478
00:57:56.730 --> 00:58:06.840
Ryan Mehta: The array. When you press on one of these buttons that parent component would get the new page and re render passing the new page to character list.

479
00:58:08.130 --> 00:58:24.030
Ryan Mehta: But character list wouldn't recall this user fact when it got the new page. So you end up with the same list of characters. So what you need to do instead is when you press this button you change the page, the new page gets passed to the character list the user fact

480
00:58:25.260 --> 00:58:37.860
Ryan Mehta: notices that it has this page within this array. So whenever that page changes, it knows that it needs to be run the US effect, which would cause us to pre grab our list of characters.

481
00:58:40.590 --> 00:58:42.330
Ryan Mehta: That's sort of how that flow will work.

482
00:58:42.720 --> 00:58:43.650
Ryan Mehta: Will actually write this

483
00:58:43.800 --> 00:58:44.580
Sort of thing.

484
00:58:45.720 --> 00:58:47.040
Ry
00:41:36.930 --> 00:41:37.470
Itself.

331
00:41:39.480 --> 00:41:41.670
Ryan Mehta: And then we can count the log something keeps

332
00:41:45.600 --> 00:41:46.500
Generic

333
00:41:48.060 --> 00:41:48.600
Nice.

334
00:41:51.960 --> 00:41:56.280
Ryan Mehta: Alright, the next one of the hardest things, I think, to wrap our minds around

335
00:41:57.810 --> 00:42:08.730
Ryan Mehta: Whatever. I've seen people go off and get jobs with TypeScript. This is the part that they struggle with the most like they'll post and the alumni chat channel for months, asking about generics usually

336
00:42:10.020 --> 00:42:13.380
Ryan Mehta: But it's also one of the coolest parts about any type of language.

337
00:42:15.060 --> 00:42:18.030
Ryan Mehta: Is this generic thing so

338
00:42:19.110 --> 00:42:23.940
Ryan Mehta: When we call find by name generic we're telling it what type we're giving it

339
00:42:25.200 --> 00:42:32.970
Ryan Mehta: So this is t here is equal to person, it's like a different argument that we're passing it

340
00:42:35.310 --> 00:42:44.250
Ryan Mehta: And then in this body. This function definition changes depending on what we pass in here for tea. So it's saying that

341
00:42:44.910 --> 00:42:59.220
Ryan Mehta: We need to give it an array of tea. So this array has to be an array of people or an array of PERSON PERSON array, and that this function returns a person now because we pass person here.

342
00:43:00.390 --> 00:43:08.730
Ryan Mehta: So we've made a generic function that works for any tea that at least matches this has name type

343
00:43:10.170 --> 00:43:21.180
Ryan Mehta: But instead of getting back just to has name. We're now getting back a person, since we defined the return value of our find by name generic to return t and t is person.

344
00:43:24.180 --> 00:43:24.540
Jacob Harrington: So,

345
00:43:25.740 --> 00:43:29.340
Jacob Harrington: So if you had an array of objects and they didn't include the name property. This would break

346
00:43:30.090 --> 00:43:39.420
Ryan Mehta: Yep. So if we had a beard, you have one of those somewhere pure names. So yeah, we have that's probably a bad one.

347
00:43:50.970 --> 00:43:51.810
Colors.

348
00:43:56.100 --> 00:43:56.730
Blue

349
00:43:59.130 --> 00:44:00.180
Ryan Mehta: And we try to pass.

350
00:44:03.360 --> 00:44:04.110
Ryan Mehta: To this

351
00:44:07.980 --> 00:44:10.380
Ryan Mehta: Would be, oh, you mean if this generic doesn't have a name.

352
00:44:11.250 --> 00:44:13.890
Ryan Mehta: Yeah, yeah. So same thing

353
00:44:15.240 --> 00:44:16.170
Ryan Mehta: We could

354
00:44:21.510 --> 00:44:25.830
Ryan Mehta: String. You can also make types like this is just the start.

355
00:44:27.510 --> 00:44:28.500
Ryan Mehta: It's probably worse.

356
00:44:45.660 --> 00:44:47.670
Ryan Mehta: So, and then

357
00:44:48.690 --> 00:44:49.530
Ryan Mehta: Over here.

358
00:44:50.970 --> 00:44:51.930
Ryan Mehta: It would fail.

359
00:44:54.930 --> 00:44:59.250
Jacob Harrington: So it's checking. It's the like has named interface, essentially you're typing.

360
00:45:00.840 --> 00:45:09.780
Ryan Mehta: So the generic is being checked right here the generic cast to extend has been which means it has to at least meet this shape.

361
00:45:12.300 --> 00:45:14.040
Ryan Mehta: So the type is failing there.

362
00:45:29.580 --> 00:45:37.320
Ryan Mehta: Yeah, I think generics are the hardest part of TypeScript. The good thing is, as you're writing a React application. We won't need generics.

363
00:45:37.650 --> 00:45:54.930
Ryan Mehta: But there are some places where React uses generics. So where you see us using these like this sort of syntax in React, it's because the function that we're using is a generic function that can be used for a type that we're passing here.

364
00:45:55.950 --> 00:46:02.670
Ryan Mehta: So you'll see us using some generic sometimes, but we won't have to write our own generic functions.

365
00:46:09.720 --> 00:46:17.400
Ryan Mehta: All right, any other questions. That's all I really wanted to talk about with like background stuff for TypeScript before we write some react code.

366
00:46:19.830 --> 00:46:22.110
racheldonahuedev@gmail.com: And I would like, I know that.

367
00:46:24.300 --> 00:46:26.970
racheldonahuedev@gmail.com: You said this, this part is like kind of

368
00:46:28.470 --> 00:46:34.710
racheldonahuedev@gmail.com: More difficult, but I was wondering. So this is saying like type extends this has name type

369
00:46:36.660 --> 00:46:38.010
racheldonahuedev@gmail.com: It's looking for

370
00:46:39.360 --> 00:46:46.380
racheldonahuedev@gmail.com: Some array type as well as a name. So it's looking for these properties under has a name right.

371
00:46:48.180 --> 00:46:48.930
racheldonahuedev@gmail.com: Sorry, go ahead.

372
00:46:49.290 --> 00:46:51.090
Ryan Mehta: Oh, yeah. So I think it's

373
00:46:52.620 --> 00:47:05.580
Ryan Mehta: Close. So it's saying that this thing here. The first argument, which is actually let me go back to a working version of this function call.

374
00:47:16.110 --> 00:47:28.530
Ryan Mehta: Okay, so it's saying that this thing here, which is this people thing here has to be an array of type t. So, it has to be an array of person.

375
00:47:30.240 --> 00:47:36.600
Ryan Mehta: And it's saying that this type person has to at least match the has name type

376
00:47:38.190 --> 00:47:41.790
Ryan Mehta: Has name is a type that you know has a name in it.

377
00:47:43.350 --> 00:47:46.890
Ryan Mehta: And then this main thing here is this thing here.

378
00:47:48.870 --> 00:47:56.670
Ryan Mehta: Saying that the first argument has to be an array of persons or tease and the second argument has to be

379
00:47:57.330 --> 00:47:57.960
A string.

380
00:48:00.090 --> 00:48:01.830
racheldonahuedev@gmail.com: Okay, and then this part is

381
00:48:04.050 --> 00:48:09.810
racheldonahuedev@gmail.com: Saying to either return this generic type or undefined.

382
00:48:11.070 --> 00:48:12.630
Ryan Mehta: Exactly. Okay.

383
00:48:13.800 --> 00:48:19.830
Ryan Mehta: So yeah, in our case, down from line 72 T takes the value of person.

384
00:48:22.440 --> 00:48:30.600
Ryan Mehta: Person does extend has names. So this check passes person has a name in IT T IS person.

385
00:48:32.850 --> 00:48:44.250
Ryan Mehta: T is person. So we've really rewritten this function to be workable for persons, because we put person here and this would work for any type that we wanted to

386
00:48:45.090 --> 00:48:59.730
Ryan Mehta: That's kind of the power of this if we replaced person here with dog dog also has a name to it would be dog dog also has a name. So that has named check matches, we would need to pass in an array of dogs.

387
00:49:01.140 --> 00:49:10.890
Ryan Mehta: And this would be dog will get a single dog back or undefined. So whatever we type here between these brackets is what these teams get rewritten as

388
00:49:12.960 --> 00:49:14.160
Ryan Mehta: I'm at runtime.

389
00:49:14.730 --> 00:49:17.400
Jacob Harrington: And the tea is just a variable. You've named right. It can be anything.

390
00:49:17.820 --> 00:49:18.750
Ryan Mehta: It could be anything. Yeah.

391
00:49:19.320 --> 00:49:24.510
Ryan Mehta: Typically people use tea for this thing for the first time that you give

392
00:49:25.710 --> 00:49:41.220
Ryan Mehta: The more complicated part is that it is generic. So you could have multiple types that you're passing here. We could have passed like person and dog and then use them in different places here. Typically, if you have that the next variable that people use his view.

393
00:49:42.990 --> 00:49:44.460
Ryan Mehta: Just for some conventions.

394
00:49:45.270 --> 00:49:55.110
Ron Yonker: Starting to seem to me like this is a substantially condensed and substantially less readable version of tests or means of testing.

395
00:49:57.960 --> 00:50:02.670
Ryan Mehta: Yeah, so there it it does make it so you don't need to test quite as much

396
00:50:04.080 --> 00:50:08.940
Ryan Mehta: Or at least some of the tests are taken care of by the language itself. That's true.

397
00:50:14.490 --> 00:50:23.520
Jacob Harrington: So in when you have the you as well. So that generic parameter can have as many arguments as you want it and then you just pass those arguments into the function parameters.

398
00:50:24.390 --> 00:50:25.830
Ryan Mehta: Yeah, to this like generics.

399
00:50:25.860 --> 00:50:26.820
Ryan Mehta: Parameters thing.

400
00:50:27.690 --> 00:50:31.770
Jacob Harrington: And then if you don't use the generics parameters would also be mad. Notice

401
00:50:32.400 --> 00:50:33.660
Ryan Mehta: Yeah, it's kind of mad here.

402
00:50:35.940 --> 00:50:36.810
Ryan Mehta: But this is just a

403
00:50:36.840 --> 00:50:39.150
Ryan Mehta: LinkedIn thing it would actually still compile

404
00:50:39.570 --> 00:50:42.720
Jacob Harrington: Okay, so it doesn't care that you're using to primers on the call.

405
00:50:43.380 --> 00:50:44.460
Actually, it won't compile

406
00:50:46.050 --> 00:50:48.900
Ryan Mehta: I think it's because it might compile thing I have

407
00:50:51.210 --> 00:50:53.310
Strict strict

408
00:50:56.760 --> 00:50:58.890
jasmin: No, no unused parameters.

409
00:51:02.850 --> 00:51:06.630
Ryan Mehta: So you could tell it that it should still compile anyways.

410
00:51:06.720 --> 00:51:12.390
Jacob Harrington: Okay so teachers won't be mad that you're using multiple generics even though they're not using the function framer, that's cool.

411
00:51:25.860 --> 00:51:34.410
Ryan Mehta: Will actually see a thing that uses multiple generics to and react whenever you make a class component. It uses multiple generics.

412
00:51:35.490 --> 00:51:36.060
See that

413
00:51:45.420 --> 00:51:46.650
Ryan Mehta: Okay, seeing

414
00:51:47.670 --> 00:51:50.040
Ryan Mehta: Any questions. Yep. What's up, um,

415
00:51:51.270 --> 00:51:58.410
Shawn Carpenter: So the types. I mean, they look like an object. Thanks for putting into it. Are they look like JavaScript object.

416
00:52:00.060 --> 00:52:03.540
Shawn Carpenter: What if it was an object that had nothing to it.

417
00:52:04.740 --> 00:52:05.550
Ryan Mehta: Yeah, so like

418
00:52:05.580 --> 00:52:07.950
Shawn Carpenter: That be included in a tight definition or

419
00:52:09.360 --> 00:52:16.860
Ryan Mehta: Yeah, so like maybe has a name has a name, and it has a find by name function on it or something.

420
00:52:17.220 --> 00:52:18.120
Shawn Carpenter: Like that. Yeah, or

421
00:52:18.270 --> 00:52:18.870
Shawn Carpenter: You know, like

422
00:52:20.850 --> 00:52:24.540
Shawn Carpenter: Dog example we used, you know, have like a name or whatever.

423
00:52:25.470 --> 00:52:28.050
Ryan Mehta: Yeah, it's good to that dog example. That's a good one.

424
00:52:29.640 --> 00:52:31.650
Ryan Mehta: So it's like

425
00:52:37.200 --> 00:52:37.500
That

426
00:52:42.660 --> 00:52:44.820
Shawn Carpenter: Function there that returns its name.

427
00:52:49.980 --> 00:52:50.040
Yeah.

428
00:52:57.510 --> 00:53:03.150
Ryan Mehta: Yeah. Typically, in this case, though, you would start moving toward the class instead of like a type definition.

429
00:53:04.680 --> 00:53:06.570
Ryan Mehta: A class in interface probably

430
00:53:11.040 --> 00:53:13.590
Ryan Mehta: One good rule of thumb is when you start having like

431
00:53:14.070 --> 00:53:15.450
Ryan Mehta: Objects that do things are

432
00:53:15.450 --> 00:53:26.610
Ryan Mehta: Starting to enter like object oriented programming whenever you're doing object oriented programming you usually use interfaces and classes. Whenever you're doing more functional programming, you're usually using types.

433
00:53:38.580 --> 00:53:40.320
All right, any other questions.

434
00:53:44.310 --> 00:53:47.730
Jerud Moyer: Is this sort of in a way. I mean, this is a totally

435
00:53:49.800 --> 00:53:57.090
Jerud Moyer: newbie kind of question, but is this sort of in a way like a shorthand of like class based JavaScript sort of

436
00:53:58.290 --> 00:54:06.210
Ryan Mehta: There's some there's like some similarities, right, like we're saying that it's returning something that's kind of like a Class. Class ish thing.

437
00:54:08.220 --> 00:54:11.610
Ryan Mehta: But there's, it's really not class space. It's just type based

438
00:54:13.020 --> 00:54:24.510
Ryan Mehta: Yeah, we're just making sure that the things out from like the thing that we think our function is returning is actually like the thing is, I don't know, we're just, we're just checking the types

439
00:54:24.960 --> 00:54:25.920
Jerud Moyer: Right, checking

440
00:54:27.000 --> 00:54:27.330
Cool.

441
00:54:28.410 --> 00:54:30.810
Ryan Mehta: But yeah, in JavaScript are real.

442
00:54:31.020 --> 00:54:39.540
Ryan Mehta: Are only really way to add our own types is with classes and just like vanilla JavaScript that's why there feels like such similarity

443
00:54:50.400 --> 00:54:55.800
Ryan Mehta: All right. Well, let's take a break. Let's come back at like 1110 and then we'll write some react code.

444
00:54:59.310 --> 00:54:59.850
Ryan Mehta: Sounds good.

445
00:55:03.150 --> 00:55:10.860
Ryan Mehta: Old color picker to point. Now, I think it's gonna be like color picker, but to point now modern version.

446
00:55:12.660 --> 00:55:26.370
Ryan Mehta: Here is our little create React app, it has all of the normal create react up stuff in it, except instead of all of the files, having J SX extensions. They all have TS sex extensions

447
00:55:27.720 --> 00:55:29.220
Ryan Mehta: TS RTS access

448
00:55:30.510 --> 00:55:34.500
Ryan Mehta: But you'll notice all the same familiar react stuff here.

449
00:55:36.090 --> 00:55:47.040
Ryan Mehta: We have our familiar create React app console here and this is what the page looks like right now.

450
00:55:49.620 --> 00:55:53.430
Ryan Mehta: Browser so basic create React app starting point.

451
00:55:55.230 --> 00:55:56.070
Ryan Mehta: With good everyone

452
00:55:58.320 --> 00:56:00.090
Hannah (TA): Yep. All right.

453
00:56:00.150 --> 00:56:01.980
Ryan Mehta: Let's take a look at our

454
00:56:05.430 --> 00:56:15.660
Ryan Mehta: React app TS exe file. If we were just looking at this file, you'd probably have no idea that we were even in TypeScript.

455
00:56:16.680 --> 00:56:20.670
Ryan Mehta: This goes back to the TypeScript stuff just being a superset of JavaScript.

456
00:56:21.960 --> 00:56:24.330
Ryan Mehta: That add some typing on top of it.

457
00:56:27.420 --> 00:56:38.940
Ryan Mehta: Yeah, here I mean there's no indication. Besides that, it's telling us that it's TypeScript right here and up in the top left corner, and it's TypeScript, which is pretty cool.

458
00:56:41.760 --> 00:56:45.990
Ryan Mehta: All right, let's make our first little TypeScript component and pass some props to it.

459
00:56:47.310 --> 00:56:51.750
Ryan Mehta: I'm going to make a directory for this dog, a dog. Tss.

460
00:56:54.240 --> 00:57:05.190
Ryan Mehta: Will make our first little TypeScript component. So we're import react from react. We are going to make a dog components.

461
00:57:07.260 --> 00:57:10.680
Ryan Mehta: And then we will export our dog component

462
00:57:12.000 --> 00:57:12.360
So,

463
00:57:14.610 --> 00:57:20.250
Ryan Mehta: Our dog component is going to return a representation of a dog. So we'll have it.

464
00:57:21.390 --> 00:57:25.170
Ryan Mehta: Up. What are the is a DL or add

465
00:57:26.370 --> 00:57:38.220
Ryan Mehta: Anything to add, has a the definition term and a DD. Okay, I think that's how it is. So will will display our dog's name.

466
00:57:39.480 --> 00:57:42.390
Ryan Mehta: Age and wait inside of this component

467WEBVTT

1
00:00:01.199 --> 00:00:01.620
Alright.

2
00:00:02.790 --> 00:00:04.799
Ryan Mehta: Yeah, great. This is all looking so awesome.

3
00:00:06.270 --> 00:00:11.519
Ryan Mehta: Let's take a look at your theme jazz sex from your theme layer.

4
00:00:12.599 --> 00:00:14.910
Ryan Mehta: Okay, well, we probably don't need to talk about this one.

5
00:00:15.389 --> 00:00:33.000
Thomas Stussi: Yeah, this one is just like I wasn't sure about like where exactly the provider needs to go. I guess like I was trying to get that the provider as high up as possible, but it didn't feel quite right to put it in app or index.

6
00:00:34.770 --> 00:00:36.180
Thomas Stussi: So I just made this layer.

7
00:00:37.080 --> 00:00:39.030
Ryan Mehta: Yeah, this is a good decision.

8
00:00:41.220 --> 00:00:43.830
Ryan Mehta: Once in theme test kiss.

9
00:00:47.010 --> 00:00:47.460
Ryan Mehta: Okay.

10
00:00:50.340 --> 00:00:52.530
Ryan Mehta: Heather. Do you want to take us through this one.

11
00:00:55.230 --> 00:01:02.280
Heather Peterson: Sure. So line seven is just mocking the API call. And then

12
00:01:03.660 --> 00:01:05.310
Heather Peterson: Changes the background color.

13
00:01:06.450 --> 00:01:16.440
Heather Peterson: Mocking the value and then just hard coding some mock data that would, in theory, returned from the API.

14
00:01:19.620 --> 00:01:21.390
Heather Peterson: And then just checking that

15
00:01:22.470 --> 00:01:27.600
Heather Peterson: Yeah, getting the ID from the button and the characters rendering

16
00:01:29.460 --> 00:01:31.800
Heather Peterson: From the page, making sure

17
00:01:33.690 --> 00:01:36.360
Heather Peterson: Click firing the event when clicked.

18
00:01:38.790 --> 00:01:48.210
Heather Peterson: And then it's expecting the characters for returned. Once the button is clicked, and it's waited for what I was trying to return.

19
00:01:50.400 --> 00:01:57.060
Ryan Mehta: Nice. Yeah, so it's we're clicking on the button then expecting the class to be dark after we click on it, very

20
00:01:58.590 --> 00:01:59.130
Nice.

21
00:02:01.500 --> 00:02:03.300
Ryan Mehta: Anything you change about this test.

22
00:02:08.130 --> 00:02:11.100
Heather Peterson: Not that I can see it looks pretty good.

23
00:02:14.910 --> 00:02:17.640
Ryan Mehta: Yeah. Anybody else have anything they would change it up the test.

24
00:02:18.870 --> 00:02:23.460
Annalise: This is kind of a silly question but SAS is passing right so

25
00:02:25.470 --> 00:02:26.970
Annalise: Do you want to change the test.

26
00:02:29.670 --> 00:02:30.750
Ryan Mehta: Well, the goal or you just

27
00:02:30.900 --> 00:02:31.680
Ryan Mehta: Get a pass.

28
00:02:31.950 --> 00:02:33.210
Annalise: Right, yeah. Okay.

29
00:02:33.240 --> 00:02:34.980
Annalise: Yeah, sorry. Still waking up over here.

30
00:02:37.350 --> 00:02:38.790
Ryan Mehta: Don't touch it. It's fantastic.

31
00:02:40.770 --> 00:02:42.150
Annalise: It's fantastic. It's beautiful.

32
00:02:42.420 --> 00:02:43.230
Thomas Stussi: just waking up.

33
00:02:46.410 --> 00:02:52.290
Shawn Carpenter: Would it make sense to check the class, the characters before firing button.

34
00:02:54.750 --> 00:03:01.170
Thomas Stussi: I need a key i think i think that does make a lot of sense. I have a snapshot

35
00:03:02.820 --> 00:03:05.040
Ryan Mehta: Yeah, probably because we change the header, a little bit.

36
00:03:05.160 --> 00:03:10.920
Thomas Stussi: Oh yes we did and we change the background color. Yeah. Now we're passing with an updated snapshot so

37
00:03:12.600 --> 00:03:13.050
Ryan Mehta: Nice.

38
00:03:13.740 --> 00:03:15.060
Ryan Mehta: Yeah, I like that idea, Sean.

39
00:03:17.070 --> 00:03:18.120
Thomas Stussi: So like

40
00:03:19.320 --> 00:03:22.980
Thomas Stussi: Like can you expect more than one thing.

41
00:03:24.450 --> 00:03:26.400
Thomas Stussi: Yeah, so like here you would like

42
00:03:29.160 --> 00:03:30.660
Thomas Stussi: You would like expect

43
00:03:33.210 --> 00:03:34.800
Thomas Stussi: Expect characters.

44
00:03:49.980 --> 00:03:54.510
Ryan Mehta: Yeah, I think that would improve the test, a little bit. I think to do it correctly.

45
00:03:55.530 --> 00:04:02.250
Ryan Mehta: Make sure that you're catching all edge cases, you don't have to run your tests, we're probably going to break them as we're going through this anyways.

46
00:04:02.340 --> 00:04:02.820
Yes.

47
00:04:03.960 --> 00:04:12.570
Ryan Mehta: I think to touch all edge cases like john mentioned, we want to check to make sure that starts off at light you click the button and that actually changes to dark

48
00:04:12.960 --> 00:04:13.320
Thomas Stussi: Mm hmm.

49
00:04:13.800 --> 00:04:21.870
Ryan Mehta: Then I think we want to click the button again and make sure it switches back to light because it could be that whenever you click the button, it just always switches it too dark.

50
00:04:22.710 --> 00:04:23.160
Thomas Stussi: Okay.

51
00:04:23.220 --> 00:04:27.300
Thomas Stussi: Once so we would do, like we would get rid of the return if

52
00:04:27.360 --> 00:04:29.910
Ryan Mehta: You don't wait it instead you have a saying.

53
00:04:43.770 --> 00:04:44.970
Thomas Stussi: And then we do

54
00:04:46.200 --> 00:04:47.670
Thomas Stussi: Another fire event.

55
00:04:58.380 --> 00:04:59.490
Thomas Stussi: And then do we return

56
00:05:00.330 --> 00:05:02.730
Ryan Mehta: Yeah. And then this one you can return the wait for

57
00:05:28.470 --> 00:05:33.960
Ryan Mehta: Does that make sense to everyone to how this catches like a few more edge cases potentially

58
00:05:38.940 --> 00:05:46.500
Ryan Mehta: Cool. Yeah. Because without this one, it could have always just been like the default could have been dark so you click the button and it actually did nothing.

59
00:05:46.980 --> 00:05:54.570
Ryan Mehta: Now we're checking that when you click the button, it goes from light to dark and then after it's in dark. If you click the button again. It should go back to light.

60
00:06:06.810 --> 00:06:07.140
Cool.

61
00:06:09.480 --> 00:06:12.000
Ryan Mehta: Yeah. Anything else anybody would change about this file.

62
00:06:15.120 --> 00:06:20.040
Ryan Mehta: The maybe the one other thing that I may change is how you grab your button.

63
00:06:21.510 --> 00:06:28.830
Ryan Mehta: You can get by role for buttons. Because buttons have a roll call button always so you could just get by roll button.

64
00:06:31.530 --> 00:06:37.980
Thomas Stussi: As a string. Yep. And then I could get rid of that test ID on my header component

65
00:06:52.170 --> 00:06:54.180
Ryan Mehta: This looks great. Anybody else have anything

66
00:07:07.710 --> 00:07:11.310
Ryan Mehta: Alright, let's take a look at your theme context.

67
00:07:17.550 --> 00:07:19.290
Ryan Mehta: Jerry, do you want to take us through this

68
00:07:22.590 --> 00:07:23.940
Jerud Moyer: Okay, I'm

69
00:07:24.990 --> 00:07:27.600
Jerud Moyer: Sorry, give me a sec here ever badly or slab this morning.

70
00:07:30.450 --> 00:07:31.260
Jerud Moyer: So,

71
00:07:33.990 --> 00:07:34.770
Jerud Moyer: We've got

72
00:07:39.360 --> 00:07:49.920
Jerud Moyer: Is making us all these expose creating his name context. They're essentially creating an online for and then he's creating a steam provider online seven

73
00:07:51.930 --> 00:07:56.070
Jerud Moyer: Making sure you can pass it by putting the children as an argument.

74
00:08:02.100 --> 00:08:07.830
Jerud Moyer: And he's setting the state essentially their of the theme to light.

75
00:08:09.210 --> 00:08:10.530
Jerud Moyer: And then he's got his

76
00:08:12.870 --> 00:08:14.880
Jerud Moyer: His toggle if statements.

77
00:08:16.440 --> 00:08:24.300
Jerud Moyer: Letting it know like sort of connecting the theme and the state together, setting it.

78
00:08:26.340 --> 00:08:28.920
Jerud Moyer: Function is set up a bucket there.

79
00:08:30.150 --> 00:08:32.250
Jerud Moyer: With toggle and theme in there.

80
00:08:33.780 --> 00:08:37.290
Jerud Moyer: And then he's returning the theme provider.

81
00:08:39.120 --> 00:08:44.880
Jerud Moyer: With the value of bucket, which is smart and do mine that way. That's smart.

82
00:08:47.700 --> 00:08:48.390
Jerud Moyer: He's returning it

83
00:08:49.890 --> 00:08:50.430
Ryan Mehta: Nice.

84
00:08:52.170 --> 00:08:54.360
Ryan Mehta: anything anybody would change about this file.

85
00:09:04.350 --> 00:09:04.560
Ryan Mehta: Yeah.

86
00:09:05.580 --> 00:09:20.010
ryan Diffenbaugh: I would say because you have like an implicit maybe not like a return but like 11th and 12th, could you have like it being his lights. I think the dark and then sort of just, if not, don't change anything. I don't quite another cop the syntax.

87
00:09:22.350 --> 00:09:24.360
Thomas Stussi: There's probably a cleaner way to do this.

88
00:09:26.820 --> 00:09:27.000
ryan Diffenbaugh: You

89
00:09:27.570 --> 00:09:29.730
Ryan Mehta: Can make an F L set for something

90
00:09:31.080 --> 00:09:31.470
Gotcha.

91
00:09:34.710 --> 00:09:41.520
Ryan Mehta: Yeah, I kind of realize after looking at this, this is kind of the way that I did it to in my demo.

92
00:09:43.470 --> 00:09:49.860
Ryan Mehta: But I think it's a bug or at least it's a mistake because

93
00:09:51.000 --> 00:09:56.280
Ryan Mehta: I think this is actually dependent state change. Right. It's a toggle so

94
00:09:57.930 --> 00:10:07.590
Ryan Mehta: The new state totally depends on the previous state and we have this rule where whenever you have dependent state change you're supposed to pass an arrow function here.

95
00:10:08.370 --> 00:10:08.700
Hmm.

96
00:10:10.170 --> 00:10:12.450
Ryan Mehta: So I think that is

97
00:10:13.800 --> 00:10:15.960
Ryan Mehta: From the man by the manual wrong.

98
00:10:17.970 --> 00:10:25.290
Ryan Mehta: But it probably works, but I think this should actually be set the current theme arrow.

99
00:10:27.180 --> 00:10:29.640
Ryan Mehta: Yeah, being arrow.

100
00:10:32.400 --> 00:10:36.240
Ryan Mehta: Current theme triple equals dark question mark.

101
00:10:46.980 --> 00:10:49.410
Ryan Mehta: In quotes light Colin dark

102
00:10:52.740 --> 00:11:01.020
Ryan Mehta: So if it's dark. Change it to light. Otherwise, keep it as dark and then these x go away and line 12 goes away completely.

103
00:11:13.800 --> 00:11:17.940
Ryan Mehta: Yeah, I think that's the way that we're supposed to do the toggle because it's dependent state change.

104
00:11:18.450 --> 00:11:22.650
Thomas Stussi: So like if it doesn't have a current theme, it can like recognize that more easily.

105
00:11:23.550 --> 00:11:27.030
Ryan Mehta: Or if you press the button 100 times, really, really fast.

106
00:11:27.420 --> 00:11:40.350
Ryan Mehta: You always want to consider the last theme. The theme that was just changed to and not like the theme at the time of the button. Click because react take some time to process the button. Click. So it's possible that you can press the button so fast.

107
00:11:42.690 --> 00:11:43.290
Ryan Mehta: That

108
00:11:44.580 --> 00:11:57.030
Ryan Mehta: Like the toggle runs at the exact same time twice and doesn't change the theme appropriately right if the toggle runs at the exact same time twice, it should stay the current thing because like

109
00:11:57.960 --> 00:12:09.120
Ryan Mehta: Because it's my life but they run out the exact same time. So, at that time, they both have lights and they switched big both switch it to dark and essentially dropped a quick

110
00:12:13.860 --> 00:12:15.150
ryan Diffenbaugh: Man can help you get going.

111
00:12:16.170 --> 00:12:19.230
Thomas Stussi: And that could maybe even come into play with like testing.

112
00:12:21.030 --> 00:12:21.780
Ryan Mehta: Totally, yeah.

113
00:12:21.990 --> 00:12:24.630
Thomas Stussi: I could imagine like a set of events.

114
00:12:25.830 --> 00:12:27.840
Thomas Stussi: Being like fast enough to do that.

115
00:12:31.620 --> 00:12:31.920
Yeah.

116
00:12:34.590 --> 00:12:40.050
Ryan Mehta: Okay, well this looks great. Nice. Let's take a look at your themes JS file.

117
00:12:41.010 --> 00:12:42.720
Thomas Stussi: I think we did in

118
00:12:42.780 --> 00:12:43.560
Ryan Mehta: Our hooks.

119
00:12:43.890 --> 00:12:46.410
Thomas Stussi: In hooks. Yeah, okay. That seems

120
00:12:47.130 --> 00:12:49.860
Ryan Mehta: Okay. Anybody want to take us. Oh, well, let's just

121
00:12:49.890 --> 00:12:51.180
Thomas Stussi: We did a little work here.

122
00:12:51.450 --> 00:12:51.750
But

123
00:12:53.340 --> 00:12:54.930
Ryan Mehta: Josh tell us what's going on here.

124
00:12:57.390 --> 00:12:59.370
Josh Olloqui: All right, so

125
00:13:00.450 --> 00:13:05.070
Josh Olloqui: Looks like we're bringing in the context

126
00:13:07.050 --> 00:13:08.280
Josh Olloqui: Of the men toggle

127
00:13:11.160 --> 00:13:14.730
Josh Olloqui: And then pretty much also applying

128
00:13:16.320 --> 00:13:19.080
Josh Olloqui: Constructing a book of class name.

129
00:13:20.310 --> 00:13:28.950
Josh Olloqui: To do the whole switch between light and dark game instead of doing the the ternary that we had before.

130
00:13:32.580 --> 00:13:34.890
Josh Olloqui: Can you have pretty, I think.

131
00:13:36.990 --> 00:13:37.170
Ryan Mehta: Yeah.

132
00:13:39.000 --> 00:13:39.390
Josh Olloqui: Yeah.

133
00:13:40.440 --> 00:13:46.980
Ryan Mehta: See, tell us how you like white us context is doing here. What is that even. What's that about

134
00:13:47.700 --> 00:13:52.110
Josh Olloqui: Us context we're pretty much setting a global state for the theme.

135
00:13:53.280 --> 00:13:57.000
Josh Olloqui: So that any of the church Aldrin within the

136
00:13:58.590 --> 00:14:03.570
Josh Olloqui: Within the provider will be able to access theme toggle. And at this point also styles.

137
00:14:05.100 --> 00:14:06.180
Josh Olloqui: I mean class name.

138
00:14:09.540 --> 00:14:14.130
Josh Olloqui: Yeah, just setting it globally so everyone else can access it. Nice.

139
00:14:14.190 --> 00:14:18.090
Ryan Mehta: And how about line seven. How does this thing right here work.

140
00:14:20.640 --> 00:14:21.090
Josh Olloqui: So that's

141
00:14:22.200 --> 00:14:24.420
Josh Olloqui: Pretty much just works by

142
00:14:26.790 --> 00:14:30.180
Josh Olloqui: Pretty sure just inserting the class name.

143
00:14:31.830 --> 00:14:41.700
Josh Olloqui: For whatever the current state of theme is inside of the whatever classes using class name. I mean whatever HTML element is using class name.

144
00:14:42.870 --> 00:14:46.920
Ryan Mehta: Yeah, so I think this styles. Here is an object.

145
00:14:49.020 --> 00:14:53.880
Ryan Mehta: With all the class names in this theme CSS. Can you see that theme CSS really quick.

146
00:14:55.050 --> 00:15:00.810
Ryan Mehta: So it has to class names light and dark. So it has two keys light and dark.

147
00:15:04.290 --> 00:15:04.560
Dark

148
00:15: all my life.

221
00:35:25.170 --> 00:35:37.080
jbj: Yeah, I think. I mean, if I can ponder for a moment. Um, I think that, especially with the react context API becoming a thing and becoming more popular that like

222
00:35:37.350 --> 00:35:50.100
jbj: Maybe people use Redux less, um, because you know react contact API comes bundled with React, it's written for react mob X works with that context as well, which is why I'm enjoying using it.

223
00:35:50.790 --> 00:35:59.820
jbj: But it does feel to me simpler than Redux and to be fair, like I'm not entrenched in Redux like I learned Redux

224
00:36:00.390 --> 00:36:09.600
jbj: Eight months ago and worked with it for a pretty short period of time before I got this job and started working with my bags. So I know that there are a lot of people like on the team that I work on that.

225
00:36:10.200 --> 00:36:24.300
jbj: Have been working in Redux for years and are like having a really hard time not technically challenging like switching, but more like emotionally moving away from Redux because it's something that they've worked with for so long and trusted for so long.

226
00:36:29.400 --> 00:36:38.370
jbj: I will say it was like a pretty heated conversation when we made the decision to move to My back's like people have opinions about this stuff.

227
00:36:42.600 --> 00:36:45.090
Thomas Stussi: Are there proponents of Redux doing okay now.

228
00:36:45.900 --> 00:36:46.980
jbj: I think so, yeah.

229
00:36:47.400 --> 00:36:51.540
jbj: Yeah, it's been it's been a minute. I think part of it. Also, and this is something

230
00:36:52.770 --> 00:37:01.710
jbj: That like as you move on to the world. You might you might see. So we have this Greenfield project, but there's like a chunk of it that came from an older app.

231
00:37:02.220 --> 00:37:11.460
jbj: And that was already in in Redux so a lot of the issue is that like we were by making the decision to move to my backs. We are taking on

232
00:37:11.940 --> 00:37:13.590
jbj: Tech debt, what we call tech debt.

233
00:37:14.190 --> 00:37:30.120
jbj: Which is when you make a decision and, you know, you're going to have to go back and do something later right like we knew, making the decision to move to My back's that at some point someone later was going to have to go back and change that old stuff into My back's from Redux

234
00:37:31.260 --> 00:37:39.240
jbj: And part what I've learned being in the field for a little while now that like a good chunk of being an engineer is balancing like

235
00:37:39.750 --> 00:37:50.010
jbj: Making decisions, what tech that you might incur from those decisions and like writing new features. But having time to actually address the tech debt that you've created.

236
00:37:56.040 --> 00:38:03.990
Ryan Mehta: Do you fear, but because this a mob X thing isn't as complicated as the Redux thing, at least from this demo. My back's looks super, super

237
00:38:04.770 --> 00:38:15.600
Ryan Mehta: Streamlined compared to Redux Do you fear that now you can't say like, I'm the only person that understands how state management works on this application and you've lost some job security because of it.

238
00:38:16.530 --> 00:38:20.670
jbj: Um, I am currently the only person on my team that knows anything about My back's

239
00:38:21.390 --> 00:38:23.040
jbj: No, I'm fine.

240
00:38:27.990 --> 00:38:29.430
jbj: Um, I think also

241
00:38:30.720 --> 00:38:43.110
jbj: Being able to write really simple tests for this, make it, make it compelling to me Redux has some you can write pretty straightforward text tests for Redux because they are also pure functions are simple functions, um,

242
00:38:43.890 --> 00:38:50.730
jbj: But yeah, I think that like this also being easily testable is helpful in like convincing people to use them.

243
00:38:54.810 --> 00:38:58.440
Ryan Mehta: Are you all using I think you all are right react testing library.

244
00:38:58.920 --> 00:39:03.540
jbj: Yeah, I just learned about testing hooks with the react testing library recently.

245
00:39:05.010 --> 00:39:08.610
jbj: So I was working on doing I was writing tests for

246
00:39:10.380 --> 00:39:15.030
jbj: Some of our work and it was having learning how to write tests for hooks, which was like

247
00:39:15.750 --> 00:39:25.260
jbj: I feel like when I was in out to me it was like, well, you can't you can't write a test for this because you can only run a hook in a component and this isn't a component. So I guess I just want to test it and like walk away.

248
00:39:25.800 --> 00:39:35.460
jbj: Um, and, and then it turns out the react testing library has the capability to sort of like shallow render a hook that you can then test.

249
00:39:35.880 --> 00:39:47.010
jbj: And then additionally, you need to create the provider. So you create a rapper in your testing Library and the the function to render those hooks is called render hook

250
00:39:47.400 --> 00:39:58.320
jbj: And render hook takes an argument that's rapper. So if you need to wrap your test in the provider, because obviously like your test is not inside your app components.

251
00:39:58.590 --> 00:40:10.230
jbj: Your test is over here and your providers over here, you need to like recreate that provider in your test environment. And then you can wrap that hook in that provider so that it will still access the store. Does that make sense.

252
00:40:12.810 --> 00:40:21.060
jbj: Yeah, it's some it's been a really interesting dive into that testing library. It can do some really cool stuff. And it's also pretty confusing.

253
00:40:22.440 --> 00:40:24.120
Ryan Mehta: Yeah, totally. I've been

254
00:40:25.470 --> 00:40:34.200
Ryan Mehta: Playing it with it with this cohort react testing library. It's the last time I played with that react testing library hooks thing and like

255
00:40:36.390 --> 00:40:37.440
Ryan Mehta: I thought it was super hard.

256
00:40:38.220 --> 00:40:39.480
Ryan Mehta: It is, yeah.

257
00:40:39.840 --> 00:40:53.400
jbj: Yeah, there's, there's a guy on another team actually the team that dirt and Jenna and Danny are on that has done a lot of research into how to do this. So he's kind of like the go to person.

258
00:40:54.420 --> 00:41:00.030
jbj: That's something that's that's helpful when you find like that one person on the extended team that knows how to do the thing you're doing

259
00:41:01.350 --> 00:41:02.280
jbj: Find that person.

260
00:41:05.250 --> 00:41:13.530
jbj: Yeah, we haven't run any enzyme tests are like, we're not, we haven't used any snapshots or anything like that. I'm not sure if you're still doing snapshot tests.

261
00:41:15.060 --> 00:41:15.690
jbj: Know everything

262
00:41:16.260 --> 00:41:20.370
jbj: We're, we're working on the React testing library UI tests.

263
00:41:24.030 --> 00:41:32.220
jbj: And in typical like kind of startup be fashion. We went to production. I think without like a single test.

264
00:41:34.110 --> 00:41:42.840
jbj: We were, we were trying to get everything done. And so now that's actually part of our tech debt right is that we have, we have like almost no tests for any of our code.

265
00:41:43.590 --> 00:41:51.960
jbj: So we're going back in and writing tests for everything, which is way less fun than just doing it when you write the function

266
00:41:53.040 --> 00:42:00.570
jbj: Because then it's just done. You did one rather than going back and looking at an entire code base and being like, well, I have like 50 tests to write today.

267
00:42:05.940 --> 00:42:06.930
Sarah Rector: That sounds like a nightmare.

268
00:42:08.670 --> 00:42:17.910
jbj: It wasn't great. I'm also I'm the only person on my team that knows how to write the book test. So I'm all about creating job security for myself.

269
00:42:19.350 --> 00:42:23.010
jbj: That's a lie. I really want other people to know how to do it. So I'm not the only person doing it.

270
00:42:28.170 --> 00:42:30.900
jbj: Um, yeah. Any other questions.

271
00:42:33.600 --> 00:42:34.020
Ben Waples: Um,

272
00:42:35.430 --> 00:42:40.050
Ben Waples: Oh, sorry. Well, our question. Isn't that what's your favorite mushroom right now.

273
00:42:40.380 --> 00:42:42.600
jbj: Oh, I'm always Morales

274
00:42:42.810 --> 00:42:44.040
Ben Waples: Rose. Nice.

275
00:42:44.100 --> 00:42:54.120
jbj: Yeah, and the side effect of like the the brutality of forest fire is that we end up with Morales, the next year. So you know if there is a silver lining

276
00:42:54.540 --> 00:42:54.960
jbj: That

277
00:42:55.080 --> 00:42:57.780
jbj: Could be a silver lining. We need those.

278
00:42:59.190 --> 00:42:59.430
Right.

279
00:43:02.250 --> 00:43:06.030
Ron Yonker: So you I think you answered this a little bit. But do you see

280
00:43:07.200 --> 00:43:22.560
Ron Yonker: Teams being willing to adopt mob X in the future over Redux as a more integrated like standard react way of handling global state rather than the huge heavy clunker that really boxes.

281
00:43:24.630 --> 00:43:34.590
jbj: Yeah, I mean, I think, you know, it's one of those things where a Redux is still like the largest part of the market share, you know, like most most apps are using Redux. And I think, you know,

282
00:43:35.460 --> 00:43:44.850
jbj: To then refactor Redux out of like these huge legacy bits of code is a lot of work. Um, I think that mob x is a has like

283
00:43:45.540 --> 00:43:52.770
jbj: It's not a fringe technology. It's not like this tiny little thing that no one's using it like a lot of people are using it. It's just not as common as Redux

284
00:43:53.550 --> 00:44:11.760
jbj: I think it's a helpful tool. I also think that like potentially the direction is like more just the react context API, which I haven't worked with as much directly, but it also is like it's more integrated with React and has some similar capabilities to what what My back's

285
00:44:12.810 --> 00:44:27.360
jbj: Is doing one of the developers on my team just wrote a small provider store situation for the context API that tracks our screen width for breakpoints so

286
00:44:28.200 --> 00:44:36.900
jbj: We then are able to access that information through that provider and change you know where things are styles and functionality.

287
00:44:37.200 --> 00:44:49.620
jbj: And that's been really cool because that before we were like writing a function on like every page that was like if the break point is this, do this thing. And now we can just like pass it all around in the store. So that's, that's pretty cool.

288
00:44:55.080 --> 00:44:58.140
jbj: Um, I don't know if I answered your question. Um, I

289
00:44:58.620 --> 00:44:59.580
jbj: Can only speak to

290
00:45:00.480 --> 00:45:03.330
Ron Yonker: My team. Thank you. Yeah.

291
00:45:09.600 --> 00:45:16.770
jbj: Yeah, I think it's a fun, I like using it because of its simplicity and and I also just love like having another tool.

292
00:45:17.820 --> 00:45:22.980
jbj: You know when I interviewed for my job. The guy who was the senior front end engineer at the time.

293
00:45:23.400 --> 00:45:40.680
jbj: In our tech interviews said, you know, have you used my backs. And my response was, like, I have no idea what that is like, I'm like Googling and I'm on the phone, like what is this, but now you all, if someone asked you that question can say yes. And that's the point of hack Friday's I'm

294
00:45:42.660 --> 00:45:49.800
jbj: On it. Obviously, I still got the job even though I didn't know what My back's was and that is also a takeaway that you don't have to know everything to get a job somewhere.

295
00:45:50.220 --> 00:45:56.490
jbj: Um, but yeah, being exposed to more technologies and just having like a general understanding of how they work is super helpful.

296
00:45:58.320 --> 00:46:06.270
Brooke Perkins (she/her): Um, I know you're, you're really active in like the tech community and alchemy company and we appreciate you.

297
00:46:07.290 --> 00:46:15.480
Brooke Perkins (she/her): But I was wondering if you had like a go to resource for learning new technologies or like hearing about them like a news source or or

298
00:46:15.570 --> 00:46:17.520
jbj: Unity or anything like that.

299
00:46:18.930 --> 00:46:22.470
jbj: That's a great question and I don't know that I have a very good answer for you.

300
00:46:22.920 --> 00:46:31.950
jbj: Honestly, YouTube is where I learned most things because it's free, um, you know, there's you to me courses and sometimes they're like $10 and super cheap.

301
00:46:32.400 --> 00:46:45.840
jbj: Um, and I have my my work gives us access to one called plural site, which is a very similar kind of tutorial but to be honest. Most of the ways that I've learned how to do stuff is by using YouTube

302
00:46:47.490 --> 00:46:58.500
jbj: I'm very visual. Like, I'm not good at reading docs and understanding things. I'm just like, those are words. I don't know what any of that means until I actually see somebody code it. So those videos help

303
00:46:59.820 --> 00:47:07.170
jbj: I mean, I think that being involved in any of the like professional organizations here. Like I I'm often involved in PDFs women in tech and out in tech

304
00:47:07.560 --> 00:47:14.790
jbj: And just like building relationships with people and learning about what they do is like a great way to hear about other things that people use

305
00:47:16.500 --> 00:47:16.800
Yeah.

306
00:47:19.050 --> 00:47:20.220
jbj: Thanks. Yeah.

307
00:47:23.130 --> 00:47:26.370
jbj: I'm sure there's like React blogs out there that people read

308
00:47:27.630 --> 00:47:27.840
jbj: It.

309
00:47:29.970 --> 00:47:30.540
jbj: Yeah.

310
00:47:31.170 --> 00:47:32.250
Brooke Perkins (she/her): I'm sure there are

311
00:47:39.900 --> 00:47:40.410
jbj: Cool.

312
00:47:43.560 --> 00:48:02.820
jbj: Awesome. Alright, well, um, we have about an hour left. So my thoughts are, like, people can take a break if they needed get water use bathrooms, things like that. And then if folks want to spin up a repo and code yourself a little like mini to do app.

313
00:48:03.990 --> 00:48:12.120
jbj: Like I said, I linked that repo in the chat here and I'm going to stay online for the next hour to help troubleshoot things

314
00:48:13.500 --> 00:48:25.170
jbj: That repos, a little bit different because I did set it up so that you could build everything with a function based or or build everything with a class based store if that's something you're interested in, like I said, we use classes on mine.

315
00:48:26.250 --> 00:48:31.770
jbj: We're probably going to refactor it to be a function. It was originally written as a class because that the person that wrote it.

316
00:48:33.570 --> 00:48:37.350
jbj: Is someone who's been coding a long time and I think it was like a remnant of a different time.

317
00:48:37.830 --> 00:48:51.150
jbj: I'm also it's been only reason in the recent past that there's been like helpful tutorials online about writing things in a functional class or a functional store. Most of the mob X docs are written as a class.

318
00:48:52.080 --> 00:48:57.600
jbj: And there you know you can read about reasons for why people use classes or don't use classes on your own.

319
00:48:58.110 --> 00:49:03.960
jbj: Um, but that information is in there. If you are curious about what it would look like with a class.

320
00:49:04.530 --> 00:49:20.310
jbj: Oh, and the one last thing that I'll say before I go, that I failed to mention is that you can add multiple stores to a provider. Um, so, you know, if you have like an app and you have a grocery store list and then you also want to have like a chore list.

321
00:49:21.420 --> 00:49:30.060
jbj: In that provider function. All you have to do is is like you have to create a YOUR CHORE list, you know, just like we created our grocery store list store and then you just like

322
00:49:31.020 --> 00:49:36.690 00:32:25.020
jared: Maybe I could figure out

276
00:32:26.190 --> 00:32:30.180
jared: Who's been in the shed, where the tool that I have is missing.

277
00:32:33.090 --> 00:32:33.420
jared: But

278
00:32:35.190 --> 00:32:36.600
I don't know, kind of gradient

279
00:32:41.820 --> 00:32:48.840
Ryan Mehta: As a person writing the backend for this like that graph que el server part of this, would you hate somebody that wrote a query such a query.

280
00:32:49.650 --> 00:32:50.100
Yes.

281
00:32:51.450 --> 00:32:57.420
jared: Absolutely. I'm actually going through some stuff right now and there's a query that's 100 and

282
00:32:58.470 --> 00:33:00.900
jared: Hundred and 54 lines law.

283
00:33:03.600 --> 00:33:09.090
jared: In they're using less than half that data. And they're like, why is this query taken so long. It's like, oh my god.

284
00:33:11.310 --> 00:33:12.780
jared: Because you're asking for way too much stuff.

285
00:33:14.040 --> 00:33:16.800
jared: And if you think about, you know, if I had

286
00:33:19.770 --> 00:33:24.720
jared: If I was asking for all users right now. See, I had

287
00:33:26.070 --> 00:33:31.860
jared: You know, a lot of users. Every time they do user comes through and I want to get

288
00:33:33.720 --> 00:33:35.340
jared: Garden information.

289
00:33:36.510 --> 00:33:40.320
jared: For that user owns. I want to know all the tools that they're owning

290
00:33:43.500 --> 00:33:45.750
jared: And I want to know all the sheds that they have

291
00:33:48.480 --> 00:33:58.320
jared: If you think about getting 100 users. That's resolving here 100 times and then doing 300 more

292
00:33:59.460 --> 00:34:04.440
jared: You know garden shed and tools DB queries and resolves and checks.

293
00:34:05.940 --> 00:34:08.970
jared: For you know 100 each or three each. So

294
00:34:10.110 --> 00:34:15.150
jared: It can get pretty costly. If you were, you're not careful pageant eating and

295
00:34:16.470 --> 00:34:20.040
jared: In asking for stuff that you're not actually using for, um,

296
00:34:21.120 --> 00:34:21.510
jared: So,

297
00:34:24.030 --> 00:34:24.300
Yeah.

298
00:34:28.920 --> 00:34:34.020
jared: But if you want, we can go through and try and build out

299
00:34:35.250 --> 00:34:35.670
jared: A

300
00:34:36.750 --> 00:34:37.740
jared: Different kind of

301
00:34:40.860 --> 00:34:43.920
jared: API with different information in it. People want

302
00:34:47.550 --> 00:34:47.910
Ron Yonker: It.

303
00:34:49.050 --> 00:34:49.380
jared: Cool.

304
00:34:50.610 --> 00:34:50.850
jared: Oh,

305
00:34:51.990 --> 00:34:52.260
Ron Yonker: Yeah.

306
00:34:53.010 --> 00:34:56.730
jared: Okay, say something that I kind of showed but didn't touch on

307
00:34:59.130 --> 00:35:00.240
jared: Our tabs.

308
00:35:02.490 --> 00:35:04.800
jared: Real quick in app.

309
00:35:06.390 --> 00:35:17.340
jared: Talked about typed apps and resolves a little bit. I didn't talk about directives at all, setting up your playground is true tabs you can basically populate

310
00:35:19.170 --> 00:35:25.440
jared: Different tabs, which would be these with preset information right now.

311
00:35:27.510 --> 00:35:36.000
jared: At go we have like a welcome tab that kind of explains a few things we have temper queries mutations and subscriptions, which would be like real time subscriptions.

312
00:35:36.600 --> 00:35:48.300
jared: With a whole bunch of examples written out and we generate those examples, through small little string generating functions, but we use those functions in our testing code.

313
00:35:49.410 --> 00:36:09.300
jared: So what ends up happening is we test a whole bunch of code. And we put all of those query strings into these tabs so there. I mean, we probably got 60 or 70 examples on how to query mutate and subscribe to different

314
00:36:11.490 --> 00:36:20.700
jared: Different stuff going on and API with examples that are more or less auto updating because you're used for tests and if our test passed and those queries are good.

315
00:36:21.900 --> 00:36:23.490
jared: That's kind of a cool way we set that up.

316
00:36:25.890 --> 00:36:27.870
jared: And then directives.

317
00:36:32.940 --> 00:36:38.580
jared: So here's kind of a, an example of an off directive, basically what this does.

318
00:36:41.190 --> 00:36:44.070
jared: Is you can specify

319
00:36:45.750 --> 00:36:52.530
jared: Directives on like a whole slew of results you can specify them.

320
00:36:54.000 --> 00:36:57.960
jared: On just fields. You can even specify them.

321
00:36:59.430 --> 00:37:01.560
jared: On types say that

322
00:37:02.910 --> 00:37:07.560
jared: You know, we'd kept password here, which basically means that

323
00:37:12.510 --> 00:37:24.330
jared: In graph. Q. Well, I could ask for it to get returned. But if I don't want everybody to be able to do that I could put off just on this field and anytime someone asked for this field.

324
00:37:26.010 --> 00:37:26.850
jared: Or

325
00:37:29.160 --> 00:37:32.880
jared: Ask for a particular query or particular set of queries.

326
00:37:33.960 --> 00:37:46.950
jared: This directive will get run, which is kind of cool. So we have off queries we have minimum supported version queries. And we also have a an error handling query.

327
00:37:51.000 --> 00:37:56.790
jared: Almost all of those use this inner separate silver function. So if we

328
00:37:58.620 --> 00:38:00.000
jared: Get back to

329
00:38:01.590 --> 00:38:06.660
jared: User resolved or anytime someone asked for this this query gets kind of wrapped in here.

330
00:38:08.310 --> 00:38:10.110
jared: In what it's doing.

331
00:38:11.550 --> 00:38:21.030
jared: It's pulling out context, which ends up in our headers and if they have a username and password that matches with a user model.

332
00:38:22.260 --> 00:38:28.500
jared: User that their user object gets put in to context. So I'll show you that.

333
00:38:30.150 --> 00:38:30.900
jared: Real quick.

334
00:38:51.060 --> 00:38:56.190
jared: So if on user, I decided to kind of get rid of any of the arguments that are passed in.

335
00:39:01.980 --> 00:39:04.680
jared: As for so this would kind of be like a get me.

336
00:39:05.730 --> 00:39:09.330
jared: Route where you're not asking, you know, sending any arguments.

337
00:39:25.470 --> 00:39:27.600
jared: No arguments, but kind of through the power of

338
00:39:40.050 --> 00:39:46.770
jared: He can kind of pull your user out of there and you can set editors in playground kind of down here in the bottom.

339
00:39:48.570 --> 00:39:54.510
jared: Good. I'm not doing anything fancy with password. It's not getting hash be corrupt. Nothing, it's just straight in straight out.

340
00:40:08.760 --> 00:40:10.530
jared: Directive is catching my result.

341
00:40:15.540 --> 00:40:19.800
jared: Kind of running through here, grabbing the username and password off the headers.

342
00:40:20.910 --> 00:40:28.410
jared: throwing an error for doesn't have it, finding the user by those two parameters and then putting enter context and

343
00:40:30.000 --> 00:40:34.290
jared: Resolve whatever was supposed to happen when they made their query.

344
00:40:36.840 --> 00:40:49.440
jared: Another one that we do. We basically wrap all of our resolves in a try catch that play. We can take all of our try catches out of every resolve or in our code which saves a lot of code.

345
00:40:50.730 --> 00:40:55.800
jared: You can do different, you know, all kinds of stuff that basically putting rappers on or directional

346
00:40:57.600 --> 00:40:58.470
jared: Checks or whatnot.

347
00:41:00.630 --> 00:41:03.450
jared: On whatever queries or mutations, you want

348
00:41:05.340 --> 00:41:06.870
jared: So those are a couple of things.

349
00:41:14.820 --> 00:41:15.870
jared: Alright, so

350
00:41:19.050 --> 00:41:27.300
jared: Right now I work off. He developed branch, which only has user here right now. It does have off.

351
00:41:29.190 --> 00:41:34.410
jared: Welcome tab, but that's that's about it. If anybody has any ideas for

352
00:41:37.290 --> 00:41:40.320
jared: Different collections, we might want to try and make and work through

353
00:41:41.520 --> 00:41:45.030
jared: now would be the time to voice your opinions.

354
00:41:51.510 --> 00:41:53.520
Ryan Mehta: So we take a quick break before we start coding

355
00:41:57.960 --> 00:41:58.500
jared: 10 minutes

356
00:42:00.060 --> 00:42:00.510
10 minutes

357
00:42:01.980 --> 00:42:02.220
jared: Okay.

358
00:42:03.690 --> 00:42:05.370
jared: I can stick around if somebody has any more.

359
00:42:05.370 --> 00:42:06.240
Questions or whatnot.

360
00:42:56.460 --> 00:43:03.180
Ryan Mehta: Yeah, thanks for doing this again, Jerry. You're doing a great job. So just keep up the good work for this next section.

361
00:43:04.950 --> 00:43:05.190
Yeah.

362
00:43:06.240 --> 00:43:16.770
jared: So what I was trying to do is switch, a couple things around, just to see if I get them to work, real quick, but without adding any queries is trying to change by resolve or to basically

363
00:43:18.180 --> 00:43:19.920
jared: Get a shed by

364
00:43:21.990 --> 00:43:25.080
jared: A specific user, figure out what tools were in there.

365
00:43:26.310 --> 00:43:32.970
jared: And then, what other tools. Each of those two owners own and then where they are in what they are.

366
00:43:35.700 --> 00:43:36.150
And

367
00:43:37.440 --> 00:43:50.700
jared: Have some type problems that didn't get figured out in 10 minutes. But basically, this would be the power of graphic. Well, coming up with some crazy, weird path to get some data about who owns tools and where they are.

368
00:43:53.700 --> 00:43:58.560
jared: In like different places in with adding no new results at all.

369
00:44:01.410 --> 00:44:02.490
jared: So, you know,

370
00:44:03.510 --> 00:44:09.150
jared: making my own real fucking past, but I didn't get it there quite yet. So I'm going to undo everything

371
00:44:11.550 --> 00:44:15.990
jared: Cool. So back to develop

372
00:44:20.250 --> 00:44:21.930
jared: Anybody have any ideas what other kind of

373
00:44:23.190 --> 00:44:27.090
jared: Data Objects, we might wanna play with us right now.

374
00:44:28.320 --> 00:44:28.800
jared: That's it.

375
00:44:35.430 --> 00:44:37.170
jared: Dogs. Dogs.

376
00:44:43.830 --> 00:44:45.030
Ryan Mehta: Dogs God. Sounds great to me.

377
00:44:45.180 --> 00:44:46.680
jared: Okay great, thanks. It

378
00:44:47.070 --> 00:44:48.240
Annalise Murphy: Doesn't like dogs.

379
00:44:48.270 --> 00:44:48.960
Annalise Murphy: This is long.

380
00:44:49.260 --> 00:44:50.760
Patrick Wilson: The longest one standard spot.

381
00:44:52.860 --> 00:44:53.850
Annalise Murphy: The forever spot.

382
00:44:57.330 --> 00:45:01.470
jared: So we'll make a dog schema. They don't have username.

383
00:45:03.450 --> 00:45:06.240
jared: Do you have a name to don't have a password.

384
00:45:07.830 --> 00:45:09.420
jared: Probably a breed.

385
00:45:15.750 --> 00:45:16.350
Annalise Murphy: Opera door.

386
00:45:18.120 --> 00:45:19.380
Labrador.

387
00:45:21.540 --> 00:45:24.570
jared: Make it required doesn't need to be unique.

388
00:45:27.300 --> 00:45:29.130
jared: Probably has an owner

389
00:45:37.230 --> 00:45:38.430
Annalise Murphy: Said 20 pounds.

390
00:46:14.880 --> 00:46:15.420
jared: Toys.

391
00:46:37.920 --> 00:46:39.330
jared: Maybe we'll have

392
00:46:42.480 --> 00:46:43.140
Something like

393
00:46:45.600 --> 00:46:46.260
jared: Toys will be

394
00:46:47.400 --> 00:46:48.210
Just for

395
00:46:56.490 --> 00:46:56.820
jared: Take it.

396
00:47:27.780 --> 00:47:30.270
jared: So, usually after you kind of figure out your

397
00:47:31.710 --> 00:47:32.640
jared: Craft co

398
00:47:33.660 --> 00:47:37.710
jared: Or a database schema will make a graph key well schema.

399
00:47:40.770 --> 00:47:41.640
Mickey.

400
00:47:45.210 --> 00:47:45.900
jared: Yes.

401
00:48:07.830 --> 00:48:09.210
jared: Hey ladies.

402
00:48:10.620 --> 00:48:13.050
jared: So be user

403
00:48:14.250 --> 00:48:15.120
jared: String

404
00:48:25.440 --> 00:48:27.660
jared: input arguments, I'm

405
00:48:28.800 --> 00:48:30.510
jared: Name will be required.

406
00:48:32.070 --> 00:48:33.600
jared: Fried is required. These little

407
00:48:35.100 --> 00:48:40.380
jared: Bands kind of determine whether or not an input argument is required or not.

408
00:48:43.500 --> 00:48:48.810
jared: Also the. There's a few different types. But mostly, there's just type

409
00:48:49.830 --> 00:48:54.120
jared: Or input basically describing whether or not

410
00:48:55.170 --> 00:48:59.010
jared: It's an argument coming in or pieces of data, getting returned

411
00:49:03.510 --> 00:49:04.830
jared: Update type

412
00:49:08.070 --> 00:49:09.210
jared: Probably

413
00:49:11.190 --> 00:49:15.390
jared: All the same arguments. Sometimes you can use overlap.

414
00:49:17.640 --> 00:49:20.550
jared: You know, these could be the same but

415
00:49:22.680 --> 00:49:24.990
jared: Will make them separate. Sometimes it's nice

416
00:49:26.460 --> 00:49:31.050
jared: Maybe there's certain things that you want to say that, hey, you know, you can't change these like

417
00:49:32.970 --> 00:49:37.500
jared: You get one shot and making the breed. Correct. Otherwise, that's what it is.

418
00:49:38.910 --> 00:49:42.480
jared: Or yeah, probably can't change the name, either.

419
00:49:43.560 --> 00:49:50.700
jared: That's fine. So this would be like creating a new dog to the database. You wouldn't put this information.

420
00:49:52.080 --> 00:49:59.220
jared: But updating it you're only allowed to add or remove toys or change the owner case, there's a bad breakup.

421
00:50:04.080 --> 00:50:05.220
Annalise Murphy: And it's really sad.

422
00:50:07.440 --> 00:50:08.580
Annalise Murphy: It's a sad reality.

423
00:50:12.240 --> 00:50:12.930
Annalise Murphy: Make everything

424
00:50:13.740 --> 00:50:25.350
jared: Cuz there's two types and then filter types. Um, this is kind of something that I haven't used in practice, other than here, but I think I kind of like it.

425
00:50:27.930 --> 00:50:29.070
jared: You can imagine

426
00:50:32.100 --> 00:50:38.280
jared: Arguments when searching for a user or users, instead of specifying

427
00:50:40.170 --> 00:50:46.260
jared: A hard Search parameter like underscore ID and constantly

428
00:50:49.650 --> 00:50:59.550
jared: You know, updating these arguments or making more routes by username whatnot, I decided that, you know what, I can just add

429
00:51:01.980 --> 00:51:02.160
jared: Um,

430
00:51:03.750 --> 00:51:08.550
jared: You know, have the argument be user. And when you specify

431
00:51:09.570 --> 00:51:14.010
jared: Your query type your input argument is an entire user

432
00:51:15.090 --> 00:51:25.590
jared: Again, the kind of idea behind graphs well is to make everything very accessible and customizable to like a pretty high extent. So instead of

433
00:51:27.330 --> 00:51:33.030
jared: Picking limiting arguments here. I was kind of starting leaning towards giving a lot more

434
00:51:34.860 --> 00:51:48.270
jared: Freedoms to your client and what they can ask for and you just continually you know if the types and dogs continue to grow, you would continue to add them to your

435
00:51:51.000 --> 00:52:01.680
jared: Argument like filter types and not have to change it resolves at all, which I didn't know. I think that's kind of a lean one way to do it, the less you have to change here person, I think, is the better.

436
00:52:03.000 --> 00:52:03.570
jared: That's

437
00 Raw should be this same object here.

271
00:33:36.540 --> 00:33:51.900
Ryan Mehta: And this should fail right now, but we should be able to see the pretty printed JSON. Here you can kind of see it separate. Some by line, like in dense things because we use the JSON string of phi to thing here.

272
00:33:54.060 --> 00:33:59.250
Ryan Mehta: So pretty. If we were to hand code. This

273
00:34:00.390 --> 00:34:01.890
Ryan Mehta: It would be like

274
00:34:11.640 --> 00:34:15.150
Ryan Mehta: Oops, double quotes, because we have JSON.

275
00:34:32.010 --> 00:34:32.310
Okay.

276
00:34:35.700 --> 00:34:42.720
Ryan Mehta: Good, so I just kind of hand coded the pretty version of this JSON, here we could put this on another line to

277
00:34:48.450 --> 00:34:51.000
Ryan Mehta: All right. Does that look okay this test so far.

278
00:34:52.110 --> 00:35:02.130
Ryan Mehta: For bit ugly, just because he had to like hand code this pretty JSON and less left to justify it, so there wouldn't be any spaces in the wrong place.

279
00:35:03.330 --> 00:35:10.560
Ryan Mehta: But does it make sense. It's going on here. You kind of had to do something like this and that TCP lab where like the justification mattered.

280
00:35:12.030 --> 00:35:14.940
Ryan Mehta: And then we have this Yammer part. Yeah.

281
00:35:16.380 --> 00:35:23.280
Ryan Mehta: We'll have to figure out how to construct our demo. Luckily, there's a library that will do this for us and

282
00:35:24.810 --> 00:35:26.400
Ryan Mehta: That we will make use of

283
00:35:27.750 --> 00:35:28.230
Ryan Mehta: This

284
00:35:30.030 --> 00:35:31.170
Yeah, that looks good.

285
00:35:34.350 --> 00:35:36.360
Ryan Mehta: This looks too complicated actually

286
00:35:42.540 --> 00:35:49.710
Ryan Mehta: Yes, this looks perfect. This is exactly what we want. Yeah, mall dot string of fi with an object.

287
00:35:50.880 --> 00:35:58.530
Ryan Mehta: So we'll install this library and use it to construct our demo. Let's take a break. First though, and then come back and do this GMO piece.

288
00:35:59.910 --> 00:36:03.000
Ryan Mehta: Let's come back at 1005

289
00:36:05.490 --> 00:36:06.150
Ryan Mehta: Sounds good.

290
00:36:09.780 --> 00:36:24.930
Ryan Mehta: Alright we left off with this jamo problem that we needed to solve, we decided that we were going to use this yellow JS library that will take a JavaScript object and gamma phi it for us.

291
00:36:26.790 --> 00:36:28.110
Ryan Mehta: Which is exactly what we want.

292
00:36:29.310 --> 00:36:31.740
Ryan Mehta: So I'm going to end PM I it

293
00:36:39.210 --> 00:36:40.410
Ryan Mehta: Jamar JS.

294
00:36:41.580 --> 00:36:52.740
Ryan Mehta: And while that's going, we will import it into our reducer file before we do that let's fill out our test or the CMO

295
00:36:54.360 --> 00:36:59.430
Ryan Mehta: So I think we expect to have a name spot.

296
00:37:00.690 --> 00:37:04.410
Ryan Mehta: And then age five, and wait

297
00:37:06.480 --> 00:37:07.830
One pounds.

298
00:37:12.000 --> 00:37:12.990
Like this.

299
00:37:19.350 --> 00:37:19.620
Okay.

300
00:37:20.820 --> 00:37:30.270
Ryan Mehta: So this is what the jamo file will look like there's no double quotes around the keys and there are no curly braces around the key value pairs.

301
00:37:32.460 --> 00:37:41.760
Ryan Mehta: This trim start will get rid of the first new line but yellow files always end with a new line. So we want to keep this final new line.

302
00:37:42.870 --> 00:37:47.010
Ryan Mehta: So an actual demo file would look like. So we can kind of see it.

303
00:37:51.060 --> 00:37:52.080
Like this.

304
00:37:53.490 --> 00:37:57.570
Ryan Mehta: That is the gamble equivalent to our JSON object.

305
00:38:01.560 --> 00:38:08.670
Ryan Mehta: It's not say that. So we expect to get something like this for our GMO transformation our test should fail.

306
00:38:10.590 --> 00:38:24.240
Ryan Mehta: We expected this jamo but got back and empty string. Instead, over on the right hand side we're going to also update the MO. We're going to use that yellow library import

307
00:38:27.660 --> 00:38:28.410
Ryan Mehta: To

308
00:38:29.700 --> 00:38:33.750
Ryan Mehta: String apply our action dot a load.

309
00:38:35.490 --> 00:38:37.590
Ryan Mehta: And that gets our test to pass.

310
00:38:40.110 --> 00:38:51.630
Ryan Mehta: Okay, so our reducer has handled the set JSON case now and updates the raw field. The pretty field and they gamble field that all look good.

311
00:38:55.860 --> 00:39:00.240
Ryan Mehta: Cool. Any questions about this reducer.

312
00:39:04.770 --> 00:39:05.130
Ryan Mehta: Okay.

313
00:39:06.840 --> 00:39:13.170
Ryan Mehta: All right. Let's make one more action type. Let's say that it handles the reset.

314
00:39:17.940 --> 00:39:24.240
Ryan Mehta: So if we were ever in a place where state had raw

315
00:39:26.250 --> 00:39:27.240
Ryan Mehta: Spot.

316
00:39:34.110 --> 00:39:34.860
Ryan Mehta: Really

317
00:40:06.030 --> 00:40:07.320
Ryan Mehta: So,

318
00:40:09.990 --> 00:40:11.550
Ryan Mehta: Does anybody mind if I do.

319
00:40:13.380 --> 00:40:15.120
Ryan Mehta: This to

320
00:40:18.270 --> 00:40:18.840
One.

321
00:40:20.910 --> 00:40:42.090
Ryan Mehta: When you do that same thing, a new line character just makes it a little bit less crazy the right are curly brace, a new line character two spaces are key value pair a new line character and then the curly brace. Same thing without having to actually put the new lines there.

322
00:40:44.700 --> 00:40:55.350
Ryan Mehta: And then we'll have will construct our action we're going to create a new action called the reset. So back in our JSON action. Let's create an export.

323
00:40:56.430 --> 00:40:58.260
Ryan Mehta: Reset JSON.

324
00:41:01.350 --> 00:41:06.600
Ryan Mehta: Action type and a reset JSON.

325
00:41:08.100 --> 00:41:16.980
Ryan Mehta: Action creator. This one only needs a type that doesn't need a payload. It doesn't need any extra information. It's just going to go back to the initial state.

326
00:41:18.420 --> 00:41:22.710
Ryan Mehta: And then we'll use our reset JSON action creator

327
00:41:24.600 --> 00:41:28.020
Ryan Mehta: We will get new state by invoking our reducer.

328
00:41:29.040 --> 00:41:48.150
Ryan Mehta: With the current state and the action after that we expect new state to equal to an object for raw is an empty object pretty is a string with an empty object in it and gamble is an empty string.

329
00:41:52.530 --> 00:42:10.020
Ryan Mehta: Clustered fail. It does. We need to handle this reset case. So we'll have a place called reset JSON. In this case, we're going to return our initial state reset back to the initial state and our test passes.

330
00:42:11.310 --> 00:42:11.850
Ryan Mehta: Look good

331
00:42:14.640 --> 00:42:18.600
Ryan Mehta: All right. That's the whole Redux part of this application. We have our

332
00:42:18.690 --> 00:42:23.190
Ryan Mehta: Actions and our JSON producer.

333
00:42:24.450 --> 00:42:26.580
Annalise: It makes everything looks so much easy

334
00:42:29.400 --> 00:42:35.340
Annalise: Right, yeah. Yeah, I'm a fan of screaming snake case to it's kind of hard to lose.

335
00:42:35.670 --> 00:42:37.170
Annalise: That function. So you're

336
00:42:38.430 --> 00:42:38.940
Ryan Mehta: Totally

337
00:42:43.140 --> 00:42:47.190
Ron Yonker: Writing or something that seems like it should be straightforward, though.

338
00:42:47.970 --> 00:42:50.250
Ryan Mehta: It is a lot of typing typing.

339
00:42:55.020 --> 00:43:07.770
Ryan Mehta: All right, let's start integrating this into react now. So we have the whole state management layer covered for us. Now we need to integrate this all into a React application.

340
00:43:09.930 --> 00:43:28.920
Ryan Mehta: There is a little library that we're going to actually, it's kind of a big, it's much larger than Act, the actual Redux library, but a library. We're going to use is React redux. This will give us some components to us to integrate with our integrate Redux with our react application.

341
00:43:31.170 --> 00:43:42.330
Ryan Mehta: Okay. In the source directory. I'm going to make a store JS file. And in this store JS file, we are going to create our Redux store.

342
00:43:44.460 --> 00:44:00.510
Ryan Mehta: So create store from Redux still using the just normal Redux library. We're going to export default create store with our reducer function that we've already created.

343
00:44:01.800 --> 00:44:06.690
Ryan Mehta: So our JSON reducer is passed to the Create store and export it from this file.

344
00:44:08.220 --> 00:44:10.320
Ryan Mehta: So the thing that we're exporting is that

345
00:44:11.340 --> 00:44:18.870
Ryan Mehta: Is that object with get state dispatch and subscribe. That's what's being exported from this file look good so far.

346
00:44:22.050 --> 00:44:27.450
Ryan Mehta: And then in our index JS, we are going to import that store.

347
00:44:31.830 --> 00:44:36.870
Ryan Mehta: So store here is that, again, that thing with get state dispatch and

348
00:44:38.070 --> 00:44:42.480
Ryan Mehta: Subscribe. We're also going to import something called provider.

349
00:44:46.770 --> 00:44:56.610
Ryan Mehta: And we are going to put our app inside of provider provider is a component that comes from React redux

350
00:44:58.770 --> 00:45:03.630
Ryan Mehta: Okay, you can kind of guess what providers doing right based on like our global state thing.

351
00:45:05.610 --> 00:45:08.670
Thomas Stussi: It has the store in it and it's giving the store and all its children.

352
00:45:09.390 --> 00:45:30.780
Ryan Mehta: Exactly. So the provider is going to take our store and provide this store to all of its children. So now every child of app JS, including app JS will have access to that same Redux store the Redux store is now a global object that any component has access to

353
00:45:32.580 --> 00:45:38.280
Thomas Stussi: So you could make multiple stores, but you have to assign them to providers for them to be available.

354
00:45:39.420 --> 00:45:41.280
Ryan Mehta: And generally with Redux that convention is

355
00:45:41.280 --> 00:45:42.540
Ryan Mehta: Just add one store.

356
00:45:43.650 --> 00:45:52.350
Ron Yonker: This is getting confusing between hooks and react context and now buyers here they're coming from React redux

357
00:45:53.640 --> 00:45:56.010
Ryan Mehta: Yep, the provider is just the same thing as the

358
00:45:56.010 --> 00:46:05.760
Ryan Mehta: Context API. It's just instead of us having to write the provider or self their React redux library has written that provider for us, so we don't have to write the code.

359
00:46:07.050 --> 00:46:12.180
Ryan Mehta: But it's the same code under the actually you can see how similar is probably more complicated, but

360
00:46:13.230 --> 00:46:14.730
Ryan Mehta: Actually the TypeScript thing.

361
00:46:17.640 --> 00:46:22.290
Ryan Mehta: But now we have access to the store and all of our components. Okay.

362
00:46:25.200 --> 00:46:31.350
Ryan Mehta: Hopefully you've developed at least a little bit of intuition about these providers when we started when we're creating our own

363
00:46:32.160 --> 00:46:38.370
Jerud Moyer: So like if we were going to go back and redo that theme provider lab, we would do it with Redux essentially

364
00:46:39.090 --> 00:46:43.800
Ryan Mehta: Yep. And you wouldn't have to write the provider yourself, you would just have to write the reducer stuff.

365
00:46:47.640 --> 00:46:56.130
Ryan Mehta: Okay, so let's just test this out really quick in some small way in our app JS, we can now.

366
00:47:01.410 --> 00:47:08.760
Ryan Mehta: Use our store. This gives us the React redux store so I could console log

367
00:47:10.590 --> 00:47:11.460
Ryan Mehta: Get state.

368
00:47:12.480 --> 00:47:18.660
Ryan Mehta: And would be able to see our state or global state. So let's try to start their application.

369
00:47:20.670 --> 00:47:25.980
And go to local host 7891

370
00:47:33.510 --> 00:47:38.880
Ryan Mehta: All right, here is our global state provided by the Redux store.

371
00:47:41.100 --> 00:47:41.430
Here.

372
00:47:46.350 --> 00:47:51.840
Ryan Mehta: We have to have some sort of error which we should probably take care of a as soon as possible.

373
00:47:54.330 --> 00:48:03.780
Ryan Mehta: To some pretty mo JS cannot resolve FS this silly, silly FS thing is so so annoying.

374
00:48:05.880 --> 00:48:07.710
Ryan Mehta: How do we fix this nicely.

375
00:48:16.680 --> 00:48:22.230
Thomas Stussi: It's just what we had to do that like one of copy paste yesterday for or yeah

376
00:48:23.670 --> 00:48:24.630
Ryan Mehta: Yeah, totally.

377
00:48:25.950 --> 00:48:28.260
Ryan Mehta: Totally is, how come this is back.

378
00:48:29.970 --> 00:48:30.810
Ryan Mehta: It's going on here.

379
00:48:32.370 --> 00:48:32.640
Okay.

380
00:48:34.230 --> 00:48:35.640
Ryan Mehta: It's probably okay.

381
00:48:36.750 --> 00:48:37.560
Ryan Mehta: Pack.

382
00:48:50.220 --> 00:48:54.210
Ryan Mehta: I think that might fix it so that we don't mess with the package JSON.

383
00:48:55.980 --> 00:48:58.980
Ryan Mehta: web pack five is like broken everything. It seems like

384
00:49:03.900 --> 00:49:05.040
Ryan Mehta: This is super annoying.

385
00:49:08.580 --> 00:49:09.750
Ryan Mehta: Super, super annoying.

386
00:49:12.330 --> 00:49:24.360
Annalise: I've had something like that happened to me. And I never got to figure that out. Ryan, but it was like, oh my, like, my tests were passing and then that's like an I didn't MPM I on the next library. I needed.

387
00:49:25.800 --> 00:49:28.920
Annalise: Something was flaring and the one of the web packs.

388
00:49:30.210 --> 00:49:30.870
Annalise: Was very good

389
00:49:31.860 --> 00:49:32.340
Yeah.

390
00:49:33.450 --> 00:49:33.840
Annalise: It's

391
00:49:36.000 --> 00:49:37.110
Ryan Mehta: Really annoying to me.

392
00:49:39.990 --> 00:49:43.380
Ryan Mehta: Okay. Isn't that what this define plugin does

393
00:49:45.330 --> 00:49:46.050
Ryan Mehta: Plugin

394
00:49:47.460 --> 00:49:49.380
Ryan Mehta: Create a new definition plugin.

395
00:49:53.940 --> 00:50:01.470
Ryan Mehta: Well, we could do what we did yesterday for now I'll figure out a better fix for this during our next break

396
00:50:10.260 --> 00:50:11.640
Ryan Mehta: There's the GMO thing.

397
00:50:14.100 --> 00:50:15.570
Ryan Mehta: Out, it's probably this one.

398
00:50:19.770 --> 00:50:20.670
Ryan Mehta: So tell us where

399
00:50:22.320 --> 00:50:24.030
Ryan Mehta: You live you tells

400
00:50:37.530 --> 00:50:38.910
Ryan Mehta: FS false or something.

401
00:50:43.980 --> 00:50:44.070
Ryan Mehta: Okay.

402
00:50:45.570 --> 00:50:48.090
Ryan Mehta: super annoying super, super, super annoying.

403
00:50:51.600 --> 00:51:06.750
Ryan Mehta: So adding that there. I'll find out a better way to do that somewhere in our web pack config during our break but at least now this thing loads and we see our little store or our current state.

404
00:51:11.820 --> 00:51:12.570
Ryan Mehta: Not too bad.

405
00:51:14.730 --> 00:51:27.540
Ryan Mehta: I think React redux also gives us a few other hooks to us like we can get just our state instead of getting the whole store because the store has like that dispatch dot subscribe. You can use

406
00:51:30.780 --> 00:51:31.560
Ryan Mehta: selector.

407
00:51:33.540 --> 00:51:34.770
Ryan Mehta: You selector.

408
00:51:36.000 --> 00:51:43.560
Ryan Mehta: Let's see, pass it an arrow function. The arrow function gets the entire state. And let's say we just wanted the raw component

409
00:51:45.330 --> 00:51:51.930
Ryan Mehta: We would do something like state.ca and this will just give us the raw piece.

410
00:51:53.700 --> 05.880 --> 00:15:12.990
Ryan Mehta: Since we're using module CSS we don't actually use these actual class names in our code.

149
00:15:14.190 --> 00:15:18.960
Ryan Mehta: Module CSS is going to rename these to some random string so

150
00:15:20.640 --> 00:15:23.610
Thomas Stussi: I noticed that in my dev tools is that it was just

151
00:15:23.610 --> 00:15:25.560
Thomas Stussi: Like it was just nonsense.

152
00:15:26.220 --> 00:15:31.620
Ryan Mehta: Yeah, exactly. That's the CSS modules doing that because it really wants you to use these things like

153
00:15:33.300 --> 00:15:44.760
Ryan Mehta: It doesn't want you to pick a name here and then pick that same name in some other CSS file and have them collide. It wants to prevent all of this collision. So it lets you pick human readable names.

154
00:15:45.960 --> 00:15:52.140
Ryan Mehta: For human eyes, and then it changes them to computer names that it can guarantee or unique across the application.

155
00:15:53.640 --> 00:15:58.680
Ryan Mehta: So then, back in the hook styles is this object theme.

156
00:16:00.120 --> 00:16:02.340
Ryan Mehta: Is either light.

157
00:16:03.840 --> 00:16:05.460
Ryan Mehta: Or it's equal to dark

158
00:16:07.050 --> 00:16:16.590
Ryan Mehta: So what this thing is doing right here. Is it is using bracket notation to look up into this object, it'll grab either the light property.

159
00:16:17.490 --> 00:16:30.600
Ryan Mehta: Or the dark property, based on the value of theme that's returning either the random classmate from light or the random class name for dark and then you can use that random class name and apply it to any component

160
00:16:31.710 --> 00:16:34.200
Ryan Mehta: Or any element that you want to in the future.

161
00:16:41.880 --> 00:16:44.550
Patrick Wilson: Yep, that's where I got stuck ended up having to

162
00:16:45.900 --> 00:16:51.870
Patrick Wilson: Go find that gobbledygook name and I just used that and just had it hard coded in

163
00:16:53.070 --> 00:16:53.400
Ryan Mehta: Nice.

164
00:16:59.010 --> 00:17:01.770
Ryan Mehta: Cool, let's take a look at your characters JS.

165
00:17:02.880 --> 00:17:03.690
And

166
00:17:05.520 --> 00:17:08.100
Ryan Mehta: Katie, do you want to walk us through this file.

167
00:17:11.190 --> 00:17:20.460
Katie Perry: Yeah. So let's see, we're making a use characters hook. Um, we are

168
00:17:21.810 --> 00:17:24.930
Katie Perry: Using the new state we're sending into an empty array.

169
00:17:25.980 --> 00:17:26.160
Katie Perry: I'm

170
00:17:27.360 --> 00:17:30.330
Katie Perry: Characters. There were no set characters pumpkin.

171
00:17:32.490 --> 00:17:42.510
Katie Perry: And then the fact we're getting the characters from the API. And then the fetch characters were using the set characters function and

172
00:17:43.800 --> 00:17:47.940
Katie Perry: Setting the batch characters characters from line five and then

173
00:17:48.960 --> 00:17:50.490
Katie Perry: We're turning those characters from state.

174
00:17:53.010 --> 00:17:55.980
Ryan Mehta: Perfect. Anything you change about this file.

175
00:18:01.980 --> 00:18:02.580
Looks good to me.

176
00:18:04.260 --> 00:18:06.990
Ryan Mehta: Yeah, same. Anybody else have anything to change.

177
00:18:09.330 --> 00:18:12.120
Thomas Stussi: If I'm being self critical I might put error handling.

178
00:18:13.260 --> 00:18:14.010
Thomas Stussi: Like a catch.

179
00:18:15.840 --> 00:18:16.140
Ryan Mehta: Yeah.

180
00:18:19.410 --> 00:18:26.820
Ron Yonker: I have a question. Tech is use characters technically hawker. Is it just a function that has hooks in it.

181
00:18:29.070 --> 00:18:34.260
Ryan Mehta: Does it say if your function uses hooks your function becomes the hook.

182
00:18:35.790 --> 00:18:36.210
Ron Yonker: Okay.

183
00:18:44.280 --> 00:18:49.380
Ryan Mehta: Alright, well, nice job. Thanks for sharing Thomas looks great.

184
00:18:51.840 --> 00:18:54.570
Ryan Mehta: Anybody have any last comments on this.

185
00:18:55.650 --> 00:18:56.550
Ryan Mehta: That we just went through.

186
00:19:03.780 --> 00:19:07.560
Thomas Stussi: The job. Thank you. Yeah. That's awesome.

187
00:19:09.300 --> 00:19:19.410
Ryan Mehta: Well, the ticket break and then we'll do like a little q AMP, a type of review thing. See what you all want to know about. And then we'll talk a little bit about react performance.

188
00:19:20.640 --> 00:19:23.850
Greg Mall: After that we have today. By the way, I'm sorry.

189
00:19:24.180 --> 00:19:28.200
Ryan Mehta: We do at 11 yeah I'm

190
00:19:28.500 --> 00:19:31.800
Greg Mall: Not quiz. I know that's that's a terrible trigger words.

191
00:19:35.100 --> 00:19:37.230
Ryan Mehta: Yeah, let's come back at 945

192
00:19:39.840 --> 00:19:41.190
Annalise: props and then

193
00:19:42.660 --> 00:19:56.160
Annalise: The hooks. I was wondering if there's a functional difference like as far as like computing power and time, like is it cleaner to be working with my custom hoax like does it take less like power.

194
00:19:56.760 --> 00:19:58.680
Ryan Mehta: Than me like the provider stuff.

195
00:19:58.740 --> 00:20:04.290
Annalise: Yeah. Why, I guess. Well, more so like the speed of testing and things like that. Rendering like does it take

196
00:20:05.850 --> 00:20:11.340
Annalise: You know your program like longer to pass all the props through and it would be to just like

197
00:20:12.660 --> 00:20:13.710
Annalise: Work with a hook.

198
00:20:16.020 --> 00:20:22.230
Ryan Mehta: So I think almost for sure. It takes more memory to use the provider pattern.

199
00:20:22.530 --> 00:20:25.650
Ryan Mehta: Okay, because you're holding all of this state globally, all the time.

200
00:20:25.830 --> 00:20:27.060
Annalise: So does eat up your RAM.

201
00:20:28.170 --> 00:20:34.590
Ryan Mehta: Yeah, but it's, I mean, unless you have a ton of state that memory is going to be so it's like going to be

202
00:20:34.620 --> 00:20:36.810
Annalise: Minimum. Yeah. Okay. Okay.

203
00:20:39.180 --> 00:20:52.560
Ryan Mehta: Unless you're storing like a million length array in global state that's always on the page, but at the same time, you might need to store that in global state like a really longer Ray, something that does take a lot of memory.

204
00:20:52.590 --> 00:20:54.570
Ryan Mehta: Because you can't get that thing from somewhere.

205
00:20:54.960 --> 00:21:01.800
Ryan Mehta: Okay, and the network traffic than network bandwidth is far more expensive than your memory bandwidth faces.

206
00:21:01.890 --> 00:21:04.680
Ryan Mehta: You probably want to store that in global state actually

207
00:21:08.160 --> 00:21:10.320
Ryan Mehta: But yeah, it's so hard to say.

208
00:21:10.680 --> 00:21:15.030
Ryan Mehta: Okay, what one would be faster, slower. It's so dependent on your actual application.

209
00:21:15.660 --> 00:21:18.780
Annalise: Okay, I was just curious. Yeah. Cool. Thank you.

210
00:21:24.420 --> 00:21:25.980
Ryan Mehta: Anybody have any like

211
00:21:27.450 --> 00:21:31.410
Ryan Mehta: I just want to spend this time like kind of reviewing stuff and

212
00:21:33.300 --> 00:21:41.220
Ryan Mehta: Figuring out what people are still sort of struggling with. So just taking questions. Um, if there are any questions, I'm just sitting there like

213
00:21:42.390 --> 00:21:43.590
Ryan Mehta: Figure out something to do

214
00:21:45.840 --> 00:21:51.810
Ryan Mehta: I can talk about the lab or the quiz, the build later really quickly.

215
00:21:55.530 --> 00:21:56.730
Ryan Mehta: That might help like

216
00:21:58.410 --> 00:21:59.640
Ryan Mehta: Bring up some questions.

217
00:22:00.600 --> 00:22:01.920
Ryan Mehta: For the build today.

218
00:22:01.950 --> 00:22:03.510
Ryan Mehta: It's going to be

219
00:22:04.800 --> 00:22:11.880
Ryan Mehta: We're not going to be doing anything with the provider. It's just from a few days ago hooks custom hooks.

220
00:22:12.990 --> 00:22:26.190
Ryan Mehta: So the build is going to ask you to make a quote compounded the quote component to display so it's going to be a random quote that you're going to display on the page, a single random quote

221
00:22:27.810 --> 00:22:29.370
Ryan Mehta: There's going to be a quote component

222
00:22:31.050 --> 00:22:37.500
Ryan Mehta: That can display the quotes the character who made the quote the characters image and the text of the quote

223
00:22:40.260 --> 00:22:54.390
Ryan Mehta: And then you're going to create a US quote hook that fetches a random quote from the Futurama API using the provided service. So the service that actually does the fetch from the future. I'm API is provided for you. You don't have to write that.

224
00:22:55.470 --> 00:22:58.740
Ryan Mehta: You just have to write the single component and the hook.

225
00:23:00.030 --> 00:23:10.140
Ryan Mehta: That will do the fetching and then a behavior, a single behavioral test that will make sure that your quote renders with the character name image and quote text.

226
00:23:14.010 --> 00:23:17.700
Ryan Mehta: So nothing to do with provider for today's stuff anyways.

227
00:23:21.120 --> 00:23:26.430
Ryan Mehta: So any questions that people have that have come up over and over again, are things that are still a bit

228
00:23:27.720 --> 00:23:28.620
Ryan Mehta: Well, I guess.

229
00:23:30.300 --> 00:23:35.250
Ron Yonker: The hawks, to begin with, like, how do you do that with an API call.

230
00:23:36.540 --> 00:23:38.820
Ryan Mehta: How do you do an API call and a hook.

231
00:23:39.240 --> 00:23:40.890
Ryan Mehta: Yeah, for sure.

232
00:23:41.970 --> 00:23:42.840
Ryan Mehta: So let's make

233
00:23:46.080 --> 00:23:51.990
Ryan Mehta: Let's make a little app that uses some API. Pick one.

234
00:23:58.380 --> 00:24:01.560
Ryan Mehta: Do you all use this thing, the public API's GitHub page.

235
00:24:05.100 --> 00:24:06.420
Ryan Mehta: API's us ever

236
00:24:07.020 --> 00:24:11.250
Annalise: I'm times but this should have been shared a while ago, I think.

237
00:24:12.780 --> 00:24:14.940
Annalise: Like a long time ago. I know.

238
00:24:15.090 --> 00:24:16.920
Brooke Perkins (she/her): I shared because I have it bookmarked

239
00:24:17.190 --> 00:24:22.080
Annalise: Was it or someone that you personally because we're still cool perk or

240
00:24:22.710 --> 00:24:24.600
Edgar Cuellar: No, this, this was shared with the client.

241
00:24:25.500 --> 00:24:26.310
Annalise: Oh, no.

242
00:24:26.940 --> 00:24:28.200
Sarah Rector: And one of our readings.

243
00:24:31.200 --> 00:24:33.930
Edgar Cuellar: That was before we had a doors second project, I believe.

244
00:24:34.020 --> 00:24:38.580
Annalise: Sorry, then, more than likely saved is buried under a bajillion tabs on

245
00:24:40.830 --> 00:24:41.430
Same thing.

246
00:24:43.770 --> 00:24:45.930
Ryan Mehta: Because they think, give me a random yes and no.

247
00:24:47.280 --> 00:24:47.730
Ryan Mehta: Okay.

248
00:24:47.850 --> 00:24:51.330
Ryan Mehta: Cool, that's pretty cool this API.

249
00:24:54.240 --> 00:24:56.100
Ryan Mehta: For our little app that will build

250
00:24:58.050 --> 00:25:01.710
Ryan Mehta: So I'm going to make a single component called

251
00:25:03.060 --> 00:25:04.020
Ryan Mehta: Yes. No.

252
00:25:05.880 --> 00:25:07.020
Yes. No.

253
00:25:09.870 --> 00:25:10.590
Ryan Mehta: Sex.

254
00:25:12.300 --> 00:25:17.610
Ryan Mehta: It'll be a function. Yes. No, I won't take any props.

255
00:25:19.470 --> 00:25:28.380
Ryan Mehta: If we look back at the API. It gives us back an answer and an image. So maybe we will make a

256
00:25:30.150 --> 00:25:30.930
Ryan Mehta: Big your

257
00:25:33.870 --> 00:25:34.620
Ryan Mehta: Image

258
00:25:38.220 --> 00:25:39.360
Ryan Mehta: Will have alt

259
00:25:41.280 --> 00:25:44.220
Ryan Mehta: And then big caption.

260
00:25:45.390 --> 00:25:50.070
Ryan Mehta: And we're going to fill in this information with the hook so

261
00:25:50.400 --> 00:25:51.900
Make this multi lined

262
00:25:54.390 --> 00:25:59.550
Ryan Mehta: And will actually fill out all this stuff with some custom work that way.

263
00:26:01.350 --> 00:26:03.690
Ryan Mehta: So we'll assume that this custom her

264
00:26:05.280 --> 00:26:09.180
Ryan Mehta: Will give us an image and an answer.

265
00:26:11.190 --> 00:26:12.000
Yes. No.

266
00:26:13.110 --> 00:26:15.240
Ryan Mehta: We haven't written this yet, but we will in a second.

267
00:26:22.860 --> 00:26:27.720
Ryan Mehta: So here's kind of our presentational components. It's presentational components with good

268
00:26:29.640 --> 00:26:30.180
Ryan Mehta: All right.

269
00:26:31.980 --> 00:26:49.410
Ryan Mehta: Back in our source. We're going to make a hooks directory. And we're going to make a yes no JS file. I'll split this over here to the right. So we can see our presentational components and our hope that we're constructing

270
00:26:50.850 --> 00:26:56.370
Ryan Mehta: We're going to export a US yes no hook

271
00:26:58.800 --> 00:27:00.090
Will be a function

272
00:27:01.890 --> 00:27:14.850
Ryan Mehta: The first thing that we need a store is our image, we also need to store our answer right. So we'll make a constant image and set image and cools you state.

273
00:27:15.870 --> 00:27:19.320
Ryan Mehta: Will start it off as an empty string. And we'll make an answer.

274
00:27:27.900 --> 00:27:37.380
Ryan Mehta: And we'll start that off as an empty screen. Also, and then eventually we're going to return both that image and that answer.

275
00:27:38.460 --> 00:27:38.910
So,

276
00:27:41.010 --> 00:27:48.900
Ryan Mehta: And then from here we actually need to go to our API and fetch the image and the answer. So I'm going to make a use effect.

277
00:27:49.950 --> 00:27:53.460
Ryan Mehta: Use effect is where we put these type of fetches

278
00:27:56.850 --> 00:28:02.130
Ryan Mehta: Imported from react inside of our US effect is where we're going to make our API call.

279
00:28:04.470 --> 00:28:22.020
Ryan Mehta: Typically we make a service for this. So I will continue that sort of pattern. Let's make a service called yes no API JS in our service. We're going to make a get. Yes. No.

280
00:28:23.040 --> 00:28:23.730
Ryan Mehta: Function.

281
00:28:24.930 --> 00:28:31.950
Ryan Mehta: We're going to make effects requests to that API, we will get a response and parse the JSON.

282
00:28:33.600 --> 00:28:34.140
Ryan Mehta: So,

283
00:28:35.250 --> 00:28:50.730
Ryan Mehta: I'm going to go back here copy this URL and drop it into our fetch. So now we have a service that will get that object for us back in our hook. We can use this service.

284
00:28:51.810 --> 00:28:56.460
Ryan Mehta: Get. Yes. No. We're then going to get that response.

285
00:29:00.660 --> 00:29:12.960
Ryan Mehta: Inside of the result that we get back from this API is our answer and our image. So I'm just going to restructure that in our function declaration over here.

286
00:29:13.590 --> 00:29:25.260
Ryan Mehta: And we'll set image to image and we'll set answer to answer and I'm gonna flip these it's making me go crazy. I hate, I don't know, something

287
00:29:26.700 --> 00:29:28.560
Ryan Mehta: But it really bothers me when

288
00:29:29.100 --> 00:29:29.820
Ryan Mehta: I define

289
00:29:29.850 --> 00:29:34.320
Ryan Mehta: Image answer and then image answer, but then here I have answer image.

290
00:29:37.590 --> 00:29:38.790
Annalise: bothers me to run

291
00:29:41.100 --> 00:29:41.940
Ryan Mehta: Everything run

292
00:29:42.540 --> 00:29:45.630
Ron Yonker: We are you structuring a function. I'm not seeing it.

293
00:29:46.410 --> 00:29:49.500
Ryan Mehta: D structuring these two things in the

294
00:29:49.680 --> 00:29:50.940
Ryan Mehta: Declaration over h
jbj: Create that you just add it to the provider. So in. I'm going to share my screen again real quick. Sorry about that.

323
00:49:42.660 --> 00:49:50.430
jbj: So here, if you had a chore, you would just be like construct your

324
00:49:51.780 --> 00:49:55.740
jbj: Store equals use local observable.

325
00:49:57.630 --> 00:50:07.170
jbj: And then like create chore store that you've created somewhere else and then in here, you would just add

326
00:50:08.250 --> 00:50:13.620
jbj: To our store and now when you when you access

327
00:50:14.940 --> 00:50:20.610
jbj: That sorry this is the one that you look at the mushroom when when you use the hook to get the store.

328
00:50:21.960 --> 00:50:26.010
jbj: Instead of just doing like cons to grocery store equals us

329
00:50:27.090 --> 00:50:30.090
jbj: Grocery store, you would have to do

330
00:50:31.260 --> 00:50:44.310
jbj: Constant grocery store, but you could also do grocery store and chore store. So then if you wanted to get something off the tour, store it will be like chore store chores. If you had

331
00:50:44.970 --> 00:50:57.720
jbj: An array called chores onshore store. Does that make sense. Sorry to throw that in there at the end, but like just the, the basic idea here that you can add stores to a context, you don't have to create multiple contexts for one store.

332
00:50:59.160 --> 00:51:03.060
jbj: Or you have to create multiple contexts four different stores.

333
00:51:06.540 --> 00:51:12.000
jbj: Right, get rid of us. Okay. So on that note, I'm going to stop sharing again.

334
00:51:13.110 --> 00:51:30.330
jbj: And let's like come back here around 1105 ish so like a few minutes if folks are interested in want to code up their own little app. We're using my backs and I'll stick around and be here to help. Cool.

335
00:51:31.950 --> 00:51:32.280
Brooke Perkins (she/her): Awesome.

336
00:51:33.090 --> 00:51:34.260
Ron Yonker: Sweet to thank you

337
00:51:34.680 --> 00:51:35.190
Yeah.

338
00:51:39.810 --> 00:51:40.800
jbj: Yeah, absolutely.

339
00:58:55.140 --> 00:59:00.450
jbj: So, um, yeah, feel free. You can like I said any of this will work with

340
00:59:01.470 --> 00:59:02.130
jbj: The

341
00:59:03.360 --> 00:59:12.240
jbj: Alchemy bootstrap that y'all are used to using and in the repo that I sent you in the readme there.

342
00:59:13.470 --> 00:59:14.490
jbj: Are the two

343
00:59:15.690 --> 00:59:22.800
jbj: Component libraries that you need to install, which is my backs and My back's react. There's also one called My back's react light.

344
00:59:23.490 --> 00:59:32.670
jbj: Which I haven't used, but I think it's just like a lightweight more lightweight system that maybe just has less stuff. I think that everything that we used, you could probably pull from our backs react light also

345
00:59:37.020 --> 00:59:41.790
jbj: Let me know what you make your app about because I'm curious.

346
00:59:43.080 --> 00:59:48.300
jbj: And want to know all of you and what you think makes sense to create an app about

347
00:59:55.320 --> 00:59:58.050
jbj: And I don't think I could say chore store five times fast.

348
01:00:44.850 --> 01:00:51.270
Ron Yonker: I mean surely we can come up with something better than yet another to do list. How many puppies are we going to kill

349
01:00:53.820 --> 01:00:56.400
Ron Yonker: Puppy dies every time you make a to do app.

350
01:01:00.180 --> 01:01:00.630
Michelle Stermitz: Brian

351
01:01:02.040 --> 01:01:02.550
jbj: I

352
01:01:02.640 --> 01:01:05.580
jbj: I can't wait to see what you come up with

353
01:01:20.580 --> 01:01:25.200
Annalise: Ron, I think if you had made a kitten reference that would have asked to do a serial killer.

354
01:01:27.990 --> 01:01:29.700
Ron Yonker: No, no.

355
01:01:30.120 --> 01:01:32.610
Ron Yonker: Notice all the comments I make about people's

356
01:01:32.610 --> 01:01:38.580
Ron Yonker: Cats and then I say dog for the for the to do app. Yeah, I couldn't go that far even joking.

357
01:01:38.880 --> 01:01:40.050
Annalise: Now there is a

358
01:01:40.170 --> 01:01:41.370
Documentary

359
01:01:42.690 --> 01:01:46.410
Annalise: Online about somebody online making a comment about

360
01:01:47.730 --> 01:01:48.240
Ron Yonker: No.

361
01:01:48.750 --> 01:01:49.290
Annalise: Okay then.

362
01:02:41.970 --> 01:02:43.680
Thomas Stussi: Bootstrap is almost installed.

363
01:02:52.560 --> 01:03:03.540
jbj: I saw that there's like a new alchemy bootstrap and you get choices about what you want, rather than having different back in and react ones that's very fancy Ryan.

364
01:03:08.400 --> 01:03:08.760
Ryan Mehta: Yeah.

365
01:03:10.800 --> 01:03:12.450
Ryan Mehta: Yeah, it's a cool for surely

366
01:03:13.530 --> 01:03:14.220
jbj: I like it.

367
01:05:05.490 --> 01:05:09.330
eli: Do we need nano ID or is that just

368
01:05:10.410 --> 01:05:11.520
eli: For convenience.

369
01:05:12.960 --> 01:05:26.730
jbj: Um, it was just for convenience. I mean, you can if you want to use. If you want to remove something by an ID, you can just generate a random number like you know there's different ways you can do that. I was just using that one because it was easy.

370
01:08:07.980 --> 01:08:19.320
jbj: Getting Started. I think the moving through the process that I did of setting up a store setting up the provider and then writing the components is a good flow, um,

371
01:08:35.640 --> 01:08:39.900
jbj: I forgot that I actually put a little read me are like a little mob.

372
01:08:41.040 --> 01:08:59.610
jbj: Words, a little lab markdown file in the repo that I sent you that has like a couple steps in it that you can look at. It's not super detailed like boot camp one lab. It's more like end of career track lab when it's just like making that um

373
01:09:01.020 --> 01:09:02.880
jbj: That yeah that's in there if you want to reference it

374
01:14:55.860 --> 01:15:05.370
jbj: So other than not being able to get a repo up and running, how're which is more of a Ryan problem than me problem. Um, how folks doing

375
01:15:09.030 --> 01:15:10.110
Jerud Moyer: So far, so good.

376
01:15:10.440 --> 01:15:24.360
jbj: Awesome. I see some thumbs ups. I'm just like time check it's 1122 I have a thing at 1130 that I have to go to, um, I have a team. Demo

377
01:15:25.650 --> 01:15:45.750
jbj: So I will be taking off around a little bit before 1130 I'm so I just wanted to like do a thank you to everyone. Now, for coming and also that I check my alchemy slack relatively frequently. So if you have a question about this or

378
01:15:47.340 --> 01:15:58.920
jbj: You know, other things. That's fine. You can message me there. You're welcome to add me on LinkedIn. I admittedly don't check it as frequently as I could. So it might take me a minute to accept your LinkedIn request.

379
01:15:59.280 --> 01:16:08.610
jbj: It is not a personal thing. It's just that I don't look at it very much. Um, and that, yeah. The best way to get in touch with me is through the alchemy slack.

380
01:16:13.260 --> 01:16:15.150
Jaime Sanders (she/her): Thanks for doing the demo for us.

381
01:16:16.680 --> 01:16:17.430
jbj: Absolutely.

382
01:16:17.640 --> 01:16:18.840
Ron Yonker: Thank you. Yeah.

383
01:16:19.560 --> 01:16:21.360
Ryan Mehta: Yeah, thanks. Jamie J. This is awesome.

384
01:16:21.630 --> 01:16:23.130
Ryan Mehta: It's fun to play with this stuff.

385
01:16:23.580 --> 01:16:24.780
Annalise: Yeah, it was really awesome.

386
01:16:26.550 --> 01:16:26.880
Evan Andrewson: Yeah.

387
01:16:27.090 --> 01:16:28.470
Jerud Moyer: Redux app or

388
01:16:29.970 --> 01:16:38.160
jbj: I will admit that it also got me to like it forced me to understand how it worked better when i was when i when i was told.

389
01:16:38.340 --> 01:16:45.900
jbj: That we were going to be using it or part of the decision about using this, I kind of just like scrambled to put some things together and

390
01:16:46.290 --> 01:16:56.580
jbj: This gave me the chance to slow down a little bit and really truly understand how it works. So that I'm actually better able to troubleshoot it now. Um, so I learned a lot, too.

391
01:20:09.480 --> 01:20:28.620
jbj: Alright, I'm gonna hop off to get to my meeting. Thank you all again, be sure to reach out if you have any questions, and send me links to your mob X repos. If you want to share the amazing app that you create with my backs. Um, thank you all. It's been lovely to see you.

392
01:20:29.700 --> 01:20:30.090
Jerud Moyer: Again,

393
01:20:30.120 --> 01:20:30.450
Paul Stevens (he/him): Thank you.

394
01:20:32.490 --> 01:20:33.360
jbj: Thank you so much.

395
01:20:48.570 --> 01:20:57.030
Patrick Wilson: Hey Ryan, Can we do our front end for full stack app in my bags to kind of practice that along with the full stack.

396
01:20:57.540 --> 01:20:58.530
Ryan Mehta: Yeah, go for it.

397
01:59:12.750 --> 01:59:13.530
Annalise: Hey Ryan,

398
01:59:15.180 --> 01:59:19.920
Annalise: It's around lunchtime. I was just wondering what the rest of the day is going to look like scheduling wise.

399
01:59:21.540 --> 01:59:22.740
Ryan Mehta: Just typical hack day

400
01:59:24.630 --> 01:59:25.560
Ryan Mehta: To do whatever you want.

401
01:59:26.880 --> 01:59:29.850
Annalise: And next week is a project week

402
01:59:32.010 --> 01:59:34.410
Ryan Mehta: Next week, right. Every starting project with yeah

403
01:59:36.930 --> 01:59:37.170
Okay.

404
01:59:38.910 --> 01:59:39.450
Nice.

405
01:59:41.940 --> 01:59:45.240
Annalise: It's exciting. How are we gonna go about like the ideas and stuff.

406
01:59:47.700 --> 01:59:48.300
Ryan Mehta: Is it gonna be

407
01:59:48.360 --> 01:59:49.800
Annalise: Famous like usual.

408
01:59:50.460 --> 01:59:52.710
Ryan Mehta: Now we're going to, you're going to be assigned a team.

409
01:59:53.370 --> 01:59:53.670
Oh,

410
01:59:55.770 --> 02:00:00.570
Annalise: Okay. Um, what about an idea. Are we being assigned an idea.

411
02:00:01.860 --> 02:00:04.410
Ryan Mehta: Nothing. You'll discuss with your team. What you want to work on.

412
02:00:04.830 --> 02:00:05.280
Okay.

413
02:00:06.660 --> 02:00:07.320
Annalise: Well,

414
02:00:09.600 --> 02:00:10.560
Annalise: That's exciting.

415
02:00:13.380 --> 02:00:14.100
Nice. Yeah.

416
02:00:15.900 --> 02:00:16.800
Ryan Mehta: Pretty much here.

417
02:00:19.170 --> 02:00:19.890
Annalise: Our final

WEBVTT

1
00:00:02.399 --> 00:00:03.570
Annalise Murphy: Ever request.

2
00:00:03.600 --> 00:00:05.040
Annalise Murphy: For the Orion.

3
00:00:05.819 --> 00:00:06.960
Annalise Murphy: Yeah, if

4
00:00:08.220 --> 00:00:13.139
Annalise Murphy: One were to receive critiques could one request equal compliments.

5
00:00:14.549 --> 00:00:23.010
Ryan Mehta: Yeah, I will also give you compliments. It's not. Maybe it's not going to be like everything that you did bad, it's just gonna be like a review of your code.

6
00:00:23.280 --> 00:00:26.430
Annalise Murphy: My poor baby ego is already frail and oh

7
00:00:29.190 --> 00:00:29.520
Ryan Mehta: Yeah.

8
00:00:29.700 --> 00:00:30.150
Totally

9
00:00:32.580 --> 00:00:38.760
Ryan Mehta: Alright, so I just wanted to show you all the schedule for the remaining few weeks.

10
00:00:40.260 --> 00:00:44.970
Ryan Mehta: This week will be go back into react so we're going back into the front end.

11
00:00:46.800 --> 00:00:51.840
Ryan Mehta: And foundations to you all use create React app to start up your reactive projects.

12
00:00:52.440 --> 00:01:04.920
Ryan Mehta: For the second half. We're not going to be using create React app mostly so we can see some of the things that are happening under the hood of create React app. One of those things is this web pack thing which we'll talk about today.

13
00:01:06.840 --> 00:01:11.430
Ryan Mehta: So today we'll talk about web pack tomorrow. We'll do a little react review.

14
00:01:13.350 --> 00:01:20.550
Ryan Mehta: And then Wednesday will introduce a React pattern this container presentational component pattern.

15
00:01:21.660 --> 00:01:27.150
Ryan Mehta: Which is one of the really first major patterns that we saw in React

16
00:01:28.500 --> 00:01:32.190
Ryan Mehta: We'll talk about that on Wednesday, just a way to structure our react apps.

17
00:01:33.630 --> 00:01:36.030
Ryan Mehta: So they can say a little bit more organized

18
00:01:37.860 --> 00:01:42.480
Ryan Mehta: And then on Thursday, we will talk about MVC and MVP.

19
00:01:44.670 --> 00:01:50.400
Ryan Mehta: Just like a bigger pattern that you see across programming languages.

20
00:01:52.590 --> 00:02:02.400
Ryan Mehta: Yeah, we've already kind of talked about NBC, but we'll talk about how MVC relates to react and the back end, it might start clarifying this thing a little bit more

21
00:02:04.710 --> 00:02:12.390
Ryan Mehta: You kind of see the structure of the weeks that is going to change a little bit. When we go to the front end, we're going to have four days of lecture.

22
00:02:13.980 --> 00:02:17.070
Ryan Mehta: And four labs every week.

23
00:02:19.230 --> 00:02:27.090
Ryan Mehta: The fourth lab will be do on the next Monday. So the fourth level be assigned on Thursday, but be due on Monday.

24
00:02:28.740 --> 00:02:35.430
Ryan Mehta: There's also going to be a bonus lab every week that you can do if you have time or want to or whatever.

25
00:02:36.840 --> 00:02:45.210
Ryan Mehta: And there's also going to be a build that we will do on Thursday, a build is really a

26
00:02:49.260 --> 00:02:55.080
Ryan Mehta: It's really a quiz, but we call it a build. So it doesn't trigger anybody's cuisines anxieties.

27
00:02:57.300 --> 00:03:08.490
Ryan Mehta: And it's really well, I don't know, it's kind of a mix between the two because the quiz isn't really a way for us to evaluate you all, it's really giving you a tool to evaluate yourself.

28
00:03:10.080 --> 00:03:17.730
Ryan Mehta: These builds are going to be fairly straightforward applications they should be able to be done within like half an hour to an hour.

29
00:03:21.600 --> 00:03:34.410
Ryan Mehta: And they shouldn't be scary. They should be like stuff that we covered on the Monday of the week. So you've had some time to practice, but it gives you some indication if you're actually picking these things up. And if you're not doing well on the quizzes.

30
00:03:35.940 --> 00:03:40.620
Ryan Mehta: They'll let let you know that you need to go back and cover some of the previous material.

31
00:03:42.840 --> 00:03:51.330
Ryan Mehta: They'll always be a makeup build. So if you don't do well on this build, there will be a makeup. The following week, so you can read do it for credit

32
00:03:52.350 --> 00:03:58.110
Ryan Mehta: The builds are essentially worth one quiz or sorry one lab work the points.

33
00:04:01.110 --> 00:04:03.960
Ryan Mehta: Are you kind of see the name of this quiz react name tag.

34
00:04:05.970 --> 00:04:16.560
Ryan Mehta: You all could probably do this right now. I would guess. So it's like a box with your name in it and react.

35
00:04:19.680 --> 00:04:31.050
Ryan Mehta: Okay, so this this week, we're going to be covering react mostly really a React review with some patterns that we can use to create react applications.

36
00:04:31.560 --> 00:04:45.180
Ryan Mehta: Next week, we'll talk about react hooks so functional React components and all the cool. I guess it's not super, super new anymore. It came out in 2000 January 2018 right or is it

37
00:04:46.830 --> 00:04:50.100
Ryan Mehta: And it was like a year or two old these react hooks.

38
00:04:51.810 --> 00:04:53.580
Ryan Mehta: And functional components.

39
00:04:54.840 --> 00:04:55.380
Ryan Mehta: So,

40
00:04:56.850 --> 00:05:18.090
Ryan Mehta: Monday of next week we'll talk about how we can create state and function components, how we can create some custom hooks, how we can create global state, and then we'll talk about some react performance things. And then same thing for quizzes or four labs one build and a bonus lab.

41
00:05:20.220 --> 00:05:26.820
Ryan Mehta: And then the final week we'll do, we'll introduce Redux which is another way to handle global state.

42
00:05:28.860 --> 00:05:31.020
Ryan Mehta: And then same thing for labs.

43
00:05:32.160 --> 00:05:40.320
Ryan Mehta: A quiz or a build and a bonus lab, and then we'll start final, final project prep after that.

44
00:05:45.150 --> 00:05:48.720
Ron Yonker: Looks like Redux is the very last thing that we cover.

45
00:05:49.680 --> 00:05:59.010
Ryan Mehta: Yeah, there's gonna be this. It's kind of your kind of giving it away, but I'll give it away. Also, we're going to introduce this thing called flux

46
00:05:59.310 --> 00:06:00.120
Ryan Mehta: Which was the

47
00:06:00.180 --> 00:06:09.420
Ryan Mehta: Original pattern that Facebook released when they released react. They told us to like build react apps using this flux architecture.

48
00:06:10.740 --> 00:06:24.660
Ryan Mehta: And so we'll like build these flux architected apps from scratch. And then the final day will realize that Redux is just this flux architecture and there's already a library that does some of this setup for us.

49
00:06:26.880 --> 00:06:32.970
Ryan Mehta: So it's like, we'll do it kind of the hard way. And then a slightly easier way if Redux could be easy.

50
00:06:39.390 --> 00:06:47.730
Ryan Mehta: Yeah, the really unfortunate. I really enjoy this pattern. Once I get there. So try to be excited for this one.

51
00:06:49.170 --> 00:06:51.390
Ryan Mehta: I think it's such a cool pattern to use

52
00:06:52.500 --> 00:06:56.880
Ryan Mehta: As often as possible. The big problem with it though is

53
00:06:58.140 --> 00:07:10.650
Ryan Mehta: From week nine to week 10 we'll go from like having to manage maybe 10 or so files to having to manage like 50 or so files with Redux so the amount of

54
00:07:12.480 --> 00:07:14.610
Ryan Mehta: complexity increases a lot

55
00:07:20.310 --> 00:07:23.610
Ryan Mehta: All right, any other questions about the schedule.

56
00:07:27.150 --> 00:07:28.980
Michelle Stermitz: Are we not doing the group labs anymore.

57
00:07:30.030 --> 00:07:31.140
Ryan Mehta: Yeah, we're not going to do the group.

58
00:07:31.140 --> 00:07:34.260
Michelle Stermitz: Labs. This time next few weeks.

59
00:07:40.890 --> 00:07:43.770
Ryan Mehta: All right, look good. We have a question.

60
00:07:47.040 --> 00:07:47.700
Ryan Mehta: All right.

61
00:07:49.710 --> 00:07:52.500
Ryan Mehta: Yeah, let's do some web pack stuff.

62
00:07:53.640 --> 00:07:54.630
Ryan Mehta: Before we actually

63
00:07:56.070 --> 00:08:04.800
Ryan Mehta: Before we actually get into web pack. I want to do a little bit of a review so review some of the array methods and promises.

64
00:08:06.180 --> 00:08:14.310
Ryan Mehta: And then we'll talk like very very very very quickly about what single page apps are spas. I hate this acronym spots because it sounds like

65
00:08:15.540 --> 00:08:16.110
Ryan Mehta: A spa.

66
00:08:17.190 --> 00:08:19.590
Ryan Mehta: Doesn't it doesn't trigger the right memory in my

67
00:08:20.550 --> 00:08:22.800
Annalise Murphy: What you don't like spas, what's your be friend.

68
00:08:25.980 --> 00:08:37.260
Ryan Mehta: Fine, but it's like the word spies so ingrained in my brain to me like a spa that when somebody says, like, oh, I'm working on a spot today, it doesn't it doesn't sound right to me.

69
00:08:39.840 --> 00:08:43.860
Annalise Murphy: Well, I guess the key word being in as opposed to on

70
00:08:44.250 --> 00:08:46.080
Ryan Mehta: Yeah, yeah. Yeah, true.

71
00:08:46.470 --> 00:08:47.070
Annalise Murphy: I hear that

72
00:08:49.680 --> 00:08:53.220
Ryan Mehta: And then we will talk about one pack words. The end.

73
00:08:58.110 --> 00:09:03.240
Ryan Mehta: Okay array methods. Everyone has used this array methods. Sure.

74
00:09:05.400 --> 00:09:06.780
Ryan Mehta: The map or a method

75
00:09:09.210 --> 00:09:11.910
Ryan Mehta: Map it rates for each item in an array.

76
00:09:13.920 --> 00:09:23.400
Ryan Mehta: So here you can see that you pass them out function for each item in the array we invoke this callback function.

77
00:09:26.580 --> 00:09:37.650
Ryan Mehta: So it takes a callback for each item in the array we invoke this callback, the callback gets three things, the item that we're iterating over

78
00:09:38.190 --> 00:10:00.000
Ryan Mehta: The index of the item in the array and the original array so original array here is equal to this array over here. So keep this in mind, oftentimes, you only use this item when we're using map, but you also have access to index and the array that you're iterating over

79
00:10:01.590 --> 00:10:02.880
Ryan Mehta: In this function as well.

80
00:10:04.800 --> 00:10:08.370
Thomas Stussi: So for each item, you could do something to the whole original array.

81
00:10:09.660 --> 00:10:11.730
Ryan Mehta: You could. And I think the reason why

82
00:10:11.730 --> 00:10:11.970
Ryan Mehta: They

83
00:10:12.000 --> 00:10:14.220
Ryan Mehta: Give you. This is so that

84
00:10:17.460 --> 00:10:19.260
Opened up a little JavaScript file.

85
00:10:25.200 --> 00:10:27.210
Ryan Mehta: So let's say we had like numbers.

86
00:10:32.100 --> 00:10:34.500
Ryan Mehta: Because if when we're normally using

87
00:10:38.880 --> 00:10:41.970
Ryan Mehta: Like let's say we wanted to double these numbers.

88
00:10:43.560 --> 00:10:57.030
Ryan Mehta: In this case, like there's no reason that you would ever want the original array because you already have access to the original array here. So if you needed that original array, you could just refer to numbers.

89
00:10:58.710 --> 00:11:02.430
Ryan Mehta: But what if you defined a function called double

90
00:11:03.840 --> 00:11:08.580
Ryan Mehta: That took a number of index and the original array.

91
00:11:09.390 --> 00:11:18.570
Ryan Mehta: At this point, because you're inside of this function, you don't know which array. It's going to be applied to. So at this point you might want the original array.

92
00:11:19.590 --> 00:11:20.040
Here.

93
00:11:21.090 --> 00:11:33.060
Ryan Mehta: That's I think that's the reason why they give it to you so you can create a generic function that has access to the original array and use this for different maps. You wanted to

94
00:11:44.940 --> 00:12:02.940
Ryan Mehta: For each item and an array, the callback has invoked the return value is added to another array. So in this case, this new array would equal just the index all the indexes from the original array. So maybe 01234 or five or whatever.

95
00:12:04.050 --> 00:12:07.410
Ryan Mehta: Anybody know why they would use the word map for this thing.

96
00:12:14.490 --> 00:12:26.040
Ron Yonker: Because it's similar to a Gaussian sort of map where you're transferring one morphological server surface to another.

97
00:12:27.540 --> 00:12:29.250
Ron Yonker: So say like a contour map.

98
00:12:30.330 --> 00:12:40.710
Ron Yonker: Like for a map, you have all the different sets of concentric shapes for like a mountain or valleys. That's a map of a three dimensional surface on three, two dimensional surface.

99
00:12:43.380 --> 00:12:45.480
Ryan Mehta: Totally, yeah. They have they're the same.

100
00:12:46.560 --> 00:12:48.000
Ryan Mehta: The same origin, for sure.

101
00:12:50.310 --> 00:12:52.110
Ryan Mehta: So I, I looked up map.

102
00:12:52.170 --> 00:12:54.120
Ryan Mehta: In the dictionary over here.

103
00:12:58.620 --> 00:13:07.710
Ryan Mehta: If we go down somewhere. Here's a bunch of bad is like over the top of our definitions. Okay.

104
00:13:09.180 --> 00:13:16.440
Ryan Mehta: There's a bunch of entries here for map, the one that's most like important for our maps is this number four.

105
00:13:17.820 --> 00:13:24.540
Ryan Mehta: Maps function sense five A. So if we go to function sense five a

106
00:13:26.310 --> 00:13:27.270
Ryan Mehta: I browsers like

107
00:13:29.130 --> 00:13:30.000
totally broken

108
00:13:31.380 --> 00:13:32.910
Thomas Stussi: Merriam Webster's needs us

109
00:13:34.830 --> 00:13:35.250
Ryan Mehta: Yeah.

110
00:13:37.410 --> 00:13:38.940
Ryan Mehta: Okay, five a

111
00:13:41.280 --> 00:13:49.320
Ryan Mehta: Mathematical correspondence that it science exactly one element of one set to each element of the same or another set

112
00:13:52.380 --> 00:13:55.860
Ryan Mehta: So that's like very nasty sounding in some ways.

113
00:13:56.940 --> 00:14:02.130
Ryan Mehta: But I think what it means in picture form is if we had to

114
00:14:03.720 --> 00:14:04.650
Ryan Mehta: If we had

115
00:14:07.980 --> 00:14:09.990
Think My computer is not very happy.

116
00:14:11.070 --> 00:14:12.750
Ron Yonker: It's like a composition function.

117
00:14:14.250 --> 00:14:14.610
Ryan Mehta: Yeah.

118
00:14:17.700 --> 00:14:18.810
Ryan Mehta: I can I draw on you.

119
00:14:29.190 --> 00:14:30.390
Ryan Mehta: I just want to draw on. Yeah.

120
00:14:32.100 --> 00:14:34.320
Ryan Mehta: Okay, well my dryer is broken.

121
00:14:35.520 --> 00:14:37.710
Ryan Mehta: Which is super annoying for me right now.

122
00:14:40.320 --> 00:14:42.630
Ryan Mehta: It's like I thought it was still on vacation.

123
00:14:43.110 --> 00:14:46.890
Ron Yonker: No, you're not yourself if we don't have your drawings, Ryan.

124
00:14:47.250 --> 00:14:49.530
Ryan Mehta: I know I'll use the zoom dryer.

125
00:14:49.740 --> 00:14:50.220
Okay.

126
00:14:51.630 --> 00:14:52.590
Ryan Mehta: I figured it out.

127
00:14:54.090 --> 00:14:57.720
Ryan Mehta: So if we had an array of numbers.

128
00:15:00.570 --> 00:15:03.480
Ryan Mehta: Let's go to the

129
00:15:09.150 --> 00:15:18.690
Ryan Mehta: Back to this Merriam Webster. So it says a mathematical correspondence like science exactly one element of one set. This is our one set

130
00:15:20.490 --> 00:15:42.900
Ryan Mehta: To each element of the same or another set, so we have one set here the mapping function assigns each of these elements in this set to another set, so we'd have another array and in between these two arrays. We map values from this array to another array.

131
00:15:44.400 --> 00:15:48.840
Ryan Mehta: So whenever we run map.00:51:55.410
Ryan Mehta: The raw field in state.

411
00:51:57.960 --> 00:51:59.790
Ryan Mehta: Kind of weird. I agree.

412
00:52:02.760 --> 00:52:05.700
Ryan Mehta: So there's our console log. That's the raw object.

413
00:52:14.040 --> 00:52:20.310
Ryan Mehta: And then as you can imagine, there's also a US dispatch, which gives us access to the dispatch function.

414
00:52:22.770 --> 00:52:26.250
Ryan Mehta: We're actually going to use the selectors, because they end up being very convenient.

415
00:52:29.100 --> 00:52:36.870
Ryan Mehta: Because most of your components don't care about the entire state of the application. The only care about pieces of the state.

416
00:52:37.860 --> 00:52:46.320
Ryan Mehta: Right. Like, we're going to have a component that displays the raw section, we're going to have a component that displays the pretty. We're going to have a component that displays our gamble.

417
00:52:46.980 --> 00:52:55.980
Ryan Mehta: None of those care about the entire state. So we're going to use a selector that will get us just the piece of state that our component cares about

418
00:52:57.720 --> 00:52:59.550
Ryan Mehta: See what that looks like in just a second.

419
00:53:01.830 --> 00:53:05.400
Ryan Mehta: But does it playing around with this make sense to you all kind of see how this thing's working

420
00:53:06.480 --> 00:53:12.840
Thomas Stussi: So selector grabs the state because the store always says state and like a dispatch.

421
00:53:13.770 --> 00:53:14.400
Thomas Stussi: Is that right

422
00:53:14.940 --> 00:53:17.640
Ryan Mehta: Okay, if it gets the state. So it's like selecting

423
00:53:17.670 --> 00:53:18.510
Thomas Stussi: A piece of state.

424
00:53:18.540 --> 00:53:20.790
Ryan Mehta: That's where the selective part comes from

425
00:53:21.180 --> 00:53:26.670
Ron Yonker: Like some piece of state what's state wrong doing what why

426
00:53:28.050 --> 00:53:28.590
Ryan Mehta: It's

427
00:53:28.740 --> 00:53:30.540
Thomas Stussi: Because every property and state.

428
00:53:31.260 --> 00:53:33.360
Ryan Mehta: It's getting this property alpha state.

429
00:53:39.540 --> 00:53:39.960
Ryan Mehta: Pretty

430
00:53:40.500 --> 00:53:40.860
Yeah.

431
00:53:42.360 --> 00:53:44.340
Ryan Mehta: This would be a pretty piece of state.

432
00:53:44.610 --> 00:53:46.260
Ryan Mehta: What should have been this field.

433
00:53:49.500 --> 00:53:51.870
Ryan Mehta: So it's just instead of getting the entire state.

434
00:53:52.650 --> 00:53:53.940
Ryan Mehta: Okay. Do you like this.

435
00:53:54.600 --> 00:53:58.410
Ryan Mehta: You're selecting a piece of the state, just the piece that you want.

436
00:54:00.810 --> 00:54:02.970
Ron Yonker: But we need a hook for that.

437
00:54:04.680 --> 00:54:08.610
Ryan Mehta: Right. Yep. You need a hug to get access to the state.

438
00:54:10.320 --> 00:54:18.930
Jerud Moyer: So, so what would one ever just assign that to state and then use dot notation off of that for stuff.

439
00:54:19.470 --> 00:54:21.720
Ryan Mehta: Like this, like, get the entire state.

440
00:54:22.020 --> 00:54:22.410
Yeah.

441
00:54:23.550 --> 00:54:38.790
Ryan Mehta: You totally could, but you get some performance benefits by dot notation here and see if you notate than your component will only re render when the raw piece of state changes, not when any piece of state changes.

442
00:54:39.060 --> 00:54:43.740
Jerud Moyer: So normally, where you just kind of parse your state and and different pieces.

443
00:54:46.110 --> 00:54:55.530
Thomas Stussi: If you were doing that style, would you run just state as an argument for you selector or run you selector as an empty argument.

444
00:54:57.120 --> 00:54:58.500
Ryan Mehta: If you wanted all state.

445
00:54:58.800 --> 00:55:02.580
Thomas Stussi: Yeah, if you were just doing state equals you select or what would the argument be

446
00:55:03.030 --> 00:55:06.000
Thomas Stussi: This, it would be state to state. Okay.

447
00:55:08.160 --> 00:55:15.150
Adrian Simental: To be clear, you're saying it makes more sense to have three use selectors for use for state, da, da, da. Pretty state GMO

448
00:55:16.050 --> 00:55:18.450
Ryan Mehta: Yep. And they're all going to be used in different components.

449
00:55:25.500 --> 00:55:29.670
Ryan Mehta: All right. Let's actually write those components. So you can see how it will look

450
00:55:33.030 --> 00:55:37.410
Ryan Mehta: Let's create a component called

451
00:55:42.510 --> 00:55:46.590
Ryan Mehta: Raw JS X that will display their raw

452
00:55:50.820 --> 00:55:52.500
Ryan Mehta: The raw JSON for us.

453
00:55:54.780 --> 00:56:01.650
Ryan Mehta: Actually this is, yeah, it will display the raw JSON. It'll also handle typing into a text area box for us.

454
00:56:04.650 --> 00:56:05.790
Ryan Mehta: Okay, so

455
00:56:07.500 --> 00:56:08.730
Ryan Mehta: We go back to our picture.

456
00:56:09.810 --> 00:56:29.130
Ryan Mehta: We're writing this left hand side over here, the left hand side is a text area box that allows us to type into it, which will trigger changes and all the other boxes right this is where we're actually going to paste in our raw JSON. So you're going to return a text area box.

457
00:56:30.600 --> 00:56:34.440
Ryan Mehta: You're all familiar with these text area, things like the big boxes.

458
00:56:36.210 --> 00:56:52.440
Ryan Mehta: Inside of this component our texts area will need a value the current value like the current raw value in state and it will also need an on change function. What should I do when we type into the text area box right

459
00:56:54.060 --> 00:57:00.510
Ryan Mehta: So let's construct a candle change function that will do structure target.

460
00:57:01.980 --> 00:57:08.610
Ryan Mehta: Off of an event and do something will pass this handle change over here.

461
00:57:10.050 --> 00:57:24.750
Ryan Mehta: And then our component will need to get that raw value. We're going to use a selector selectors take state and output something in our case, we want State DOT raw

462
00:57:26.040 --> 00:57:42.390
Ryan Mehta: This will give us our raw value of but we actually want to manipulate this slightly more our value doesn't want an object right values always take strings. So I think we actually want a string of phi, this raw thing before we pass it to text area.

463
00:57:46.590 --> 00:57:50.070
Ryan Mehta: Is that true, is that true in my line.

464
00:57:51.210 --> 00:57:55.080
Ryan Mehta: Am I lying. I'm lying, a little bit lagging a little bit

465
00:57:56.460 --> 00:57:57.420
Ryan Mehta: Is there like a

466
00:58:04.230 --> 00:58:06.840
Ryan Mehta: Online. Totally. What can we get rid of this.

467
00:58:08.400 --> 00:58:14.400
Ryan Mehta: We're just going to have the on change not going to have a value set on the text area.

468
00:58:15.870 --> 00:58:18.720
Ryan Mehta: Whenever you change the text area. What do we want to happen.

469
00:58:20.940 --> 00:58:22.350
Ryan Mehta: With the company ideas.

470
00:58:24.630 --> 00:58:26.370
Thomas Stussi: Do we want to update the Rajai so

471
00:58:27.360 --> 00:58:29.070
Ryan Mehta: We want to update the raw JSON.

472
00:58:29.130 --> 00:58:29.730
Thomas Stussi: And

473
00:58:29.850 --> 00:58:30.900
Ryan Mehta: The pretty JSON.

474
00:58:30.960 --> 00:58:33.270
Ryan Mehta: And the Yammer. Okay. Okay.

475
00:58:33.330 --> 00:58:34.380
Thomas Stussi: And do it all at once, doing

476
00:58:35.070 --> 00:58:35.340
Thomas Stussi: Yep.

477
00:58:35.430 --> 00:58:37.110
Ryan Mehta: We can do all at once because we have

478
00:58:37.110 --> 00:58:38.910
Ryan Mehta: Access to a

479
00:58:40.860 --> 00:58:41.700
Dispatch.

480
00:58:42.840 --> 00:58:54.210
Ryan Mehta: Whenever we change this box. We're going to dispatch our set JSON action or set JSON action expects us to pass it.

481
00:58:58.800 --> 00:59:02.400
Ryan Mehta: An object. We're going to get that object by

482
00:59:03.810 --> 00:59:04.620
Ryan Mehta: Parsing

483
00:59:06.420 --> 00:59:07.740
Ryan Mehta: Or give value.

484
00:59:09.780 --> 00:59:18.540
Ryan Mehta: So we're going to take what's in the text area box a text area box by default has a string in it. We're going to parse that string and pass it to set JSON.

485
00:59:19.620 --> 00:59:25.260
Ryan Mehta: That will construct an action for us. And then we'll dispatch that action triggering our

486
00:59:27.000 --> 00:59:29.100
Ryan Mehta: Producer over here.

487
00:59:33.510 --> 00:59:42.540
Ryan Mehta: Let's go back to app JS and render our raw component and see what it looks like.

488
00:59:45.450 --> 00:59:46.680
Ryan Mehta: Back over here.

489
00:59:48.120 --> 00:59:53.640
Ryan Mehta: Here's our little raw component, we should be able to put some JSON into it.

490
00:59:58.980 --> 01:00:00.960
Ryan Mehta: And it's stored in state now.

491
01:00:03.030 --> 01:00:12.270
Ryan Mehta: One big problem that we're going to run into typically how we look at what's stored in state is by looking at our components over here.

492
01:00:13.680 --> 01:00:16.590
Ryan Mehta: We can kind of see our state.

493
01:00:17.640 --> 01:00:19.650
Ryan Mehta: Like here kind of

494
01:00:22.170 --> 01:00:27.570
Ryan Mehta: But it's a little bit troublesome. There's a bunch of other stuff in this provider that we don't really want to look at

495
01:00:28.980 --> 01:00:34.080
Ryan Mehta: It just so happens that Redux also comes with some dev tools that we can use.

496
01:00:35.100 --> 01:00:38.670
Ryan Mehta: So we're going to want to download the Redux

497
01:00:39.840 --> 01:00:40.650
dev tools.

498
01:00:41.820 --> 01:00:44.040
Ryan Mehta: Um, it's a Chrome extension that you can get

499
01:00:47.280 --> 01:00:51.480
Ryan Mehta: The Redux dev tools do take a little bit of setup on our end

500
01:00:55.170 --> 01:01:02.370
Ryan Mehta: So if you go to their website they actually show you what to do. Here's our normal create store.

501
01:01:03.990 --> 01:01:06.090
Ryan Mehta: We're supposed to add this line.

502
01:01:07.140 --> 01:01:08.910
Ryan Mehta: Into our create store function.

503
01:01:11.130 --> 01:01:20.670
Ryan Mehta: So I'm going to copy that line. We're going to go back to our application. Go back to store JS and paste that line that they gave us here.

504
01:01:23.880 --> 01:01:28.260
Ryan Mehta: Once we paste that line and go back to the browser, we will see

505
01:01:29.310 --> 01:01:32.460
Ryan Mehta: In this Redux dev tools, our

506
01:01:34.050 --> 01:01:34.800
dev tools.

507
01:01:38.010 --> 01:01:40.590
Ryan Mehta: So here is a bunch of stuff.

508
01:01:41.640 --> 01:01:44.730
Ryan Mehta: All of these Dev Tools look so different. Nowadays, that's okay.

509
01:01:46.440 --> 01:01:52.380
Ryan Mehta: just shocked. Anyways, here's, here's our state our current state right here.

510
01:01:56.730 --> 01:01:59.400
Ryan Mehta: Let's construct some JSON, so

511
01:02:03.960 --> 01:02:05.100
I'm going to copy that.

512
01:02:06.120 --> 01:02:20.580
Ryan Mehta: If we paste that into the input box we get our new state the raw state has named JSON. Here's our pretty state. And here's our gamble. So it's actually updating our state like we would expect.

513
01:02:25.980 --> 01:02:31.710
Ryan Mehta: I actually hate this new view of reactor. This Redux dev to

514
01:02:34.050 --> 01:02:35.340
Ryan Mehta: I should give it a chance.

515
01:02:37.350 --> 01:02:39.240
Ryan Mehta: It's so different than it used to be.

516
01:02:41.520 --> 01:02:41.670
Ben Waples: If

517
01:02:42.180 --> 01:02:43.860
Annalise: You're not familiar with it, Ryan.

518
01:02:44.640 --> 01:02:49.740
Ryan Mehta: It could just be that yeah that's I'm trying to give it a chance. But I, I just don't like it.

519
01:02:51.330 --> 01:03:00.090
Ben Waples: So if you went into like the normal on React components would have just not show any state like that. There's no state inside of like our normal wrecked of tool and the

520
01:03:01.170 --> 01:03:01.440
Ben Waples: Yeah.

521
01:03:01.590 --> 01:03:05.790
Ryan Mehta: The provider still has stayed over here, but you can't really

522
01:03:06.990 --> 01:03:08.490
Ryan Mehta: It doesn't really update

523
01:03:09.000 --> 01:03:09.420
Evening.

524
01:03:12.120 --> 01:03:13.470
Ryan Mehta: And this one actually shows us

525
01:03:13.470 --> 01:03:14.310
Ryan Mehta: Like the

526
01:03:14.970 --> 01:03:16.680
Ryan Mehta: The action that just happened.

527
01:03:17.940 --> 01:03:24.390
Ryan Mehta: So we can see this was our initial state as a result of this action. This is the state that was output ID.

528
01:03:27.000 --> 01:03:28.230
Ryan Mehta: Which is kind of cool.

529
01:03:28.530 --> 01:03:28.920
Nice.

530
01:03:30.540 --> 01:03:31.680
Ryan Mehta: And eventually, once we

531
01:03:31.680 --> 01:03:38.850
Ryan Mehta: Have more actions building up, you can choose to cross out and action and change the state as if that action never happened.

532
01:03:39.420 --> 01:03:46.740
Ryan Mehta: So you can see like what would have happened if I didn't type into the input box or that's really nice for handling loading screens.

533
01:03:47.250 --> 01:03:57.720
Ryan Mehta: Because you can edit the loading screen by like canceling out the action that got rid of the loading screen so you can continue to like style it pretend like it's still there.

534
01:04:00.270 --> 01:04:07.140
Ryan Mehta: Alright, so we have our set JSON action and it looks like it's setting state appropriately, which looks good.

535
01:04:08.790 --> 01:04:18.840
Ryan Mehta: And let's go back to our components. Let's make our next component. So we have our raw one let's have our pretty dodgy sex component

536
01:04:22.380 --> 01:04:24.180
Ryan Mehta: We won't have any prop types.

537
01:04:25.770 --> 01:04:30.450
Ryan Mehta: In this one, we just want to select that pretty state right and will

538
01:04:31.560 --> 01:04:35.250
Ryan Mehta: Return it inside of a pre block.

539
01:04:36.600 --> 01:04:38.520
Ryan Mehta: Have you all seen these pre blocks before

540
01:04:40.110 --> 01:04:45.690
Ryan Mehta: Pre so you know in HTML. HTML gets rid of all the white spacing.

541
01:04:47.010 --> 01:04:59.490
Ryan Mehta: Pre blocks, keep the original white spacing. So we'll try it both ways with pre in with like a pea tag. And we're going to want to get our pretty JSON by using a selector.

542
01:05:00.570 --> 01:05:11.280
Ryan Mehta: We're going to get state, but we're just going to select off the pretty piece of state just that pretty field and use it here in our pre tag.

543
01:05:13.620 --> 01:05:16.710
Ryan Mehta: This look okay. Not too bad.

544
01:05:18.480 --> 01:05:24.480
Ryan Mehta: All right. Back in app JS, we will use that pretty component

545
01:05:26.910 --> 01:05:30.960
Ryan Mehta: Extremely important and put a fragment around all of this.

546
01:05:34.080 --> 01:05:35.100
Ryan Mehta: Back in our app.

547
01:05:36.390 --> 01:05:37.800
Ryan Mehta: Here is

548
01:05:39.660 --> 01:05:49.380
Ryan Mehta: Here's our text input and the pretty version right below it. If we put in our JSON, we have the pretty version right below.

549
01:05:51.120 --> 01:05:52.170
Ryan Mehta: Not too bad. Right.

550
01:05:53.880 --> 01:05:59.220
Ryan Mehta: Let's try to use a p tag instead of that pre tag. So you change this.

551
01:06:00.270 --> 01:06:01.920
Ryan Mehta: To a p tag.

552
01:06:05.370 --> 01:06:06.750
This is a key tag.

553
01:06:08.040 --> 01:06:12.240
Ryan Mehta: And do the same sort of thing you'll notice the white spacing is all gone.

554
01:06:13.950 --> 01:06:25.950
Ryan Mehta: If we inspect the element, you'll see that our white spacing is actually there correctly inside of the element field but HTML collapses all whiWEBVTT

1
00:00:02.280 --> 00:00:02.790
Ryan Mehta: Alright.

2
00:00:05.520 --> 00:00:06.600
Ryan Mehta: Cool, let's

3
00:00:08.790 --> 00:00:09.719
Ryan Mehta: Let's write some code.

4
00:00:12.450 --> 00:00:14.580
Ryan Mehta: I am going to

5
00:00:15.839 --> 00:00:21.060
Ryan Mehta: Go into our demo directory and let's create a new

6
00:00:27.210 --> 00:00:39.090
Ryan Mehta: A new project. I mean, easy alchemy code lab app. Select react what's called this actually let me not guess. Okay. Color Picker. We're going to do the Color Picker again.

7
00:00:44.190 --> 00:00:48.270
Ryan Mehta: And this time, take a slightly different approach will

8
00:00:49.500 --> 00:00:54.690
Ryan Mehta: Instead of starting off with one big component and extracting things we're going to

9
00:00:56.040 --> 00:01:13.020
Ryan Mehta: Start off with the presentational component container component model in mind and break down the problem into presentational components and container components and write those all. So while this is installing

10
00:01:15.210 --> 00:01:16.320
Let me open up

11
00:01:22.860 --> 00:01:24.510
Ryan Mehta: Let's take a look at what

12
00:01:26.910 --> 00:01:28.950
Ryan Mehta: Our color picker looks like.

13
00:01:30.120 --> 00:01:32.220
Ryan Mehta: So we're going to have a page.

14
00:01:36.630 --> 00:01:41.430
Ryan Mehta: On the page. We're going to have a background color. Color Picker.

15
00:01:43.770 --> 00:01:47.100
Ryan Mehta: We're going to have a foreground color.

16
00:01:48.180 --> 00:01:49.290
Color selector.

17
00:01:51.660 --> 00:01:53.820
Ryan Mehta: And then we're going to have a text input.

18
00:01:58.170 --> 00:02:02.550
Ryan Mehta: Below this whole thing. We're going to have a display.

19
00:02:04.770 --> 00:02:08.370
Ryan Mehta: The background color of the display will be the same color.

20
00:02:09.810 --> 00:02:21.570
Ryan Mehta: That we picked in the first color picker, and the text color of the text that's written into this display will be the color that was selected here.

21
00:02:24.210 --> 00:02:24.900
Ryan Mehta: Soon. Good.

22
00:02:26.910 --> 00:02:31.110
Ryan Mehta: Yesterday, we already started breaking this off into multiple components.

23
00:02:32.970 --> 00:02:35.130
Ryan Mehta: We used

24
00:02:37.050 --> 00:02:42.660
Ryan Mehta: We broke this section up top off into a controls component

25
00:02:45.720 --> 00:02:51.390
Ryan Mehta: We broke this bottom section off into a display component

26
00:02:55.020 --> 00:03:09.630
Ryan Mehta: Both of these components are presentational components there presentational components because neither of them hold their own state. They just managed, they just like use that state to either create a display or to create some controls.

27
00:03:11.370 --> 00:03:16.350
Ryan Mehta: Above both of these components is another component

28
00:03:20.310 --> 00:03:22.110
Ryan Mehta: That surrounds all of them.

29
00:03:23.460 --> 00:03:25.350
Ryan Mehta: This is our actual color picker.

30
00:03:27.330 --> 00:03:34.950
Ryan Mehta: This thing is a container the container holds the actual state that it passes to his two children.

31
00:03:36.480 --> 00:03:38.370
Ryan Mehta: The state that it holds his

32
00:03:39.420 --> 00:03:40.350
Ryan Mehta: Background color.

33
00:03:42.660 --> 00:03:44.880
Ryan Mehta: Let's call it foreground color today.

34
00:03:46.380 --> 00:03:47.610
Ryan Mehta: And text.

35
00:03:49.980 --> 00:03:55.830
Ryan Mehta: It also creates a few methods, it needs at least a method to handle

36
00:03:57.240 --> 00:03:59.820
Ryan Mehta: Change right update at stake.

37
00:04:03.330 --> 00:04:05.100
Ryan Mehta: So all of this stuff here.

38
00:04:07.050 --> 00:04:10.110
Ryan Mehta: Lives within the container component

39
00:04:11.820 --> 00:04:18.510
Ryan Mehta: And the presentational components, just take this information via props and know how to display the information

40
00:04:21.690 --> 00:04:23.250
Ryan Mehta: Made sense look okay

41
00:04:25.200 --> 00:04:34.920
Ryan Mehta: All right. Let's start off with making our presentational components. I usually take the same flow when I'm working on these apps.

42
00:04:35.370 --> 00:04:36.240
Ron Yonker: Make a little easier.

43
00:04:37.620 --> 00:04:40.710
Ron Yonker: Right, I'm recalling the pink box the container component

44
00:04:42.540 --> 00:04:51.390
Ryan Mehta: This like outer red box around everything. But yeah, I guess you could say the pink box. Also the pink box. I was thinking about the browser window.

45
00:04:57.270 --> 00:05:02.220
Ryan Mehta: So my flow usually is presentational component

46
00:05:06.360 --> 00:05:07.260
Ryan Mehta: And then

47
00:05:13.020 --> 00:05:17.040
Ryan Mehta: I don't know. I guess it's just two steps. But, and then you start again.

48
00:05:19.230 --> 00:05:36.270
Ryan Mehta: So to start off with. We have to presentational components, a display and our controls presentational components. I'm going to put these inside of my components directory and inside of my components directory. I'm going to create a new folder called color picker.

49
00:05:38.400 --> 00:05:44.760
Ryan Mehta: And inside of there. I'm going to start off with a display dot j s x file.

50
00:05:47.700 --> 00:05:59.130
Ryan Mehta: So we're making a presentational components, all of our presentational components are always going to be function components. I'm going to import react from react.

51
00:06:00.630 --> 00:06:04.080
Ryan Mehta: We're going to construct a display component

52
00:06:06.930 --> 00:06:08.400
Ryan Mehta: And we're going to export.

53
00:06:10.320 --> 00:06:13.260
Ryan Mehta: support our display component

54
00:06:14.340 --> 00:06:22.650
Ryan Mehta: Our display component is going to need some information from its parent in order to know exactly what to display. So we're also going to have prop types.

55
00:06:27.900 --> 00:06:32.340
Ryan Mehta: And we'll set up our prop types after here.

56
00:06:36.540 --> 00:06:49.320
Ryan Mehta: If we look back at our little drive here our display presentation mode component needs three props and needs the background color the foreground color and the text display.

57
00:06:50.790 --> 00:06:55.830
Ryan Mehta: So it's going to need the text to display which is a stream.

58
00:06:57.780 --> 00:06:59.700
Ryan Mehta: It's going to need the background color.

59
00:07:04.770 --> 00:07:07.050
Ryan Mehta: And it's going to need a foreground color.

60
00:07:14.520 --> 00:07:20.190
Ryan Mehta: We can D structure. All of these fears text big color.

61
00:07:21.660 --> 00:07:22.560
Ryan Mehta: brown color.

62
00:07:24.960 --> 00:07:33.720
Ryan Mehta: And display them. Let's say in a div are Dave is going to have text inside of it. We're going to set up a style.

63
00:07:34.920 --> 00:07:38.070
Ryan Mehta: Or div, the background color of our dev

64
00:07:40.050 --> 00:07:42.180
Ryan Mehta: Will be big color.

65
00:07:43.320 --> 00:07:53.340
Ryan Mehta: The foreground color div will be f g color. And I'm going to give it a also let's say 100 pixels and

66
00:08:01.830 --> 00:08:02.310
Ryan Mehta: All right.

67
00:08:03.690 --> 00:08:08.460
Ryan Mehta: Good everyone put these on their own line. So it's maybe more readable.

68
00:08:10.170 --> 00:08:11.010
Ryan Mehta: And be debatable.

69
00:08:19.260 --> 00:08:19.650
Ryan Mehta: Okay.

70
00:08:21.570 --> 00:08:23.850
Ryan Mehta: This makes sense this display component

71
00:08:25.980 --> 00:08:30.870
Ryan Mehta: So we should be able to pass it text background color and foreground color and

72
00:08:32.970 --> 00:08:53.610
Ryan Mehta: Be able to display that all on the page. We can manually test this right now. So I'm going to start our application back in app JS. I'm going to manually put our display component onto the page and let's pass it just some dummy data. So some text know there

73
00:08:55.020 --> 00:08:56.220
Ryan Mehta: A background color.

74
00:08:58.530 --> 00:09:03.660
Ryan Mehta: Let's say the background color is red and the foreground color.

75
00:09:04.710 --> 00:09:06.870
Ryan Mehta: Let's say the foreground color is

76
00:09:08.550 --> 00:09:08.820
Blue

77
00:09:13.110 --> 00:09:25.350
Ryan Mehta: Our presentation component needs all of these props in order to know what to display. We're just manually entering them to make sure that we can physic like we can actually see this presentation a component of the page.

78
00:09:26.520 --> 00:09:32.370
Ryan Mehta: Go to our page we see our little presentational components chillin right there.

79
00:09:34.260 --> 00:09:34.800
Ryan Mehta: Look good

80
00:09:37.440 --> 00:09:46.590
Thomas Stussi: Right, I have a small question about the prop types. Does it matter what where in the file you put that prop type definition.

81
00:09:46.920 --> 00:09:49.140
Ryan Mehta: Like here or here, for example.

82
00:09:49.410 --> 00:09:49.770
Thomas Stussi: Yeah.

83
00:09:50.190 --> 00:09:52.950
Thomas Stussi: Or at the top of the file, you know, I'm not sure.

84
00:09:53.100 --> 00:09:57.540
Ryan Mehta: I've wondered, I think if you put it here. It might break because you haven't defined display yet.

85
00:09:58.050 --> 00:10:00.660
Thomas Stussi: Okay, so maybe after display.

86
00:10:05.340 --> 00:10:07.770
Ryan Mehta: Also, we can see what those prop types do

87
00:10:09.210 --> 00:10:15.150
Ryan Mehta: So right now, when I inspect, I have no warnings, but save

88
00:10:16.500 --> 00:10:21.930
Ryan Mehta: I accidentally past instead of text to text I passed a number

89
00:10:23.160 --> 00:10:39.840
Ryan Mehta: To text, he would actually still render on the page, but would get this nice little warning message invalid prop type text of type number supplied to display expected string. So it just gives us some warning messages if we happen to pass the wrong prop type

90
00:10:45.300 --> 00:10:45.960
Back district.

91
00:10:48.990 --> 00:11:02.490
Ryan Mehta: Alright, so I think our display component looks pretty good. Now this is the time where I usually make a snapshot test, we'd like physic we manually looked at our display component on the page. And it looks how we want it to.

92
00:11:03.900 --> 00:11:26.580
Ryan Mehta: So now we can snapshot test it to make sure we don't mess up the display at some point in the future. I'm going to make a display test, I'm going to copy our AP test and just paste it over here and then change some of these words. So no more app, you now have display.

93
00:11:28.440 --> 00:11:42.540
Ryan Mehta: So we're testing our display component we clean up after each and we take a snapshot of our display component one big thing that we have to do inside of this test actually if we run the test right now.

94
00:11:45.300 --> 00:11:48.240
Ryan Mehta: I'm will get a little error message or warning message.

95
00:11:56.700 --> 00:11:59.310
Ryan Mehta: Anybody know why we would get something like this.

96
00:12:04.770 --> 00:12:10.200
Thomas Stussi: Decide because we're not giving display any of the things that means any of those strange

97
00:12:10.650 --> 00:12:17.820
Ryan Mehta: Exactly. So even in our snapshot tests, we have to pass our display some sort of props props that it needs.

98
00:12:18.240 --> 00:12:21.000
Ryan Mehta: Here we just hard coded for tests, kind of like we did

99
00:12:21.060 --> 00:12:35.190
Ryan Mehta: On in the back end when we're creating like calling our posts drought, we just make up the thing that we want to create and we expect to get back to the same thing. So in our case, we'll just make up some text test.

100
00:12:37.110 --> 00:12:37.680
Ron Yonker: Run.

101
00:12:39.480 --> 00:12:48.540
Ron Yonker: React testing library that interfaces with the syntax of some other testing library in this case just, is that correct

102
00:12:49.590 --> 00:12:54.510
Ryan Mehta: Yeah, the react testing library just gives us some functions to use with ingest

103
00:12:56.370 --> 00:12:56.880
Ron Yonker: Thank you.

104
00:13:00.330 --> 00:13:02.730
Ryan Mehta: Alright, the background color. Let's make it

105
00:13:05.760 --> 00:13:07.830
Ryan Mehta: Let's make the foreground color.

106
00:13:11.340 --> 00:13:11.760
Green.

107
00:13:15.540 --> 00:13:15.810
Okay.

108
00:13:17.340 --> 00:13:19.380
Ryan Mehta: So we've created our display now.

109
00:13:20.610 --> 00:13:22.680
Ryan Mehta: We should be able to update the snapshot

110
00:13:24.960 --> 00:13:39.360
Ryan Mehta: And look in our snapshots directory and just double check that out. Looks like what we expect. So we have a div inside of the dev we have test display which makes sense because we set the text to test display.

111
00:13:40.620 --> 00:13:48.690
Ryan Mehta: And then for the background color we have read, which makes sense because we've set read here and for the

112
00:13:49.800 --> 00:14:09.480
Ryan Mehta: Foreground Color. We have our G green because we have green here, and then the width and height that we coded in the component. So, this the snapshot looks good. When we look in the browser. It looks good. So I think this compound this presentation of component is done.

113
00:14:10.650 --> 00:14:16.770
Ron Yonker: Is as fragment is that just whatever you decide to name it. Does that have a special meaning.

114
00:14:18.870 --> 00:14:19.680
Ryan Mehta: Over here.

115
00:14:21.030 --> 00:14:26.550
Ryan Mehta: It has to be called as fragment because you're structuring from this render

116
00:14:27.720 --> 00:14:32.700
Ryan Mehta: Render returns an object. One of the things on the object is this as fragment function.

117
00:14:41.760 --> 00:14:43.650
Ryan Mehta: Okay, we have our display.

118
00:14:52.080 --> 00:14:53.760
Ryan Mehta: Let's make our controls next

119
00:14:55.470 --> 00:14:57.750
Ryan Mehta: So I am going to make

120
00:14:59.610 --> 00:15:04.020
Ryan Mehta: A nother presentation presentational component called controls.

121
00:15:07.230 --> 00:15:07.890
Ryan Mehta: Sex.

122
00:15:09.570 --> 00:15:14.250
Ryan Mehta: This is again a presentational components. So a functional component

123
00:15:17.160 --> 00:15:19.080
Ryan Mehta: And we're going to receive some props.

124
00:15:20.700 --> 00:15:22.260
Ryan Mehta: So I'm going to have prop types here.

125
00:15:24.660 --> 00:15:26.520
Ryan Mehta: And then we'll define our component

126
00:15:29.130 --> 00:15:33.510
Ryan Mehta: It's going to be a function component we will export our component

127
00:15:35.820 --> 00:15:38.880
Ryan Mehta: And then we'll also define our components prop types.

128
00:15:42.720 --> 00:15:45.690
Ryan Mehta: All right. If we look back at our picture.

129
00:15:47.220 --> 00:15:58.350
Ryan Mehta: This is our presentation will component right here. These three inputs. It's at least going to need to know the current background color, the current foreground color and the current text set and state.

130
00:15:59.250 --> 00:16:16.410
Ryan Mehta: So we'll have it have text, which is a string that is required a background color, which is a string that is required in the foreground color which is also a stream that is required.

131
00:16:17.520 --> 00:16:23.760
Ryan Mehta: We can start the structuring these things text eg color or ground color.

132
00:16:26.130 --> 00:16:34.320
Ryan Mehta: But in addition to these three pieces of state our controls also wants to change these pieces of state.

133
00:16:35.400 --> 00:16:40.440
Ryan Mehta: So we're going to have it get passed in a handle change function.

134
00:16:41.550 --> 00:16:49.710
Ryan Mehta: We're going to write this handle change function in a way that will let it work for all three of these inputs. We're going to get a little bit fancy

135
00:16:51.330 --> 00:16:54.150
Ryan Mehta: So we'll have one ha
00:57:47.430 --> 00:57:48.270
And

468
00:57:51.570 --> 00:58:05.370
Ryan Mehta: Our dog is going to need props a proper name a proper age and a proper weight. This is when we're going to start using our type definitions. So we're going to make a new type. We're going to make a type called dog props.

469
00:58:06.990 --> 00:58:20.880
Ryan Mehta: Our dog props type we expect dog. Our dog to be passed a name which is a string, we expect her dog to be casting age, which is a number and a weight, which is a string.

470
00:58:22.530 --> 00:58:41.520
Ryan Mehta: Okay, we want our dog to be passed these three products, we can still the structure them name, age and weight like we normally would. But in we're in TypeScript. So we're also going to specify that this thing that we're restructuring our props is a dog props type

471
00:58:44.700 --> 00:58:48.840
Ryan Mehta: So our dog expects props that are called dog props.

472
00:58:49.860 --> 00:58:50.370
Ryan Mehta: But good

473
00:58:54.480 --> 00:59:02.520
Ryan Mehta: Back over in our app to sex. Let's delete all of this stuff and put our dog here.

474
00:59:03.960 --> 00:59:20.160
Ryan Mehta: You'll notice now that if we don't pass our dog it's required props is underlined in bread, letting us know that we haven't passed name, age or weight to our dog component, it actually will fail to compile completely

475
00:59:22.650 --> 00:59:28.350
Ryan Mehta: We're missing our props. So we can start passing on name spot.

476
00:59:38.610 --> 00:59:50.790
Ryan Mehta: Component compact girls successfully and we should have oh we forgot to use these props and our actual component. So, we should probably add

477
00:59:52.170 --> 00:59:54.690
Ryan Mehta: These props to the correct place.

478
00:59:58.380 --> 01:00:04.110
Ryan Mehta: OK, and now we see our little dog component going

479
01:00:08.310 --> 01:00:11.670
Ryan Mehta: So that's how prop passing works.

480
01:00:12.690 --> 01:00:18.210
Ryan Mehta: In TypeScript. You can also be a little bit more explicit about the components that you're creating.

481
01:00:19.410 --> 01:00:34.380
Ryan Mehta: Right now, when we're implicitly returning a j SX element right some TypeScript or some J SX code. We can be explicit about it and say that we're returning a React function component

482
01:00:35.850 --> 01:00:39.390
Ryan Mehta: And this react function component takes dog props.

483
01:00:40.410 --> 01:00:42.630
Ryan Mehta: And then we don't have to specify the stock so

484
01:00:44.040 --> 01:00:44.730
I think

485
01:00:49.650 --> 01:00:51.390
It's still unfortunate.

486
01:00:55.980 --> 01:00:58.530
Ben Waples: Reacts FC. This is our word

487
01:01:00.000 --> 01:01:01.080
Ryan Mehta: That's a shorthand.

488
01:01:01.080 --> 01:01:01.320
Ben Waples: For

489
01:01:01.740 --> 01:01:02.310
This thing.

490
01:01:04.350 --> 01:01:05.040
Ben Waples: We have

491
01:01:05.670 --> 01:01:06.690
On this side.

492
01:01:08.340 --> 01:01:15.150
Ryan Mehta: Okay, so we can be explicit that dog is a React function component that kickstart props.

493
01:01:17.790 --> 01:01:29.280
Ryan Mehta: And yeah, like Ben mentioned, you can also use React FC. They are equivalent. If we look at the type definition of React FC, you'll see it just equals function component

494
01:01:31.260 --> 01:01:34.230
Ryan Mehta: So it's up to you. FC or function component

495
01:01:35.550 --> 01:01:42.030
Ryan Mehta: So now we're saying that dog is a React function component that takes dog props as its props.

496
01:01:46.650 --> 01:02:03.600
Ryan Mehta: So that's the TypeScript, TypeScript depart. You'll notice the only TypeScript. The parts that we have in this entire file now is the definition of our props and explicitly stating that dog is a function component react function component

497
01:02:04.650 --> 01:02:07.200
Ryan Mehta: Besides that, there's not much TypeScript in this file.

498
01:02:09.660 --> 01:02:09.960
Good.

499
01:02:15.900 --> 01:02:28.080
Ryan Mehta: Cool. Um, you can kind of think of these as taking the place of the prop types library right we no longer use that prop types syntax. I mean, that syntax is far more cumbersome and this syntax anyways.

500
01:02:33.090 --> 01:02:33.630
Ryan Mehta: Look good

501
01:02:36.060 --> 01:02:47.340
Ryan Mehta: All right, let's make a nother component. So, well, let's talk about what we're going to build. We're going to build a little application will have a

502
01:02:48.450 --> 01:02:57.000
Ryan Mehta: Page at the very top of the page will have a little color picker input that will let us select a color.

503
01:02:58.830 --> 01:03:04.080
Ryan Mehta: And then we'll have a text input bar that will let us put in a URL.

504
01:03:05.130 --> 01:03:12.300
Ryan Mehta: The URL of an SVG image that SVG image will appear here, it will be some drawing

505
01:03:17.040 --> 01:03:24.690
Ryan Mehta: And then we'll be able to click on this drawing and fill in the colors of this drawing, based on the color that we selected here.

506
01:03:26.280 --> 01:03:28.860
Ryan Mehta: So then we'll be able to change the color. It's like a coloring book.

507
01:03:30.780 --> 01:03:35.580
Ryan Mehta: And then you can pick a new SVG image and, like, maybe it's a dinosaur.

508
01:03:37.980 --> 01:03:39.810
Can turn this into a dinosaur. I think

509
01:03:49.620 --> 01:03:52.410
Brooke Perkins (she/her): This is turned into an art class.

510
01:03:55.080 --> 01:03:57.300
Ryan Mehta: And then you'd be able to like fill in the parts of the

511
01:03:57.300 --> 01:03:59.040
Ryan Mehta: Dinosaur or whatever.

512
01:04:03.900 --> 01:04:06.600
Ryan Mehta: So that's the, that's the application that we're going to be building

513
01:04:08.520 --> 01:04:15.690
Ryan Mehta: We're going to break this up into a few components. We're going to have a display component down here.

514
01:04:19.890 --> 01:04:21.030
This play

515
01:04:23.100 --> 01:04:28.200
Ryan Mehta: And we're going to have a controls component here.

516
01:04:30.240 --> 01:04:37.500
Ryan Mehta: And then around this whole thing, we will have a container will call it our color.

517
01:04:39.030 --> 01:04:40.500
Ryan Mehta: Coloring Book. Sure.

518
01:04:42.330 --> 01:04:43.890
Ryan Mehta: It's our color picker 2.0

519
01:04:46.680 --> 01:04:47.370
Ryan Mehta: seem okay

520
01:04:48.960 --> 01:04:50.970
Ryan Mehta: Thanks for the idea and I, by the way.

521
01:04:52.620 --> 01:04:53.010
Ryan Mehta: Idea.

522
01:04:56.400 --> 01:04:59.970
Ryan Mehta: Alright, so let's start off by creating our display component

523
01:05:00.060 --> 01:05:01.260
Ryan Mehta: In TypeScript.

524
01:05:01.410 --> 01:05:03.570
Ryan Mehta: And see how that process goes

525
01:05:06.090 --> 01:05:09.810
Ryan Mehta: Actually, before we do that, let's talk about the state that we're going to have

526
01:05:11.070 --> 01:05:21.930
Ryan Mehta: Just so we're clear about that. We are going to need an SVG, the SVG that we're going to display here the SVG URL.

527
01:05:24.750 --> 01:05:31.710
Ryan Mehta: There's going to be some SVG URL from that URL will fetch the SVG that will display. And then our current color.

528
01:05:33.240 --> 01:05:34.620
Ryan Mehta: But also need

529
01:05:36.720 --> 01:05:39.630
Ryan Mehta: In green a handle change function.

530
01:05:41.640 --> 01:05:51.060
Ryan Mehta: That will let us change the color and the URL and a like handled draw function.

531
01:05:52.170 --> 01:05:52.890
And will

532
01:05:54.510 --> 01:06:01.170
Ryan Mehta: Draw or color that will color in an SVG section. When we click on it.

533
01:06:02.580 --> 01:06:13.320
Ryan Mehta: Okay, so three pieces of state SVG SVG URL and color handle change to change these forms handle draw. So we can click on our image and draw into it.

534
01:06:17.130 --> 01:06:25.770
Ryan Mehta: Alright, so let's begin by creating our a folder called coloring book.

535
01:06:26.850 --> 01:06:29.700
Ryan Mehta: And then in this folder will make a display.

536
01:06:30.750 --> 01:06:32.460
Ryan Mehta: Yes, sex component

537
01:06:34.170 --> 01:06:42.000
Ryan Mehta: In pork react react, we will make our display products.

538
01:06:43.470 --> 01:06:46.470
Ryan Mehta: And then we will create our display.

539
01:06:47.640 --> 01:06:52.380
Ryan Mehta: It's going to be a React function component that has displayed props.

540
01:06:58.920 --> 01:06:59.340
So,

541
01:07:06.450 --> 01:07:06.810
Ryan Mehta: Far

542
01:07:08.400 --> 01:07:18.030
Ryan Mehta: Our display component is going to need to be passed to props, the SVG that it needs to display and a handle, draw a function

543
01:07:19.530 --> 01:07:22.740
Ryan Mehta: That it will run when you click on a parked.

544
01:07:24.390 --> 01:07:34.470
Ryan Mehta: So we will have it taken SVG, which will say is a String A. String that represents the SVG and I'm going to call it an on draw

545
01:07:35.970 --> 01:07:36.720
Ryan Mehta: Function.

546
01:07:39.090 --> 01:07:41.790
Ryan Mehta: That returns. Nothing returns. Avoid

547
01:07:43.500 --> 01:07:54.300
Ryan Mehta: These click handlers don't return anything. Whenever you don't return something instead of specifying like a type that you return you specify void or returning nothing from this

548
01:07:55.320 --> 01:08:00.870
Ryan Mehta: Or on drop function also takes a parameter right an event.

549
01:08:02.220 --> 01:08:03.960
Ryan Mehta: And react to these events.

550
01:08:06.120 --> 01:08:09.120
Ryan Mehta: There's a bunch of different events that we can take. There's an

551
01:08:10.740 --> 01:08:27.450
Ryan Mehta: Drag event handle or drag a form event a drag event A focus event mouse event a touch event, a real event change event, etc, etc. In our case, we have a mouse event a click, click with the mouse.

552
01:08:30.450 --> 01:08:35.850
Ryan Mehta: Okay, so we need to specify what the event type is it's a mouse event looked at so far.

553
01:08:38.100 --> 01:08:41.460
Ryan Mehta: Our component itself. We're going to use an output.

554
01:08:43.410 --> 01:08:44.040
Ryan Mehta: Tag.

555
01:08:45.510 --> 01:08:54.240
Ryan Mehta: We are going to dangerously set the HTML of this output tag to whatever SVG equals

556
01:08:55.380 --> 01:09:07.980
Ryan Mehta: SVG prop and will set the output to SVG. This is like in vanilla JavaScript. When you do like grab a tag and inner HTML equals something

557
01:09:08.760 --> 01:09:29.520
Ryan Mehta: We're doing that same thing or SVG is a string that we fetch from some URL that's going to give us the SVG looking contents, which looks like this. We're going to take this and essentially inject it into our output with this danger of asleep set inner HTML.

558
01:09:33.000 --> 01:09:46.020
Ryan Mehta: Okay. And then we're also want to grab our on raw function. And when somebody clicks on our output. We're going to invoke the on draw

559
01:09:47.070 --> 01:09:56.160
Ryan Mehta: Function. So when they click on our SVG somewhere we will draw on the SVG. We haven't written this function, yet we have to figure out how that works. Exactly.

560
01:09:58.170 --> 01:10:05.970
Ryan Mehta: But we know that we want to draw something when they click on the picture for a mouse event. This is actually a generic

561
01:10:07.770 --> 01:10:16.800
Ryan Mehta: We're supposed to specify what type of element, they're going to potentially do the mouse event on in our case, that is an HTML.

562
01:10:18.360 --> 01:10:19.260
Output element.

563
01:10:20.490 --> 01:10:23.280
Ryan Mehta: Output element because it's a output element.

564
01:10:24.480 --> 01:10:35.550
Ryan Mehta: Kind of redundant saying that but so this on click is being attached to an output element. So the mouse event is a mouse event on an output.

565
01:10:37.260 --> 01:10:38.190
So what this is saying.

566
01:10:39.750 --> 01:10:51.630
Ryan Mehta: This will change what the target equals. So when we do event target or current target that current target will equal and output element for us because we have this generic here.

567
01:10:54.300 --> 01:10:56.340
Ryan Mehta: All right, for the most part, does this look. Okay.

568
01:10:58.560 --> 01:11:04.260
Ryan Mehta: All right, so we have our display component. We also need our controls.

569
01:11:05.340 --> 01:11:06.030
Sex.

570
01:11:07.980 --> 01:11:16.590
Ryan Mehta: Do something similar here. We're going to import react react, we're going to create some controls.

571
01:11:20.100 --> 01:11:23.010
Ryan Mehta: Will create our controls.

572
01:11:29.460 --> 01:11:33.090
Ryan Mehta: It's going to be a function component that has controls.

573
01:11:38.250 --> 01:11:38.910
Ryan Mehta: Props.

574
01:11:43.980 --> 01:11:44.610
This sort of thing.

575
01:11:48.960 --> 01:11:50.190
Ryan Mehta: All right, look good so far.

576
01:11:51.960 --> 01:12:08.700
Ryan Mehta: Our controls component is going to need three things. It's going to need the SVG URL, the color and this handle change function that we're defining in the container. So we'll have it take the color is going to be a string.

577
01:12:09.750 --> 01:12:18.510
Ryan Mehta: The SVG URL, which is also a string and the on change.

578
01:12:19.590 --> 01:12:25.500
Ryan Mehta: Function which is going to take an event. In this case, it is a react.

579
01:12:28.080 --> 01:12:31.590
Ryan Mehta: Change event on an HTML.

580
01:12:33.150 --> 01:12:33.930
Ryan Mehta: Element.

581
01:12:40.080 --> 01:12:49.230
Ryan Mehta: So change event on an input element, we can restructure these props down here color speaking URL and on change.

582
01:12:50.850 --> 01:12:54.780
Ryan Mehta: And then we will put our two inputs onto the page.

583
01:12:56.850 --> 01:12:59.850
jasmin: Brian did you already talked about what boy and I missed it.

584
01:13:00.390 --> 01:13:02.430
Ryan Mehta: I just briefly.

585
01:13:02.970 --> 01:13:05.160
Ryan Mehta: Void means that it returns. Nothing.

586
01:13:05.250 --> 01:13:09.540
jasmin: So there is no return statement in the function. Oh, thanks.

587
01:13:14.610 --> 01:13:17.160
Ryan Mehta: And then the rest of this kind of looks like.

588
01:13:20.820 --> 01:13:23.940
Ryan Mehta: Normal anyways react.

589
01:13:39.660 --> 01:13:42.060
Ryan Mehta: Alright, here's our presentational components.

590
01:13:44.850 --> 01:13:50.310
Ryan Mehta: We have our color controls and our SVG URL stuff.

591
01:13:52.020 --> 01:13:53.070
Ryan Mehta: Let's go. Okay.

592
01:13:55.170 --> 01:13:59.040
Ryan Mehta: So the main thing that we're adding with TypeScript is the

593
01:14:01.710 --> 01:14:03.630
These types. These prop types.

594
01:14:06.030 --> 01:14:13.110
Ryan Mehta: And really, we've been adding these prop types, this whole time. Anyways, it's just different syntax to doing that same prop type sort of validation

595
01:14:15.360 --> 01:14:15.900
Ryan Mehta: Look good

596
01:14:19.410 --> 01:14:21.990
Ryan Mehta: All right, let's make a coloring book.

597
01:14:23.310 --> 01:14:24.510
Ryan Mehta: Yes, X file.

598
01:14:25.560 --> 01:14:37.830
Ryan Mehta: This is going to be our container. We're going to start off with a class container and then we'll make it into a function using hooks and then we'll finally use a custom hook at the very end.

599
01:14:39.030 --> 01:14:40.890
Ryan Mehta: So we're going to import react.

600
01:14:41.940 --> 01:14:48.120
Ryan Mehta: From react last so the structure stuff looks kind of similar component

601
01:14:49.350 --> 01:14:58.380
Ryan Mehta: Of this import or export class coloring book extends component

602
01:14:59.850 --> 01:15:00.450
Ryan Mehta: Excel.

603
01:15:03.240 --> 01:15:18.870
Ryan Mehta: Over here, our component is a generic. We have to specify what sort of props are component takes and what sort of state or componet's go to a browser. And here is our, our list of characters.

302
00:34:22.830 --> 00:34:29.340
Ryan Mehta: Good so far. We also have that little loading screen that pops up very quickly.

303
00:34:34.650 --> 00:34:35.160
Ryan Mehta: All right.

304
00:34:38.610 --> 00:34:43.710
Ryan Mehta: Before we go too far. I also want to refactor this test.

305
00:34:45.540 --> 00:34:46.410
Ryan Mehta: A little bit.

306
00:34:47.760 --> 00:34:52.980
Ryan Mehta: I am going to have a before each for each

307
00:34:54.510 --> 00:35:03.450
Ryan Mehta: In that before each I'm going to drop this mock resolved value so that when we don't have to put it in every single test.

308
00:35:05.400 --> 00:35:06.210
Ryan Mehta: That we're writing

309
00:35:08.850 --> 00:35:11.640
Ryan Mehta: A little bit nicer all the tests, it's still pass

310
00:35:14.730 --> 00:35:15.270
Ryan Mehta: Hopefully,

311
00:35:23.790 --> 00:35:29.490
Ryan Mehta: Okay, yeah, except for the AP test because we, I'm going to delete that test. We don't actually need it.

312
00:35:32.700 --> 00:35:35.880
Ryan Mehta: The app is where a router is going to be. We don't really need to test that.

313
00:35:36.300 --> 00:35:42.240
Jerud Moyer: Okay, I was running into that yesterday that same error. And I was driving me bonkers, so we can just get rid of that test.

314
00:35:42.570 --> 00:35:49.290
Ryan Mehta: Totally. If you want to get it to pass. You just need to mock your service there also because the app uses your container to

315
00:35:49.530 --> 00:35:51.240
Ryan Mehta: Try to make that API call.

316
00:35:51.690 --> 00:35:52.500
Jerud Moyer: Oh, man. Okay.

317
00:35:57.420 --> 00:36:08.940
Ryan Mehta: Okay, so we have passing tests. It's cleaned up a little bit. We also promised to do some error handling. So let's also do some error handling.

318
00:36:10.860 --> 00:36:17.850
Ryan Mehta: We also wanted to display an error message on error.

319
00:36:22.770 --> 00:36:27.360
Ryan Mehta: This time we're going to get characters. We're gonna mock

320
00:36:29.010 --> 00:36:32.460
Ryan Mehta: A rejected value. I think it is.

321
00:36:33.870 --> 00:36:39.810
Ryan Mehta: And we'll have our rejected value say unable to that.

322
00:36:41.220 --> 00:36:42.120
API.

323
00:36:43.140 --> 00:36:44.400
Ryan Mehta: Whatever we want, right.

324
00:36:46.440 --> 00:36:51.390
Ryan Mehta: And then we will render our all characters.

325
00:36:54.180 --> 00:36:57.000
Ryan Mehta: At some point, if the API rejects

326
00:36:58.350 --> 00:37:00.450
Ryan Mehta: We expect to be able to

327
00:37:07.560 --> 00:37:09.240
Ryan Mehta: Find on the screen.

328
00:37:32.310 --> 00:37:35.130
Ryan Mehta: Whatever, whatever error message we want to display to the user.

329
00:37:38.040 --> 00:37:38.760
Ryan Mehta: And

330
00:37:45.540 --> 00:37:55.380
Ryan Mehta: So if, if there's a reject if our API rejects we expect to see this text, something went wrong, try again later.

331
00:37:56.460 --> 00:38:02.250
Ryan Mehta: We could give them like the actual error message of the API gave us, but usually users don't care about that type of thing.

332
00:38:05.610 --> 00:38:10.860
Ryan Mehta: So we expected this unable to fetch to make it onto the page, but it never does right now.

333
00:38:13.380 --> 00:38:16.560
Ryan Mehta: Let's go to our container.

334
00:38:19.950 --> 00:38:20.640
Ryan Mehta: And

335
00:38:22.170 --> 00:38:23.640
Ryan Mehta: Do a few different things.

336
00:38:24.690 --> 00:38:32.760
Ryan Mehta: We want to make sure that this service throws an error when an error happens. So I'm going to go back one level to the service.

337
00:38:35.130 --> 00:38:37.740
Ryan Mehta: Right here before we process the JSON.

338
00:38:40.680 --> 00:38:41.280
That there.

339
00:38:43.710 --> 00:38:48.750
Ryan Mehta: Before we process the JSON, we can actually check to see if everything was okay.

340
00:38:50.370 --> 00:38:57.060
Ryan Mehta: So we can say something like, if Rez okay do something otherwise do something else.

341
00:38:58.500 --> 00:39:06.450
Ryan Mehta: In our case, our API always returns JSON, whether or not things are okay or not. So I am going to do a little trick.

342
00:39:08.460 --> 00:39:09.930
Ryan Mehta: Am I going to do a little trick.

343
00:39:10.980 --> 00:39:11.310
No.

344
00:39:12.630 --> 00:39:15.540
Ryan Mehta: I'm going to change this to a sink away. That's what I'm going to do.

345
00:39:17.010 --> 00:39:21.420
Ryan Mehta: And then we are going to get a raise. By awaiting fetch.

346
00:39:23.640 --> 00:39:27.360
Ryan Mehta: And then we will check to see if everything's okay

347
00:39:30.720 --> 00:39:34.350
Ryan Mehta: We'll also get our JSON by a waiting

348
00:39:37.290 --> 00:39:38.670
Ryan Mehta: Room JSON.

349
00:39:40.050 --> 00:39:41.010
Ryan Mehta: And then

350
00:39:44.880 --> 00:39:46.470
Ryan Mehta: If everything is OK.

351
00:39:48.780 --> 00:39:52.890
Ryan Mehta: We will return that JSON stuff.

352
00:39:56.070 --> 00:39:57.090
Ryan Mehta: Otherwise,

353
00:39:59.520 --> 00:40:07.440
Ryan Mehta: Actually, let's see if everything isn't okay can I like this pattern better everything isn't okay we're gonna throw an error.

354
00:40:10.140 --> 00:40:12.690
Ryan Mehta: Otherwise, we'll return our JSON stuff.

355
00:40:26.010 --> 00:40:34.290
Ryan Mehta: So if everything is in. Okay, what is able to effects from API error, otherwise we will return our JSON.

356
00:40:36.540 --> 00:40:38.070
Ryan Mehta: And are we missing.

357
00:40:45.810 --> 00:40:47.310
Ryan Mehta: This service kind of makes sense.

358
00:40:49.650 --> 00:40:54.810
Jerud Moyer: Like is I mean is, okay, something that that that API returns

359
00:40:55.590 --> 00:40:58.650
Ryan Mehta: It, it's something that fetch gives you

360
00:40:58.890 --> 00:41:02.370
Ryan Mehta: So this, it tells you if it got back a good status code.

361
00:41:02.430 --> 00:41:14.760
Ryan Mehta: So, okay, will only be true if you got to status code of 200 or tool for back if you got a status code of 444 hundred any of those. Okay, will be false. Cool.

362
00:41:17.370 --> 00:41:19.860
Ryan Mehta: So if we got back a bad status code we throw

363
00:41:21.120 --> 00:41:21.720
An error.

364
00:41:24.780 --> 00:41:28.410
Ryan Mehta: Back in all characters. Now we can go and catch that error.

365
00:41:32.370 --> 00:41:45.780
Ryan Mehta: And if there's an error. We will add that error to our state. So we'll add an error piece of state. If an error happened. We will set state with our error.

366
00:41:50.910 --> 00:41:53.790
Ryan Mehta: So, and in either case will set load into false

367
00:42:00.690 --> 00:42:04.860
Ryan Mehta: So in either case whether we aired or not loading will move to false.

368
00:42:06.030 --> 00:42:08.910
Ryan Mehta: If we're in a loading state will still display loading.

369
00:42:13.440 --> 00:42:18.150
Ryan Mehta: If we have an error, then we're going to return an H1.

370
00:42:19.410 --> 00:42:20.310
Ryan Mehta: That's a says

371
00:42:21.630 --> 00:42:23.820
Ryan Mehta: Something went wrong, try again later.

372
00:42:31.410 --> 00:42:42.390
Ryan Mehta: So if loading loading if air, something went wrong. If we don't have an if we're not loading and we don't have an error, only then do we display the character list.

373
00:42:45.480 --> 00:42:45.870
Ryan Mehta: Okay.

374
00:42:46.020 --> 00:42:47.640
Ryan Mehta: Now all of our tests pass

375
00:42:48.180 --> 00:42:54.930
Adrian Simental: One. What is getting added to the error state is just a true false Boolean, or is that the string. You have me

376
00:42:55.980 --> 00:43:00.030
Ryan Mehta: It's the string over here. So if you ever want to display this somewhere like

377
00:43:00.600 --> 00:43:13.860
Ryan Mehta: do multiple things conditionally based on the error message at the status code, you can do stuff like if you get four or four, you might want to send them back to the dashboard. If you get 500 you might want to tell them try again later or whatever.

378
00:43:16.530 --> 00:43:22.410
Ryan Mehta: So you could use this state to conditionally do other things and your component wanted to

379
00:43:33.450 --> 00:43:39.750
Ryan Mehta: Alright, that's the room. Okay, this container. We have a fully functioning all characters list.

380
00:43:41.730 --> 00:43:45.780
Ryan Mehta: Minus pagination, but it's okay. We'll get to pagination

381
00:43:47.820 --> 00:44:04.740
Ryan Mehta: Next thing that I want to do is write the same container, but in with a hook instead. And then finally, with a custom hook. But let's take a break. First, let's come back at 10 o'clock, and we will try to write this with using hooks.

382
00:44:08.700 --> 00:44:09.240
Ryan Mehta: Sounds good.

383
00:44:18.000 --> 00:44:26.130
Ryan Mehta: Okay, so we have this class based component all of our tests are passive right now I've copied this component into

384
00:44:27.720 --> 00:44:39.150
Ryan Mehta: Our all an all characters class file so you can refer back to it if you want to, but I'm going to refactor this now and delete everything from here and start again.

385
00:44:40.050 --> 00:44:48.540
Ryan Mehta: With the hook using hooks instead. So I'm just gonna delete all of this. Again, if you want to go back and see what we did for our class.

386
00:44:50.790 --> 00:44:55.050
Ryan Mehta: Component I stored it under all the characters class Jess x

387
00:44:57.450 --> 00:44:57.900
Ryan Mehta: All right.

388
00:44:59.250 --> 00:45:04.830
Ryan Mehta: I think we should have a bunch of failing tests now since I just deleted everything from that file.

389
00:45:06.360 --> 00:45:08.850
Ryan Mehta: Let's put this off and our tests over here.

390
00:45:10.290 --> 00:45:16.770
Ryan Mehta: To begin with, we're going to make a function based component. So I'm going to import react from react.

391
00:45:18.090 --> 00:45:22.410
Ryan Mehta: And then we're going to construct our all characters.

392
00:45:27.960 --> 00:45:29.700
Ryan Mehta: Characters function.

393
00:45:32.880 --> 00:45:36.330
Ryan Mehta: Then we're going to export all characters.

394
00:45:37.800 --> 00:45:38.850
Ryan Mehta: Look good so far.

395
00:45:40.950 --> 00:45:44.640
Ryan Mehta: All right, we're gonna have a piece of steak called loading.

396
00:45:49.260 --> 00:45:49.830
Loading

397
00:45:51.270 --> 00:45:53.910
Ryan Mehta: That will start off as

398
00:45:57.240 --> 00:46:00.090
Ryan Mehta: Let's make sure that we import state.

399
00:46:03.180 --> 00:46:13.470
Ryan Mehta: And then we're gonna say if we are in a loading space we're going to return an H1 that says loading.

400
00:46:16.080 --> 00:46:27.120
Ryan Mehta: I think that should get at least one of those tests that we caused a fail to pass to loading one. So now we only have two failures, the one about an error message. And the one

401
00:46:28.290 --> 00:46:30.000
Ryan Mehta: About our list of characters.

402
00:46:31.770 --> 00:46:32.730
Ryan Mehta: Next thing to do.

403
00:46:34.350 --> 00:46:36.060
Ryan Mehta: Is construct our character state.

404
00:46:43.500 --> 00:46:46.170
Ryan Mehta: Our character season to start off as an empty array.

405
00:46:47.580 --> 00:46:50.580
Ryan Mehta: And then we're going to use the use effect.

406
00:46:52.950 --> 00:46:57.420
Ryan Mehta: Let's make sure VS Code auto imports this right

407
00:46:59.700 --> 00:47:07.920
Ryan Mehta: Inside of we only want this book to run on Mount. So we're going to pass an empty array tease effect as the second argument here.

408
00:47:08.910 --> 00:47:27.750
Ryan Mehta: And then we're going to use our get characters service to affect your list of characters. Once we're done fetching our list of characters will get back our best characters and we'll set our character state to that list of fetched characters.

409
00:47:28.980 --> 00:47:30.270
Ryan Mehta: And then finally,

410
00:47:31.410 --> 00:47:37.320
Ryan Mehta: Once we're done fetching our characters we will set our loading state to false.

411
00:47:39.390 --> 00:47:51.180
Ryan Mehta: And then we'll say, if we're not in a loading state. We will return our character list passing it our characters piece of state.

412
00:47:52.440 --> 00:47:53.100
Like so.

413
00:47:54.720 --> 00:48:00.300
Ryan Mehta: And now I think we should just have one failing test for all that

414
00:48:02.310 --> 00:48:02.880
Let's see.

415
00:48:06.990 --> 00:48:10.620
Ryan Mehta: What is it complaining about that. Oh, that might be okay, actually.

416
00:48:11.700 --> 00:48:15.390
Ryan Mehta: So yeah, now we just have our one failing tests on air.

417
00:48:17.460 --> 00:48:28.170
Ryan Mehta: This makes sense. We have our loading state our character state when the component first mounts we fetch her list of characters we would get that list of characters we set our character state.

418
00:48:28.680 --> 00:48:37.380
Ryan Mehta: We set our loading state to false if we're in a loading state we display our loading message, otherwise we display our characters list.

419
00:48:41.730 --> 00:48:44.550
Ryan Mehta: All right, we have one more piece of steak to add

420
00:48:46.020 --> 00:48:47.280
Ryan Mehta: Or error state.

421
00:48:49.830 --> 00:49:03.150
Ryan Mehta: This state will start off as know to begin with. If there's an error, while fetching our character will catch that error and we'll set our error state.

422
00:49:05.850 --> 00:49:15.390
Ryan Mehta: If we're loading will display our loading message if there's an error. And we're not loading, then we will display our error message.

423
00:49:17.400 --> 00:49:21.870
Ryan Mehta: Which said, Say something went wrong, try again later.

424
00:49:22.950 --> 00:49:24.000
Ryan Mehta: Copy that.

425
00:49:25.290 --> 00:49:25.920
Ryan Mehta: Here.

426
00:49:31.980 --> 00:49:48.930
Ryan Mehta: So loading state character state error state fetch from our API. If everything goes well set our character state if something goes bad set our errors, say in either case when we're done fetching set are loading state to false.

427
00:49:50.040 --> 00:49:58.770
Ryan Mehta: If we're currently in a loading state return loading if there was an error return an error otherwise return our character list.

428
00:50:02.220 --> 00:50:07.500
Ryan Mehta: And let's see what is going wrong with our test.

429
00:50:08.550 --> 00:50:13.560
Ryan Mehta: All of them pass a few of you got this thing the other day to write

430
00:50:15.000 --> 00:50:16.410
Ryan Mehta: This like whole acting

431
00:50:21.540 --> 00:50:25.500
Ryan Mehta: Why, why, why did we get this

432
00:50:29.490 --> 00:50:30.570
Ryan Mehta: I have a feeling

433
00:50:32.850 --> 00:50:33.840
Ryan Mehta: If we

434
00:50:37.800 --> 00:50:43.410
Ryan Mehta: Would if we ignore this test the loading test to still get done.

435
00:50:45.540 --> 00:50:49.860
Ryan Mehta: We're done. So it's about this loading test. I think what's happening.

436
00:50:51.000 --> 00:50:55.380
Ryan Mehta: So that error message this stuff. Whenever you see that act error message.

437
00:50:56.970 --> 00:51:03.150
Ryan Mehta: It means that you tried to change state after your test finished. So here we get it again.

438
00:51:04.890 --> 00:51:06.840
Ryan Mehta: Which makes sense for this loading one

439
00:51:07.950 --> 00:51:18.900
Ryan Mehta: Because we check it. The loading screen is there. Once we see it, we end the test the loading screen is there when the component first mounts the test ends.

440
00:51:20.130 --> 00:51:27.390
Ryan Mehta: But after the test ends this use effect is still like in play and still affection from the API.

441
00:51:28.530 --> 00:51:36.180
Ryan Mehta: After the test ends the promise resolves and we set a piece of state afterwards, which is no good0
Ryan Mehta: For the benefit of our tests. So a little bit different than what we've been doing. We're going to put the router at the top level, I will still have our switching routes inside of app JS, but we'll put the router up a little bit more

328
00:33:06.210 --> 00:33:08.970
Ryan Mehta: Yes, will make testing easier. We'll see in a second.

329
00:33:13.140 --> 00:33:21.900
Ryan Mehta: And then in our app JS or replace this will still use our switch looking for

330
00:33:24.240 --> 00:33:24.960
Ryan Mehta: The route.

331
00:33:36.630 --> 00:33:38.250
Ryan Mehta: Will still put our routes here.

332
00:33:39.480 --> 00:33:41.910
Ryan Mehta: Like we normally do. We just won't have the

333
00:33:44.820 --> 00:33:47.850
Ryan Mehta: The router in this file, it's back in index JS.

334
00:33:48.930 --> 00:34:01.440
Ryan Mehta: And we're also going to import provider from React redux here and we'll wrap our app provider inside of this file.

335
00:34:04.350 --> 00:34:19.560
Ryan Mehta: And then instead of behavior, using our behavior test to test each individual component we will use our behavior tests to only test app JS. So there are three types of tests that we have. I kind of want to keep this

336
00:34:23.400 --> 00:34:31.770
Ryan Mehta: There are three types of tests that we've seen in react so far. The first type of test where our snapshot tests.

337
00:34:36.180 --> 00:34:40.590
Ryan Mehta: These were pretty convenient for purely presentational components.

338
00:34:47.490 --> 00:34:51.990
Ryan Mehta: The second type of tests that we saw where our behavior tests.

339
00:34:56.100 --> 00:35:04.500
Ryan Mehta: These are good for me interactions testing, like the business logic of our app, how things behave so like containers.

340
00:35:07.500 --> 00:35:08.490
Ryan Mehta: And like

341
00:35:09.780 --> 00:35:17.070
Ryan Mehta: Yeah, containers, say, and then yesterday we saw third type of tests that we didn't name called unit tests.

342
00:35:19.260 --> 00:35:22.680
Ryan Mehta: You've done unit tests in the past. These are testing functions. Right.

343
00:35:27.300 --> 00:35:33.030
Ryan Mehta: For testing our functions producers action creators whatever whatever pure functions we have on our page.

344
00:35:34.320 --> 00:35:40.650
Ryan Mehta: Will still do the same sort of thing except so this will be for testing all of our Redux

345
00:35:42.900 --> 00:35:46.770
Ryan Mehta: This will be used to test any purely presentational components.

346
00:35:49.380 --> 00:35:52.080
Ryan Mehta: In this app. I don't think we're going to end up with any

347
00:35:53.880 --> 00:36:01.530
Ryan Mehta: Actually, we will will end up with some presentational components. And then this one will be used to only test app.

348
00:36:02.790 --> 00:36:08.010
Ryan Mehta: So we'll only have one component that we behavior test that's going to be app JS.

349
00:36:09.750 --> 00:36:18.600
Ryan Mehta: So our entire application will flow through app JS. That's what a user sees anyways. So this will only be used on app JS.

350
00:36:29.850 --> 00:36:41.550
Ryan Mehta: All right, let's continue scaffolding this thing and then we can take a break provider expects us to pass it a stork, so we will create a storage as

351
00:36:46.410 --> 00:36:47.040
Ryan Mehta: Loops.

352
00:36:49.800 --> 00:36:52.710
Ryan Mehta: We're going to import stuff.

353
00:36:54.330 --> 00:37:02.430
Ryan Mehta: To the docks at the very least will need create store and then we will export the fault.

354
00:37:04.980 --> 00:37:14.040
Ryan Mehta: Store create store expects us to pass it a reducer in our application in our plan. We said that we're going to end up with

355
00:37:15.390 --> 00:37:24.330
Ryan Mehta: Three producers. So at the very least, we're going to need a combine reducer. So to start off with. I will create a reduced to this folder.

356
00:37:25.650 --> 00:37:30.270
Ryan Mehta: And the index JS file for our combined reducer.

357
00:37:35.160 --> 00:37:37.740
Ryan Mehta: Looking for combined producers.

358
00:37:38.760 --> 00:37:39.480
Ryan Mehta: export it.

359
00:37:41.730 --> 00:37:54.810
Ryan Mehta: Eventually will put all of our producers into this object right to combine them. But for now, this is enough to scaffold out our store. So in our store will import producers.

360
00:37:56.370 --> 00:38:04.680
Ryan Mehta: And path to to our create store. We also said that we wanted to use our think middleware. So we're going to need to apply middleware.

361
00:38:05.850 --> 00:38:07.500
Ryan Mehta: And import

362
00:38:13.410 --> 00:38:15.660
Ryan Mehta: Will apply that middleware fear.

363
00:38:17.010 --> 00:38:27.240
Ryan Mehta: And then we probably also want to use the Redux dev tools. So we're bringing compose and look up Redux dev tools.

364
00:38:28.380 --> 00:38:31.290
Ryan Mehta: To get that line of code that we need

365
00:38:35.730 --> 00:38:38.820
Ryan Mehta: This line compose enhancers stuff.

366
00:38:42.450 --> 00:38:47.280
Ryan Mehta: So we will have this compose enhancers thing and then use compose

367
00:38:49.290 --> 00:38:50.430
Ryan Mehta: Stirs

368
00:38:54.960 --> 00:39:01.500
Ryan Mehta: Alright so scaffold it out our store we gave it kind of a silly reducer. For now, a reducer that doesn't really do anything.

369
00:39:02.640 --> 00:39:11.430
Ryan Mehta: We applied our funk middleware and our Redux Dev Tools back in app JS, we can pass this store to our provider.

370
00:39:20.700 --> 00:39:21.330
Like so.

371
00:39:23.640 --> 00:39:27.900
Ryan Mehta: And now I think our Redux stuff is for the most part scaffold that out.

372
00:39:29.790 --> 00:39:37.080
Ryan Mehta: At this point, we have a few choices. We can either start by creating some of our components.

373
00:39:38.100 --> 00:39:41.100
Ryan Mehta: Or we can start by handling our

374
00:39:42.240 --> 00:39:44.100
Ryan Mehta: Like reducer logic stuff.

375
00:39:45.930 --> 00:39:47.910
Ryan Mehta: Anybody have a preference for one or the other.

376
00:39:52.920 --> 00:39:53.310
Ryan Mehta: No.

377
00:39:54.840 --> 00:39:55.230
Ryan Mehta: Okay.

378
00:39:56.580 --> 00:39:57.240
Ryan Mehta: Component.

379
00:39:58.590 --> 00:40:01.500
Ryan Mehta: Component. Okay, let's start off with our component

380
00:40:02.520 --> 00:40:02.970
Brooke Perkins (she/her): What

381
00:40:04.200 --> 00:40:05.490
Brooke Perkins (she/her): Is this thing. Sounds good.

382
00:40:05.910 --> 00:40:06.360
Cool.

383
00:40:07.680 --> 00:40:09.030
Ryan Mehta: Let's start off with

384
00:40:12.090 --> 00:40:14.760
Ryan Mehta: Our header component, then

385
00:40:16.620 --> 00:40:30.540
Ryan Mehta: We'll build out this header component, it will need access to our state, but we can at least start with the visuals and then figure out what state, we need to create in order to get the header component to work will probably need

386
00:40:33.240 --> 00:40:40.110
Ryan Mehta: Will need all of our producers because of the reducer pattern that we chose we've split out the

387
00:40:41.130 --> 00:40:47.010
Ryan Mehta: The headers state into three different reducer so end up needing three different producers.

388
00:40:49.470 --> 00:40:50.130
Ryan Mehta: But it's cool.

389
00:40:52.800 --> 00:40:58.410
Ryan Mehta: All right, let's take a break. Let's come back at 955 and then we'll start with our header component

390
00:41:01.200 --> 00:41:02.250
Ryan Mehta: I'm good, thank you.

391
00:41:07.560 --> 00:41:08.100
Ryan Mehta: So,

392
00:41:09.450 --> 00:41:21.270
Ryan Mehta: We decided that we're going to write our header component. First, I think this is a great idea. We can behavior test this thing so we could just let our behavior test drive our application development.

393
00:41:22.860 --> 00:41:26.640
Ryan Mehta: Back in our app component test, I'm just going to delete all of this.

394
00:41:27.870 --> 00:41:42.480
Ryan Mehta: We won't need any of that stuff the snapshot test or whatever we're going to use this file to behavior test or application, we said that we wanted to start off by behavior testing the header component. I'm going to put a nested described in here.

395
00:41:45.750 --> 00:41:47.730
Ryan Mehta: We're going to test our header.

396
00:41:50.910 --> 00:42:00.000
Ryan Mehta: Since we're going to be using the same file to behavior test all of our components will have a disk a nested described for each page of our application.

397
00:42:00.840 --> 00:42:14.610
Ryan Mehta: So the header component and then we'll have another describe for the home. The diff and the common the describes don't do anything. Functionally, they're just our way of organizing code. So we'll have one described per page.

398
00:42:17.940 --> 00:42:23.340
Ryan Mehta: All right, first thing that we want to do with start off with making it so we can type into

399
00:42:24.540 --> 00:42:34.740
Ryan Mehta: This subreddit box there should also be, I think, a button here since we decided on this structure to choose that subreddit

400
00:42:35.790 --> 00:42:48.570
Ryan Mehta: After we choose that subreddit. Let's say that on the page it somewhere will display now searching for the subreddit that we chose or some text and the subreddit that we chose

401
00:42:49.710 --> 00:42:53.790
Ryan Mehta: So let's say it selects a subreddit

402
00:42:57.330 --> 00:43:09.660
Ryan Mehta: Alright, first thing that we're going to do is render our app. Since our app no longer has the router inside of it. We need to wrap it with the memory router. So we'll wrap it with

403
00:43:11.130 --> 00:43:17.760
Ryan Mehta: Memory router. This will be convenient because this will be our way of choosing which page we go on, I think there's that like

404
00:43:18.300 --> 00:43:35.220
Ryan Mehta: initial entry thing that will eventually be able to use to switch between our pages by passing and different strings here. So that's the goal or. That's the idea. Anyways, with these tests, we will render our app inside of our memory router.

405
00:43:37.050 --> 00:43:38.880
Ryan Mehta: Let's run these tests.

406
00:43:41.760 --> 00:43:44.610
Ryan Mehta: That should work just fine. There shouldn't be any

407
00:43:45.930 --> 00:43:47.700
Ryan Mehta: Failure. Yep.

408
00:43:48.720 --> 00:43:55.050
Ryan Mehta: And then once we render that we expect to be able to find this input that we're going to be typing into

409
00:43:56.580 --> 00:43:58.020
Ryan Mehta: So we'll call that

410
00:44:02.220 --> 00:44:07.290
Ryan Mehta: Read it in perks. We're going to take the screen.

411
00:44:11.430 --> 00:44:12.750
Ryan Mehta: And we'll get

412
00:44:16.440 --> 00:44:18.030
Ryan Mehta: By label taxed.

413
00:44:22.080 --> 00:44:36.570
Ryan Mehta: This should fail because that button or that input doesn't exist on the page. So it tells us that it couldn't find a label with subreddit in it. Let's go and start creating our header, we're going to create a header component

414
00:44:39.090 --> 00:44:42.570
Ryan Mehta: It's going to be a function

415
00:44:43.980 --> 00:44:45.660
Ryan Mehta: You won't need any prop types.

416
00:44:52.890 --> 00:44:54.360
Ryan Mehta: Will return

417
00:44:57.930 --> 00:45:02.220
Ryan Mehta: And execute this can go inside of a header tag. Great.

418
00:45:04.860 --> 00:45:11.070
Ryan Mehta: That seems like the right tag to use for this type of thing inside of the header tag will have a label.

419
00:45:12.450 --> 00:45:14.100
Ryan Mehta: Called subreddit

420
00:45:15.930 --> 00:45:18.870
Ryan Mehta: HTML for subreddit

421
00:45:24.300 --> 00:45:26.460
Ryan Mehta: What is Why you so read

422
00:45:27.600 --> 00:45:28.200
Articles

423
00:45:29.310 --> 00:45:31.200
Ryan Mehta: And then we'll have our input.

424
00:45:32.670 --> 00:45:34.170
type text.

425
00:45:36.900 --> 00:45:41.550
Ryan Mehta: So I think that at least gets the test to pass KB.

426
00:45:47.640 --> 00:45:48.540
Ryan Mehta: Pretty close.

427
00:45:54.300 --> 00:45:55.890
Okay that's decent

428
00:45:57.390 --> 00:46:08.100
Ryan Mehta: I realized I realized now and it's complaining about our combined reducer because we have no producers in here so has no idea what to do.

429
00:46:09.780 --> 00:46:12.150
Ryan Mehta: We're eventually going to want our subreddit reducer.

430
00:46:14.340 --> 00:46:15.870
Ryan Mehta: So let's do something like this.

431
00:46:18.450 --> 00:46:24.960
Ryan Mehta: Producers are just function. So I may send a scaffold it like this just so our test sort of passes think

432
00:46:28.800 --> 00:46:31.350
Ryan Mehta: reducer subreddit returns undefined.

433
00:46:36.000 --> 00:46:36.360
Over

434
00:46:40.830 --> 00:46:47.070
Ryan Mehta: Okay, so I'm just like creating something a placeholder here for us to fill in later. This is not what it's actually going to look like.

435
00:46:49.230 --> 00:46:59.730
Ryan Mehta: Unable to find a label with the text subreddit makes sense because even though we've created this header component. We actually have a put it in our app JS yet.

436
00:47:01.170 --> 00:47:06.150
Ryan Mehta: So we'll need to put this into App JS X. It's put it at the top.

437
00:47:07.350 --> 00:47:08.040
Ryan Mehta: Header

438
00:47:13.320 --> 00:47:14.580
Ryan Mehta: And now.

439
00:47:16.170 --> 00:47:17.220
Ryan Mehta: Let's see what we get.

440
00:47:19.530 --> 00:47:21.270
Ryan Mehta: Their label subreddit

441
00:47:22.650 --> 00:47:32.640
Ryan Mehta: Found a label with the text of subreddit, however, no form control was found associated with that label. Okay, so we have our label, we need to give this input.

442
00:47:34.200 --> 00:47:40.560
Ryan Mehta: An ID subreddit to associate it with the label that's what connects this HTML for to the input.

443
00:47:41.910 --> 00:47:43.890
Ryan Mehta: Now we have our little passing test.

444
00:47:45.900 --> 00:47:46.860
Ryan Mehta: With good so far.

445
00:47:49.740 --> 00:47:54.660
Ryan Mehta: Right back in our tests, we now have our subreddit input. We also want a

446
00:47:56.400 --> 00:48:02.790
Ryan Mehta: A button that lets us like actually save that separate input, like a submit button.

447
00:48:03.960 --> 00:48:06.780
Ryan Mehta: Right, this sort of thing right there.

448
00:48:08.520 --> 00:48:11.520
Ryan Mehta: So it's good to read it but

449
00:48:13.080 --> 00:48:14.670
Ryan Mehta: We will get it by

450
00:48:21.150 --> 00:48:32.670
Ryan Mehta: What can we get it by function or my role we can get it by role. Yeah, but there's going to be a few of these buttons on the page, right.

451
00:48:34.320 --> 00:48:39.900
Ryan Mehta: They get it by role will get all because we're going to have three buttons. It won't know what to define the buttons.

452
00:48:40.080 --> 00:48:41.580
Ryan Mehta: Yeah yeah

453
00:48:43.200 --> 00:48:44.880
Ryan Mehta: So maybe we get it by test ID.

454
00:48:47.760 --> 00:48:49.560
Ryan Mehta: Put a test ID on it and

455
00:48:49.620 --> 00:48:53.040
Ryan Mehta: It'll be our sub reddit button.

456
00:48:55.200 --> 00:48:58.950
Ryan Mehta: Test ID. This should fail because there is no button on the page.

457
00:49:00.000 --> 00:49:09.030
Ryan Mehta: Good couldn't find it. Let's go back. Let's actually splitters header over to the right here. Let's put this button on the page.

458
00:49:12.390 --> 00:49:14.400
Ryan Mehta: What should the text be inside of this button.

459
00:49:19.380 --> 00:49:20.910
Ryan Mehta: So we put inside of here.

460
00:49:24.990 --> 00:49:25.410
Greg Mall: Man.

461
00:49:28.830 --> 00:49:29.640
Ryan Mehta: To be submitted.

462
00:49:32.130 --> 00:49:36.960
Thomas Stussi: Okay, this whole thing be like a form that does all three input simultaneously.

463
00:49:38.460 --> 00:49:46.830
Ryan Mehta: What we decided to go with this second version. So yeah, we. Once this title value, it would use context to get it.

271
00:30:17.640 --> 00:30:24.720
Brooke Perkins (she/her): And I guess I'm curious if children have like the one receiving the context received the context as well.

272
00:30:25.500 --> 00:30:26.340
Ryan Mehta: Yeah, so

273
00:30:26.520 --> 00:30:27.390
Ryan Mehta: Display would

274
00:30:27.480 --> 00:30:32.190
Ryan Mehta: So you'd only have the context provider that title context provider an app.

275
00:30:33.270 --> 00:30:39.750
Ryan Mehta: And they would surround display. And then all of displays ancestors would have access to that same context.

276
00:30:40.830 --> 00:30:44.880
Brooke Perkins (she/her): Oh, I see. Okay, so they all so the children of the receiving

277
00:30:47.340 --> 00:30:49.020
Brooke Perkins (she/her): Component do receive

278
00:30:50.550 --> 00:30:50.880
Ryan Mehta: This

279
00:30:51.120 --> 00:30:52.980
Brooke Perkins (she/her): Text as well. Okay, gotcha.

280
00:30:53.310 --> 00:30:55.830
Ryan Mehta: Let's actually try to make this really quick. So

281
00:30:56.070 --> 00:31:09.990
Ryan Mehta: I'm going to make actually won't be that long. It'll just be kind of silly looking maybe let's make a display or J SX and a title sex. So in our title J SX

282
00:31:12.330 --> 00:31:18.120
Ryan Mehta: This is where we will actually like display some text.

283
00:31:19.530 --> 00:31:20.100
Ryan Mehta: Like so.

284
00:31:22.080 --> 00:31:24.930
Ryan Mehta: Let's see if we can put all of these

285
00:31:26.460 --> 00:31:27.600
Ryan Mehta: On the page.

286
00:31:31.080 --> 00:31:34.680
Ryan Mehta: In some way that doesn't look grandis

287
00:31:36.120 --> 00:31:43.800
Ryan Mehta: Okay, so I'm kind of starting from the top, that this is the parent. This one is going to be

288
00:31:45.960 --> 00:31:50.100
Ryan Mehta: Our kind of middle component

289
00:31:51.120 --> 00:31:55.830
Ryan Mehta: It's going to use the title component

290
00:31:57.960 --> 00:32:01.770
Ryan Mehta: And then display is going to use

291
00:32:06.180 --> 00:32:07.740
Ryan Mehta: This player.

292
00:32:13.470 --> 00:32:13.920
Ryan Mehta: So,

293
00:32:15.150 --> 00:32:18.420
Ryan Mehta: And then back over here. Let's just have control display.

294
00:32:20.520 --> 00:32:22.830
Ryan Mehta: All right, so we have

295
00:32:24.030 --> 00:32:25.620
Ryan Mehta: This sort of structure now.

296
00:32:27.540 --> 00:32:32.520
Ryan Mehta: There's two ways to get the title. Let's say app has some

297
00:32:35.130 --> 00:32:36.150
Ryan Mehta: Value title.

298
00:32:38.040 --> 00:32:49.590
Ryan Mehta: So let's go before we have the notion of this title context if we want to get this title value from App, all the way down to title.

299
00:32:50.760 --> 00:32:52.920
Ryan Mehta: We have the option of passing it

300
00:32:54.810 --> 00:33:01.740
Ryan Mehta: Like so to display and then now display receives a title.

301
00:33:03.210 --> 00:33:06.270
Ryan Mehta: Piece of state and would have to pass that title.

302
00:33:07.590 --> 00:33:09.210
Ryan Mehta: To display or

303
00:33:10.320 --> 00:33:12.090
Ryan Mehta: Display or would receive

304
00:33:13.140 --> 00:33:17.280
Ryan Mehta: That title and then pass that title to title.

305
00:33:20.730 --> 00:33:25.680
Ryan Mehta: And then title would receive that title and display it.

306
00:33:29.160 --> 00:33:36.480
Ryan Mehta: Right, so we're passing title from app to display from display to display or from display or to title.

307
00:33:37.620 --> 00:33:40.230
Ryan Mehta: And I think it should work.

308
00:33:41.850 --> 00:33:42.090
Ryan Mehta: There's

309
00:33:42.450 --> 00:33:43.230
Why

310
00:33:44.910 --> 00:33:45.930
Ryan Mehta: Why would we do that.

311
00:33:46.290 --> 00:33:46.830
Yeah.

312
00:33:48.960 --> 00:33:50.490
Ryan Mehta: Maybe, maybe that's the only like

313
00:33:50.550 --> 00:34:06.090
Ryan Mehta: Maybe only title cares. I mean, it's such a like silly example, but you could have. I don't know. Try to imagine an app where this type of thing happens because it does happen. It's called prop drilling where you have some value way at the top of your component

314
00:34:06.090 --> 00:34:13.320
Ryan Mehta: Tree that you need to get to a great, great grand like some ancestor way down the tree.

315
00:34:14.520 --> 00:34:15.510
Ron Yonker: Yeah, that's horrible.

316
00:34:16.170 --> 00:34:20.250
Ryan Mehta: Yep. And this is what it would look like, right, like display doesn't actually

317
00:34:20.250 --> 00:34:21.750
Ryan Mehta: Care about title display.

318
00:34:21.750 --> 00:34:28.890
Ryan Mehta: Or doesn't actually care about titles only down at this, like, great, great, great ancestor that you care about title, it's painful to have to

319
00:34:28.890 --> 00:34:29.520
ryan Diffenbaugh: Pass it

320
00:34:30.390 --> 00:34:31.440
Ryan Mehta: down like this.

321
00:34:32.970 --> 00:34:37.200
Ryan Mehta: One solution to that is to use our context provider.

322
00:34:38.610 --> 00:34:40.230
Ryan Mehta: And pass the title.

323
00:34:46.140 --> 00:34:52.020
Ryan Mehta: Through the context provider now display doesn't need this title property more

324
00:34:54.810 --> 00:34:56.490
Ryan Mehta: And it doesn't need to pass.

325
00:34:58.890 --> 00:35:10.200
Ryan Mehta: That title to display or anymore display or doesn't take this title anymore because they need to pass it to Title instead title.

326
00:35:11.490 --> 00:35:14.700
Ryan Mehta: Our title component will ask

327
00:35:16.140 --> 00:35:18.270
Ryan Mehta: For that title by

328
00:35:21.600 --> 00:35:26.430
Ryan Mehta: Using context. And then the title context.

329
00:35:28.620 --> 00:35:30.330
Ryan Mehta: And no longer receives a profit.

330
00:35:31.470 --> 00:35:51.030
Ryan Mehta: So instead of manually passing it all the way down to its greatest ancestor, we provide this value in a bucket and whoever wants this value can request it instead of being past it. And in this case, I think everything works just like it did before.

331
00:35:53.340 --> 00:35:55.110
Ryan Mehta: So the grand ancestors are

332
00:35:55.110 --> 00:35:55.290
Ryan Mehta: They

333
00:35:55.380 --> 00:36:04.020
Ryan Mehta: All the ancestors of display really all the ancestors of this provider have access to the value in this bucket here.

334
00:36:06.330 --> 00:36:10.500
Adrian Simental: Who we should the value for title context in Title context objects.

335
00:36:12.210 --> 00:36:12.900
Ryan Mehta: Over here.

336
00:36:14.670 --> 00:36:18.240
Adrian Simental: In title context entitled context. I see.

337
00:36:18.240 --> 00:36:19.980
Ryan Mehta: So can you do something here.

338
00:36:20.490 --> 00:36:22.470
Adrian Simental: You can put values in there.

339
00:36:23.490 --> 00:36:23.820
Hello.

340
00:36:25.110 --> 00:36:26.700
Ryan Mehta: So if we put hello here.

341
00:36:27.150 --> 00:36:27.960
Ryan Mehta: Like this.

342
00:36:28.680 --> 00:36:29.910
Ryan Mehta: We still have hi there.

343
00:36:31.080 --> 00:36:34.860
Ryan Mehta: But if I I think if we

344
00:36:36.060 --> 00:36:38.820
Ryan Mehta: Remove this value here.

345
00:36:43.170 --> 00:36:43.470
Nope.

346
00:36:44.760 --> 00:36:45.240
Doesn't work.

347
00:36:49.890 --> 00:37:01.800
Ryan Mehta: Yeah, unfortunately can't, although I thought this thing says default value, but I've never had luck getting this to work, you probably wouldn't want that. Anyways, because then it would just be a static

348
00:37:02.850 --> 00:37:14.460
Ryan Mehta: It'd be a constant. The, the real advantage to this right now. We haven't really seen it yet is when we transition title into state. So we make it stable and changeable.

349
00:37:24.090 --> 00:37:27.960
Ryan Mehta: All right. Does this seem okay all right now this crop drilling solution.

350
00:37:28.800 --> 00:37:30.960
Brooke Perkins (she/her): Seems like a thing that will get us a job.

351
00:37:31.860 --> 00:37:32.730
Ryan Mehta: Yeah, totally.

352
00:37:33.150 --> 00:37:35.340
Ryan Mehta: This is another thing that could totally get you a job.

353
00:37:37.260 --> 00:37:38.670
Ron Yonker: You mean knowing context.

354
00:37:39.390 --> 00:37:39.870
Yeah.

355
00:37:41.250 --> 00:37:46.170
Ryan Mehta: It's a super important concept and not used very often because

356
00:37:47.310 --> 00:37:59.940
Ryan Mehta: It's the context API isn't new, but the context API. But it was very hard before hooks came out, it was like very ugly looking syntax and now it's kind of like this. It seems so nice.

357
00:38:01.470 --> 00:38:06.840
Ron Yonker: So what you're saying is we should all build a final project that uses hawks and context API.

358
00:38:08.070 --> 00:38:17.760
Ryan Mehta: Yeah, you're probably going to be forced to anyways if you use any sort of user off because we're only going to think about user off from this context provider perspective.

359
00:38:23.730 --> 00:38:25.290
Ryan Mehta: All right, let's

360
00:38:25.650 --> 00:38:27.840
Ryan Mehta: Let's destroy all of these

361
00:38:31.080 --> 00:38:40.650
Ryan Mehta: Intermediate components. Let's go back to display having an H1 where has title.

362
00:38:43.110 --> 00:38:45.030
Ryan Mehta: And title.

363
00:38:48.210 --> 00:38:49.050
Context.

364
00:38:51.300 --> 00:38:52.020
Context.

365
00:38:57.030 --> 00:38:58.560
Ryan Mehta: Oops, I deleted one

366
00:39:07.560 --> 00:39:08.850
Ryan Mehta: Alright, does this look good.

367
00:39:12.180 --> 00:39:16.380
Ryan Mehta: Let's bring controls over here to the left. Also,

368
00:39:17.790 --> 00:39:25.410
Ryan Mehta: We can do the same thing in controls. So we want to grab the same title value and pass it to the value of our input.

369
00:39:26.760 --> 00:39:29.760
Ryan Mehta: So we'll do the same sort of thing. We will grab title.

370
00:39:31.080 --> 00:39:32.520
Ryan Mehta: From our

371
00:39:33.690 --> 00:39:35.430
Ryan Mehta: Title context bucket.

372
00:39:43.230 --> 00:39:45.600
Ryan Mehta: Use that title as our value.

373
00:39:46.740 --> 00:39:49.170
Ryan Mehta: Now, when we go back to the page.

374
00:39:50.340 --> 00:39:51.540
Ryan Mehta: We should see

375
00:39:54.060 --> 00:39:58.350
Ryan Mehta: Are we not, oh, we forgot to I forgot to bring back the controls.

376
00:40:00.150 --> 00:40:10.770
Ryan Mehta: On our app. So now we see hi there inside of our input and we see hi there as some accident hi there underneath.

377
00:40:12.120 --> 00:40:15.510
Ryan Mehta: They're both sharing that same piece of state from the bucket.

378
00:40:19.980 --> 00:40:25.890
Ryan Mehta: So grabbing our context, our title value and using our title value here.

379
00:40:30.000 --> 00:40:31.080
Ryan Mehta: That look good day everyone.

380
00:40:35.340 --> 00:40:42.960
Ryan Mehta: And then same in display grabbing the title and using the title that title is coming from this value here.

381
00:40:45.060 --> 00:40:54.000
Ryan Mehta: Alright, next thing that we want to do. I think our display as complete as it is. We want to be able to handle a change in our control.

382
00:40:55.200 --> 00:41:06.150
Ryan Mehta: So when you type into the input, we should be able to change title. That means title shouldn't be just a plain string, it should be staple. Right. It should be a piece of state that we can change.

383
00:41:07.770 --> 00:41:10.080
Ryan Mehta: So I'm going to convert this to

384
00:41:11.670 --> 00:41:14.190
Ryan Mehta: A piece of state stay

385
00:41:15.570 --> 00:41:21.750
Ryan Mehta: There that will default the Hi there, just so it looks like it did before. Let me make sure that

386
00:41:22.890 --> 00:41:24.030
Ryan Mehta: Auto import

387
00:41:26.490 --> 00:41:27.750
Ryan Mehta: Isn't the something silly.

388
00:41:29.220 --> 00:41:41.640
Ryan Mehta: And then, in addition to passing our title to all of our providers children in addition to having title in our bucket. We're also going to put that title. This should have been set.

389
00:41:42.930 --> 00:41:51.060
Ryan Mehta: Title into our bucket as well. So now we're a bucket has both title and set title.

390
00:41:53.130 --> 00:42:06.480
Ryan Mehta: Back over on the left hand side, we can distribute your title off of our context and set title off of our context. And then in our handle change function will use that set title.

391
00:42:08.580 --> 00:42:11.430
Ryan Mehta: set our title value.

392
00:42:16.380 --> 00:42:30.720
Ryan Mehta: So we're basically passing set title as a prop to controls, but instead of explicitly passing it to controls, controls will ask for the buckets like ask the bucket for the set title and title values.

393
00:42:32.040 --> 00:42:33.990
Ryan Mehta: That are provided by the provider.

394
00:42:35.070 --> 00:42:37.350
Ryan Mehta: This point, if we look back at the front end.

395
00:42:39.600 --> 00:42:41.250
Ryan Mehta: Now type into this box.

396
00:43:15.720 --> 00:43:17.100
Ryan Mehta: Any questions about it.

397
00:43:27.300 --> 00:43:29.940
Ryan Mehta: Then, are you trying to talk, you're totally muted.

398
00:43:41.100 --> 00:43:45.330
Brooke Perkins (she/her): Kenya. I'm sorry. Can you show title context again.

399
00:43:49.230 --> 00:43:49.920
Brooke Perkins (she/her): So,

400
00:43:51.930 --> 00:43:52.380
Brooke Perkins (she/her): Okay.

401
00:43:53.490 --> 00:43:57.480
Brooke Perkins (she/her): So will this always be its own file.

402
00:43:58.770 --> 00:44:04.020
Ryan Mehta: Yeah, we're gonna make this its own file. And as we like make this a little bit.

403
00:44:05.370 --> 00:44:10.890
Ryan Mehta: more reasonable. We're also going to move this provider into this file also

404
00:44:11.310 --> 00:44:12.840
Brooke Perkins (she/her): Okay, so this will be like a

405
00:44:14.160 --> 00:44:21.840
Brooke Perkins (she/her): Okay, so that, so there will always be like a separate file for each kind of like one of these processes.

406
00:44:23.580 --> 00:44:23.970
Brooke Perkins (she/her): Okay.

407
00:44:26.340 --> 00:44:33.870
Ryan Mehta: We're going to end up with just one provider with all of our apps for the most part, we'll just have like a global provider.

408
00:44:35.760 --> 00:44:40.590
ryan Diffenbaugh: Hey Ryan, question in terms of like scalability and this may be a dumb question, but like

409
00:44:42.090 --> 00:44:45.750
ryan Diffenbaugh: Let's say you want to add a new feature to the app do just

410
00:44:47.010 --> 00:44:57.600
ryan Diffenbaugh: So rather than properly and you just add it to a new context bucket or you create a new whatever feature context J SX and then you sort of

411
00:44:58.650 --> 00:44:59.760
ryan Diffenbaugh: Grab it from there.

412
00:45:00.660 --> 00:45:02.220
Ryan Mehta: That's totally a way. Yeah.

413
00:45:03.390 --> 00:45:08.370
Ryan Mehta: So there's a bunch of different strategies that we can use to organize our context providers.

414
00:45:09.270 --> 00:45:11.820
Ryan Mehta: Totally. You can have one context provider per

415
00:45:11.820 --> 00:45:20.670
Ryan Mehta: Feature like per piece of data that you have. So you may have a character's provider and a user's provider and locations provider.

416
00:45:22.290 --> 00:45:40.770
Ryan Mehta: The other approaches to have one single provider you'd call it like your state provider and then have all of your state and the single provider and then have hooks that grab a piece of the state for so you'd have like a US characters hook that would grab the character state from

417
00:45:41.880 --> 00:45:42.660
Ryan Mehta: Your provider.

418
00:45:43.440 --> 00:45:45.960
ryan Diffenbaugh: So then, do you need a bucket per provider.

419
00:45:47.190 --> 00:45:49.770
Ryan Mehta: So you would have just one big bucket.

420
00:45:50.220 --> 00:45:56.100
Ryan Mehta:re.

275
00:32:30.720 --> 00:32:35.400
Ryan Mehta: We're going to want to set origin to true and credentials to true.

276
00:32:37.590 --> 00:32:52.170
Ryan Mehta: It's credentials to true thing means that will accept cookies from the front end, which will need because we're going to store our that our users currently logged in and a cookie. So this allows us to store like Accept cookies. The, of course.

277
00:32:55.230 --> 00:33:06.330
Ryan Mehta: Alright. So back to our controller. Let's split our controller and our service outside by side we're going to use this sign up and our controller. I'm going to import

278
00:33:08.970 --> 00:33:10.410
Users for this.

279
00:33:12.270 --> 00:33:13.290
Ryan Mehta: Fire

280
00:33:15.000 --> 00:33:19.410
Ryan Mehta: Services or service and then we will use

281
00:33:21.390 --> 00:33:22.470
Your service.

282
00:33:27.990 --> 00:33:29.010
Ryan Mehta: Sign up

283
00:33:31.020 --> 00:33:45.510
Ryan Mehta: The user service takes an object with email and password. We're expecting the front end to give us back an object with email and password in the body. So I can send it wrecked up body and then we're going to get back the user who just signed up.

284
00:33:48.450 --> 00:33:49.230
Make sense

285
00:33:50.520 --> 00:34:08.070
Ryan Mehta: So use this service, it will automatically hash our password for us and insert the user after we get back that user who just signed up. We want to create a j WT right the J WT is that wristband that allows us to track that the user signed up across multiple requests.

286
00:34:09.840 --> 00:34:11.730
Ryan Mehta: And kind of remember this J WT thing.

287
00:34:15.390 --> 00:34:15.600
Okay.

288
00:34:16.980 --> 00:34:21.300
Ryan Mehta: So let's create another service over here called off token.

289
00:34:24.180 --> 00:34:26.490
Ryan Mehta: That will be a function

290
00:34:27.540 --> 00:34:29.610
Ryan Mehta: That takes a user

291
00:34:30.780 --> 00:34:35.160
Ryan Mehta: And create a j WT off token for this user

292
00:34:36.270 --> 00:34:43.440
Ryan Mehta: To create a j WT we're going to need to install JSON web JSON web token.

293
00:34:45.060 --> 00:34:49.740
Ryan Mehta: Which is library that will let us create web tokens JSON web tokens.

294
00:34:52.350 --> 00:34:54.870
Ryan Mehta: What's important appear at the top.

295
00:35:01.740 --> 00:35:11.040
Ryan Mehta: And then down here will construct our token by using J WT sign it's expecting us to give it an object.

296
00:35:13.080 --> 00:35:29.640
Ryan Mehta: Will give it an object inside of the object will say payload is going to be the user that we want to store in the token. So is our user. And then we also are supposed to give it a secret which will store in our end file.

297
00:35:33.450 --> 00:35:36.510
Ryan Mehta: Let's make sure that we actually add that to our in the file.

298
00:35:40.050 --> 00:35:40.770
Ryan Mehta: So we

299
00:35:45.180 --> 00:35:51.750
Ryan Mehta: In our development environment. It doesn't matter what we put here, I'm just going to put secret. We also have salt rounds that we need

300
00:35:55.080 --> 00:35:55.410
For

301
00:35:57.420 --> 00:36:08.520
Ryan Mehta: In production, you're going to change this to something secret during test phase. It doesn't matter what this is. Because it's not going to be the same value that you use in your production application. It's just something fake

302
00:36:11.640 --> 00:36:11.970
Alright.

303
00:36:13.470 --> 00:36:15.240
Ryan Mehta: Are envious setup.

304
00:36:18.570 --> 00:36:19.620
Ryan Mehta: This look good so far.

305
00:36:30.510 --> 00:36:30.900
Ryan Mehta: Good.

306
00:36:32.280 --> 00:36:35.610
Ron Yonker: So what's the sign on the JavaScript.

307
00:36:36.840 --> 00:36:41.280
Ryan Mehta: Is created Jake WT for us. This is what output such a WT

308
00:36:41.850 --> 00:36:43.230
Ron Yonker: Oh, okay. All right.

309
00:36:46.170 --> 00:36:47.850
Ron Yonker: Let's off.

310
00:36:48.660 --> 00:36:49.020
Here.

311
00:36:50.460 --> 00:36:59.550
Ryan Mehta: And then now on the right hand side, we can create our token with user service off token.

312
00:37:01.110 --> 00:37:05.610
Ryan Mehta: Pass it to the user. And then we can store a cookie.

313
00:37:08.070 --> 00:37:14.490
Ryan Mehta: Will call it session, and then we'll give it some options like max age I think isn't working.

314
00:37:16.710 --> 00:37:26.310
Ryan Mehta: Then we give it the value and then some options like max age we want it to be, I don't know 24 hours.

315
00:37:30.450 --> 00:37:38.340
Ryan Mehta: So that would be one second times, that's a minute. An hour 24 hours.

316
00:37:39.570 --> 00:37:41.280
Ryan Mehta: We also want it to be six here.

317
00:37:42.600 --> 00:37:49.260
Ryan Mehta: We want it to be over HTTP only and we want the same site to be

318
00:37:55.260 --> 00:37:58.140
Ryan Mehta: So construct the cookie. And then finally,

319
00:38:01.410 --> 00:38:02.310
Ryan Mehta: Our user

320
00:38:05.280 --> 00:38:08.010
Ryan Mehta: If there are any errors will catch that error.

321
00:38:09.300 --> 00:38:10.410
Pass it to max.

322
00:38:11.670 --> 00:38:17.040
Ryan Mehta: How does this look we're missing a few things. But how does it look overall

323
00:38:22.680 --> 00:38:31.080
Ryan Mehta: So we construct our token we store the token in a cookie as part of the responses is like attaching the wristband to the user.

324
00:38:31.710 --> 00:38:42.600
Ryan Mehta: In this case the user is the browser. So we attach a wristband called session to the user that will expire in 24 hours. So after 24 hours the wristband goes away.

325
00:38:44.070 --> 00:38:48.780
Ryan Mehta: Secure here means that they can only make requests to our service over HTTPS.

326
00:38:50.280 --> 00:38:55.980
Ryan Mehta: That they have to be on the same side like they don't have to be on the same site so we can have one on one on roku.

327
00:38:57.180 --> 00:39:08.490
Ryan Mehta: And it's only over HTTP, which means a JavaScript can't read the cookie on the front end, only the browser will be able to interact with the cookie. This is important.

328
00:39:09.750 --> 00:39:19.110
Ryan Mehta: For security reasons, you don't want your JavaScript front end to be able to read the cookie and send it to another site. For example, you only want the browser to be able to handle the cookies.

329
00:39:22.500 --> 00:39:23.580
Ryan Mehta: Look good so far.

330
00:39:24.600 --> 00:39:33.780
Ron Yonker: Yeah, but I'm a little bit confused. Like how is HTTP only only permitting the browser to read the cookie and have access to it.

331
00:39:34.980 --> 00:39:43.620
Ryan Mehta: It's a property on the cookie. So if the browser sees that you have HTTP only here, it won't make the cookie available to JavaScript on the front end.

332
00:39:44.490 --> 00:39:45.300
Ron Yonker: Okay, got it.

333
00:39:49.740 --> 00:39:50.310
Alright.

334
00:39:51.420 --> 00:40:11.220
Ryan Mehta: So a few things that we should do on the left hand side for this off token piece. We can also give this an options object and we can give it an expires. And so since the cookie over here expires in 24 hours will also make the J WT expire in 24 hours.

335
00:40:13.980 --> 00:40:14.880
Ryan Mehta: Partly good

336
00:40:16.740 --> 00:40:31.740
Ryan Mehta: There's other one other really big piece to this when we send the user online 16 we do not want to send the password hash. We only want to send the ID and the email of the of the user and nothing else.

337
00:40:32.400 --> 00:40:39.780
Ryan Mehta: If you had other properties. You might send other things. But we definitely do not want to send the password hash along online 16

338
00:40:42.000 --> 00:40:45.120
Ryan Mehta: By default, express whenever you do raise

339
00:40:46.380 --> 00:40:47.100
Ryan Mehta: Send.

340
00:40:48.450 --> 00:40:50.790
Ryan Mehta: Or red dot JSON.

341
00:40:52.290 --> 00:40:58.650
Ryan Mehta: It will automatically call a to JSON method on on this object here.

342
00:41:00.420 --> 00:41:18.510
Ryan Mehta: So if we want to change what happens, and we call a red dots and here we can create a to JSON method on our user class and strip away the password hash. So back on our user class, we can create a to JSON method.

343
00:41:19.800 --> 00:41:22.380
Ryan Mehta: On our to JSON method, we are going to

344
00:41:25.260 --> 00:41:27.540
Ryan Mehta: construct our

345
00:41:29.460 --> 00:41:38.520
Ryan Mehta: Object will make a clone of it and then we will delete objects task hash.

346
00:41:40.890 --> 00:41:41.640
The object.

347
00:41:43.470 --> 00:41:45.240
Ryan Mehta: How does this to JSON thing look

348
00:41:51.810 --> 00:41:52.560
Ryan Mehta: Look, okay.

349
00:41:55.650 --> 00:41:59.850
Ryan Mehta: All right, so we're just stripping away the password hash, pretty much.

350
00:42:02.280 --> 00:42:04.800
Ron Yonker: All that as a method on user and off.

351
00:42:07.770 --> 00:42:09.660
Ryan Mehta: Yeah, this is a method on user

352
00:42:13.110 --> 00:42:17.040
Ryan Mehta: So now when we send the user over here. It's not going to have the password hash on it.

353
00:42:19.440 --> 00:42:22.440
Ryan Mehta: And express unexpressed is calling this forest by default.

354
00:42:25.830 --> 00:42:27.570
Ryan Mehta: Despite itself automatically

355
00:42:29.070 --> 00:42:29.640
Ryan Mehta: The good

356
00:42:31.560 --> 00:42:33.660
Ron Yonker: Well, I'm sorry. Wait, so

357
00:42:34.860 --> 00:42:44.100
Ron Yonker: Are you overriding the two JSON method that's automatically being called and. Is that how it's doing automatically

358
00:42:45.180 --> 00:42:50.340
Ryan Mehta: Express always tries to call this method. Whenever you read send something

359
00:42:51.330 --> 00:42:52.650
Ryan Mehta: Huh, yeah.

360
00:42:52.860 --> 00:42:59.100
Ron Yonker: So you're just overriding the default like just making it strip off the password.

361
00:43:00.090 --> 00:43:09.270
Ryan Mehta: Yeah, it's not technically overwritten because classes. By default, don't have this but express always checks to see if the object has this method on it and if it does it cause it

362
00:43:10.260 --> 00:43:11.850
Ryan Mehta: If it never calls it

363
00:43:12.690 --> 00:43:12.960
Okay.

364
00:43:17.070 --> 00:43:25.650
Ryan Mehta: All right, I'm going to use this to Jay something. And one more place backward and we create our token. I'm also going to call this to JSON.

365
00:43:26.700 --> 00:43:35.040
Ryan Mehta: Methods here our payload should just include the users ID and email, not the users ID email and password hash.

366
00:43:41.190 --> 00:43:46.770
Ryan Mehta: Look. Okay, let's see how it looks. We can actually try it both ways and see what the token looks like in both cases.

367
00:43:48.660 --> 00:43:51.930
Ryan Mehta: But let's let's spin this back end up

368
00:43:55.530 --> 00:43:58.680
Ryan Mehta: And try that. That's all that we need for this sign up route.

369
00:44:00.780 --> 00:44:06.840
Ryan Mehta: Let's try to actually sign a user up and see what happens when we go to this route.

370
00:44:07.860 --> 00:44:08.520
So good.

371
00:44:11.790 --> 00:44:23.790
Ryan Mehta: Alright, so back on the front end, we said that we wanted to go to that route in this function. To do that, we're going to construct a service.

372
00:44:26.820 --> 00:44:28.140
Ryan Mehta: We'll call this one off.

373
00:44:36.060 --> 00:44:40.080
Ryan Mehta: And then here we are going to make a request. So we're going to export.

374
00:44:46.230 --> 00:44:57.420
Ryan Mehta: Post sign up is going to take a user's email and their password. It's going to make a fetch request to our word local host right now.

375
00:44:59.670 --> 00:45:01.980
Ryan Mehta: That API V1.

376
00:45:10.140 --> 00:45:12.780
Ryan Mehta: And then it's going to be take house method.

377
00:45:15.120 --> 00:45:19.470
Ryan Mehta: Headers. We want to make sure that we have content.

378
00:45:24.210 --> 00:45:26.040
Ryan Mehta: Creation JSON.

379
00:45:27.240 --> 00:45:40.500
Ryan Mehta: We're also going to have this thing called credentials include this makes sense. So we're sending along cookies and accepting cookies as we're making the fetch requests to when I always include all of our credential cookies.

380
00:45:41.580 --> 00:45:50.250
Ryan Mehta: Will have a body which will be a string of five version of email and password stuck into an object.

381
00:45:52.320 --> 00:45:54.540
Ryan Mehta: And then we'll get a response.

382
00:45:58.080 --> 00:45:58.740
Ryan Mehta: If

383
00:46:04.710 --> 00:46:08.640
Ryan Mehta: If it's not okay. Then we're going to return.

384
00:46:11.070 --> 00:46:15.450
Ryan Mehta: To all my different make this a single week and said, I kind of prefer that right now.

385
00:46:19.080 --> 00:46:22.170
Ryan Mehta: I think everything will look pretty much the same. Up until this point.

386
00:46:24.180 --> 00:46:27.480
Ryan Mehta: So we'll get our JSON.

387
00:46:31.980 --> 00:46:32.880
Ryan Mehta: And then we'll say

388
00:46:35.610 --> 00:46:37.770
Ryan Mehta: Okay, we'll throw the JSON.

389
00:46:49.980 --> 00:47:01.170
Ryan Mehta: Sign up the post request, we're sending JSON, including credentials, which means including the cookies that we have received and keep any cookies that we get back

390
00:47:02.220 --> 00:47:04.350
Ryan Mehta: And we're going to send an email and password.

391
00:47:05.400 --> 00:47:12.690
Ryan Mehta: We're going to parse the JSON, if the if the responses and okay, we're going to throw an error. Otherwise, we're going to return the JSON.

392
00:47:14.010 --> 00:47:26.640
Ryan Mehta: In our signup route over here on the left, we're going to use this post sign up. We'll pass it an email and a password. And for now let's just dot ven and console log off of it.

393
00:47:27.930 --> 00:47:29.280
Ryan Mehta: See what happens when we

394
00:47:30.570 --> 00:47:31.560
Ryan Mehta: When we try this.

395
00:47:33.810 --> 00:47:34.350
Ryan Mehta: Look good

396
00:47:36.300 --> 00:47:45.960
Ryan Mehta: So here's what we're connecting the back end. And for and when we click on our button. This function is going to be invoked. So if I put in an email.

397
00:47:49.080 --> 00:48:00.450
Ryan Mehta: Test that tests calm and password. Let's go to the Network tab and make sure that we're actually going to make a request the press, sign up. We kept 500 let's check that out.

398
00:48:01.950 --> 00:48:02.430
Ryan Mehta: Okay.

399
00:48:03.690 --> 00:48:09.150
Ryan Mehta: So we get an error message user service dot sign up is not a function

400
00:48:10.650 --> 00:48:18.030
Ryan Mehta: Let's go and check that out on the back end. It's a user service stop sign up here is not a function

401
00:48:19.980 --> 00:48:25.650
Ryan Mehta: It's because i mean i i see there's a typo over here. Anybody else see it.

402
00:48:29.130 --> 00:48:30.180
Ben Waples: Is supposed to be an expert.

403
00:48:30.990 --> 00:48:35.640
Ryan Mehta: Yeah, exactly. For missing an s right here module exports.

404
00:48:38.400 --> 00:48:45.900
Ryan Mehta: Let's try this again. Alright. Sign up 500 Cannot read property zero of undefined.

405
00:48:47.640 --> 00:48:48.420
Ryan Mehta: That one.

406
00:48:49.830 --> 00:48:52.170
Ryan Mehta: Property zero of undefined. Okay.

407
00:48:55.980 --> 00:48:56.580
Up star.

408
00:48:57.810 --> 00:49:01.950
Ryan Mehta: That's it. Yeah, that's what I would guess to I was pretty sure that I did.

409
00:49:05.730 --> 00:49:05.970
Ben Waples: Yeah.

410
00:49:06.330 --> 00:49:07.410
I turning star.

411
00:49:09.030 --> 00:49:11.370
Ben Waples: You're missing. I'm gonna wait on line 15

412
00:49:13.500 --> 00:49:14.040
Ryan Mehta: Nice.

413
00:49:19.470 --> 00:49:20.790
Ryan Mehta: T:52:05.610 --> 00:52:08.880
jared: If you like it, maybe you don't. Maybe it's terrible. Who knows.

438
00:52:10.080 --> 00:52:11.820
jared: But let's go back to Doug's

439
00:52:13.530 --> 00:52:15.630
jared: Think this one looks just about. Okay.

440
00:52:18.390 --> 00:52:20.160
jared: So we have our duct tape.

441
00:52:26.940 --> 00:52:29.670
jared: Keep this I will leave it there for now.

442
00:52:48.570 --> 00:52:50.250
Paging probably makes more sense it

443
00:52:57.180 --> 00:52:58.320
jared: Seems good

444
00:53:02.130 --> 00:53:04.980
jared: To basically this. It's my server.

445
00:53:08.820 --> 00:53:09.180
Toy

446
00:53:12.180 --> 00:53:14.250
jared: That's okay, I'm

447
00:53:16.140 --> 00:53:18.960
jared: Gonna get rid of the toy for now. I had it in the second

448
00:53:48.180 --> 00:53:52.770
jared: Some of the type checking going on here input types have to be input types.

449
00:53:54.330 --> 00:53:54.960
jared: So,

450
00:53:56.040 --> 00:53:57.300
jared: Instead of putting

451
00:53:58.650 --> 00:54:04.020
jared: A input type owner ID and having to know an ID.

452
00:54:05.100 --> 00:54:06.870
jared: It's trying to open this up to

453
00:54:12.360 --> 00:54:14.460
jared: To all of the user put types.

454
00:54:42.060 --> 00:54:43.740
jared: Okay, here we go. Cool.

455
00:54:48.390 --> 00:54:54.150
jared: Yeah. So here's our new system types. We don't have any new queries mutations just yet.

456
00:55:03.240 --> 00:55:04.680
Tapes tapes.

457
00:55:05.940 --> 00:55:06.540
jared: Query tape.

458
00:55:15.090 --> 00:55:16.410
jared: Will make a

459
00:55:30.660 --> 00:55:31.080
jared: Copy.

460
00:56:43.980 --> 00:56:45.030
jared: Done is

461
00:56:46.500 --> 00:56:53.940
jared: matched up our Mongo DB information with our graph que el types.

462
00:57:01.260 --> 00:57:06.300
jared: So toys have names and types dogs have names breed owners and toys.

463
00:57:07.920 --> 00:57:08.940
jared: Those look

464
00:57:12.540 --> 00:57:13.740
jared: Good. I think

465
00:57:15.870 --> 00:57:20.910
jared: Now we'll move into building out our dog.

466
00:57:38.760 --> 00:57:42.600
jared: Some of the main things that you want to do is any kind of

467
00:57:44.340 --> 00:57:50.670
jared: Graph tapers over here, you'll want to search for a single dog by

468
00:57:52.020 --> 00:57:58.860
jared: Any search arguments for List of dogs and you want to create a doc for now we'll probably

469
00:58:00.840 --> 00:58:02.850
jared: Have a dog update as well.

470
00:58:07.650 --> 00:58:17.340
jared: And there's a whole bunch of stuff that probably happens on permissions things when updating a dog, but maybe we won't get into that too much.

471
00:58:19.290 --> 00:58:21.450
jared: Want to export our

472
00:58:23.220 --> 00:58:27.360
jared: Paragraph revolvers are dug queries in our Doug

473
00:58:29.010 --> 00:58:29.940
jared: Mutations

474
00:59:08.100 --> 00:59:10.740
jared: User model and dog model.

475
00:59:13.170 --> 00:59:13.860
jared: Is

476
00:59:16.830 --> 00:59:18.960
jared: pretty much always the same. Um,

477
00:59:20.310 --> 00:59:36.990
jared: I have some paging arguments and like I talked about before. Sometimes you can kind of get into trouble when clients over query. So it's a good thing to have default off some limit type Aging's and if they don't specify anything in the arguments.

478
00:59:38.100 --> 01:00:01.980
jared: Only given that, so this is 50 bucks to make a 10

479
01:00:10.080 --> 01:00:11.040
jared: That's for sure.

480
01:00:13.860 --> 01:00:16.230
jared: Cool. So, um,

481
01:00:17.880 --> 01:00:25.320
jared: You know, just like any any REST API, the typical fetch one fetch many great update or or

482
01:00:26.910 --> 01:00:30.990
jared: mind numbingly similar. So these can go pretty quick.

483
01:00:34.380 --> 01:00:36.510
jared: Here's kind of like the master was over.

484
01:00:40.920 --> 01:00:41.610
jared: File.

485
01:01:52.950 --> 01:01:59.520
jared: So, uh, now in a query mutations. We have dog dogs, he taped on create update

486
01:02:00.870 --> 01:02:01.680
jared: Sure.

487
01:02:09.630 --> 01:02:10.230
Coming out

488
01:02:26.460 --> 01:02:35.880
jared: So, right here on our dog Mongo schema. We have an owner, which is a reference to a user ID. So now we're kind of have our first

489
01:02:37.230 --> 01:02:38.100
jared: Graph kind of

490
01:02:40.740 --> 01:02:41.190
jared: Resolved.

491
01:02:42.780 --> 01:02:43.980
jared: So be a sink and

492
01:02:45.090 --> 01:02:46.230
jared: The old take

493
01:02:57.480 --> 01:02:58.500
The first one

494
01:03:19.650 --> 01:03:25.950
jared: Basically, what will happen is when we querying for a dog, and we want to use it returned

495
01:03:29.460 --> 01:03:34.440
jared: User world kind of grab the dogs mongoose reference ID.

496
01:03:37.500 --> 01:03:38.730
This will be

497
01:03:44.490 --> 01:03:45.990
jared: Maybe this was my hiccup.

498
01:03:50.310 --> 01:03:53.250
jared: It's gonna grab a user by ID.

499
01:03:55.170 --> 01:03:57.540
jared: Store. Here's an idea, gets looked up as an ID.

500
01:03:59.790 --> 01:04:01.620
jared: We also have toys.

501
01:04:03.180 --> 01:04:10.140
jared: Which will come in as an array of object IDs referencing toys, of course.

502
01:04:38.280 --> 01:04:39.540
jared: Many of those

503
01:04:42.060 --> 01:04:44.490
jared: Can include the toys Eddie's

504
01:04:50.940 --> 01:04:52.680
jared: Working for broke

505
01:04:57.810 --> 01:05:00.780
jared: toys to find a result the schema.

506
01:05:25.980 --> 01:05:27.510
jared: Back to our query results.

507
01:05:28.830 --> 01:05:36.720
jared: And pretty similar to users. We have two kinds of queries for dog to get a single dog.

508
01:05:37.800 --> 01:05:39.840
jared: In to get many ducks.

509
01:05:41.850 --> 01:05:43.470
jared: Will put

510
01:05:44.550 --> 01:05:45.900
jared: These

511
01:05:47.940 --> 01:05:54.780
jared: Type will be our kind of our query filters. So this is what parameters we can search on

512
01:05:56.580 --> 01:05:58.590
jared: The should not be required.

513
01:06:00.510 --> 01:06:07.320
jared: And attendance ID. So, um, we have any dogs, we can search by their ID their name, their breeder their

514
01:06:08.550 --> 01:06:11.430
jared: Their owner ID. So that's kind of what lines here.

515
01:06:13.260 --> 01:06:17.790
jared: Since it's a list will add some default paging OR. Paging if they they want it.

516
01:06:25.920 --> 01:06:28.770
jared: Make these toys. Well,

517
01:06:55.980 --> 01:06:57.150
jared: On the queries for now.

518
01:06:58.500 --> 01:07:01.590
jared: Before we can search for anything.

519
01:07:03.600 --> 01:07:05.730
jared: Well, we'll do the mutation. So we can add some

520
01:07:08.130 --> 01:07:09.000
jared: Patient tape.

521
01:08:10.410 --> 01:08:11.820
jared: refresh the browser.

522
01:08:29.670 --> 01:08:30.210
Greg Mall: Spot.

523
01:08:42.030 --> 01:08:50.970
jared: For you, for owner. We need an AI de Madrid dumping know right now so

524
01:08:53.400 --> 01:08:54.780
jared: We will get one.

525
01:09:52.680 --> 01:09:55.980
jared: Well, let's see if I screwed up. It didn't work.

526
01:09:57.000 --> 01:09:57.900
jared: No ducks.

527
01:10:00.120 --> 01:10:01.500
jared: Let's see what I did wrong.

528
01:10:48.270 --> 01:10:51.210
jared: Didn't get my console, which is a great

529
01:10:52.350 --> 01:10:53.190
jared: Oh,

530
01:11:06.780 --> 01:11:07.320
jared: Here we go.

531
01:11:11.700 --> 01:11:12.780
jared: To the actual

532
01:11:26.130 --> 01:11:27.480
jared: So what I forgot to do

533
01:11:29.370 --> 01:11:30.780
jared: Or put in the wrong place rather

534
01:11:33.090 --> 01:11:37.290
jared: I put the queries and mutations in the console log and not in the export.

535
01:11:43.200 --> 01:11:44.910
jared: Now other errors.

536
01:12:15.120 --> 01:12:16.500
jared: Okay, that sounds better.

537
01:12:19.980 --> 01:12:20.370
jared: Dog.

538
01:12:21.660 --> 01:12:23.850
jared: Um, so my last year.

539
01:12:24.990 --> 01:12:36.930
jared: I was getting a defined in resolves did not in schema. So it's another light graph to kind of check basically saying in our, in our resolve or functions fitter

540
01:12:37.950 --> 01:12:47.580
jared: Headed to our app where equate creator Apollo server we are defining something called dog update it's resolved or that's going to do some piece of work.

541
01:12:49.500 --> 01:12:53.760
jared: That was not as defined in our, in our tape files.

542
01:12:55.320 --> 01:13:01.740
jared: So it's all checking if you don't have certain things in certain places, your server won't run and it'll let you know.

543
01:13:03.450 --> 01:13:06.360
jared: So that's a good check, I guess.

544
01:13:07.950 --> 01:13:09.510
jared: So now we have a dog.

545
01:13:10.920 --> 01:13:12.330
jared: If we wanted to

546
01:13:13.680 --> 01:13:15.840
jared: Query querying for our dog.

547
01:13:17.550 --> 01:13:20.310
jared: You should be able to find it by

548
01:13:21.870 --> 01:13:24.090
jared: Name spot.

549
01:13:26.190 --> 01:13:27.030
jared: Should be old.

550
01:13:40.590 --> 01:13:41.100
jared: Our

551
01:13:43.890 --> 01:13:45.540
jared: User for this.

552
01:13:50.400 --> 01:13:50.610
To

553
01:13:52.140 --> 01:13:56.790
jared: To query type dog is not returning user turns a dog.

554
01:13:57.960 --> 01:14:03.720
jared: Dog returns List of dogs and toy toy toy toy.

555
01:14:07.980 --> 01:14:09.360
jared: mistake I made is

556
01:14:11.160 --> 01:14:14.100
jared: You have to define kind of the output. This is that strongly

557
01:14:16.560 --> 01:14:24.450
jared: Typed business basically the same thing is having resolved or defined, but not a type here, it was the wrong type. So wouldn't let me

558
01:14:25.830 --> 01:14:26.490
jared: To my query.

559
01:14:29.940 --> 01:14:31.230
jared: Network care.

560
01:14:34.470 --> 01:14:35.100
Talks.

561
01:14:46.590 --> 01:14:47.160
jared: There we go.

562
01:14:48.810 --> 01:14:52.680
jared: If you asked for dogs and given us a raid Doug's

563
01:14:54.390 --> 01:14:55.890
jared: One of which would be spot.

564
01:14:59.010 --> 01:15:00.150
jared: Now what's

565
01:15:03.150 --> 01:15:05.940
jared: What's good spots and toys.

566
01:15:14.310 --> 01:15:21.060
jared: Nothing, it's kind of nice with playground. There is a whole lot of auto completing

567
01:15:23.040 --> 01:15:32.820
jared: So I'm basically as a type I can autocomplete pull up a list of possible inputs arguments.

568
01:15:34.080 --> 01:15:35.640
jared: Possible return data.

569
01:15:38.040 --> 01:15:39.450
jared: And there's also

570
01:15:40.830 --> 01:15:50.010
jared: auto generated ducks in a row. So Aquarius mutations, I can ask for a user and give back user object.

571
01:15:51.420 --> 01:15:54.270
jared: And use your object containing id, name and username.

572
01:15:56.460 --> 01:16:00.990
jared: Definitions of strings. If I go to dog.

573
01:16:07.020 --> 01:16:16.740
jared: If I go to dog. There is an owner type user eventually drill down and basically tell me the arguments that I have to ask for. Same thing mutations.

574
01:16:19.680 --> 01:16:25.920
jared: New Year's input, it will define that for me. And what that's supposed to look like. So this is really, really nice.

575
01:16:27.870 --> 01:16:31.080
jared: To have kind of all these auto generated Docs with types.

576
01:16:33.000 --> 01:16:35.340
jared: That that you don't have to worry about managing

577
01:16:36.900 --> 01:16:41.310
jared: There's other stuff that you can do in here, you can actually add notes if you need to.

578
01:16:42.450 --> 01:16:51.570
jared: But I found the more notes you add, the more notes. You have to update manually. So there's things people forget about so we don't do too much that

579
01:17:00.150 --> 01:17:00.480
Boy.

580
01:17:25.140 --> 01:17:34.770
jared: I guess the reason I put toy. Here is the might have a lot of different toys, obviously, under certain categories, something you might want to think about is

581
01:17:35.850 --> 01:17:47.760
jared: Having type being enough. That way you could query all to toys and click for to space toy toy to come on case toy.

582
01:17:50.490 --> 01:17:50.760
So,

583
01:17:53.070 --> 01:17:55.800
jared: Things to think about when building out your schemas and whatnot.

584
01:17:57.480 --> 01:17:59.820
jared: Toy know

585
01:18:20.250 --> 01:18:25.650
jared: So it looks like some of the graph to all checking kind of goes one way. If the resolve this and type doesn't

586
01:18:26.730 --> 01:18:30.870
jared: But not the other way around, where if the type of this, but the resolve or doesn't

587
01:18:32.430 --> 01:18:33.630
jared: didn't yell at me.

588
01:19:08.250 --> 01:19:10.200
jared: Any questions while I'm kind of typing away.

589
01:19:16.350 --> 01:19:17.490
Ryan Mehta: Notice looking great.

590
01:19:22.770 --> 01:19:32.220
Ben Waples: I'm with AT WORK YOU SAID YOU BEEN DOING THIS HOUR, um, do you guys use it with a Mongo database or a different kind of database.

591
01:19:32.640 --> 01:19:33.810
jared: You use Mongo.

592
01:19:36.000 --> 01:19:40.620
jared: We are, we may soon also incorporate a

593
01:19:43.320 --> 01:19:54.870
jared: Type of sequel database something relational for Data Science. So it would be some migrations and whatnot. But most of what we're doing straight from our apps will be continued just to be Mongo.

594
01:19:55.500 --> 01:19:56.670
Ben Waples: Nice. Okay, cool.

595
01:19:58.980 --> 01:20:09.510
Ryan Mehta: Yeah, it seems like the really cool thing about graph que out too is that you can really mix your databases, a lot because the resolve are responsible for getting all of the resolving

596
01:20:11.220 --> 01:20:21.930
Ryan Mehta: So these like right now you're using all these like mongoose stuff. But this could totally get sequel query. Instead, or it could be like an API call to some third party API or whatever.

597
01:20:22.800 --> 01:20:25.290
jared: Yeah, we're, uh, we're starting get into

598
01:20:26.610 --> 01:20:36.330
jared: microservices, where I think a lot of people use graph is kind of a layer over like a handful of different API's are different databases and whatnot, which is pretty cool.

599
01:20:37.560 --> 01:20:49.590
jared: But most of our current microservices. They're kind of like fully detached and they're just kind of outgoing, they don't really take any requests from anywhere just kind of Cron job type things. Yeah.

600
01:20:51.330 --> 01:20:56.730
jared: A lot of these can kind of split out and hit a whole bunch of things and basically do the same thing. Um,

601
01:20:58.710 --> 01:20:59.580
jared: We're

602
01:21:02.040 --> 01:21:06.000
jared: See if your query could do a

603
01:21:07.650 --> 01:21:09.000
jared: User's querying

604
01:21:10.110 --> 01:21:12.960
jared: And you could do a dog's query.

605
01:21:14.100 --> 01:21:21.210
jared: And you can do with toys query you know if toy Eric dogs or toys lived in a different database.

606
01:21:22.560 --> 01:21:28.140
jared: or whatnot, those would split out and you can do these all at the same time and hit all of those different

607
01:21:29.760 --> 01:21:34.290
jared: Endpoints. Get it all back together, which is another pretty cool thing.

608
01:21:35.160 --> 01:21:42.810
Ben Waples: Wow. And then all the logic is just export out into all those dRyan Mehta: Sex.

237
00:31:01.740 --> 00:31:06.450
Ryan Mehta: Inside of this component. We're going to import react react.

238
00:31:07.860 --> 00:31:13.740
Ryan Mehta: And then we will construct our counter component

239
00:31:18.750 --> 00:31:19.830
Ryan Mehta: Misspelled counter

240
00:31:25.950 --> 00:31:28.620
Ryan Mehta: Sex that we're gonna return from this component

241
00:31:30.540 --> 00:31:33.360
Ryan Mehta: Will be a button.

242
00:31:37.500 --> 00:31:38.880
Ryan Mehta: That lets us increment.

243
00:31:40.410 --> 00:31:47.250
Ryan Mehta: And a button that lets us a detriment. So plus and minus button and then above both buttons.

244
00:31:50.040 --> 00:31:57.630
Ryan Mehta: An H1 that displays the current count. Okay, so we'll need to actually display some count tier

245
00:32:00.240 --> 00:32:01.290
Ryan Mehta: Zero for now.

246
00:32:02.490 --> 00:32:07.380
Ryan Mehta: And then we will use this counter component back in app JS.

247
00:32:12.450 --> 00:32:16.260
Ryan Mehta: render this right now, we should see something on the page, right.

248
00:32:17.550 --> 00:32:21.480
Ryan Mehta: Hopefully would be really bad if we can't

249
00:32:25.560 --> 00:32:26.310
See anything

250
00:32:27.990 --> 00:32:33.750
Ryan Mehta: Okay, there's a little counter to begin with. Doesn't work yet. We haven't like these buttons or anything.

251
00:32:36.960 --> 00:32:38.340
Ryan Mehta: Look good so far.

252
00:32:40.110 --> 00:32:48.210
Ryan Mehta: All right, we're going to think about the different ways that we can transform state. We're going to put all of those state transformation inside of her reduce or function.

253
00:32:48.690 --> 00:32:57.660
Ryan Mehta: reducer function always gets the current state what state. We're currently in an action that is going to transform that state.

254
00:32:59.490 --> 00:33:06.600
Ryan Mehta: For us, our producers are always going to have the same format. Also, we're going to have a switch statement on action type

255
00:33:08.220 --> 00:33:21.030
Ryan Mehta: Okay, so each action has a type. They have a name associated with them and that action name is going to tell us how we should transform state. So, based on the action type. We're going to transform state in a different way.

256
00:33:23.010 --> 00:33:24.000
Ryan Mehta: Make sense so far.

257
00:33:25.890 --> 00:33:28.260
Ryan Mehta: All right, let's just leave this blank for now.

258
00:33:29.700 --> 00:33:38.460
Ryan Mehta: So we have a default in the default case we're going to return state. Everybody know the default and switches or you're familiar with switches at all.

259
00:33:40.140 --> 00:33:48.150
Ryan Mehta: Okay switches are kind of like s. So if you ever have. Like if action type triple equals

260
00:33:54.360 --> 00:33:56.520
Ryan Mehta: Do something else. If

261
00:33:57.720 --> 00:33:59.460
Ryan Mehta: you're baptized triple equals

262
00:34:01.830 --> 00:34:08.310
Ryan Mehta: Do something else and then else. This can always be translated into a switch case.

263
00:34:09.600 --> 00:34:25.680
Ryan Mehta: So whenever you are like basically switching on the same variable here. So we're always checking this action type equals something does action type equal something. This is the same as a switch here, we're saying is action take

264
00:34:26.760 --> 00:34:28.200
Ryan Mehta: Equal case.

265
00:34:32.340 --> 00:34:44.040
Ryan Mehta: So instead of like having to fully put out this triple equals something the switches. Like, it's always going to be on action type does action that type equal increment does action that take equal detriment.

266
00:34:49.290 --> 00:34:58.020
Ryan Mehta: So the same sort of thing. And then the default is the else. It didn't match increment it didn't match detriment. So do this.

267
00:34:59.250 --> 00:35:00.000
Ryan Mehta: Make sense

268
00:35:01.740 --> 00:35:02.010
Alright.

269
00:35:03.390 --> 00:35:06.240
Ryan Mehta: So for now, let's just have a default case.

270
00:35:07.680 --> 00:35:12.900
Ryan Mehta: Actually action type didn't match anything in that case, we're just going to return the current state.

271
00:35:17.880 --> 00:35:30.180
Ryan Mehta: Right, and then down below in our counter. So we're just kind of scaffolding stuff right now we are going to get state and dispatch from us reducer.

272
00:35:33.510 --> 00:35:34.410
Gets imported

273
00:35:36.810 --> 00:35:50.550
Ryan Mehta: Use reducer takes a reducer function that we're going to run every action through and some piece of initial state will say our initial state is count of zero. So we're starting off our count zero

274
00:35:52.500 --> 00:35:58.140
Ryan Mehta: Down here instead of hard coding count zero, we can now put state.

275
00:36:00.480 --> 00:36:10.740
Ryan Mehta: Right, so we're going to go into state state initially is this object here state count is zero. So, everything should still work just like it did before.

276
00:36:14.370 --> 00:36:15.480
There's our local component

277
00:36:16.980 --> 00:36:24.690
Ryan Mehta: If we initialize our state as five count to five, then we're gonna see five on the page.

278
00:36:28.080 --> 00:36:28.890
Ryan Mehta: That make sense.

279
00:36:31.200 --> 00:36:31.530
Ryan Mehta: Okay.

280
00:36:32.730 --> 00:36:33.360
Ryan Mehta: I'm

281
00:36:33.510 --> 00:36:46.260
Ron Yonker: I'm a little lost on the water bar parameters with the reducer and then use reducer. Like, does that matter at all.

282
00:36:47.610 --> 00:36:48.690
Ryan Mehta: Where do you see that

283
00:36:49.830 --> 00:36:54.720
Ron Yonker: Just mean just like the state in the action, maybe it's just because it's a hook that use reducer.

284
00:36:56.190 --> 00:37:07.560
Ryan Mehta: Yep. These are do serve as a hook so we if the function that we invoke and we pass it the reducer function that we want to use and the initial state what state should start off as

285
00:37:09.750 --> 00:37:11.040
Ron Yonker: But reducer has to

286
00:37:12.420 --> 00:37:21.720
Ron Yonker: I just don't like that. There's so many layers of abstraction here to do one thing that's what I absolutely hate just trying to keep track of it all.

287
00:37:24.120 --> 00:37:27.030
Ron Yonker: That's, that's me. I understand why we're doing it now.

288
00:37:28.050 --> 00:37:28.410
Ron Yonker: Cool.

289
00:37:31.980 --> 00:37:39.180
Ryan Mehta: So here's our little stuff we can actually look I think our little react tools.

290
00:37:40.830 --> 00:37:45.270
Ryan Mehta: And see our little reduce or HAc and it state currently

291
00:37:46.650 --> 00:37:47.190
Look good

292
00:37:48.450 --> 00:37:50.190
Ryan Mehta: So we start off with count of five.

293
00:37:52.110 --> 00:37:59.910
Ryan Mehta: All right, let's let's code this detriment button so want to be able to click on this button and decrease count by one

294
00:38:01.110 --> 00:38:17.670
Ryan Mehta: This means that we have a new action that we're going to want to dispatch. We have an action called detriment. Right. So we should be able to handle the detriment case when an action comes in with the type of detriment. We want to return.

295
00:38:21.030 --> 00:38:26.760
Ryan Mehta: Our state where count is the current states count minus one.

296
00:38:27.960 --> 00:38:41.550
Ryan Mehta: So here we're saying return a new state object we should have the same county. We're going to take the old state count the previous state and subtract it by one to calculate our new state.

297
00:38:42.990 --> 00:38:48.690
Ryan Mehta: So our reducer now handles this debt permit case we can now decrease our account.

298
00:38:50.100 --> 00:38:51.960
Ryan Mehta: Then we're going to write a little function call.

299
00:38:54.240 --> 00:38:59.610
Ryan Mehta: Which will dispatch an action where the type is definite

300
00:39:01.650 --> 00:39:11.280
Ryan Mehta: So this type here has to match up with our case over here. That makes sense. So we're saying this whole thing here is an action.

301
00:39:13.020 --> 00:39:23.220
Ryan Mehta: We're dispatching an action where the type is detriment, which will cause our state count to go down by one whenever we press on this.

302
00:39:23.220 --> 00:39:23.730
Button.

303
00:39:25.530 --> 00:39:27.360
Ryan Mehta: We are going to definitely

304
00:39:31.290 --> 00:39:38.790
Ryan Mehta: Go back to our little friend, you should build a press this button and our account documents.

305
00:39:43.290 --> 00:39:44.160
No increment yet.

306
00:39:46.440 --> 00:39:52.680
Ryan Mehta: So do the increment thing we need to do the exact same flow, we're going to add a new case for reducer.

307
00:39:54.720 --> 00:39:56.070
Ryan Mehta: An increment case.

308
00:39:57.180 --> 00:40:02.700
Ryan Mehta: When increment comes in, we're going to return a new state object. We're count.

309
00:40:04.740 --> 00:40:07.410
Ryan Mehta: Is the old count plus one.

310
00:40:08.910 --> 00:40:12.240
Ryan Mehta: Will write another function called increment.

311
00:40:13.830 --> 00:40:15.390
Ryan Mehta: Which will dispatch.

312
00:40:16.770 --> 00:40:20.070
Ryan Mehta: An action of type increment.

313
00:40:22.920 --> 00:40:28.710
Ryan Mehta: And then on clicking this increment button. You will call the increment function.

314
00:40:30.690 --> 00:40:31.350
Like so.

315
00:40:32.670 --> 00:40:48.030
Ron Yonker: So Ryan, when are you supposed to use an arrow function to call or at the count plus itself and one are you supposed to just set like do the state count plus or minus one.

316
00:40:48.690 --> 00:40:55.260
Ryan Mehta: You need the arrow function when you're dealing with sets you stay with us reducer. You never need those arrow functions.

317
00:40:55.890 --> 00:40:56.730
Ron Yonker: Okay, thank you.

318
00:41:00.990 --> 00:41:03.120
Ryan Mehta: All right, let's check to see if it works.

319
00:41:04.530 --> 00:41:05.610
Ryan Mehta: It kind of works.

320
00:41:15.420 --> 00:41:16.620
Ryan Mehta: Questions here.

321
00:41:21.330 --> 00:41:25.410
Thomas Stussi: Is our next step to like work on file structure and stuff like that.

322
00:41:26.520 --> 00:41:27.270
Ryan Mehta: Yeah, we're gonna

323
00:41:27.330 --> 00:41:28.860
Thomas Stussi: export this into different

324
00:41:30.330 --> 00:41:31.110
Ryan Mehta: Files.

325
00:41:31.500 --> 00:41:33.300
Thomas Stussi: That's what I'm interested in.

326
00:41:33.930 --> 00:41:41.520
ryan Diffenbaugh: Nice. So you can export it like as just reducer. You have to export it with a counter reduced or something like that.

327
00:41:42.240 --> 00:41:44.400
Ryan Mehta: And then export it as a default export.

328
00:41:45.270 --> 00:41:46.320
Ryan Mehta: It into Excel file.

329
00:41:50.040 --> 00:41:50.280
Ben Waples: Oh,

330
00:41:50.700 --> 00:42:00.780
Ben Waples: God, um, what if there is more than one key and state and we're returning like online sex. We just returned count State DOT

331
00:42:01.830 --> 00:42:07.110
Ben Waples: Minus one. Um, but what if there was like more stuff in state would that stuff. Oh.

332
00:42:09.870 --> 00:42:12.420
Ryan Mehta: Yeah, we're going to start getting to the point where spread is going to be

333
00:42:12.810 --> 00:42:13.950
Ryan Mehta: Insanely important

334
00:42:20.190 --> 00:42:25.800
Ryan Mehta: Alright, let's try to export these things into different files and make it a little bit more modular

335
00:42:27.600 --> 00:42:30.120
Ryan Mehta: So first file that we're going to create

336
00:42:31.260 --> 00:42:38.370
Ryan Mehta: We're going to make a reducer folder and instead of that producers older, I'm going to make it count for DC JS file.

337
00:42:40.350 --> 00:42:41.160
Ryan Mehta: And then

338
00:42:42.180 --> 00:42:50.640
Ryan Mehta: We're going to bring this reducer that we created over on the left hand side and drop it into our top producers folder.

339
00:42:52.680 --> 00:42:53.670
Ryan Mehta: And will export it.

340
00:42:58.620 --> 00:43:04.050
Ryan Mehta: Whole point of this is just so we don't have to have that extra stuff on the top.

341
00:43:05.220 --> 00:43:08.310
Ryan Mehta: In addition to that, I'm also going to export constant

342
00:43:09.600 --> 00:43:10.530
Initial state.

343
00:43:14.850 --> 00:43:15.420
Zero.

344
00:43:17.280 --> 00:43:22.140
Ryan Mehta: Just so we can get some initial state. On the left hand side. If we need it to.

345
00:43:23.160 --> 00:43:31.110
Ryan Mehta: So reducer. We will import it from count reducer. And then we'll also import our initial state.

346
00:43:32.670 --> 00:43:43.830
Ryan Mehta: Right now this doesn't matter so much because our state. It's so simple, but as a state gets larger and larger. It's much better to have it someplace where we can export or export it from somewhere important on the other side.

347
00:43:46.860 --> 00:43:56.460
Ryan Mehta: Okay, so that is our first thing that we're going to do at this point, our components should still work just like it did before. We just moved code to a different file.

348
00:43:57.870 --> 00:44:00.900
Ryan Mehta: So let's make sure that that is true.

349
00:44:03.300 --> 00:44:04.560
Ryan Mehta: And so, press the button.

350
00:44:06.270 --> 00:44:08.790
Ryan Mehta: And everything works like it did before.

351
00:44:11.190 --> 00:44:16.770
Ryan Mehta: So we moved our reducer into its own file look good.

352
00:44:19.200 --> 00:44:25.020
Ryan Mehta: One other thing that I like to do our create these things called action creators.

353
00:44:27.420 --> 00:44:39.870
Ryan Mehta: We said already that this word here has to match up with these words over here if they don't match up the whole flow will not work. So let's say accidentally made a typo.

354
00:44:41.100 --> 00:44:41.670
Ryan Mehta: Like that.

355
00:44:43.980 --> 00:44:44.790
Or maybe

356
00:44:46.320 --> 00:44:48.060
Ryan Mehta: One that may be is harder to find.

357
00:44:49.860 --> 00:45:00.690
Ryan Mehta: Whatever we added an extra s to this thing. Maybe it's very hard for your eyes to see that. And unless you have both files pulled up, you might not even notice that there are different.

358
00:45:01.590 --> 00:45:14.790
Ryan Mehta: If you do this though the increment button will continue to work, but the detriment button no longer works and it's very hard to figure out why you really your eyes have to be very keen

359
00:45:15.930 --> 00:45:16.860
Ryan Mehta: In this case,

360
00:45:18.330 --> 00:45:19.950
Ryan Mehta: I like to avoid this problem.

361
00:45:19.980 --> 00:45:20.730
Altogether.

362
00:45:21.990 --> 00:45:22.590
Adrian Simental: Because

363
00:45:22.650 --> 00:45:24.990
Ryan Mehta: You can imagine this taking an

364
00:45:25.020 --> 00:45:27.420
Ryan Mehta: Hour to figure out what's going on.

365
00:45:29.520 --> 00:45:30.780
Ryan Mehta: Or more could be more

366
00:45:32.040 --> 00:45:35.070
Ryan Mehta: So what I like to do is make another folder.

367
00:45:36.090 --> 00:45:37.470
Ryan Mehta: Called actions.

368
00:45:38.610 --> 00:45:44.460
Ryan Mehta: And inside of this actions folder will create account action stop JS file.

369
00:45:47.130 --> 00:45:53.280
Ryan Mehta: Put it over here to the right will make two different functions here we will make an

370
00:45:54.840 --> 00:45:58.230
Ryan Mehta: Account increment function.

371
00:45:59.310 --> 00:46:03.060
Ryan Mehta: Which will return an object where the type is

372
00:46:04.680 --> 00:46:05.340
Ryan Mehta: Comments.

373
00:46:06.780 --> 00:46:14.730
Ryan Mehta: Will also make a detriment function that returns an object for the type is

374
00:46:17.850 --> 00:46:19.980
Ryan Mehta: And these both should be exploited.

375
00:46:21.870 --> 00:46:43.080
Ryan Mehta: So these are action these functions here are called action creators. They are functions that can Mehta: Soon, not today.

485
00:58:47.070 --> 00:58:49.800
Ron Yonker: Yeah, I just need to see. I had the same

486
00:58:50.880 --> 00:58:55.530
Ron Yonker: Add to it. It doesn't make any more sense without actually seeing an emotion.

487
00:58:59.370 --> 00:59:05.820
Ben Waples: Should we be doing our parent components now as functional components with books or still as class components.

488
00:59:06.420 --> 00:59:07.770
Ryan Mehta: Yeah, we'll talk about that.

489
00:59:08.910 --> 00:59:14.910
Ryan Mehta: I think for the next two days at least. We're going to do them as function components.

490
00:59:18.930 --> 00:59:22.560
Ryan Mehta: But then, going forward, you can choose what you want to do.

491
00:59:28.110 --> 00:59:30.600
Ryan Mehta: All right, Jerry play with these things a little bit

492
00:59:36.060 --> 00:59:38.190
Ryan Mehta: Which one, okay.

493
00:59:39.210 --> 00:59:41.460
Ryan Mehta: Let's start off and app JS.

494
00:59:43.200 --> 00:59:50.130
Ryan Mehta: If I could. Can I delete this router stuff. Does anybody want this router stuff sweater stuff useful.

495
00:59:51.690 --> 00:59:52.260
Annalise Murphy: I go for it.

496
00:59:54.600 --> 01:00:02.850
Ryan Mehta: I see some people like hesitant about our comment this, but because those comments bug me so much. I'm going to put

497
01:00:05.700 --> 01:00:08.100
Ryan Mehta: I'm going to just put all of this underneath.

498
01:00:08.760 --> 01:00:13.650
Brooke Perkins (she/her): I'm personally a code order. So I always want to keep everything

499
01:00:14.160 --> 01:00:17.670
Ryan Mehta: Yeah, well, I will hoard our code and I don't need this file.

500
01:00:19.440 --> 01:00:21.810
Brooke Perkins (she/her): It means a lot better. Nice.

501
01:00:24.090 --> 01:00:28.560
Ryan Mehta: And let's just play an app JS to start off with. So

502
01:00:29.610 --> 01:00:34.140
Ryan Mehta: If we go and look at this page. We should just see hello at the top.

503
01:00:35.520 --> 01:00:37.230
Ryan Mehta: Which is exactly what we see.

504
01:00:40.110 --> 01:00:43.230
Ryan Mehta: Maybe only been open this over here.

505
01:00:45.690 --> 01:00:57.810
Ryan Mehta: This thing is kind of nice. This VS code based browser. The one big problem that I have with it is that you can't see the console. So while it's kind of nice. It's also

506
01:00:58.950 --> 01:01:02.490
Ryan Mehta: I mean the console such a crucial thing to have access to

507
01:01:04.560 --> 01:01:05.070
Ryan Mehta: All right.

508
01:01:06.150 --> 01:01:12.720
Ryan Mehta: To start adding state tour app, we need to bring in that use state function, the US state hook

509
01:01:13.890 --> 01:01:26.400
Ryan Mehta: Which we can do like so. So we structure it with our import of react and then let's add a small piece of state. Let's add a

510
01:01:29.310 --> 01:01:29.550
Ryan Mehta: New

511
01:01:31.320 --> 01:01:32.250
Ryan Mehta: piece of steak.

512
01:01:33.900 --> 01:01:36.090
Ryan Mehta: That starts off as an empty string.

513
01:01:38.130 --> 01:01:45.570
Ryan Mehta: And then let's change our J SX a little bit. So we have an H1 that displays.

514
01:01:46.890 --> 01:01:48.180
Ryan Mehta: Our name.

515
01:01:49.350 --> 01:01:52.980
Ryan Mehta: Right now, we've seen nothing on the page because name is an empty string.

516
01:01:54.060 --> 01:01:57.210
Ryan Mehta: If we changed what our initial state is to

517
01:01:59.220 --> 01:02:06.030
Ryan Mehta: Spot. Now we see spot on the page because the initial value of name is spot.

518
01:02:08.760 --> 01:02:10.470
Ryan Mehta: Let's add to this thing.

519
01:02:11.790 --> 01:02:12.960
Ryan Mehta: Another

520
01:02:14.640 --> 01:02:23.160
Ryan Mehta: A fragment and input inside of the fragment. We're going to make it so this input is connected to this name piece of state.

521
01:02:24.600 --> 01:02:25.770
Ryan Mehta: It's going to be a type

522
01:02:27.750 --> 01:02:37.140
Ryan Mehta: Text its initial value will be name, either we need a tie with it and on change function.

523
01:02:41.670 --> 01:02:46.980
Ryan Mehta: Whenever we change this, we're going to want to invoke a handle change.

524
01:02:48.750 --> 01:02:52.020
Ryan Mehta: So I'm going to define a handle change function up above.

525
01:02:53.070 --> 01:02:59.460
Ryan Mehta: And then we'll pass this handled change function to our on change drop down here.

526
01:03:01.590 --> 01:03:10.440
Ryan Mehta: You can kind of see spot inside of this input. Now we can actually type into it because our on our handle change function doesn't do anything. Yeah.

527
01:03:12.360 --> 01:03:30.360
Ryan Mehta: We're going to do structure target offer candle change, just like we did with class based components and then we'll set our name to whatever target values. So grab what the users currently typing and change our name piece of state.

528
01:03:31.560 --> 01:03:38.880
Ryan Mehta: To target that value. Now I can type into this and we'll see each one H1 changing

529
01:03:39.930 --> 01:03:40.680
Ryan Mehta: As I type

530
01:03:43.590 --> 01:03:51.270
Ryan Mehta: So, these should I mean, hopefully see some of the common stuff with the classes, instead of state equals name, we have this

531
01:03:52.740 --> 01:04:02.670
Ryan Mehta: Constant main segment equals new state stuff. We still have a handle change function and we still pass that half of change function to our on change.

532
01:04:03.900 --> 01:04:05.550
Ryan Mehta: Now all behave the same

533
01:04:06.600 --> 01:04:26.700
Adrian Simental: Room. Just curious. Do you remember in the example you showed, we had to have multiple lines to certain multiple things and stage is like we did in classes ONE ON ONE FOR THE RE any way to like do a slow or comma age comma set age like after set name.

534
01:04:27.690 --> 01:04:29.400
Ryan Mehta: There is that what you could do.

535
01:04:29.460 --> 01:04:35.460
Ryan Mehta: Is make your state instead of a single item, you could make your state and object.

536
01:04:36.630 --> 01:04:38.340
Ryan Mehta: With multiple things inside of it.

537
01:04:40.470 --> 01:04:46.290
Ryan Mehta: And then this wouldn't be set name anymore and name it would be like dog.

538
01:04:48.420 --> 01:04:48.870
Ryan Mehta: Set

539
01:04:51.810 --> 01:04:56.340
Ryan Mehta: And then a dog would have these two pieces of information inside of it.

540
01:04:56.790 --> 01:05:05.520
Adrian Simental: So in that case, when you use set dog. Like, could you just change one of them. Could you just change name pretty have to change both of you actually pass

541
01:05:06.210 --> 01:05:07.410
Ryan Mehta: You have to change both

542
01:05:08.460 --> 01:05:12.450
Ryan Mehta: All the time. That's the big disadvantage of this style.

543
01:05:15.270 --> 01:05:19.950
Ryan Mehta: There's a way you can use spread to get away like to use the old value of age.

544
01:05:21.030 --> 01:05:28.590
Ryan Mehta: Or whatever event. So we're going to introduce another hook called us reducer which is the real way that you would handle like

545
01:05:29.790 --> 01:05:32.880
Ryan Mehta: More complicated state like this in the future.

546
01:05:33.930 --> 01:05:38.010
Ryan Mehta: So look forward to us, or D server, and then sets of problems.

547
01:05:49.920 --> 01:05:51.270
Ryan Mehta: Alright, this look. Okay.

548
01:05:53.760 --> 01:05:56.400
Ryan Mehta: What if we didn't distract from this left hand side.

549
01:06:03.600 --> 01:06:04.830
Ryan Mehta: How would we get

550
01:06:06.120 --> 01:06:10.560
Ryan Mehta: Name down here, what would I have to replace these two things with

551
01:06:14.370 --> 01:06:15.060
ryan Diffenbaugh: New stuff.

552
01:06:17.040 --> 01:06:17.880
ryan Diffenbaugh: Stuff.

553
01:06:20.280 --> 01:06:22.020
Ryan Mehta: That's part that's part of it.

554
01:06:22.590 --> 01:06:23.490
Adrian Simental: Would it be state.

555
01:06:26.130 --> 01:06:27.270
Ryan Mehta: There's no state here.

556
01:06:29.100 --> 01:06:30.870
Ryan Mehta: Sub Zero. Yeah, exactly.

557
01:06:32.880 --> 01:06:41.340
Ryan Mehta: Sub Zero because this returns in array. The first item of the array is the state itself.

558
01:06:42.450 --> 01:06:47.250
Ryan Mehta: And the second item of the array is our center function. So what would this have to change to

559
01:06:49.860 --> 01:06:50.490
ryan Diffenbaugh: Use do

560
01:06:53.280 --> 01:06:56.640
Ryan Mehta: Not use state. The state returns the center function.

561
01:06:57.150 --> 01:06:57.930
Patrick Wilson: Name stuff.

562
01:06:58.980 --> 01:06:59.610
Ron Yonker: dumb blonde.

563
01:07:00.300 --> 01:07:00.870
Exactly.

564
01:07:03.630 --> 01:07:06.450
Ryan Mehta: And then everything behaves the same as it did before.

565
01:07:08.610 --> 01:07:21.930
Ryan Mehta: This is horrendously ugly. It doesn't look nice. It's, it's not pleasant, which is why we typically do structure names stuff into name and set me

566
01:07:27.600 --> 01:07:44.910
Ryan Mehta: Like so. So sub one is now called name so we can replace all these sub ones are sorry sub zero is now called name so we can replace all of these sub zero's with name and sub one is now called

567
01:07:46.200 --> 01:07:47.190
Ryan Mehta: Set name.

568
01:07:48.390 --> 01:07:51.870
Ryan Mehta: You can replace those names like so.

569
01:07:52.800 --> 01:08:01.410
Ron Yonker: It took me reading the documentation that you assigned us to finally understand object. I mean a range of structuring

570
01:08:01.980 --> 01:08:02.430
Nice.

571
01:08:11.160 --> 01:08:12.450
Ryan Mehta: Alright, this look. Okay.

572
01:08:14.670 --> 01:08:15.270
All right.

573
01:08:16.680 --> 01:08:25.650
Ryan Mehta: Let's put this all into a bigger package. Let's rewrite our color picker.

574
01:08:29.190 --> 01:08:31.140
Ryan Mehta: Minute close out the browser for now.

575
01:08:33.210 --> 01:08:42.420
Ryan Mehta: Let's start off. So just so you remember our color picker application is a browser window.

576
01:08:44.040 --> 01:08:46.050
Ryan Mehta: With a color and put

577
01:08:48.600 --> 01:08:50.370
Ryan Mehta: Another color and put

578
01:08:52.830 --> 01:08:54.210
Ryan Mehta: This one is blue.

579
01:08:55.320 --> 01:08:57.360
Ryan Mehta: And a text input.

580
01:08:59.550 --> 01:09:03.930
Ryan Mehta: Down below, we have a display say this is text.

581
01:09:05.400 --> 01:09:06.570
Ryan Mehta: The background color.

582
01:09:08.010 --> 01:09:12.060
Ryan Mehta: Is going to be the color that we selected first and the text color.

583
01:09:13.290 --> 01:09:18.540
Ryan Mehta: Is going to be the second color that we selected want to remember this application for the most part.

584
01:09:20.310 --> 01:09:20.910
Ryan Mehta: All right.

585
01:09:22.830 --> 01:09:33.630
Ryan Mehta: So we have two components to presentational components that we're going to want to create a display presentational component

586
01:09:36.000 --> 01:09:39.780
Ryan Mehta: And a controls presentational components.

587
01:09:42.960 --> 01:09:49.740
Ryan Mehta: And then surrounding these is a our is our color picker container.

588
01:09:54.510 --> 01:10:10.590
Ryan Mehta: Our color picker container is going to have three pieces of state, it's going to have a background color piece of state. It's going to have the foreground color piece of state and it's going to have a text piece of state.

589
01:10:11.610 --> 01:10:16.560
Ryan Mehta: It's also going to have a single interaction a handle change interaction.

590
01:10:19.710 --> 01:10:24.630
Ryan Mehta: That will be able to change the background color foreground color or text color.

591
01:10:27.030 --> 01:10:27.780
Make sense

592
01:10:30.060 --> 01:10:38.220
Ryan Mehta: We're going to write this application two ways we're going to write it with hooks and without hooks. So the old way and the new way.

593
01:10:39.390 --> 01:10:41.460
Ryan Mehta: We'll see how that looks. In both cases.

594
01:10:42.900 --> 01:10:48.900
Ryan Mehta: All right. Let's start off with our presentational components. Our controls and our display.

595
01:10:50.010 --> 01:10:53.790
Ryan Mehta: So under components. I am going to create a directory called

596
01:10:55.110 --> 01:10:56.070
Ryan Mehta: Color Picker.

597
01:10:59.610 --> 01:11:13.470
Ryan Mehta: picker. And then inside of this directory. I'm going to write a display J SX file, which will be a presentational component called display.

598
01:11:14.400 --> 01:11:26.850
Ryan Mehta: Our display presentational components is going to need the background color the foreground color and the text as props to know what to put so we'll get a background color.

599
01:11:27.690 --> 01:11:38.730
Ryan Mehta: Background color is a string that is required. We're going to get foreground color which is also a string that is acquired and we're going to get text.

600
01:11:39.780 --> 01:11:46.830
Ryan Mehta: Which again is a required string those three pieces of props that we need to create our display.

601
01:11:48.150 --> 01:12:03.870
Ryan Mehta: Will the structure background color foreground color and text off of props and then will display these props inside of a section with our text in the section and then we'll set our style.

602
01:12:05.460 --> 01:12:06.300
Ryan Mehta: To

603
01:12:07.620 --> 01:12:17.010
Ryan Mehta: back ground color the G color, color will be foreground color will give this thing a with always

604
01:12:18.150 --> 01:12:18.810
Ryan Mehta: Say,

605
01:12:20.100 --> 01:12:22.080
Ryan Mehta: 500 pixels and

606
01:12:23.820 --> 01:12:25.500
500 pixels.

607
01:12:27.480 --> 01:12:28.770
Ryan Mehta: Let's put these

608
01:12:30.690 --> 01:12:31.410
Online.

609
01:12:37.470 --> 01:12:39.780
Ryan Mehta: This presentational components him. Okay.

610
01:12:43.800 --> 01:12:54.450
Ryan Mehta: Okay so background color foreground color width and height, too. So we can see our components, a little bit for go back to app JS or comment this thing out again.

611
01:12:56.610 --> 01:12:59.130
Ryan Mehta: Let's export default function.

612
01:13:03.690 --> 01:13:10.920
Ryan Mehta: And return our display, just so we can see it on the page will give it a background color of

613
01:13:12.660 --> 01:13:13.170
Ryan Mehta: Red

614
01:13:15.210 --> 01:13:15.690
Whoops.

615
01:13:19.410 --> 01:13:22.230
Ryan Mehta: Will give it up for ground color of

616
01:13:24.900 --> 01:13:25.470
Green.

617
01:13:26.760 --> 01:13:27.330
Ryan Mehta: Text.

618
01:13:33.510 --> 01:13:35.730
Ryan Mehta: Let's see what that ends up looking like

619
01:13:40.680 --> 01:13:42.210
Ryan Mehta: All right, it's gigantic

620
01:13:43.740 --> 01:13:44.310
Annalise Murphy: And bright

621
01:13:45.180 --> 01:14:02.160
Ryan Mehta: Bright, so there's our little display presentational components. Seems like it works normally here we would take a snapshot test, I'm going to avoid the snapshot test just for the sake of time, but since everything looks good. At this point, we should normally take a snapshot test.

622
01:14:03.990 --> 01:14:12.750
Ryan Mehta: All right, we have our display presentational components. Let's make our controls presentational components next

623
01:14:14.130 --> 01:14:27.210
Ryan Mehta: So under color picker. I'm going to make a Rolls J SX will have another function presentational components called controls.

624
01:14:28.320 --> 01:14:40.500
Ryan Mehta: Controls is going to need the background color the foreground color text and it also needs a way to change all of these things. So it will need an on change function as well.

625
01:14:41.550 --> 01:14:43.110
Ryan Mehta: So you have background color.

626
01:14:46.800 --> 01:14:58.080
Ryan Mehta: Which is a string that is acquired you have foreground color, which is a string that is required. We hen Waples: Or yeah get monthly. Yes. Yeah. All right.

293
00:25:40.740 --> 00:25:44.640
Ben Waples: Good month there it is nice and then call that, and then we'll do the same thing for good day.

294
00:25:54.630 --> 00:25:55.380
Greg Mall: Date or date.

295
00:25:58.920 --> 00:25:59.340
Patrick Wilson: Date.

296
00:25:59.970 --> 00:26:00.270
Yeah.

297
00:26:03.570 --> 00:26:04.140
Ben Waples: Yeah.

298
00:26:05.760 --> 00:26:13.050
Ben Waples: And then you should be able to copy and paste everything from the first curly person to the last one, and then paste it into the

299
00:26:15.240 --> 00:26:18.300
Ben Waples: There's probably a prettier way to do this too. I guess maybe, but

300
00:26:20.430 --> 00:26:21.720
Ryan Mehta: They could probably make a variable.

301
00:26:21.930 --> 00:26:22.560
Yeah.

302
00:26:24.120 --> 00:26:27.480
Ben Waples: Be below line to do concerts today.

303
00:26:29.400 --> 00:26:32.640
Ben Waples: Equals and then paste and put that into

304
00:26:33.750 --> 00:26:34.950
Ben Waples: The back techs

305
00:26:36.900 --> 00:26:37.920
Ben Waples: And then

306
00:26:39.030 --> 00:26:40.500
Ben Waples: In the Yaffe

307
00:26:41.970 --> 00:26:50.400
Ben Waples: In the curly or the template literal after from yeah but instead of now get full year. You could do

308
00:26:51.930 --> 00:26:52.170
Greg Mall: Today,

309
00:26:52.950 --> 00:26:59.910
Ben Waples: Yeah so delete that. And then put today. Yep. And then same thing for the two

310
00:27:02.010 --> 00:27:02.310
Ben Waples: Yeah.

311
00:27:04.380 --> 00:27:06.810
Ben Waples: A little bit up right there. Yeah.

312
00:27:09.450 --> 00:27:10.380
Ben Waples: It should still work.

313
00:27:19.500 --> 00:27:19.890
Ben Waples: Me.

314
00:27:26.430 --> 00:27:27.270
Ben Waples: Rocks.

315
00:27:27.930 --> 00:27:29.070
Ryan Mehta: Check the network call

316
00:27:29.940 --> 00:27:31.980
Ryan Mehta: Like go to the Network tab and let's see what it

317
00:27:33.030 --> 00:27:34.320
Ryan Mehta: What the request looks like.

318
00:27:35.820 --> 00:27:37.590
Ryan Mehta: Might have to press that search button again.

319
00:27:43.920 --> 00:27:45.000
Ben Waples: Is it still the 20th

320
00:27:47.430 --> 00:27:50.400
Ryan Mehta: Yeah, it looks like it didn't re render did is your

321
00:27:51.960 --> 00:27:52.740
Greg Mall: Date right there.

322
00:27:53.940 --> 00:27:55.950
Ryan Mehta: But in the URL up above a little bit

323
00:27:58.950 --> 00:28:01.350
Ryan Mehta: So you can check your web pack to make sure it's

324
00:28:02.520 --> 00:28:04.290
Ryan Mehta: Still compiling successfully.

325
00:28:08.850 --> 00:28:09.390
Greg Mall: Here in

326
00:28:11.190 --> 00:28:11.910
Your terminal.

327
00:28:13.980 --> 00:28:17.460
Ryan Mehta: Whatever terminal like you did MPM start into

328
00:28:21.540 --> 00:28:24.990
Ryan Mehta: Map to MPM start again. It looks like looks like. You may have killed it.

329
00:28:30.930 --> 00:28:31.860
Ben Waples: There's the end

330
00:28:32.460 --> 00:28:35.820
Greg Mall: Yeah, that's what it was failing me. Yeah.

331
00:28:38.490 --> 00:28:39.900
Ryan Mehta: reload this page.

332
00:28:47.940 --> 00:28:49.050
Ryan Mehta: Okay, check it out.

333
00:28:52.350 --> 00:28:53.070
Greg Mall: That was

334
00:28:53.400 --> 00:28:53.880
Ben Waples: Trying to

335
00:28:56.190 --> 00:28:56.970
Ryan Mehta: Check out the month.

336
00:29:00.150 --> 00:29:02.400
Greg Mall: That's, that's a

337
00:29:03.090 --> 00:29:05.370
Greg Mall: Day, I'd be worried about September, right.

338
00:29:06.630 --> 00:29:08.550
Ben Waples: Oh, it is tember September.

339
00:29:09.780 --> 00:29:18.900
Ryan Mehta: So get month is zero index. So it's not like our human dates were January is month one January's month zero with

340
00:29:23.130 --> 00:29:26.940
Ben Waples: Yeah, plus one in the variable.

341
00:29:29.400 --> 00:29:30.390
Services.

342
00:29:31.620 --> 00:29:32.520
Greg Mall: So,

343
00:29:33.300 --> 00:29:34.440
Ben Waples: I'm in the

344
00:29:35.520 --> 00:29:37.920
Ben Waples: Day, you can just probably add plus one right there and it should

345
00:29:39.990 --> 00:29:40.440
Ben Waples: Do it.

346
00:29:57.780 --> 00:29:58.590
Ben Waples: Next one.

347
00:30:01.050 --> 00:30:02.790
Ben Waples: Here we go. Nice.

348
00:30:03.360 --> 00:30:05.250
Annalise Murphy: All right. Oh.

349
00:30:06.660 --> 00:30:06.990
Greg Mall: Sorry.

350
00:30:07.560 --> 00:30:08.100
Fellas,

351
00:30:10.110 --> 00:30:10.890
Greg Mall: Genius.

352
00:30:13.170 --> 00:30:13.950
Greg Mall: NASA stuff.

353
00:30:14.700 --> 00:30:17.160
Annalise Murphy: Nice. Awesome.

354
00:30:18.270 --> 00:30:21.810
Brooke Perkins (she/her): I'm sorry. So you did what to get it to do the right month

355
00:30:22.170 --> 00:30:25.470
Greg Mall: Can I one because index starts at zero.

356
00:30:25.680 --> 00:30:31.950
Greg Mall: I'm so he had one and it puts it, what expects to search as. Gotcha.

357
00:30:32.790 --> 00:30:35.190
Patrick Wilson: I'd probably put a space on either side of the plus

358
00:30:36.630 --> 00:30:39.540
Patrick Wilson: I think it's pretty normal convention to put it around all math.

359
00:30:40.980 --> 00:30:41.370
Greg Mall: The right

360
00:30:42.690 --> 00:30:43.050
Ways.

361
00:30:44.070 --> 00:30:45.990
Greg Mall: I mean you get that prettier extension.

362
00:30:48.960 --> 00:30:49.200
Annalise Murphy: That was

363
00:30:49.290 --> 00:30:51.450
Greg Mall: Odd with your parents aren't too.

364
00:30:51.750 --> 00:30:55.290
Annalise Murphy: What, what's up with your end, what was it saying earlier, Greg said your

365
00:30:55.530 --> 00:31:02.190
Greg Mall: Issues and once you can pop it a this whenever I started this including yesterday. It just failed.

366
00:31:03.420 --> 00:31:05.850
Greg Mall: Forget what the failed error was spelled alone.

367
00:31:06.540 --> 00:31:07.890
Annalise Murphy: Whereas you MB.

368
00:31:13.350 --> 00:31:15.000
Greg Mall: I guess I don't have one anymore.

369
00:31:16.680 --> 00:31:19.080
Greg Mall: I haven't, I haven't created it. I was going to

370
00:31:19.110 --> 00:31:19.710
Greg Mall: Put in

371
00:31:20.430 --> 00:31:21.660
Greg Mall: Yesterday, and I forgot.

372
00:31:21.690 --> 00:31:23.340
Annalise Murphy: That simple facts. Yeah.

373
00:31:24.300 --> 00:31:28.680
Annalise Murphy: Okay, I had, I had kind of a similar issue, I guess, today, and it was just

374
00:31:28.950 --> 00:31:32.640
Annalise Murphy: A trailing space that I couldn't see in the file so

375
00:31:33.300 --> 00:31:34.290
Ron Yonker: You need a dot m

376
00:31:35.610 --> 00:31:38.280
Greg Mall: It probably smart just I can hide my API key.

377
00:31:41.340 --> 00:31:43.740
Greg Mall: But yeah, I mean, just to get this will work.

378
00:31:44.220 --> 00:31:46.650
Annalise Murphy: It looks good though you didn't. Great.

379
00:31:48.330 --> 00:31:49.140
Ryan Mehta: Yeah. Nice.

380
00:31:49.440 --> 00:31:52.710
Ryan Mehta: The only other thing I would say is you probably want this services directory

381
00:31:53.100 --> 00:31:55.620
Ryan Mehta: Outside of components because it's not really a component

382
00:31:57.120 --> 00:31:57.570
Greg Mall: Okay.

383
00:32:06.270 --> 00:32:06.990
Ryan Mehta: That's that's

384
00:32:07.320 --> 00:32:10.290
Ryan Mehta: Probably going to break the next thing that we're going to look at

385
00:32:11.430 --> 00:32:15.270
Ryan Mehta: Let's take a look at your containers and

386
00:32:16.200 --> 00:32:18.780
Greg Mall: Singular container. Yeah.

387
00:32:20.370 --> 00:32:21.330
Greg Mall: This is what I call

388
00:32:22.560 --> 00:32:23.670
Greg Mall: Services.

389
00:32:29.340 --> 00:32:30.180
Greg Mall: Components.

390
00:32:34.740 --> 00:32:37.560
Greg Mall: Let's see, it is one. Yep.

391
00:32:39.240 --> 00:32:40.170
Ryan Mehta: Yep, I think you got it.

392
00:32:41.310 --> 00:32:44.130
Ryan Mehta: Compiled successfully now so good.

393
00:32:45.960 --> 00:32:53.160
Ryan Mehta: All right, Brian, do you want to take us through maybe not the whole file, but maybe through line 16

394
00:32:55.590 --> 00:33:03.480
Brian McPhillips: Yeah, so it looks like he's doing the handle. Submit. It's an AC function with the he has a target.

395
00:33:03.780 --> 00:33:06.870
Ryan Mehta: Climate like from like

396
00:33:07.080 --> 00:33:08.340
Ryan Mehta: Wild 16

397
00:33:08.910 --> 00:33:13.320
Brian McPhillips: From one to 16 so sorry, and then importing all of

398
00:33:15.300 --> 00:33:22.260
Brian McPhillips: That, you know, regular read react from react, it looks like he's importing the articles component, the search the loading the search news.

399
00:33:23.460 --> 00:33:25.950
Brian McPhillips: Looks like it's a class based component

400
00:33:27.420 --> 00:33:29.400
Brian McPhillips: It's a setting state at the top.

401
00:33:30.600 --> 00:33:35.640
Brian McPhillips: Setting loading the false the text and know and articles as an empty array.

402
00:33:37.020 --> 00:33:43.110
Brian McPhillips: And then the next line is where he's doing the handle change with the target and it's setting state as target that value.

403
00:33:45.360 --> 00:33:45.660
Brian McPhillips: Target.

404
00:33:46.080 --> 00:33:48.090
Ryan Mehta: Users that handle change function for

405
00:33:50.040 --> 00:33:54.420
Brian McPhillips: That's going to be when you type in the text is going to set the state to whatever the

406
00:33:55.560 --> 00:33:57.480
Brian McPhillips: The text input boxes.

407
00:33:59.610 --> 00:34:00.720
Nice. Perfect.

408
00:34:01.860 --> 00:34:04.500
Ryan Mehta: Anything any critiques or anything that you would change.

409
00:34:05.490 --> 00:34:08.760
Brian McPhillips: I mean, from one line one to 16 it looks pretty solid.

410
00:34:10.500 --> 00:34:13.680
Ryan Mehta: Yeah, great. Anybody else anything that they will change from

411
00:34:15.540 --> 00:34:16.440
One to 16

412
00:34:18.630 --> 00:34:25.650
Annalise Murphy: Probably a space for the arrow sign on the handle change on 14 yeah that's, yeah.

413
00:34:26.700 --> 00:34:27.330
My size.

414
00:34:29.640 --> 00:34:30.240
Ryan Mehta: All right.

415
00:34:31.980 --> 00:34:38.220
Ryan Mehta: How many lines is this, Greg. How far down does this thing go. Okay. And then I guess to the end of the file.

416
00:34:40.020 --> 00:34:40.560
Ryan Mehta: Brooke.

417
00:34:42.750 --> 00:34:43.470
Brooke Perkins (she/her): Hello.

418
00:34:44.910 --> 00:34:45.510
Brooke Perkins (she/her): All right.

419
00:34:47.130 --> 00:34:50.310
Brooke Perkins (she/her): So, I'm sorry, starting from the handle change to the end of the file is that

420
00:34:50.640 --> 00:34:52.860
Ryan Mehta: Yeah, so starting with handle submit

421
00:34:54.030 --> 00:35:16.410
Brooke Perkins (she/her): Gotcha. So, oh handle submit. I'm all right. Yes. So we've got an asynchronous handle submit function that's taking in the event, and we have online 19 it's preventing the default which will does that refresh the browser. I forget what it does.

422
00:35:16.560 --> 00:35:17.400
Ryan Mehta: Because, yeah.

423
00:35:17.490 --> 00:35:27.690
Brooke Perkins (she/her): Yeah, I'm so setting state that that's what's gonna call the loading beer thing, um,

424
00:35:29.970 --> 00:35:33.360
Brooke Perkins (she/her): And then we're calling search news.

425
00:35:35.640 --> 00:35:39.210
Brooke Perkins (she/her): We're going to go through the state and get the text from that.

426
00:35:40.410 --> 00:35:41.580
Brooke Perkins (she/her): And then

427
00:35:43.170 --> 00:35:46.410
Brooke Perkins (she/her): Article articles. This that's it so

428
00:35:47.940 --> 00:35:53.550
Brooke Perkins (she/her): We're going to okay then. Okay. Wow, so

429
00:35:56.220 --> 00:36:00.810
Brooke Perkins (she/her): Oh my gosh, I don't really know how to explain what's happening here from honest, I'm

430
00:36:01.980 --> 00:36:14.910
Brooke Perkins (she/her): Articles, we're getting to going to set state. So I guess we have a function where we're making articles into resetting the state of articles to this d structured articles. Is that right,

431
00:36:16.440 --> 00:36:32.040
Ryan Mehta: So on the right hand side here works, you always put the curly braces and he said state because you have an object of state appear so this is getting articles from the API and then setting state to the articles.

432
00:36:32.310 --> 00:36:37.530
Brooke Perkins (she/her): Gotcha. Yes. Okay. That does me okay yes I'm

433
00:36:39.660 --> 00:36:54.600
Brooke Perkins (she/her): Then okay so that's happening there. And then we're setting a timeout. Um, so, which is just, I guess, like that's going to give up. If it takes too long, um,

434
00:36:56.820 --> 00:37:11.850
Brooke Perkins (she/her): This does that say so. Same with loading setting state like an inline. Same thing is happening here, sort of, we're describing the loading state as false here and

435
00:37:14.130 --> 00:37:24.480
Brooke Perkins (she/her): It's going to be, oh wait, so the timeout. No, no, sorry. So the timeout where we're doing. We're going to set loading true unless it's

436
00:37:26.550 --> 00:37:34.860
Brooke Perkins (she/her): Unless it takes 2000 seconds and then it's going to time out. I guess is what I think is happening like 23 to 25

437
00:37:35.910 --> 00:37:36.540
Brooke Perkins (she/her): Um,

438
00:37:38.490 --> 00:37:39.600
Brooke Perkins (she/her): Let me know if I'm wrong.

439
00:37:40.740 --> 00:37:43.530
Ryan Mehta: Yeah, I think Greg did a little hack here.

440
00:37:43.710 --> 00:37:45.210
Ryan Mehta: Yeah, it's not a bug.

441
00:37:45.450 --> 00:37:45.900
Greg Mall: That well

442
00:37:47.790 --> 00:37:59.340
Greg Mall: Last night we weren't seeing our loading screen long enough, because we had cool graphics. So we basically just threw that in there. So it'll, at least for two seconds show the loading screen. And that's pretty much all that does

443
00:38:00.030 --> 00:38:08.640
Greg Mall: 2000 I was, uh, yeah, I know it's, I'm sorry, that's really nothing to do but just kind of show off the loading screen a little longer.

444
00:38:09.060 --> 00:38:10.050
Patrick Wilson: Never the same thing.

445
00:38:10.410 --> 00:38:12.090
Greg Mall: You can totally get rid of that and

446
00:38:12.120 --> 00:38:15.270
Greg Mall: Just ended here and it would function just fine, except

447
00:38:16.770 --> 00:38:21.690
Greg Mall: I would set. I would also set loading the false inside that said say

448
00:38:23.100 --> 00:38:31.860
Brooke Perkins (she/her): Well, I appreciate it, because I don't have that in mind. And I want to learn how to talk about things that I don't already know. So thank you.

449
00:38:32.220 --> 00:38:36.570
Greg Mall: That was all entered. You can sign up for that last night around 1030

450
00:38:37.140 --> 00:38:38.130
Brooke Perkins (she/her): Nice job, Edgar.

451
00:38:39.090 --> 00:38:39.480
Edgar Cuellar: Thank you.

452
00:38:39.600 --> 00:38:40.020
Um,

453
00:38:41.580 --> 00:38:52.470
Brooke Perkins (she/her): So then 28 line 28 we're rendering. We've got text articles and loading. And if it's loading, we're going to return the loading.

454
00:38:53.550 --> 00:38:57.210
Brooke Perkins (she/her): That component, um,

455
00:38:58.740 --> 00:38:59.340
Brooke Perkins (she/her): And then

456
00:39:00.690 --> 00:39:04.560
Brooke Perkins (she/her): We're returning the search and articles also

457
00:39:07.290 --> 00:39:14.310
Brooke Perkins (she/her): Which is okay. So yes, we're going to get the text and on change. It's going to handle change is going to handle submit on the Submit.

458
00:39:15.360 --
00:32:46.860 --> 00:32:50.280
Ryan Mehta: invoking this function over here.

272
00:32:52.560 --> 00:32:53.640
Are you so unhappy.

273
00:32:59.010 --> 00:33:01.140
Ryan Mehta: They have to rename that Jason, we are they have a card.

274
00:33:02.760 --> 00:33:08.760
Ryan Mehta: So making this fetch request is invoking this function over here.

275
00:33:09.810 --> 00:33:28.350
Ryan Mehta: It's just a little bit crazy syntax or like crazier than our normal API calls. Because it needs to go over HTTP. So we need to tell it the location of this server on that server. What's function to call, which is a combination of the path.

276
00:33:29.520 --> 00:33:30.360
Ryan Mehta: And the method.

277
00:33:32.460 --> 00:33:47.190
Ryan Mehta: What type of data we're giving it and the data itself. This is like insert passing at the data invoking the function, you don't really pass it some information with our fetch this is passing it information.

278
00:33:49.410 --> 00:34:00.840
Ryan Mehta: On the left hand side, we then get our response over here. We await and get our response we parse the responses JSON and handle it.

279
00:34:01.860 --> 00:34:02.820
However, we want

280
00:34:04.230 --> 00:34:10.350
Ryan Mehta: But we're still making this API call. This is just invoking that function over there.

281
00:34:12.420 --> 00:34:13.140
Make sense

282
00:34:17.370 --> 00:34:17.730
Okay.

283
00:34:18.780 --> 00:34:25.140
Ryan Mehta: So we have our service next step that we said we were going to do is build a view for our service.

284
00:34:27.030 --> 00:34:29.670
Ryan Mehta: We could do that in Redux we could do it.

285
00:34:31.620 --> 00:34:40.200
Ryan Mehta: Any of the styles that we've got done up until now, we've made this connection with our back end of from here on out going forward.

286
00:34:41.130 --> 00:34:53.760
Ryan Mehta: We don't really care, we can utilize this service in whatever way we want to. It's like invisible to us that we're using our own back end and not somebody else's. And because of that, we can use any of these sort of

287
00:34:55.290 --> 00:35:01.350
Ryan Mehta: React patterns that we've learned up until now. Does anybody have a preference.

288
00:35:03.750 --> 00:35:05.610
Ron Yonker: We do on the forward party right

289
00:35:07.500 --> 00:35:15.780
Ron Yonker: Sorry, what would happen if you didn't have that header section on walk between walk ons for six foot the content type application JSON.

290
00:35:16.680 --> 00:35:17.160
Ron Yonker: It would

291
00:35:17.220 --> 00:35:21.210
Ryan Mehta: The request would fail because they wouldn't know that this body is JSON.

292
00:35:22.650 --> 00:35:28.260
Ryan Mehta: By default this the content type defaults to text plane.

293
00:35:29.850 --> 00:35:33.060
Ryan Mehta: So we think that we're just sending in a string and not an object.

294
00:35:34.110 --> 00:35:35.820
Ron Yonker: Okay, thank you.

295
00:35:37.800 --> 00:35:40.350
Greg Mall: Would you mind doing one in Redux as an example.

296
00:35:41.010 --> 00:35:41.940
Redux yeah

297
00:35:43.980 --> 00:35:44.460
Ryan Mehta: Okay.

298
00:35:47.100 --> 00:36:01.260
Ryan Mehta: So we're going to on our front end install Redux React redux will do it all on one page, though. And so we won't use the router in this case.

299
00:36:02.280 --> 00:36:11.640
Ryan Mehta: And Redux Thunk will need the funk middleware because we want to make this asynchronous want to use this asynchronous service in our action.

300
00:36:14.610 --> 00:36:29.520
Ryan Mehta: Alright, so we will install those three things while that's going inside of source. Let's make your producers folder and an index today. Is this where we're going to put our combined with you, sir.

301
00:36:32.130 --> 00:36:41.280
Ryan Mehta: I always forget exactly is a combined or combined reducer or producers, let's import from first and like VS Code.

302
00:36:42.450 --> 00:36:43.860
Ryan Mehta: Combined producers.

303
00:36:45.720 --> 00:36:54.240
Ryan Mehta: We're going to export the fault combined producers, we need to give it some producers eventually

304
00:36:56.100 --> 00:37:01.710
Ryan Mehta: We'll come back to this in a second. We're going to make our card reducer and drop it here in a second.

305
00:37:04.410 --> 00:37:09.630
Ryan Mehta: Inside of source. We're also going to create a store.js

306
00:37:10.980 --> 00:37:14.100
Ryan Mehta: Here we're going to import create store.

307
00:37:15.240 --> 00:37:21.270
Ryan Mehta: From Redux for us are going to import apply middleware and compose

308
00:37:22.710 --> 00:37:25.650
Ryan Mehta: And then we're going to export default

309
00:37:27.360 --> 00:37:38.160
Ryan Mehta: Store with a reducer. One of the reduced so that we just created the combined reducer. We're going to apply middleware with our thunk middleware.

310
00:37:39.360 --> 00:37:41.970
Ryan Mehta: Which we will also import

311
00:37:43.200 --> 00:37:54.210
Ryan Mehta: And then since we want to use Redux dev tools we need to surround this with that compose enhancers thing that Redux Dev Tools gives us when they grabbed that on GitHub.

312
00:37:58.290 --> 00:38:02.100
Ryan Mehta: Sorry, I could I it's impossible for me to memorize this line.

313
00:38:03.150 --> 00:38:03.840
Ryan Mehta: I think

314
00:38:08.070 --> 00:38:12.300
Ryan Mehta: I guess I could I could try. I've been doing this for like

315
00:38:13.980 --> 00:38:16.470
Ryan Mehta: Years now I should try to remember this.

316
00:38:21.780 --> 00:38:22.680
Brooke Perkins (she/her): Is right there.

317
00:38:23.670 --> 00:38:24.750
Ryan Mehta: Yeah, I agree.

318
00:38:25.830 --> 00:38:26.940
Ryan Mehta: Seems so painful.

319
00:38:32.190 --> 00:38:36.270
Ryan Mehta: And it will autocomplete either. So it's so likely that there's a typo.

320
00:38:38.760 --> 00:38:42.300
Ryan Mehta: Alright dev tools are set up in

321
00:38:42.360 --> 00:38:42.690
App.

322
00:38:44.010 --> 00:38:45.720
Ron Yonker: Launch five doing

323
00:38:46.440 --> 00:38:48.450
Ryan Mehta: This is setting up the Redux dev tools.

324
00:38:52.170 --> 00:38:55.500
Ryan Mehta: The Redux dev tools when you install a

325
00:38:56.820 --> 00:38:58.050
Ryan Mehta: Chrome extension.

326
00:38:58.500 --> 00:39:09.480
Ryan Mehta: It puts this variable on the window. So whenever you're installing Chrome extensions. It's changing the JavaScript that's running on the page. Every page that you load.

327
00:39:10.410 --> 00:39:17.610
Ron Yonker: So are you doing that. So you have a way to show what's going on in Redux dev tools.

328
00:39:18.000 --> 00:39:21.240
Ryan Mehta: Yep, this is what connects the Redux dev tools to our actual Redux

329
00:39:21.240 --> 00:39:24.270
Ron Yonker: Application. Okay. All right.

330
00:39:26.130 --> 00:39:35.580
Adrian Simental: Ryan Just like how you have a are fun for react function. Could you do like a shorthand for the line five or just any line.

331
00:39:36.090 --> 00:39:37.830
Ryan Mehta: Totally, yeah.

332
00:39:38.100 --> 00:39:39.030
Adrian Simental: totally do that.

333
00:39:39.360 --> 00:39:40.410
Ryan Mehta: Let's snip it pour it

334
00:39:45.660 --> 00:39:49.350
Ryan Mehta: Okay, let's put our provider here now.

335
00:39:50.580 --> 00:39:51.900
Ryan Mehta: In app JS.

336
00:39:55.980 --> 00:39:56.940
Ryan Mehta: Provider

337
00:39:58.440 --> 00:40:00.750
Ryan Mehta: Provider needs a store.

338
00:40:03.810 --> 00:40:18.360
Ryan Mehta: Import that so important provider from React redux importing our store. The thing that we've just created. And then everything else will be a child of this provider. So every other component will be connected to our store going forward.

339
00:40:20.460 --> 00:40:21.000
Ryan Mehta: With good

340
00:40:23.100 --> 00:40:23.580
Ryan Mehta: Okay.

341
00:40:25.590 --> 00:40:39.390
Ryan Mehta: We have our service over here. I think the next step is to create something that lets us actually utilize the service. So some sort of form that lets us create a

342
00:40:43.560 --> 00:40:44.370
Ryan Mehta: Create a card.

343
00:40:45.660 --> 00:40:48.480
Ryan Mehta: Let's go into components. Let's make a

344
00:40:49.980 --> 00:40:55.950
Ryan Mehta: Create card holder and I create card sex file.

345
00:41:05.220 --> 00:41:05.850
Ryan Mehta: All right.

346
00:41:08.040 --> 00:41:19.530
Ryan Mehta: So few things that this thing is going to have to do first is going to have to return some J sex. It's also going to need to handle input changes.

347
00:41:20.880 --> 00:41:22.980
Ryan Mehta: And it's an immediate handles.

348
00:41:26.340 --> 00:41:35.250
Ryan Mehta: All right, let's start off by just constructing our warm and see what we need to plug in. So a card has a

349
00:41:38.670 --> 00:41:39.270
Ryan Mehta: Name.

350
00:41:42.810 --> 00:41:49.380
Ryan Mehta: A card had a description. I'm going to make it a text area because the description can be kind of long.

351
00:41:54.360 --> 00:41:58.080
Ryan Mehta: And it has a cost say

352
00:41:59.220 --> 00:41:59.910
Ryan Mehta: Type

353
00:42:06.180 --> 00:42:08.040
Ryan Mehta: And then we should have a button.

354
00:42:09.600 --> 00:42:10.200
Ryan Mehta: Card.

355
00:42:14.700 --> 00:42:15.510
Ryan Mehta: Or a little form.

356
00:42:18.300 --> 00:42:24.180
Ryan Mehta: All right, we're going to want to set these three inputs up with state.

357
00:42:25.350 --> 00:42:26.760
Ryan Mehta: We have a choice here.

358
00:42:28.410 --> 00:42:30.540
Ryan Mehta: Twice. Maybe that's not super clear but

359
00:42:31.680 --> 00:42:37.560
Ryan Mehta: We could store the state for these things in redux or we could store the state locally.

360
00:42:38.730 --> 00:42:50.880
Ryan Mehta: For me, generally, when I have a form I store the forms intermediate state locally and the passive in store again and redirect. So we can get more familiar with Redux

361
00:42:51.960 --> 00:42:59.550
Ryan Mehta: But this sort of state doesn't really need to live globally. This is the only component that's going to ever care about what we've typed into the forum.

362
00:43:00.180 --> 00:43:08.580
Ryan Mehta: No other component cares what we typed into the form until we press the Create button that's the only time anybody else will care about it.

363
00:43:09.480 --> 00:43:23.310
Ryan Mehta: Because of that, I feel like it's unnecessary to put this in global state. So what I usually do with these forms is I put all of the temporary form data into local state here using the US state hooks.

364
00:43:24.030 --> 00:43:28.740
Ryan Mehta: And then when they press the submit button that's when I'm going to send the state into Redux

365
00:43:30.180 --> 00:43:32.490
Ryan Mehta: So it's kind of like a balance between the two.

366
00:43:33.600 --> 00:43:38.070
Ryan Mehta: So let's see what that looks like we're going to create some names state.

367
00:43:43.920 --> 00:43:45.840
Ryan Mehta: We're going to construct some

368
00:43:47.400 --> 00:43:49.920
Ryan Mehta: Description state.

369
00:44:09.600 --> 00:44:10.050
Ryan Mehta: Was that

370
00:44:10.470 --> 00:44:11.130
Cost

371
00:44:12.240 --> 00:44:13.530
Ryan Mehta: Cost. Yeah. Thank you.

372
00:44:25.980 --> 00:44:26.700
Ryan Mehta: Default back to one.

373
00:44:28.500 --> 00:44:30.570
Ryan Mehta: Okay, and then we will put our

374
00:44:32.250 --> 00:44:35.460
Ryan Mehta: Name value for this one.

375
00:44:39.150 --> 00:44:39.900
Fiction.

376
00:44:45.090 --> 00:44:48.330
Ryan Mehta: And then we'll have our little intermediate handle change function.

377
00:44:51.360 --> 00:44:54.060
Ryan Mehta: That will take a target.

378
00:44:56.340 --> 00:44:58.380
Ryan Mehta: And if the target.

379
00:44:59.850 --> 00:45:00.570
Ryan Mehta: Is

380
00:45:26.940 --> 00:45:28.320
Ryan Mehta: Easy Way from

381
00:45:30.690 --> 00:45:31.140
Ryan Mehta: These

382
00:45:45.930 --> 00:46:07.080
Ryan Mehta: Alright, that looks good. Everyone so far. So using some local state to control the form and then we'll end up on submit sending this state in through Redux so I'm submitting this form, we're going to want to hit our API and create a card.

383
00:46:09.630 --> 00:46:14.730
Ryan Mehta: To do that, let's go back to our producers and create a card.

384
00:46:16.080 --> 00:46:18.510
Ryan Mehta: reducer.js file.

385
00:46:20.040 --> 00:46:29.010
Ryan Mehta: What's also at the same time, create a actions card actions that JS file.

386
00:46:30.390 --> 00:46:38.010
Ryan Mehta: Actions are over here on the left reducer over here on the right, we are going to have some initial state.

387
00:46:39.750 --> 00:46:40.620
Ryan Mehta: I think

388
00:46:41.670 --> 00:46:50.220
Ryan Mehta: Right now, let's just have a list of cards in this state container and then we'll turn to export default

389
00:46:51.360 --> 00:47:00.930
Ryan Mehta: Function reducer take state and an action and then we're going to have a switch and action type

390
00:47:02.430 --> 00:47:05.850
Ryan Mehta: You're going to have a default case will turn state.

391
00:47:07.320 --> 00:47:10.440
Ryan Mehta: And then we were our first of all action where we

392
00:47:11.610 --> 00:47:17.430
Ryan Mehta: Fetch from that API. So we're going to have a new action called

393
00:47:20.130 --> 00:47:21.270
Ryan Mehta: Create card.

394
00:47:22.350 --> 00:47:36.270
Ryan Mehta: Create card is going to take a card that we want to create it's going to return a function that takes dispatch and inside of here, we're going to actually call our service. So here we're going to post a card.

395
00:47:37.290 --> 00:47:45.990
Ryan Mehta: With the card that we want to create. We're going to get this card from the form eventually when we submit the form. We're going to be responsible for constructing this card.

396
00:47:47.370 --> 00:47:51.750
Ryan Mehta: After we finished with the post. We're going to get back the

397
00:47:53.760 --> 00:47:55.230
Ryan Mehta: Created card.

398
00:47:57.570 --> 00:48:05.730
Ryan Mehta: With that created card. We're going to want to somehow send it into this list on their reducer right

399
00:48:07.140 --> 00:48:18.660
Ryan Mehta: To do that we're going to need another action, an action that like a pens a card or pre pens a card, the list. I'm going to make a little explore concept. Let's call it

400
00:48:25.230 --> 00:48:26.220
Ryan Mehta: Card action.

401
00:48:44.340 --> 00:48:48.600
Ryan Mehta: So we'll have a little pre pen card action creator that we can use down here.

402
00:48:51.660 --> 00:48:52.350
Card.

403
00:49:06.150 --> 00:49:07.200
Ryan Mehta: The action creator

404
00:49:08.400 --> 00:49:18.660
Ryan Mehta: The two action creators, we have the one that makes our post request the funk middleware will see that we've dispatched a function invoke the function for us.

405
00:49:19.560 --> 00:49:31.350
Ryan Mehta: We're then going to wait to create our card after the card is done being created. We're going to dispatch another action this prepaid card action which is going to be handled by our reducer.

406
00:49:32.880 --> 00:49:42.360
Ryan Mehta: When it gets that pre pen card action, it's going to keep everything in state, the same but pre penned the actual payload.

407
00:49:43.770 --> 00:49:46.590
Ryan Mehta: To the existing list.

408
00:49:53.760 --> 00:50:00.780
Ryan Mehta: Prepared because we put the action payload before the rest of the list. So goes to the top of the list.

409
00:50:03.090 --> 00:50:03.630
Ryan Mehta: Look good

410
00:50:07.170 --> 00:50:07.740
Right.

411
00:50:08.790 --> 00:50:18.570
Ryan Mehta: So this is the action creator that we're going to use inside of our form when they submit the form, we're going to create a card in a dispatch this credit card.

412
00:50:19.890 --> 00:50:22.9WEBVTT

1
00:00:00.630 --> 00:00:01.050
Okay.

2
00:00:02.250 --> 00:00:03.810
Ryan Mehta: So let's say we have a button.

3
00:00:06.390 --> 00:00:08.519
Ryan Mehta: And the user is clicking this button.

4
00:00:12.330 --> 00:00:16.680
Ryan Mehta: When they click this button. We go from counter zero to counter one

5
00:00:19.260 --> 00:00:31.710
Ryan Mehta: And the poll page renders. Now, the state is that one, the next time they click the button. We go from one to two, but let's say the user clicks a button twice really fast like double clicks the button.

6
00:00:32.880 --> 00:00:43.230
Ryan Mehta: At that point, this increment test fired twice, right, if this. Let's say that this didn't say this, but it said

7
00:00:45.300 --> 00:00:46.260
Ryan Mehta: Counter

8
00:00:47.730 --> 00:00:49.710
Ryan Mehta: This dots, they

9
00:00:50.730 --> 00:01:05.430
Ryan Mehta: Got counter plus one, when they press that button twice. Both times it saw to as the number because reactive have a chance yet to change the state.

10
00:01:06.330 --> 00:01:21.270
Ryan Mehta: So we increment the state that three react renders and then we we change the state to three again react very renders we've essentially dropped one button. Click because they clicked it fat faster than react could change the state.

11
00:01:23.400 --> 00:01:33.510
Ryan Mehta: If you give it an arrow function here instead react doesn't use we're no longer using the previous state directly. So when the user clicks the button.

12
00:01:37.110 --> 00:01:47.340
Ryan Mehta: React takes the current state. Let's say it's at zero and instead of directly incremental the state. It runs this function, it passes react to current state.

13
00:01:48.300 --> 00:01:59.700
Ryan Mehta: And we add one to it on the next click, you have one we take one we actually like running this function. Now, when we double click it. We're currently up to

14
00:02:02.400 --> 00:02:10.200
Ryan Mehta: Let's say to react passes. THE CURRENT STATE TO OUR ARROW function we add one to it and our state becomes three

15
00:02:11.160 --> 00:02:26.820
Ryan Mehta: So down here when it tries to set state, the next time it actually uses the after updated state, not the state when the button was clicked it passes at three, we add one and we end up with for like we should have instead of three.

16
00:02:28.110 --> 00:02:34.410
Ryan Mehta: So these two ones that happened when state was two before react had a chance to update state.

17
00:02:36.150 --> 00:02:49.080
Ryan Mehta: Both end up working because when it goes to actually update the state of passes it the current state instead of using the state at the time of update at the time with the button click

18
00:02:49.800 --> 00:02:51.300
Thomas Stussi: Just gets rid of this race condition.

19
00:02:52.350 --> 00:02:55.830
Thomas Stussi: Will this work if the initial state is above zero

20
00:02:57.480 --> 00:02:58.050
Ryan Mehta: Yep. Okay.

21
00:03:01.740 --> 00:03:02.250
Ryan Mehta: So,

22
00:03:03.420 --> 00:03:16.140
Ryan Mehta: Um, but I think the lesson here really though is just that whatever you have dependence state whenever you want to use this state inside of set state always pass an arrow function instead

23
00:03:19.230 --> 00:03:20.010
That's the rule.

24
00:03:26.280 --> 00:03:33.870
Ron Yonker: So is it the always passing arrow function or or what specific context do you choose to pass an arrow function.

25
00:03:34.710 --> 00:03:37.800
Ryan Mehta: I whenever you have dependent state. So whenever your state.

26
00:03:37.800 --> 00:03:45.930
Ryan Mehta: Change depends on the previous state. So here you can see right here we're using state to change our state.

27
00:03:46.500 --> 00:03:55.230
Ryan Mehta: That means we need to pass an arrow function on this one, we're not using state to change our state. We're just saying set state to whatever the value is

28
00:03:57.750 --> 00:03:59.040
Ron Yonker: OK, I understand. Thank you.

29
00:04:02.340 --> 00:04:07.020
Ryan Mehta: Alright, so here's this component we can type into this box.

30
00:04:08.790 --> 00:04:09.360
Ryan Mehta: So,

31
00:04:10.440 --> 00:04:15.060
Ryan Mehta: We have an H1 with it. That's this thing over here.

32
00:04:19.410 --> 00:04:21.660
Ryan Mehta: And then we have our count.

33
00:04:22.830 --> 00:04:23.610
It's right here.

34
00:04:24.990 --> 00:04:34.890
Ryan Mehta: Every time I typed into this box. It changes text. So the middle part between these two dashes changes. And when I press this button increments or counter

35
00:04:37.740 --> 00:04:39.270
Ryan Mehta: Its component makes sense to everyone.

36
00:04:40.530 --> 00:04:41.190
Read through it.

37
00:04:46.860 --> 00:04:47.400
Ryan Mehta: All right.

38
00:04:48.930 --> 00:04:52.350
Ryan Mehta: One last thing with this whole react thing.

39
00:04:54.480 --> 00:05:14.190
Ryan Mehta: We can also pass our state to other components. So on this left hand side I have a state what I'm calling a state provider. This is a component that creates state. And on the right hand side I have this state consumer. This is a component that takes props.

40
00:05:17.610 --> 00:05:26.580
Ryan Mehta: This state consumer is used over here in the State provider. The state provider passes it state to my view.

41
00:05:30.660 --> 00:05:31.110
Okay.

42
00:05:32.940 --> 00:05:33.480
All right.

43
00:05:35.220 --> 00:05:36.600
ryan Diffenbaugh: Good question. Um,

44
00:05:37.800 --> 00:05:41.220
ryan Diffenbaugh: How come you don't need to import my view into the state consumer

45
00:05:43.590 --> 00:05:45.630
Ryan Mehta: Oh, my view is, this is my view.

46
00:05:47.040 --> 00:05:50.100
Oh yes, it is defining it is equal. Thank you.

47
00:05:52.950 --> 00:05:53.340
ryan Diffenbaugh: Okay.

48
00:05:54.120 --> 00:05:54.870
So,

49
00:05:56.430 --> 00:06:02.280
Ryan Mehta: Over here on the left hand side, we've defined a few pieces of state texts encounter.

50
00:06:03.720 --> 00:06:08.430
Ryan Mehta: And we also get a prop called title we pass these three things.

51
00:06:09.660 --> 00:06:21.390
Ryan Mehta: To my view. So it's passing it state to my view text and counter. And my view is receiving these two pieces of state as props texting counter over here.

52
00:06:26.070 --> 00:06:37.890
Ryan Mehta: This state providers also defining two functions that let it manipulate state and as passing these to function also s as props to my view.

53
00:06:41.970 --> 00:06:51.570
Ryan Mehta: It has to do this, it has to pass these, these two functions over to my view because my view isn't allowed to change text or counter

54
00:06:53.190 --> 00:06:56.340
Ryan Mehta: It can only ask of the parent to change those for it.

55
00:06:57.480 --> 00:07:13.740
Ryan Mehta: The parent passes, these two functions to my view my view will invoke those functions which will invoke these functions over here in the parent in the state provider and the state provider will actually change the state.

56
00:07:15.270 --> 00:07:15.750
Ryan Mehta: So,

57
00:07:15.870 --> 00:07:16.950
Does that kind of makes sense.

58
00:07:18.900 --> 00:07:25.770
Jerud Moyer: Yeah. Can I ask a quick question on the left line 24. Why is the title props.

59
00:07:26.790 --> 00:07:28.470
Ryan Mehta: It just happens to be prompt so

60
00:07:28.530 --> 00:07:30.000
Ryan Mehta: This component is used by

61
00:07:30.000 --> 00:07:33.690
Jerud Moyer: Doing like my component

62
00:07:35.520 --> 00:07:35.970
Title

63
00:07:37.350 --> 00:07:38.640
Goals high

64
00:07:40.650 --> 00:07:45.690
Ryan Mehta: So whoever uses this component is responsible for passing title to my component

65
00:07:49.080 --> 00:08:03.900
Brooke Perkins (she/her): I have a basic question that might be silly, but like, so you have this state provider and the consumer, are those like two separate files that were usually going to have, I forget how this works.

66
00:08:04.320 --> 00:08:08.130
Ryan Mehta: Yep, you have a file per component. So this is a component over here.

67
00:08:08.520 --> 00:08:12.720
Brooke Perkins (she/her): Yeah, great. That's right, I forgot to file PR component things

68
00:08:19.530 --> 00:08:33.600
Ryan Mehta: So yeah, we passed these two functions. So my view can notify the provider that wants to change state. Ultimately, this whole strategy is in React. Most people say that

69
00:08:34.470 --> 00:08:44.280
Ryan Mehta: data flows from parent to child and events flow from child to parent, the catchphrase that everybody uses is this data down events up

70
00:08:45.540 --> 00:08:53.340
Ryan Mehta: So what that means is this parent passes data over to the child.

71
00:08:55.380 --> 00:09:07.440
Ryan Mehta: The child then takes these two event handlers that the parent also passed it invokes those and passes these events back up.

72
00:09:08.610 --> 00:09:17.790
Ryan Mehta: To the parent and notifies the parent that it should change state status changed. And then the parent passes back the new state back to the child.

73
00:09:18.930 --> 00:09:25.980
Ryan Mehta: So you have data going down and events traveling backup.

74
00:09:42.300 --> 00:09:42.750
Ryan Mehta: Okay.

75
00:09:44.700 --> 00:09:45.060
All right.

76
00:09:47.730 --> 00:09:49.800
Ryan Mehta: Let's play a little bit with React

77
00:09:51.300 --> 00:09:51.930
Ryan Mehta: And

78
00:09:52.980 --> 00:09:54.270
Ryan Mehta: An actual code.

79
00:09:56.130 --> 00:09:59.160
Ryan Mehta: So I am going to

80
00:10:00.690 --> 00:10:08.850
Ryan Mehta: Go to our demo directory for today, we're going to build three different apps. Today we're going to build a little color picker app.

81
00:10:10.710 --> 00:10:13.350
Ryan Mehta: A URL shortener and

82
00:10:16.110 --> 00:10:17.280
Ryan Mehta: This page links thing.

83
00:10:18.780 --> 00:10:26.400
Ryan Mehta: So let's start off with this color picker, the Color Picker is going to be an application. I still can't draw

84
00:10:27.720 --> 00:10:33.810
Ryan Mehta: That looks like this. We're going to have a web page.

85
00:10:35.850 --> 00:10:38.160
Ryan Mehta: At the top of the web page will have

86
00:10:39.180 --> 00:10:40.380
Ryan Mehta: Two colors.

87
00:10:42.150 --> 00:10:46.830
Ryan Mehta: Color inputs. Have you all seen these color inputs before they're built into the browser.

88
00:10:49.170 --> 00:10:50.880
Ryan Mehta: So they let you select a color.

89
00:10:52.230 --> 00:10:53.700
Ryan Mehta: And let's do

90
00:10:55.770 --> 00:11:03.150
Ryan Mehta: A text input. So we'll have two color inputs and a text input underneath them will have a display.

91
00:11:04.170 --> 00:11:05.640
Ryan Mehta: Whose background color.

92
00:11:08.670 --> 00:11:11.820
Ryan Mehta: Is the color that we selected for one input.

93
00:11:13.650 --> 00:11:15.510
Ryan Mehta: And whose text color.

94
00:11:20.910 --> 00:11:30.360
Ryan Mehta: Is what we selected for the other input and we'll have it display whatever we wrote in this input.

95
00:11:32.670 --> 00:11:33.360
Ryan Mehta: Make sense

96
00:11:35.820 --> 00:11:37.620
Ryan Mehta: So that's what we'll go for our color picker.

97
00:11:40.020 --> 00:11:54.690
Ryan Mehta: Let me clear this close this to get started. I'm going to use our alchemy bootstrap. So I'm going to avoid the Create React app bootstrap. So we have a little bit of control over a packet or web pack file.

98
00:11:56.070 --> 00:11:58.560
Ryan Mehta: We can still get started with this little bootstrap

99
00:12:01.110 --> 00:12:05.790
Ryan Mehta: So use the alchemy code lab app bootstrap and select react.

100
00:12:07.110 --> 00:12:10.680
Ryan Mehta: We're going to create a color for folder.

101
00:12:11.730 --> 00:12:18.180
Ryan Mehta: Will call the app color picture and it should create all of the files that we need

102
00:12:19.290 --> 00:12:24.870
Ryan Mehta: Inside of this color picker directory. You should see like your web pack config.

103
00:12:26.160 --> 00:12:27.060
Ryan Mehta: Over here.

104
00:12:29.130 --> 00:12:36.330
Ryan Mehta: A source directory with an index JS that like puts your app on the page.

105
00:12:37.980 --> 00:12:50.220
Ryan Mehta: Should look kind of familiar, right. Remember this index JS, you find an element you render your app to it. And then we have an app JS component that just says hello world right now.

106
00:12:52.110 --> 00:12:57.300
Ryan Mehta: Once this is done installing we can start this little app and we should just see our hello world.

107
00:12:59.280 --> 00:13:08.790
Ryan Mehta: Application for look at the web pack config our dev server is going to be started at 7891 so we should be able to go to local host 7891

108
00:13:11.310 --> 00:13:21.660
Ryan Mehta: To see our application. I've chosen to make it so it doesn't automatically pop up the browser. When you start this because that drives me crazy when it does that.

109
00:13:23.460 --> 00:13:23.880
Ryan Mehta: But

110
00:13:25.140 --> 00:13:28.470
Ryan Mehta: Yeah, so sorry for anybody who really likes that.

111
00:13:32.130 --> 00:13:33.930
Ryan Mehta: So let's start this thing.

112
00:13:38.640 --> 00:13:42.510
Ryan Mehta: Perfect. It breaks right at the beginning.

113
00:13:43.560 --> 00:13:46.800
Ryan Mehta: Cannot find module config yards.

114
00:13:52.920 --> 00:13:56.970
Ryan Mehta: Um, okay. Well, let's take a break and I'll fix this during a break.

115
00:13:58.620 --> 00:14:02.640
Ryan Mehta: Let's come back in about 10 minutes so at 945

116
00:14:04.620 --> 00:14:05.220
Annalise Murphy: Sounds good.

117
00:14:11.910 --> 00:14:13.230
Ryan Mehta: The zoom the recording.

118
00:14:16.290 --> 00:14:17.700
I could lose my browser, though.

119
00:14:19.590 --> 00:14:20.400
Michelle Stermitz: What was the issue.

120
00:14:22.740 --> 00:14:23.490
Ryan Mehta: So,

121
00:14:25.590 --> 00:14:27.450
Ryan Mehta: The latest version of web pack.

122
00:14:29.970 --> 00:14:39.180
Ryan Mehta: You no longer do this like web pack dev server web pack comes with the dev server set some a separate install. So you're just supposed to now.

123
00:14:41.640 --> 00:14:46.560
Ryan Mehta: Do web pack serve I found out a if you go to the web pack.

124
00:14:48.060 --> 00:14:50.160
Ryan Mehta: Server GitHub page.

125
00:14:53.610 --> 00:14:57.600
Ryan Mehta: And go under issues. I saw

126
00:14:59.310 --> 00:15:02.190
Ryan Mehta: This thing which is the exact error message that we were getting

127
00:15:03.330 --> 00:15:07.260
Ryan Mehta: And it tells somebody messaged here that

128
00:15:09.300 --> 00:15:12.510
Ryan Mehta: web pack dev server doesn't work with web pack see alive before

129
00:15:15.420 --> 00:15:19.080
Ryan Mehta: And then this person said that web pack now comes with it so

130
00:15:20.250 --> 00:15:20.910
Ryan Mehta: You don't need it.

131
00:15:23.940 --> 00:15:32.310
Ryan Mehta: So I just followed the instructions and changed it from web pack dash dev dash server to web pack server, everything works now.

132
00:15:35.880 --> 00:15:39.030
Thomas Sere.

295
00:29:52.410 --> 00:29:53.010
Ron Yonker: And

296
00:29:53.550 --> 00:30:04.050
Ryan Mehta: So this is coming from the API returns an object with answer image now D structuring answer an image off of that object here.

297
00:30:06.180 --> 00:30:12.090
Ryan Mehta: So I could have done something like result and then result that image.

298
00:30:13.650 --> 00:30:16.410
Ryan Mehta: And result got answer.

299
00:30:17.490 --> 00:30:20.730
Ryan Mehta: But I really prefer the other way because this result word

300
00:30:20.820 --> 00:30:23.550
Ryan Mehta: Is sort of a meaningless word. It's like filler word

301
00:30:23.760 --> 00:30:30.270
Ryan Mehta: It results has no meaning. It's like data doesn't give us any extra information so I might as well.

302
00:30:31.320 --> 00:30:33.570
Ryan Mehta: The structure here to get rid of the filler.

303
00:30:40.050 --> 00:30:42.180
Ryan Mehta: Okay, let's try to start this thing.

304
00:30:43.740 --> 00:30:46.440
Ryan Mehta: And see what our front end ends up looking like

305
00:30:49.590 --> 00:31:05.670
Ryan Mehta: Nice hello world, we actually have to use our components somewhere back in app JS. Let's actually bring in our yes no presentational or yes no component and cool. No.

306
00:31:07.200 --> 00:31:09.930
Ryan Mehta: This is flipping over and over again.

307
00:31:11.760 --> 00:31:13.410
Ryan Mehta: Anybody know what's happening. I know.

308
00:31:14.100 --> 00:31:17.370
ryan Diffenbaugh: It's like flipping every time the gifts aren't over

309
00:31:18.540 --> 00:31:20.280
Ben Waples: Is it making a request, every time.

310
00:31:20.430 --> 00:31:24.150
Shawn Carpenter: No, you need the empty array after us.

311
00:31:25.080 --> 00:31:29.310
Ryan Mehta: Yeah, totally. So we're like making millions of requests right now.

312
00:31:30.480 --> 00:31:31.710
Over and over again. Yeah.

313
00:31:32.850 --> 00:31:38.640
Ryan Mehta: Why the images skipping like this it we're making a request before can even load the next image.

314
00:31:40.560 --> 00:31:43.530
Ryan Mehta: So we're making so many requests. It's like

315
00:31:43.740 --> 00:31:44.550
Ron Yonker: Why isn't going

316
00:31:46.200 --> 00:31:57.810
Ryan Mehta: So in our US effect, we have to say that we only want to use effect to run on Mount. Not every time state changes and when do that by putting this empty array here and now we get

317
00:31:59.730 --> 00:32:00.690
Ryan Mehta: More legitimate.

318
00:32:01.020 --> 00:32:06.450
Ron Yonker: Okay, because of the promise the state's changing after you do the fetch.

319
00:32:10.530 --> 00:32:10.860
Annalise: Funny.

320
00:32:15.390 --> 00:32:17.460
Ryan Mehta: So that is our little

321
00:32:22.170 --> 00:32:25.500
Ron Yonker: Enjoy returning image and answer. Okay.

322
00:32:27.480 --> 00:32:32.880
ryan Diffenbaugh: Bessie, what you have in the yes no API jazz masters to fetch. Yeah, that's just a

323
00:32:34.230 --> 00:32:34.560
ryan Diffenbaugh: And B,

324
00:32:34.770 --> 00:32:36.360
Jerud Moyer: If you were to write a quick test for that.

325
00:32:37.560 --> 00:32:39.840
Ryan Mehta: For the component. Yeah, let's do it.

326
00:32:43.980 --> 00:32:59.100
Ryan Mehta: Yes, no, let's make a yes no test ASX. I'm going to put that test over here on the left and the implementation over here on the right. We're going to import react from oh yeah

327
00:33:00.120 --> 00:33:03.750
Ryan Mehta: We're going to import render and screen.

328
00:33:04.800 --> 00:33:05.370
Ryan Mehta: From

329
00:33:06.750 --> 00:33:10.740
Ryan Mehta: Testing library react off that thing I did that yesterday.

330
00:33:13.680 --> 00:33:17.580
Ryan Mehta: From that we're going to describe our

331
00:33:18.840 --> 00:33:29.430
Ryan Mehta: Yes No components. I've gotten into the habit of Dean this as my described names because I saw it on the internet. The other day I was like, that's pretty cool.

332
00:33:31.590 --> 00:33:35.250
Annalise: It makes it really clear exactly what you're working on, doesn't it. Yeah.

333
00:33:35.640 --> 00:33:37.230
Ryan Mehta: Yeah, totally. I like it.

334
00:33:39.630 --> 00:33:41.100
Ryan Mehta: So, it

335
00:33:44.940 --> 00:33:45.570
Ryan Mehta: I don't know.

336
00:33:46.050 --> 00:33:47.220
Jerud Moyer: displays an image.

337
00:33:47.760 --> 00:33:54.090
Ryan Mehta: Displays yeah a yes no image and

338
00:33:55.980 --> 00:33:57.420
Ryan Mehta: Content or something.

339
00:33:59.910 --> 00:34:00.900
Ryan Mehta: Or and

340
00:34:05.070 --> 00:34:19.110
Ryan Mehta: So one of the first things that we're going to want to do is mock our API call. So we don't actually go off and make an API call. So online, for I am going to mock our service.

341
00:34:20.700 --> 00:34:25.650
Ryan Mehta: And then I'm going to write a before each even though will probably only have one test.

342
00:34:28.680 --> 00:34:36.060
Ryan Mehta: That does our get yes no will mock though resolved value.

343
00:34:37.800 --> 00:34:46.680
Ryan Mehta: And we'll have it have an answer of yes and an image yes Yun Jie

344
00:34:50.220 --> 00:34:50.880
Ryan Mehta: Force.

345
00:34:52.290 --> 00:34:54.030
Ryan Mehta: I think they are forced in there right

346
00:34:56.100 --> 00:35:05.640
Ryan Mehta: Forced. I don't know what that does, but it sounds important. Oh, it's probably like you can ask the API to give you a yes or no. Yes.

347
00:35:08.880 --> 00:35:09.570
Force.

348
00:35:14.100 --> 00:35:17.130
Ryan Mehta: Okay, yeah, so you can force it to give you a yes or no.

349
00:35:18.420 --> 00:35:19.230
Ryan Mehta: discovered it.

350
00:35:23.490 --> 00:35:30.510
Ryan Mehta: So ours isn't forest doesn't really matter for display yes or no. At this point we can render

351
00:35:32.880 --> 00:35:35.910
Ryan Mehta: Our yes no component

352
00:35:37.350 --> 00:35:39.840
Ryan Mehta: And then after a delay.

353
00:35:39.900 --> 00:35:46.020
Ryan Mehta: We expect to see this image and this big caption on the page.

354
00:35:48.570 --> 00:35:51.660
Ryan Mehta: The way I'm going to do that. It's actually run these tests to

355
00:36:08.880 --> 00:36:10.620
Let's delete that test.

356
00:36:26.310 --> 00:36:28.500
Annalise: nervous when I see the snap test deleted.

357
00:36:29.100 --> 00:36:32.310
Annalise: Yeah, even when it's not like necessary and what am I

358
00:36:33.570 --> 00:36:33.960
Annalise: Drinking

359
00:36:34.500 --> 00:36:40.740
Brooke Perkins (she/her): Yeah, something I still don't understand is when a test a snapshot test becomes obsolete and why

360
00:36:43.500 --> 00:36:45.180
Ryan Mehta: In that case, it became obsolete.

361
00:36:45.180 --> 00:36:51.030
Ryan Mehta: Because I deleted the tests that created the snapshot file so that

362
00:36:51.090 --> 00:36:54.120
Ryan Mehta: The folder with the snapshot file was still there. So,

363
00:36:54.660 --> 00:36:57.510
Ryan Mehta: It became obsolete. There's nothing like managing it anymore.

364
00:37:02.460 --> 00:37:26.820
Ryan Mehta: Okay, we have a passing test we said that we wanted to make sure that there's an image and a caption on the page, there's two good ways to attempt to do that. We could use screen get by alt text to get our image the alt text will be yes. And we can use screen dot get by text content.

365
00:37:29.160 --> 00:37:42.210
Ryan Mehta: Get by text that by text. Yes. Also, we expect this image to be there and this big caption to be there, but this will fail for us.

366
00:37:43.380 --> 00:37:49.080
Ryan Mehta: Because actually, anybody know why this will always fail in our case.

367
00:37:52.080 --> 00:37:53.580
Can try to make this

368
00:37:55.440 --> 00:37:57.960
ryan Diffenbaugh: Is it random whether or not it's like yes or no.

369
00:37:59.220 --> 00:38:01.170
Ryan Mehta: Well, we're mocking right now so we're

370
00:38:01.230 --> 00:38:02.610
Ryan Mehta: Always going to get. Yes.

371
00:38:03.090 --> 00:38:07.350
Annalise: We have to set a default like a start point for

372
00:38:07.980 --> 00:38:10.260
Ryan Mehta: Yeah that's it has something to do with that.

373
00:38:11.610 --> 00:38:11.880
Annalise: Like

374
00:38:12.330 --> 00:38:14.190
Annalise: You're looking at Thomas's um

375
00:38:16.170 --> 00:38:16.650
Ryan Mehta: Yeah.

376
00:38:18.210 --> 00:38:21.330
Ryan Mehta: It's, it's super close to that. It's because I'm

377
00:38:21.510 --> 00:38:22.650
Ryan Mehta: For at least a default would

378
00:38:22.650 --> 00:38:37.440
Ryan Mehta: Sort of fix this. It's because this right here when we use get it's checking the page immediately. And when we first check the page, our promise hasn't resolved yet so image and answer still empty strings.

379
00:38:38.700 --> 00:38:51.030
Ryan Mehta: What we want to do is wait for the promise to resolve and then check if the screen has those things on it. And there's actually two ways to accomplish this in this test, unfortunately.

380
00:38:52.080 --> 00:38:53.160
Ryan Mehta: The first way.

381
00:38:54.720 --> 00:38:57.090
Ryan Mehta: Is to wait for

382
00:38:58.980 --> 00:39:05.460
Ryan Mehta: We know that at some point after re render these two items to be on the screen.

383
00:39:06.600 --> 00:39:11.610
Ryan Mehta: And I think this will pass our test, I think. Yeah.

384
00:39:11.640 --> 00:39:18.060
Edgar Cuellar: When I want to like fill every other time because you're always going to get different yes or no.

385
00:39:19.200 --> 00:39:22.530
Ryan Mehta: Because we're mocking it. We're always getting back. Yes.

386
00:39:22.920 --> 00:39:23.280
Okay.

387
00:39:27.090 --> 00:39:35.190
Ryan Mehta: So that's one approach the wait for wait for these things to be on the screen. The other approach is to use

388
00:39:38.910 --> 00:39:54.660
Ryan Mehta: Is to use find by instead find by does sort of the same thing that wait for does right it waits for yes to be on the screen for wait for that image to be on the screen and waits for the yes to be on the screen.

389
00:39:56.460 --> 00:40:03.780
Ryan Mehta: It'll only wait one second, but it will give us some time to wait for the pre rendering to happen after the promise resolves

390
00:40:05.520 --> 00:40:12.870
Ryan Mehta: This is sort of that test. We just want to make sure that these two things make it onto the page. Any reason that one might be better than the other.

391
00:40:20.340 --> 00:40:24.060
Ryan Mehta: No, I don't think so. Just consistency across files.

392
00:40:40.050 --> 00:40:40.530
Ryan Mehta: Okay.

393
00:40:42.840 --> 00:40:43.860
Ron Yonker: I see the

394
00:40:47.790 --> 00:40:48.150
Ron Yonker: Please.

395
00:41:01.170 --> 00:41:03.540
Heather Peterson: Build a snapshot test really quick.

396
00:41:05.280 --> 00:41:10.140
Ryan Mehta: For sure. We can snapshot test our yes no thing.

397
00:41:13.710 --> 00:41:14.880
Ryan Mehta: Say like it.

398
00:41:16.140 --> 00:41:18.600
Ryan Mehta: Actually is a snapshot

399
00:41:21.180 --> 00:41:23.310
Ryan Mehta: In this case we get that as

400
00:41:23.610 --> 00:41:24.570
Ron Yonker: Fragment

401
00:41:24.660 --> 00:41:27.630
Ryan Mehta: I think it's called from render

402
00:41:28.800 --> 00:41:29.640
Ryan Mehta: Yes. No.

403
00:41:30.930 --> 00:41:37.290
Ryan Mehta: And then we expect as fragment to match.

404
00:41:44.820 --> 00:41:47.580
Ryan Mehta: And we can check her snapshot

405
00:41:49.260 --> 00:41:49.860
Here.

406
00:41:52.560 --> 00:41:53.010
Heather Peterson: Okay.

407
00:41:54.450 --> 00:41:56.310
Ryan Mehta: So this line right here is what creates a

408
00:41:56.310 --> 00:42:01.830
Ryan Mehta: Snapshot for us. And then if we ever change something over here like maybe we

409
00:42:03.480 --> 00:42:10.200
Ryan Mehta: Decide that we want a title at the top of this with the answer, instead of a fig caption.

410
00:42:12.420 --> 00:42:14.430
Ryan Mehta: Our snapshot test would fail.

411
00:42:15.840 --> 00:42:16.980
Ryan Mehta: Telling us

412
00:42:21.390 --> 00:42:27.060
Ryan Mehta: telling us something important. Yeah, we got an H2 instead of a big caption.

413
00:43:02.790 --> 00:43:03.810
Ron Yonker: I think I get it.

414
00:43:05.580 --> 00:43:10.650
Ron Yonker: Pretty sure I do nice and consistently on two hours of sleep. So who knows

415
00:43:14.400 --> 00:43:22.320
Heather Peterson: When you're doing a context file and there should only be one context file. Is that correct,

416
00:43:23.220 --> 00:43:24.300
Ryan Mehta: The provider stuff.

417
00:43:24.960 --> 00:43:26.730
Ryan Mehta: Oh yeah, multiple if you wanted to.

418
00:43:27.180 --> 00:43:27.870
Heather Peterson: Or you can

419
00:43:28.560 --> 00:43:29.640
Ryan Mehta: You know, roll around that.

420
00:43:37.230 --> 00:43:41.940
Ryan Mehta: In our applications will end up with just one, the way that we're going to be writing apps.

421
00:43:50.490 --> 00:43:53.400
Shawn Carpenter: Hey, if you were using multiples.

422
00:43:55.230 --> 00:43:56.100
Would you

423
00:43:58.470 --> 00:44:01.410
Shawn Carpenter: wrap them around that, like we did

424
00:44:02.970 --> 00:44:05.430
Shawn Carpenter: Or would you be putting out certain

425
00:44:07.650 --> 00:44:08.010
Ryan Mehta: Yeah.

426
00:44:08.040 --> 00:44:09.720
Shawn Carpenter: Just certain parts of the application.

427
00:44:10.830 --> 00:44:24.540
Ryan Mehta: Both would work, but it's more likely that you'd be wrapping them around certain parts of the application like if you had a router and five pages you might have a context provider for each page of your application.

428
00:44:33.000 --> 00:44:38.460
Ryan Mehta: Yeah, there's some really cool things that you can do with those contexts providers to that we haven't really explored.

429
00:44:40.560 --> 00:44:43.350
Ryan Mehta: I'll just dry instead of coding it but

430
00:44:46.620 --> 00:44:50.190
Ryan Mehta: Yeah, it's such a new concept. I don't know if it'll quite click

431
00:44:51.330 --> 00:44:54.240
Ryan Mehta: Let's say we have app JS here.

432
00:44:55.560 --> 00:45:00.090
Ryan Mehta: And then after app JS, we have our Hey Arnold.

433
00:45:03.720 --> 00:45:04.380
Ryan Mehta: Provider

434
00:45:08.520 --> 00:45:20.700
Ryan Mehta: Which goes and like fetches from the Hey Arnold API and stores the character state here and then the Hey Arnold provider has a single child care to a list.

435
00:45:24.300 --> 00:45:34.110
Ryan Mehta: And character. Let's just knows how to display a list of characters. One cool thing that you could do is you could change this provider out to maybe like

436
00:45:40.170 --> 00:45:45.090
Ryan Mehta: I don't know what's, what's one of the X Files like an X Files.

437
00:45:46.200 --> 00:45:46.860
Ryan Mehta: Provider

438
00:45:49.890 --> 00:45:51.540
Ryan Mehta: And if you code it correctly.

439
00:45:52.920 --> 00:46:03.870
Ryan Mehta: You can switch between these providers and character list would be able to render either Hey Arnold or X Files stuff seamlessly based on the provider that you wrapped around it which is

440
00:46:03.900 --> 00:46:04.680
Ryan Mehta: Kind of a

441
00:46:04.740 --> 00:46:05.520
Ryan Mehta: Cool way.

442
00:46:05.550 --> 00:46:11.700
Ryan Mehta: To start thinking about some of your code. But these are very generic and then you have particular data features.

443
00:46:12.720 --> 00:46:14.460
Ryan Mehta: That you can wrap around your app.

444
00:46:15.420 --> 00:46:23.160
Thomas Stussi: When you were doing the toggle between Rick and Morty and Breaking Bad, yesterday you used a different structure, though, right.

445
00:46:23.610 --> 00:46:25.080
Ryan Mehta: Yeah, that was a different approach.

446
00:46:30.270 --> 00:46:35.340
Thomas Stussi: So would you almost rap like the character list in bows.

447
00 We're always going to have another array of the same way.

132
00:15:50.310 --> 00:15:54.420
Ryan Mehta: These arrows here these lines here are our function.

133
00:15:57.060 --> 00:16:10.710
Ryan Mehta: So I takes this call back and it maps this function on to this array out, putting a different array. Right. So each of these values gets mapped to

134
00:16:12.090 --> 00:16:12.840
Ryan Mehta: A different

135
00:16:14.640 --> 00:16:16.380
Ryan Mehta: This is like a double function. Right.

136
00:16:20.190 --> 00:16:22.350
Ryan Mehta: I should probably make sense. Right.

137
00:16:23.850 --> 00:16:27.390
Ryan Mehta: That's why they use this word map, though. It's from math.

138
00:16:31.980 --> 00:16:36.090
Ryan Mehta: Not like a totally crazy word. It's just like some crazy people really like math.

139
00:16:40.230 --> 00:16:46.800
Ryan Mehta: Alright, so for each item in the array, the callback is invoked and the return value is added to another array.

140
00:16:48.900 --> 00:17:02.190
Ryan Mehta: Here is an example of a well I guess this is the same map function if we ran this function. What do you think we will get as the result. What will new array equal

141
00:17:06.540 --> 00:17:08.910
Thomas Stussi: 01234

142
00:17:10.440 --> 00:17:25.530
Ryan Mehta: Yeah, exactly. So for each item and the array. Hello. I am an array we return the index of each item so 01234 and we end up with

143
00:17:26.640 --> 00:17:28.080
Ryan Mehta: 01234

144
00:17:35.220 --> 00:17:37.050
Ryan Mehta: Okay, so

145
00:17:38.460 --> 00:17:48.180
Ryan Mehta: One big thing that I noticed a lot is people often confuse these two array methods. The for each and the map.

146
00:17:49.740 --> 00:18:00.000
Ryan Mehta: Map always returns a new array for each just iterate through all of the items in an array, they can do some of the same things.

147
00:18:01.770 --> 00:18:20.910
Ryan Mehta: But the syntax ends up looking pretty different. When you use one or the other. I often see people using math as if it's for each one thing to remember is if you're using map, you're out, putting a new array. So you should always be saying constant new array equals array dot map.

148
00:18:21.990 --> 00:18:25.080
Ryan Mehta: There should always be something to the left of the array dot map.

149
00:18:26.220 --> 00:18:31.350
Ryan Mehta: So let's see these two how we would create a new array with these two array methods.

150
00:18:34.980 --> 00:18:39.450
Ryan Mehta: So each one gets an item, item that we're iterating through in the array.

151
00:18:44.070 --> 00:18:52.650
Ryan Mehta: On the left hand side with map we create a new array with the values that we return from the callback function.

152
00:18:53.640 --> 00:19:03.390
Ryan Mehta: So we iterate through each item in the array for each item in the array we add one to it and add that new value to this new array and the same position.

153
00:19:04.350 --> 00:19:15.360
Ryan Mehta: Whenever you're using for each you need to first create a new array above the for each and then inside of the for each year pushing to that array.

154
00:19:16.890 --> 00:19:25.980
Ryan Mehta: So returning here is like pushing to this new array. On the right hand side, we have to actually push to the new array.

155
00:19:29.310 --> 00:19:33.660
Ryan Mehta: Kind of makes sense to everyone. I hate this angle. I can't even look at myself.

156
00:19:36.780 --> 00:19:37.290
Ryan Mehta: Okay.

157
00:19:44.610 --> 00:19:44.970
Ryan Mehta: Thanks.

158
00:19:51.960 --> 00:19:58.950
Ryan Mehta: You look very commanding, actually. Oh yeah, like I'm like sitting in like a throne, or something.

159
00:20:01.470 --> 00:20:01.980
Ryan Mehta: Cool.

160
00:20:04.140 --> 00:20:05.520
Ryan Mehta: This makes sense to everyone.

161
00:20:09.240 --> 00:20:09.600
Ryan Mehta: Okay.

162
00:20:10.710 --> 00:20:16.140
Ryan Mehta: Same thing for Filter, filter also iterate through each item in an array.

163
00:20:17.550 --> 00:20:19.650
Ryan Mehta: We pass filter a call back

164
00:20:21.240 --> 00:20:35.010
Ryan Mehta: The callback function gets passed an item, the item that we're currently iterating over the index of the item in the array and the original array so original array here is an equal array over here.

165
00:20:38.340 --> 00:20:47.670
Ryan Mehta: For each item in the array, the callback is invoked. If the return value is truthy it's added two new array, if it's false. It's kicked out.

166
00:20:48.840 --> 00:20:51.510
Ryan Mehta: So whenever you return something truthy here.

167
00:20:52.860 --> 00:20:55.590
Ryan Mehta: We will add the item to new array.

168
00:20:56.670 --> 00:21:00.990
Ryan Mehta: If you return something policy, it gets kicked out of new array.

169
00:21:04.980 --> 00:21:09.480
Ron Yonker: And yet, you've got displayed. That should just

170
00:21:11.100 --> 00:21:17.880
Ron Yonker: Kick out all of the even on index elements of the original array, you're filtering.

171
00:21:18.900 --> 00:21:23.850
Ryan Mehta: Maybe, yeah, let's make some predictions. What do you think will

172
00:21:25.110 --> 00:21:27.300
Ryan Mehta: Be returned from this

173
00:21:27.330 --> 00:21:28.650
Ron Yonker: Type of function here.

174
00:21:56.610 --> 00:21:57.120
Ryan Mehta: The

175
00:21:57.660 --> 00:21:58.770
Ryan Mehta: We Ever take this

176
00:21:59.520 --> 00:22:02.580
Ben Waples: Without 2020 pounds stream.

177
00:22:04.170 --> 00:22:06.240
Patrick Wilson: Yes, but by the 20 pounds.

178
00:22:07.140 --> 00:22:09.270
Ron Yonker: Spot 520 pounds.

179
00:22:17.100 --> 00:22:18.330
Any other ideas.

180
00:22:26.370 --> 00:22:34.320
Ryan Mehta: Nobody likes this word is is an ad never made the cut for anybody. All right. Let's, um, let's take a look.

181
00:22:37.920 --> 00:22:39.960
Ryan Mehta: So spot 520 pounds.

182
00:22:41.520 --> 00:22:53.370
Ryan Mehta: Over here we are taking the Margiela so index modular to which returns the remainder of dividing index by two.

183
00:22:54.540 --> 00:22:55.260
Ryan Mehta: So,

184
00:22:58.230 --> 00:23:07.890
Ryan Mehta: Because we're because we're only using the index here we're using 01234

185
00:23:09.420 --> 00:23:12.450
Ryan Mehta: If you divide zero by two, you get

186
00:23:13.710 --> 00:23:20.220
Ryan Mehta: Zero. If you divide one bye to you get a remainder of one.

187
00:23:22.170 --> 00:23:23.670
Ryan Mehta: You divide to buy to

188
00:23:23.970 --> 00:23:24.960
Ben Waples: get zero.

189
00:23:26.280 --> 00:23:27.420
Ryan Mehta: Remainder one

190
00:23:28.650 --> 00:23:31.380
Ryan Mehta: And zero. That makes sense that division.

191
00:23:34.350 --> 00:23:36.900
Ryan Mehta: So when index is zero.

192
00:23:38.820 --> 00:23:44.460
Ryan Mehta: Modulo to does equals zero. So this returns truthy so we keep spot.

193
00:23:47.040 --> 00:23:48.900
Ryan Mehta: at index one is

194
00:23:49.980 --> 00:23:57.210
Ryan Mehta: One divided by two gives us a remainder of one. One doesn't equal zero. So we throw away is

195
00:23:58.590 --> 00:23:59.790
Ryan Mehta: Five. We keep

196
00:24:01.380 --> 00:24:15.150
Ryan Mehta: And three divided by two is what gives us the remainder of one. One doesn't equal zero. So we throw this away and 20 wiki four divided by two gives us the remainder of zero.

197
00:24:21.210 --> 00:24:21.690
Ryan Mehta: Okay.

198
00:24:23.490 --> 00:24:31.290
Ben Waples: Um, the three parameters that you're passing in are those like uniform across array methods or is that just for filter.

199
00:24:33.480 --> 00:24:36.180
Ryan Mehta: Item index and original array anything

200
00:24:36.570 --> 00:24:38.340
Ryan Mehta: Yeah yeah

201
00:24:38.490 --> 00:24:42.990
Ryan Mehta: They're pretty uniform across all so like map gets these

202
00:24:45.450 --> 00:24:46.140
Ryan Mehta: Map.

203
00:24:47.190 --> 00:24:49.410
Ryan Mehta: Find filter.

204
00:24:50.850 --> 00:24:58.740
Ryan Mehta: For each I guess it would have been easier to just say which ones don't. The only one that really get something slightly different is reduce

205
00:25:00.180 --> 00:25:01.440
Ben Waples: Almost like the a&b

206
00:25:02.580 --> 00:25:05.130
Ryan Mehta: Reduce gets an accumulator.

207
00:25:06.300 --> 00:25:07.290
Ryan Mehta: The item.

208
00:25:08.430 --> 00:25:11.940
Ryan Mehta: The index and the original array.

209
00:25:13.320 --> 00:25:26.760
Ryan Mehta: So it just gets this extra thing at the beginning you right and sort sort is like the A and B thing. Normally, that usually gets one item in the array. Another item in the array.

210
00:25:30.600 --> 00:25:34.230
Jerud Moyer: Item is what we have thought of before his career or whatever.

211
00:25:35.670 --> 00:25:37.290
Ryan Mehta: As currently a current

212
00:25:38.850 --> 00:25:41.010
Ryan Mehta: Or you see element a lot

213
00:25:42.390 --> 00:25:45.000
Ryan Mehta: Or number, whatever the items are

214
00:25:49.980 --> 00:25:50.070
Ben Waples: Okay.

215
00:25:54.060 --> 00:26:04.260
Ryan Mehta: So creating a new array with filter compared to for each of filters, very much like map there should always be something on the left hand side of filter.

216
00:26:06.630 --> 00:26:10.770
Ryan Mehta: So with each item in the array we construct a new array.

217
00:26:11.970 --> 00:26:26.100
Ryan Mehta: On the left hand side, we're taking only items that are greater than three so new array will only contain items that are greater than three every time this return is truthy the item gets added to new array.

218
00:26:27.660 --> 00:26:44.400
Ryan Mehta: On the right hand side first construct an array and then for each item in the array. If the item is greater than three with push it to the new array. These things do the exact same thing, just with different syntax.

219
00:26:46.170 --> 00:26:50.640
Ryan Mehta: I would prefer almost always filter in this case over for each

220
00:27:00.600 --> 00:27:07.350
Thomas Stussi: You would you generally avoid creating new arrays with for each, obviously, it might be necessary, sometimes, but

221
00:27:08.820 --> 00:27:12.300
Thomas Stussi: You would generally avoid that. Because of this kind of ugly syntax.

222
00:27:13.080 --> 00:27:14.430
Ryan Mehta: Yeah, I almost

223
00:27:14.580 --> 00:27:16.680
Ryan Mehta: I hardly ever use for each

224
00:27:18.090 --> 00:27:20.130
Ryan Mehta: Just doesn't come up for me very often.

225
00:27:21.210 --> 00:27:27.330
Ryan Mehta: But yeah, I would almost never use. I can't even think of a time where I would use for each to create an array.

226
00:27:28.380 --> 00:27:31.950
Ryan Mehta: Either be map or filter or reduce

227
00:27:34.830 --> 00:27:35.550
Ryan Mehta: Almost never

228
00:27:36.600 --> 00:27:37.320
Ben Waples: Because I know

229
00:27:38.790 --> 00:27:39.120
Ryan Mehta: Okay.

230
00:27:40.500 --> 00:27:49.080
Ben Waples: Um, is there anything to do with like, because I know we've changed dot map with things after. Can we do that with all of the right methods.

231
00:27:50.970 --> 00:27:59.400
Ryan Mehta: Yep, except well you can chain them because they return a raise, so you can't really chain a for each

232
00:28:00.210 --> 00:28:06.000
Ryan Mehta: Okay, more array methods. The thing that lets you change these things is because

233
00:28:08.040 --> 00:28:09.150
Ryan Mehta: I can't draw right

234
00:28:14.730 --> 00:28:15.540
Takes one thing

235
00:28:17.670 --> 00:28:20.160
Ryan Mehta: When you dot map off of an array.

236
00:28:24.780 --> 00:28:29.640
Ryan Mehta: To say something here. This thing returns a new array.

237
00:28:31.080 --> 00:28:32.280
Ryan Mehta: And new array.

238
00:28:34.410 --> 00:28:38.730
Ryan Mehta: Like you can call all of the other array methods on so you can call up filter on it.

239
00:28:39.840 --> 00:28:46.140
Ryan Mehta: This is what makes it able to chain. Right. So instead of setting array dot map to a value.

240
00:28:47.610 --> 00:28:52.830
Ryan Mehta: It returns an array. So you can direct like right afterwards filter that same array.

241
00:28:54.240 --> 00:29:02.010
Ryan Mehta: So it's like, this is an array. So you cannot filter. And now, this thing is an array. So you can reduce so and so on.

242
00:29:04.260 --> 00:29:11.580
Ryan Mehta: But because for each doesn't return an array. You can't do that same sort of thing. Same with fine. He will be up the chain finds

243
00:29:22.620 --> 00:29:23.910
Ryan Mehta: Okay promises.

244
00:29:27.060 --> 00:29:31.560
Ryan Mehta: Yeah, I think promises are also very hard to wrap our brains around

245
00:29:33.150 --> 00:29:42.810
Ryan Mehta: Especially because there's like all this whole bunch of different syntax that we can use to deal with promises. There's like the dot then chains and there's a single wait

246
00:29:43.590 --> 00:29:52.740
Ryan Mehta: I mean, it's hard to figure out exactly when like when you need to use a way or when you need to then off of something to get a value back

247
00:29:55.740 --> 00:30:03.060
Ryan Mehta: And I think those sorts of things. Just come with time like realizing that something is going to take some time. So it's probably a promise.

248
00:30:03.630 --> 00:30:14.760
Ryan Mehta: And you can always inspect VS Code, it'll let you know something as a promise. Whenever something's, I promise. In order to get the value that the promise returns you always need to await it or then off of it.

249
00:30:16.470 --> 00:30:25.200
Ryan Mehta: At a high level of promises of Venable people used to call these things Venables before there was the word promise associated with these things.

250
00:30:27.060 --> 00:30:37.890
Ryan Mehta: It's a way to handle asynchronous actions. So we could fetch from a website or from some API. It takes some time to get a response back.

251
00:30:38.940 --> 00:30:45.180
Ryan Mehta: So we we return a promise. A promise to return the value from the API.

252
00:30:46.380 --> 00:31:04.740
Ryan Mehta: We don't just sit there and wait for the API to give us back a value. Um, it's very similar to how we behave in a kitchen oftentimes we don't stand in front of a microwave and wait for it to finish cooking our corn dogs. We like walk away and do something else. In the meantime,

253
00:31:11.310 --> 00:31:23.700
Ryan Mehta: This sort of thing is also in almost every other language. They just have different words for the idea of a promise. Some of them, call them futures delays or difference

254
00:31:24.810 --> 00:31:26.700
Ryan Mehta: But these are all sort of the same thing.

255
00:31:28.830 --> 00:31:32.580
Ryan Mehta: It's just like some some promise to give you some value in the future.

256
00:31:33.600 --> 00:31:34.620
But not immediately.

257
00:31:39.540 --> 00:31:48.120
Ryan Mehta: All right, there's a bunch of states for promises. Let's take a break really quick before we get into the states of promises and then like, dive a little bit more into it.

258
00:31:49.320 --> 00:31:51.480
Ryan Mehta: Let's come back at 950

259
00:31:54.960 --> 00:31:55.500
Ron Yonker: Sounds good.

260
00:31:56.280 --> 00:31:56.550
Ryan Mehta: Well,

261
00:31:56.580 --> 00:31:57.090
Thank you.

262
00:45:04.320 --> 00:45:05.430
Ryan Mehta: Alright, let's continue.

263
00:45:11.730 --> 00:45:14.130
Ryan Mehta: So promises have different states.

264
00:45:16.170 --> 00:45:23.550
Ryan Mehta: There. Isn't it a pending State, which is the initial state of the promise before it's actually done its work and fulfilled.

265
00:45:25.350 --> 00:45:44.160
Ryan Mehta: There is a fulfilled state when the promise successfully resolved is resolved. So after the promise finishes and it was successful, it will go into a fulfilled state. And there's a rejected state when the promise finishes to get some value or fails in some way.

266
00:45:45.660 --> 00:45:51.390
Ryan Mehta: And te spacing.

555
01:06:27.330 --> 01:06:30.210
Ryan Mehta: If we change this back to the pre tag.

556
01:06:31.410 --> 01:06:41.130
Ryan Mehta: The white space and comes back. So the pre tag just keeps the white spacing, as it is in the code instead of collapse in the white spaces like HTML normally does.

557
01:06:43.440 --> 01:06:57.210
Ryan Mehta: Okay, one last component to create for us, let's create our gamble dot j SX component. This will also be a function component we won't take any props.

558
01:06:59.790 --> 01:07:03.540
Ryan Mehta: We're going to return. Another pretty tag.

559
01:07:04.980 --> 01:07:10.350
Ryan Mehta: This time, instead of getting our pretty JSON, we're going to get our gamble by using a selector.

560
01:07:11.790 --> 01:07:18.210
Ryan Mehta: Will get state and will select off the gamble piece of state and then use that. Yeah, more pieces.

561
01:07:20.010 --> 01:07:20.280
Here.

562
01:07:22.950 --> 01:07:28.710
Ryan Mehta: Okay, so just select the yellow state, put the yellow state there. And then in our app JS.

563
01:07:29.970 --> 01:07:32.700
Ryan Mehta: Will use that Yama component

564
01:07:34.020 --> 01:07:36.540
Ryan Mehta: Back in our browser.

565
01:07:39.030 --> 01:07:41.250
Get what we expected.

566
01:07:44.970 --> 01:07:47.520
Ryan Mehta: Let's see if we can find some larger JSON.

567
01:07:48.990 --> 01:07:50.130
Rick and Morty.

568
01:07:52.560 --> 01:07:53.220
One.

569
01:07:55.050 --> 01:08:00.810
Ryan Mehta: Okay, so let's say we have this raw JSON that is uncomprehending beatable we could copy it.

570
01:08:02.130 --> 01:08:06.690
Ryan Mehta: Could take it over here pasted into our text area.

571
01:08:07.980 --> 01:08:08.700
Ryan Mehta: Kind of

572
01:08:09.930 --> 01:08:14.820
Ryan Mehta: Didn't. Oh, did we forget to change back the pretty to pre

573
01:08:16.770 --> 01:08:31.380
Ryan Mehta: What happened, we forgot to switch pretty back to pretty from P. All right, let's take this back. So, again, are pretty looking JSON and then under a pretty looking JSON, we get the MO representation

574
01:08:32.730 --> 01:08:33.750
Of that JSON.

575
01:08:36.480 --> 01:08:38.100
Ryan Mehta: That's a little JSON viewer.

576
01:08:45.210 --> 01:08:48.420
Ryan Mehta: And back to the code because that's probably the part that

577
01:08:49.830 --> 01:08:51.360
Ryan Mehta: matters the most.

578
01:08:52.680 --> 01:09:00.000
Ryan Mehta: The pretty and the yam will component are pretty much the same. The only difference is what they're selecting here.

579
01:09:02.250 --> 01:09:02.730
Ryan Mehta: And here.

580
01:09:04.110 --> 01:09:21.720
Ryan Mehta: The raw component is slightly different. It gets the dispatch function from the store and whenever you change the text area field dispatches the sets set JSON action sending the whatever you typed into the input box through the reducer updating all of the state.

581
01:09:26.670 --> 01:09:43.050
Ryan Mehta: And then the one other thing that is different compared to our normal applications is an index JS we wrapped this React redux provider around our app JS providing the store to all of our components which makes that state global

582
01:09:44.580 --> 01:09:56.910
Ryan Mehta: And then the store all of our all of our state now goes through our reducer instead of using the built in React state management library or Braxton management.

583
01:10:03.630 --> 01:10:05.040
Ryan Mehta: Makes sense. For the most part,

584
01:10:15.480 --> 01:10:17.640
Ryan Mehta: Anything looking super, super crazy

585
01:10:20.250 --> 01:10:20.610
Ben Waples: They

586
01:10:21.780 --> 01:10:28.770
Ben Waples: Oh, they use dispatch online six is that that's just grabbing dispatch from the store.

587
01:10:30.180 --> 01:10:31.530
Ben Waples: Was grabbing this bedroom.

588
01:10:32.040 --> 01:10:35.370
Ryan Mehta: Yeah, from the store. Exactly. So this would be the same as saying you

589
01:10:35.370 --> 01:10:36.060
Store.

590
01:10:37.110 --> 01:10:38.070
Ryan Mehta: And then like

591
01:10:42.210 --> 01:10:49.590
Ryan Mehta: School or dot dispatch, same sort of thing. It just gets that dispatch directly

592
01:10:51.900 --> 01:10:53.760
Ron Yonker: I don't see why we don't just say that

593
01:10:55.080 --> 01:10:59.460
Ron Yonker: What's the advantage of us dispatch them over that nothing

594
01:10:59.550 --> 01:11:01.530
Ryan Mehta: You can do whichever one feels better for you.

595
01:11:02.790 --> 01:11:09.810
Ryan Mehta: Just that you don't need any of the other stuff on the store like you just know that you want to dispatch. You don't know that you want the entire store.

596
01:11:11.550 --> 01:11:15.180
Ryan Mehta: But besides that they're exactly the same. This is just a helper hook

597
01:11:22.830 --> 01:11:33.690
Ron Yonker: It feels to me like whoever did the naming for a lot of these functions. These to have somebody sit down with them and at Western talking to about naming

598
01:11:36.120 --> 01:11:38.640
Ryan Mehta: Yeah, the selector the dispatcher both

599
01:11:40.110 --> 01:11:49.410
Ron Yonker: All of them that they're they're things that I mean with the functionality that they have similar functionalities say different things.

600
01:11:51.240 --> 01:11:51.570
Ryan Mehta: Just

601
01:11:52.290 --> 01:11:57.300
Ron Yonker: Trying to keep track of all the terminology make you smash, somebody with a hammer.

602
01:11:59.340 --> 01:12:01.200
Ryan Mehta: Yeah, I think there's only three terms here.

603
01:12:01.830 --> 01:12:05.340
Ryan Mehta: There's the dispatch term the selector term and the store.

604
01:12:09.060 --> 01:12:12.330
Ryan Mehta: I guess there's the reducer and the actions also

605
01:12:13.680 --> 01:12:15.630
Ron Yonker: Yeah, that's where I'm getting my wife.

606
01:12:17.220 --> 01:12:17.610
Ryan Mehta: Yeah.

607
01:12:17.880 --> 01:12:23.790
Ryan Mehta: You're gonna have to go back to the 70s and get somebody that's all come through like 70s functional programming.

608
01:12:27.600 --> 01:12:28.800
Ryan Mehta: We had time machines.

609
01:12:29.970 --> 01:12:30.420
Ben Waples: I'm

610
01:12:30.810 --> 01:12:32.280
Annalise: A machine, as I've been

611
01:12:34.380 --> 01:12:54.330
Ben Waples: I'm do we ever do like so when we were doing the state hooks. I mean, react hooks, we would use like set. I'm like set naming, but does does Redux take care of that. The React redux library. And so we're only using their custom hugs. Yep.

612
01:12:57.390 --> 01:13:12.720
Ryan Mehta: Yeah, we're not using the react state anymore at all. It's all going through that Redux store now. So we've actually like ripped out. I mean, you could still use the react state like you can combine the two. If you really want to, and some components.

613
01:13:13.860 --> 01:13:22.650
Ryan Mehta: But when we're using the US dispatching the selector we've essentially ripped out the react state management and inserted the Redux state management.

614
01:13:34.410 --> 01:13:38.850
Michelle Stermitz: So is the MO an outdated thing. Like, what is it used for

615
01:13:40.770 --> 01:13:43.080
Ryan Mehta: You see it a lot and DevOps things for

616
01:13:43.080 --> 01:13:50.580
Ryan Mehta: Configuration files because it's a little bit easier to write than JSON. That's why we see it in our

617
01:13:51.750 --> 01:13:52.770
Ryan Mehta: Like GitHub.

618
01:13:54.360 --> 01:13:55.320
Ryan Mehta: dot html thing.

619
01:13:56.490 --> 01:13:58.800
Ron Yonker: You'll see that the use Docker and Cooper Nettie

620
01:13:59.670 --> 01:14:04.260
Ryan Mehta: Yep, all like most DevOps tools, use some sort of the MO file.

621
01:14:05.280 --> 01:14:13.200
Ryan Mehta: For configuration. So it's not outdated. It comes from Ruby. It was like the language that Ruby used for configuration.

622
01:14:35.670 --> 01:14:36.480
Ryan Mehta: Not too bad.

623
01:14:39.810 --> 01:14:40.740
Ryan Mehta: Or very bad.

624
01:14:44.970 --> 01:14:45.420
Thomas Stussi: Students from

625
01:14:45.450 --> 01:14:46.590
Ron Yonker: All of the bad but all

626
01:14:48.960 --> 01:14:49.200
Brooke Perkins (she/her): That

627
01:14:50.070 --> 01:14:51.480
Annalise: Yeah, I mean,

628
01:14:51.540 --> 01:14:52.770
Thomas Stussi: Honestly think it's super cool.

629
01:14:53.610 --> 01:14:54.120
Annalise: Yeah, I think.

630
01:14:54.390 --> 01:14:54.990
Thomas Stussi: It's like

631
01:14:55.380 --> 01:14:58.590
Thomas Stussi: Just doing what we were doing with context, but just a little easier.

632
01:15:00.150 --> 01:15:03.600
Josh Olloqui: Nice super read that we don't have to make the provider either

633
01:15:05.580 --> 01:15:06.660
Ryan Mehta: Yeah, for sure.

634
01:15:09.390 --> 01:15:11.400
Ryan Mehta: All right, should we try a list of things.

635
01:15:13.140 --> 01:15:17.310
Ryan Mehta: Maybe we should take a break first and then do a little list of things with this style.

636
01:15:18.900 --> 01:15:21.690
Ryan Mehta: We're going to have to add one other library.

637
01:15:22.890 --> 01:15:32.460
Ryan Mehta: Into this library called Redux Thunk me actually show that library before we see what it does, just so we can see

638
01:15:33.900 --> 01:15:36.990
Ryan Mehta: How silly, the JavaScript ecosystem can be

639
01:15:38.010 --> 01:15:43.170
Ryan Mehta: So there's the Redux Thunk library gets 2 million weekly downloads.

640
01:15:44.850 --> 01:15:47.220
Ryan Mehta: If we look at the actual library.

641
01:15:48.240 --> 01:15:48.810
Where are you

642
01:15:50.790 --> 01:15:59.460
Ryan Mehta: It is a total of 14 lines of code. These 14 lines of code gets 2 million weekly downloads. What is going on.

643
01:15:59.790 --> 01:16:00.390
Why

644
01:16:02.040 --> 01:16:04.290
Ryan Mehta: I don't know, maybe people don't know what the library is doing.

645
01:16:05.070 --> 01:16:16.470
Ryan Mehta: And it could actually be less lines of code. These like what five lines four lines of code are the entirety of the library, pretty much, but

646
01:16:17.700 --> 01:16:20.760
Ryan Mehta: It's cool. Well, we'll talk about this library.

647
01:16:21.900 --> 01:16:22.440
Ron Yonker: Break.

648
01:16:26.070 --> 01:16:27.180
Ryan Mehta: Let's come back at

649
01:16:27.930 --> 01:16:28.830
Annalise: 10

650
01:16:29.220 --> 01:16:49.980
Ryan Mehta: Let's come back at 11

651
01:16:57.780 --> 01:16:59.430
Nate Kruck: I think you're muted, Ryan.

652
01:17:00.540 --> 01:17:01.260
Ryan Mehta: Thank you.

653
01:17:02.280 --> 01:17:05.460
Ryan Mehta: So let's draw a little picture that goes along with our Redux applications.

654
01:17:05.970 --> 01:17:11.790
Ryan Mehta: In our read that's applications. We have a store the store contains all of our state.

655
01:17:14.550 --> 01:17:22.380
Ryan Mehta: We get that state into our components using the US selector hook

656
01:17:25.650 --> 01:17:29.490
Ryan Mehta: That will give access to the state in our component

657
01:17:32.670 --> 01:17:35.910
Ryan Mehta: Our component can then dispatch actions.

658
01:17:39.390 --> 01:17:42.210
Ryan Mehta: By utilizing the US dispatch.

659
01:17:44.760 --> 01:17:46.980
Ryan Mehta: Hook civil dispatch an action.

660
01:17:48.900 --> 01:17:53.130
Ryan Mehta: When we dispatch an action, the action goes to a reducer.

661
01:17:58.230 --> 01:18:11.100
Ryan Mehta: The reducer is responsible for updating the state and storing that state into the store, which will trigger the component to re render this is sort of a cycle, our components run through

662
01:18:14.190 --> 01:18:17.130
Ryan Mehta: With Redux there's also this thing called middleware.

663
01:18:18.690 --> 01:18:35.280
Ryan Mehta: If you remember from back and express middleware were functions that ran between an incoming requests and outgoing response right um Redux has the same sort of thing middleware, but the middle where runs between a dispatched action.

664
01:18:36.390 --> 01:18:37.860
Ryan Mehta: And have reducer.

665
01:18:39.060 --> 01:18:46.350
Ryan Mehta: So you can run through a series of middleware functions before your action hits a reducer.

666
01:18:48.000 --> 01:18:51.060
Ryan Mehta: Anything that we put here would be middleware.

667
01:18:53.610 --> 01:18:57.330
Ryan Mehta: Let's take a look really quick at Redux middle where

668
01:19:00.120 --> 01:19:03.210
Ryan Mehta: We were kind of looking at one example of it right here.

669
01:19:06.000 --> 01:19:12.480
Ryan Mehta: So Redux middleware always takes this sort of structure. It's a function that gets the store.

670
01:19:13.560 --> 01:19:17.070
Ryan Mehta: Gets a next function and gets the incoming action.

671
01:19:18.660 --> 01:19:25.260
Ryan Mehta: These are called curried functions, by the way, because we have a function that returns a function that returns a function

672
01:19:25.740 --> 01:19:29.880
Ryan Mehta: That does something instead of passing three arguments to a function

673
01:19:30.480 --> 01:19:45.630
Ryan Mehta: You have a function that takes the first argument that returns in art, a function that takes a second argument that returns a function that takes the third argument. They have a whole blog post on why they decided to do this like curried function set up for us. It doesn't really matter.

674
01:19:47.070 --> 01:19:54.090
Ryan Mehta: It's just like we have to remember that we need to do this Korean setup for making middleware will never have to make our own middleware. Luckily,

675
01:19:55.980 --> 01:20:01.950
Ryan Mehta: In our actual applications, but I'm going to make one really quick, just so we can kind of see how the setup works.

676
01:20:02.460 --> 01:20:08.760
Annalise: Um, excuse me, Ryan, how do you spell that isn't curry like like a spice curry or what do you say yes.

677
01:20:08.880 --> 01:20:10.470
Annalise: Curry. Okay.

678
01:20:15.210 --> 01:20:16.800
currying. Yep.

679
01:20:17.850 --> 01:20:21.450
Ryan Mehta: Okay, so you're interested. I think it's named after a person

680
01:20:22.080 --> 01:20:22.650
Okay.

681
01:20:23.790 --> 01:20:24.810
Annalise: Makes sense. Thank you.

682
01:20:26.700 --> 01:20:28.410
Ron Yonker: Not spicy chicken gravy.

683
01:20:29.070 --> 01:20:29.370
Ron Yonker: No.

684
01:20:29.820 --> 01:20:31.380
Annalise: I'm a vegetarian, but yeah.

685
01:20:33.990 --> 01:20:43.170
Ryan Mehta: So let's take a look at how this middleware looks. I'm just going to go back to our little play index file that we had from before.

686
01:20:44.640 --> 01:20:50.280
Ryan Mehta: And let's write a piece of Redux middleware right here so middleware.

687
01:20:53.250 --> 01:21:05.760
Ryan Mehta: Is a function that takes the store returns a function that takes a next that returns a function that takes an action and then that is a function that does something

688
01:21:07.470 --> 01:21:24.750
Ryan Mehta: So this is what our middleware structure always looks like our middleware has access to the store, you can kind of imagine what next does right it passes it on to the next piece of middleware or if it's a last piece of middleware in the chain passes the action to the reducer.

689
01:21:26.610 --> 01:21:39.480
Ryan Mehta: And the action is the incoming action, the action that was just dispatched so for our little first middleware. Let's say we console log the incoming action.

690
01:21:45.240 --> 01:21:47.160
Ryan Mehta: And then we'll call the next function.

691
01:21:48.390 --> 01:21:53.940
Ryan Mehta: With Redux middle where you're supposed to call the next function with the action as incoming

692
01:21:55.830 --> 01:22:00.150
Ryan Mehta: Okay, so we're gonna create this middle where it's like

693
01:22:01.290 --> 01:22:07.470
Thomas Stussi: Go ahead, Thomas. So this just locks the action and passes it along. It doesn't really do anything.

694ndle change function.

136
00:16:55.800 --> 00:17:08.520
Ryan Mehta: And then we're going to have a series of inputs. Right. I'm going to put them inside of a fragment. We're going to have an input for background color so type equals color.

137
00:17:10.200 --> 00:17:17.880
Ryan Mehta: The value is going to be big color and on change. We're going to pass it the handle change function.

138
00:17:19.920 --> 00:17:23.280
Ryan Mehta: We're also going to want an input for

139
00:17:24.570 --> 00:17:25.530
Ryan Mehta: Foreground color.

140
00:17:33.660 --> 00:17:36.690
Ryan Mehta: Change and then we'll have one final input.

141
00:17:37.710 --> 00:17:38.280
Ryan Mehta: For

142
00:17:41.820 --> 00:17:43.830
Ryan Mehta: Our text.

143
00:17:51.090 --> 00:18:00.840
Ryan Mehta: All right, I'm gonna do a little bit of anticipation here, the way that I'm going to make it so this handle change knows which of the three pieces of state to change.

144
00:18:01.260 --> 00:18:09.810
Ryan Mehta: Is by adding a name to each input. The name is going to correspond with the piece of state that the input is attached to

145
00:18:10.980 --> 00:18:16.950
Ryan Mehta: So our first input is going to have a name background color because it manipulates the background color.

146
00:18:18.750 --> 00:18:19.350
State.

147
00:18:20.370 --> 00:18:35.610
Ryan Mehta: Our second input is going to have a name of f g color because it's going to be manipulating the foreground color. He said state. We haven't written the state yet. We'll get to that state right when we start reading our container.

148
00:18:36.990 --> 00:18:38.610
Ryan Mehta: And our

149
00:18:39.690 --> 00:18:48.990
Ryan Mehta: Final input our text input is going to have a name of text because it's going to be manipulating the text piece of state.

150
00:18:50.700 --> 00:19:00.300
Ryan Mehta: So each of these names corresponds with the props that we get passed in, and eventually the name in state in our container.

151
00:19:04.590 --> 00:19:10.020
Ryan Mehta: And one last thing that I'm going to add for each of these. I'm going to add an ID to each input.

152
00:19:14.940 --> 00:19:16.200
Ryan Mehta: A label for each

153
00:19:23.610 --> 00:19:26.640
Ryan Mehta: So that way, they're not just floating inputs.

154
00:19:29.580 --> 00:19:33.030
Ryan Mehta: So we have a background color label. We're gonna have a

155
00:19:34.080 --> 00:19:35.370
Ryan Mehta: Foreground Color label.

156
00:19:41.130 --> 00:19:41.640
Oops.

157
00:19:51.120 --> 00:19:52.410
Ryan Mehta: Is it like he or something.

158
00:20:00.900 --> 00:20:02.250
Ryan Mehta: And then one last label.

159
00:20:15.510 --> 00:20:29.280
Ryan Mehta: Alright, does that code for the most part, makes sense. The one part that might still be hanging in your brain is how these names are going to hook up with our handbook changes, but we'll see that in a second. Does the rest of it sort of makes sense to display of this thing.

160
00:20:30.630 --> 00:20:30.840
Ryan Mehta: Yep.

161
00:20:32.430 --> 00:20:33.570
Ron Yonker: Cool, let's

162
00:20:35.280 --> 00:20:41.280
Ryan Mehta: Let's put this in our app JS and make sure that it works. So we bring in our controls.

163
00:20:43.980 --> 00:20:51.120
Ryan Mehta: Controls needs a few different props, which we can just hard code for now. It needs text.

164
00:20:52.170 --> 00:20:59.430
Ryan Mehta: Which will say is. Hi there. It needs a background color, which will set to

165
00:21:00.690 --> 00:21:05.130
Ryan Mehta: Read the foreground color, which will set to

166
00:21:06.480 --> 00:21:06.990
Green.

167
00:21:08.190 --> 00:21:13.590
Ryan Mehta: And it needs a handle change function. And for now I will make this

168
00:21:17.850 --> 00:21:19.380
I'm going to do something like this.

169
00:21:23.010 --> 00:21:23.610
Ryan Mehta: Log

170
00:21:28.530 --> 00:21:36.840
Ryan Mehta: Alright, so a little kind of dummy handle change function that just console log the targets name and the current target value.

171
00:21:39.390 --> 00:21:50.730
Ryan Mehta: If we go back to our front end with Sierra little controls makes it looks like everything's hooked up pretty well. We have our hide their text our red background color and our green foreground color.

172
00:21:51.960 --> 00:22:05.190
Ryan Mehta: If we try to change the red color. It's not actually going to change because we we don't have any state associated with it, but we will get a console log with the targets name and

173
00:22:06.210 --> 00:22:10.530
Ryan Mehta: The newly Selective Color or the color that the user clicked on.

174
00:22:18.420 --> 00:22:26.160
Ryan Mehta: So the component itself looks good. The functionality doesn't quite work yet like we can't actually change the colors right now. It doesn't do anything.

175
00:22:27.300 --> 00:22:38.370
Ryan Mehta: But that's because we haven't made our container, yet the containers. What sets up all of the functionality. The look of it though the presentation of it is kind of what we wanted.

176
00:22:40.110 --> 00:22:48.090
Ryan Mehta: So we'll do the same sort of thing that we did with our background, we're ready now to make a snapshot test of our controls.

177
00:22:51.210 --> 00:22:56.880
Ryan Mehta: I'm going to steal this snapshot. Oops. Not that I'm going to steal this again.

178
00:22:57.930 --> 00:23:03.420
Ryan Mehta: And just change some of the names are snapshot test.

179
00:23:09.480 --> 00:23:19.530
Ryan Mehta: I did the same thing every time I always steal another snapshot test. They're always almost exactly the same besides the props that we might pass to it.

180
00:23:20.550 --> 00:23:24.900
Ryan Mehta: In the case. In this case, we're also going to need to pass a handle change function.

181
00:23:26.430 --> 00:23:33.690
Ryan Mehta: And in the case of our test, I'm just going to make an empty handle change function doesn't really matter. Nobody's going to be changing this in the snapshot

182
00:23:34.860 --> 00:23:36.630
Ryan Mehta: So we should be able to do that.

183
00:23:38.730 --> 00:23:54.000
Ryan Mehta: Once our test runs. We should end up with a new control snapshot and we can just look at it to double check that it the HTML looks like what we expect. We have a label with background color in our background color input.

184
00:23:55.500 --> 00:24:06.390
Ryan Mehta: We have our foreground color label and our foreground color input our text label and our text input is exactly what we expected to see.

185
00:24:09.060 --> 00:24:16.350
Ryan Mehta: Also the values are all set correctly, based on the values that we passed in as props.

186
00:24:18.660 --> 00:24:19.290
Ryan Mehta: Look good

187
00:24:21.720 --> 00:24:22.320
Ron Yonker: Alright.

188
00:24:23.070 --> 00:24:24.090
Ryan Mehta: One last thing to

189
00:24:24.120 --> 00:24:29.070
Ryan Mehta: do then is create our container component

190
00:24:31.650 --> 00:24:33.060
Ryan Mehta: What I normally do.

191
00:24:34.260 --> 00:24:45.810
Ryan Mehta: Is I create a separate directory for my containers outside of the components directory. So I end up with the components directory and a containers directory

192
00:24:48.090 --> 00:24:55.410
Ryan Mehta: And then in my containers directory. I'm going to create a color picker dot j SX

193
00:24:57.360 --> 00:24:58.890
Ryan Mehta: I'm actually going to put it in.

194
00:25:00.330 --> 00:25:02.700
Folder color picker.

195
00:25:05.670 --> 00:25:13.800
Ryan Mehta: So a folder called color picker. And then my color picker J SX file in a separate containers directory

196
00:25:14.370 --> 00:25:27.630
Ryan Mehta: This lets me kind of quickly switch between my business logic and my containers and my presentation and my components. You can also imagine two separate developers working on these sections.

197
00:25:28.410 --> 00:25:36.930
Ryan Mehta: You might imagine a person who's more inclined to design work working on the presentational components worrying about how things look

198
00:25:37.650 --> 00:25:48.900
Ryan Mehta: And somebody that's more about wiring up the react application worrying about the container components, figuring out how the logic should move through the application. So it's a nice separation here.

199
00:25:50.460 --> 00:25:58.140
Ryan Mehta: For my containers I well right now we are going to always be using class based components.

200
00:26:06.330 --> 00:26:08.880
Ryan Mehta: So we're going to export the fault.

201
00:26:10.650 --> 00:26:11.370
Class.

202
00:26:22.680 --> 00:26:24.960
Ryan Mehta: I'm also going to make a test for this.

203
00:26:26.130 --> 00:26:26.730
Color

204
00:26:30.990 --> 00:26:47.880
Ryan Mehta: For our present or for our container components. We're not going to be using the same snapshot tests. This is where we're actually going to step through this component and TDD. So unlike the presentational components where we don't test it until we're done.

205
00:26:49.320 --> 00:26:58.620
Ryan Mehta: Writing the implementation. We're going to do the exact opposite for the container components. This is where we're actually testing logic. So we really want to TDD that

206
00:26:58.950 --> 00:27:11.040
Ryan Mehta: When you're doing the styling part. It's really hard to test at the beginning because you really need to see what it looks like on the page before KNOWING IF IT'S A GOOD. IT'S A GOOD presentational components or not.

207
00:27:12.270 --> 00:27:14.490
Ryan Mehta: So we're going to TDD this color picker.

208
00:27:15.900 --> 00:27:27.000
Ryan Mehta: Before getting started with it. But let's take a break really quick before we we transition into our TDD stuff. Let's come back at 950

209
00:27:29.010 --> 00:27:30.600
Annalise Murphy: Sounds good. Yeah.

210
00:27:36.030 --> 00:27:42.240
Ryan Mehta: We stopped to just as we were about to add some nice tests to our color picker application.

211
00:27:44.820 --> 00:27:55.800
Ryan Mehta: Let's start reading the test these tests were to start the same always also we import react from react were asked to import some things from our

212
00:27:58.080 --> 00:27:59.550
Ryan Mehta: Testing library.

213
00:28:00.600 --> 00:28:03.960
Ryan Mehta: Testing library react. We're going to need to render from it.

214
00:28:05.610 --> 00:28:11.700
Ryan Mehta: And screen at the very least will probably need a few other things from it, but we'll get to those as they come up.

215
00:28:13.380 --> 00:28:18.960
Ryan Mehta: We're going to describe our color picker container.

216
00:28:22.590 --> 00:28:25.080
Ryan Mehta: And we need to write some sort of test.

217
00:28:27.540 --> 00:28:31.710
Ryan Mehta: So we have to decide what our color picker container is supposed to be doing.

218
00:28:33.150 --> 00:28:51.210
Ryan Mehta: If we look back at this picture, the Color Picker container is managing these three pieces of state and changing these three pieces of state with his handle change function. So a user should be able to change. Let's say the text and the text should change on the display.

219
00:28:52.290 --> 00:29:11.130
Ryan Mehta: Right. So there's some interaction there a user types into the text input box and the displays text changes in response. That's our first interaction that we can test. So let's say that it changes the display text on

220
00:29:13.110 --> 00:29:14.460
text input.

221
00:29:16.410 --> 00:29:22.230
Ryan Mehta: That makes sense for user types in the text input and the display changes in response

222
00:29:23.280 --> 00:29:37.590
Ryan Mehta: I think maybe we will get a failing tests as soon as we render our color picker. The first thing that we do in this test is render our color picker, put it onto the screen.

223
00:29:38.790 --> 00:29:52.080
Ryan Mehta: This is just like this makes sense, right, we're like putting the Color Picker onto the screen so we can make grabbed visual display from it. At this point, our test fails because

224
00:29:54.180 --> 00:29:58.200
Ryan Mehta: It says instance render is not a function

225
00:29:59.820 --> 00:30:10.590
Ryan Mehta: Color Picker no render method found on the returned component all components need a render method right so in order to get our test to pass. It's telling us that we need a render method.

226
00:30:11.610 --> 00:30:20.160
Ryan Mehta: But it's not enough to just have a render method we actually need to render something in the render method. I think the next error message will tell us that

227
00:30:21.420 --> 00:30:24.180
Ryan Mehta: uncut air. Nothing was returned from render

228
00:30:25.530 --> 00:30:27.870
Ryan Mehta: So let's return something from our Render method.

229
00:30:30.870 --> 00:30:33.600
Ryan Mehta: What do we want to return here.

230
00:30:35.460 --> 00:30:38.400
Ryan Mehta: What do we want inside of this color picker.

231
00:30:45.780 --> 00:31:01.110
Ryan Mehta: I think we want our controls on top of our display and will offload how to present our data to these two presentational components, but these are the two presentational components that we were our color picker to interact with

232
00:31:03.300 --> 00:31:10.650
Ryan Mehta: At this point, we have a bunch of other errors or more like warnings telling us that these components need some props.

233
00:31:12.120 --> 00:31:16.950
Ryan Mehta: So how do we get this part to pass. Nobody has any ideas what we can do.

234
00:31:18.840 --> 00:31:20.550
ryan Diffenbaugh: Is is where you bring in the prototypes.

235
00:31:21.780 --> 00:31:30.300
Ryan Mehta: We don't the prop types are only really going to exist on that presentational components in this case of but something like props. Yeah, for sure you're not

236
00:31:30.360 --> 00:31:34.200
Jerud Moyer: Passing the props right into the wind nine and 10

237
00:31:34.590 --> 00:31:35.610
Ryan Mehta: Totally, yeah.

238
00:31:37.200 --> 00:31:39.960
Ryan Mehta: So controls needs text.

239
00:31:41.040 --> 00:31:42.960
Ryan Mehta: It means background color.

240
00:31:44.010 --> 00:31:48.870
Ryan Mehta: It needs foreground color and it needs a handle change function.

241
00:31:50.580 --> 00:31:52.410
Ryan Mehta: Display needs text.

242
00:31:53.820 --> 00:32:01.050
Ryan Mehta: It needs background color. It needs foreground color and it needs. Actually, that's it.

243
00:32:03.750 --> 00:32:05.640
Ryan Mehta: Where did these things come from.

244
00:32:07.170 --> 00:32:08.490
Ryan Mehta: Or where should they come from.

245
00:32:11.460 --> 00:32:12.570
Stop props.

246
00:32:14.880 --> 00:32:17.880
Ryan Mehta: From state, it should be our color picker state that

247
00:32:17.880 --> 00:32:18.660
Ryan Mehta: fills in

248
00:32:20.790 --> 00:32:23.730
Ryan Mehta: This information here, right. It's all staple stuff.

249
00:32:25.110 --> 00:32:26.730
Ryan Mehta: So we're going to create some state.

250
00:32:27.810 --> 00:32:32.160
Ryan Mehta: One piece of state for text one for background color.

251
00:32:33.510 --> 00:32:36.690
Ryan Mehta: Let's start the background color as black

252
00:32:38.130 --> 00:32:44.280
Ryan Mehta: And foreground color will start the foreground color as white

253
00:32:45.960 --> 00:32:53.820
Ryan Mehta: And then we also need to handle change function. I'm just going to scaffold this out for now, we're not actually going to put anything in here yet.

254
00:32:55.590 --> 00:33:05.070
Ryan Mehta: So now in our Render we can D structure text background color and foreground color off of this dot state.

255
00:33:06.330 --> 00:33:10.200
Ryan Mehta: And then pass these things to the appropriate areas of text.

256
00:33:11.640 --> 00:33:12.930
Ryan Mehta: Background color.

257
00:33:14.220 --> 00:33:15.660
Ryan Mehta: Foreground color.

258
00:33:19.290 --> 00:33:27.360
Ryan Mehta: So tedious. These are like my favorite things to do, though, it's like so meditative ient has. So I'm going to make a coloring book drops

604
01:15:20.880 --> 01:15:25.170
Ryan Mehta: Are coloring book is going to receive no props. So it's an empty object for its props.

605
01:15:26.280 --> 01:15:27.480
Ryan Mehta: Are coloring book.

606
01:15:31.920 --> 01:15:43.140
Ryan Mehta: Also has some state our coloring book state is going to have SVG SVG URL and color inside of it. So have SVG, which is a string.

607
01:15:44.220 --> 01:15:46.320
Ryan Mehta: You have color to the string.

608
01:15:48.210 --> 01:15:50.370
Ryan Mehta: And was a lot SVG URL.

609
01:15:51.720 --> 01:15:53.910
Ryan Mehta: URL, which is also a string.

610
01:15:54.990 --> 01:16:03.600
Ryan Mehta: When we're constructing our component we tell it that it has coloring book props and coloring book state.

611
01:16:04.620 --> 01:16:09.300
Ryan Mehta: So the shape of its props, the shape of it state is defined right here.

612
01:16:11.700 --> 01:16:13.740
Ryan Mehta: We're then going to render

613
01:16:15.690 --> 01:16:20.700
Ryan Mehta: We're going to compose are two other functions of controls.

614
01:16:21.720 --> 01:16:23.190
Ryan Mehta: And our display.

615
01:16:24.660 --> 01:16:39.840
Ryan Mehta: These are going to be very mad because we haven't passed them the required props will create our state. We have SVG, which is a string SVG URL, which is a string and color which is also a string.

616
01:16:41.880 --> 01:16:44.280
Ryan Mehta: Well, the structure this state at the top.

617
01:16:48.300 --> 01:16:49.260
Ryan Mehta: And color.

618
01:16:53.520 --> 01:17:00.600
Ryan Mehta: And then we'll pass these props to the appropriate places. This one is STG exhibit

619
01:17:01.770 --> 01:17:06.570
Ryan Mehta: Oh and needs. One other thing I changed function. This one needs SVG URL.

620
01:17:08.340 --> 01:17:09.750
Ryan Mehta: And it needs color.

621
01:17:15.000 --> 01:17:21.630
Ryan Mehta: Our controls needs a function for handling change will make a handle change function.

622
01:17:23.070 --> 01:17:37.620
Ryan Mehta: And our display needs to function for handling blah, so make a handle drop function and pass both of these things. So on change handle change and

623
01:17:38.640 --> 01:17:40.680
Ryan Mehta: Draw handle

624
01:17:41.700 --> 01:17:42.240
Ryan Mehta: The draw

625
01:17:43.770 --> 01:17:44.700
Ryan Mehta: With the good so far.

626
01:17:46.440 --> 01:17:49.140
Ryan Mehta: Okay, our on change function.

627
01:17:50.310 --> 01:18:01.740
Ryan Mehta: Is going to have a current target, which we will get from react dot change event on an HTML.

628
01:18:03.240 --> 01:18:03.990
Input

629
01:18:06.270 --> 01:18:09.180
Ryan Mehta: And then we will set state.

630
01:18:11.340 --> 01:18:11.760
With

631
01:18:13.140 --> 01:18:17.550
Ryan Mehta: That name equal to current target dot value.

632
01:18:19.440 --> 01:18:20.400
Ryan Mehta: Something like that.

633
01:18:22.410 --> 01:18:28.170
Ryan Mehta: This is going to be a bit mad, I guess, because we don't know that name is

634
01:18:29.220 --> 01:18:31.110
Well, okay, let's do this.

635
01:18:35.340 --> 01:18:36.120
Ryan Mehta: State.

636
01:18:38.670 --> 01:18:44.700
Ryan Mehta: Equals that and we'll call this thing down here steak key is the syntax right now make sense.

637
01:18:47.250 --> 01:18:57.300
Ryan Mehta: Kind of the same thing that we normally do with I target name here I'm just putting it in this variable up above, because this is going to complain to us that

638
01:18:58.020 --> 01:19:19.050
Ryan Mehta: We can't actually use any string for state key, there's only a few strings that are valid here right state key has to be either SVG SVG URL or color because we defined what our state looks like over here. So TypeScript is telling us that we actually need to be a little bit more explicit

639
01:19:20.520 --> 01:19:25.950
Ryan Mehta: So I'm going to take this and say that this is either SVG.

640
01:19:27.480 --> 01:19:29.940
Ryan Mehta: Or its SVG URL.

641
01:19:32.430 --> 01:19:33.060
Ryan Mehta: Color

642
01:19:34.290 --> 01:19:37.560
Ryan Mehta: I think it'll be happy for at least now.

643
01:19:47.970 --> 01:19:48.720
Ryan Mehta: Not happier.

644
01:19:51.480 --> 01:19:52.530
Ryan Mehta: Than happy about that.

645
01:19:57.240 --> 01:19:59.790
Ryan Mehta: How much time you want to spend on this.

646
01:20:01.650 --> 01:20:04.290
Ryan Mehta: Zero time. Let's just, let's do it like the

647
01:20:09.240 --> 01:20:11.460
Ryan Mehta: Name is a CG

648
01:20:13.050 --> 01:20:14.070
Ryan Mehta: Then we'll do that.

649
01:20:17.610 --> 01:20:18.990
Ryan Mehta: And we'll just copy this.

650
01:20:22.980 --> 01:20:27.480
Ryan Mehta: This problem. There's for sure fancier way to do this, like what we have been doing, but

651
01:20:29.280 --> 01:20:31.170
Ryan Mehta: I don't feel like spending too much time on it.

652
01:20:32.280 --> 01:20:33.660
Ryan Mehta: This will totally work right.

653
01:20:36.630 --> 01:20:43.980
Ryan Mehta: We'd have to fight with the type system just a little bit to get it to behave the way we want to. Or we can just do explicit checks here.

654
01:20:45.420 --> 01:20:56.760
Ryan Mehta: So if the name is SVG will set the SVG state. If it's SVG URL. We said that it gets color. He said that I'm going to add this thing to our app JS now.

655
01:20:58.050 --> 01:20:58.470
Our

656
01:21:00.450 --> 01:21:05.070
Ryan Mehta: Book, so we can at least see what it looks like on the page.

657
01:21:07.800 --> 01:21:08.640
Brooke Perkins (she/her): Hey Ryan,

658
01:21:10.560 --> 01:21:18.180
Brooke Perkins (she/her): Since TypeScript, kind of, you know, does, it's kind of, it's kind of like testing itself as it goes. Is this kind of like

659
01:21:19.650 --> 01:21:23.580
Brooke Perkins (she/her): With like Test Driven Development look different with TypeScript here.

660
01:21:24.270 --> 01:21:28.950
Ryan Mehta: It's still look the same would still like use React testing library and test the behavior.

661
01:21:29.370 --> 01:21:31.590
Brooke Perkins (she/her): Gotcha. So yeah. Gotcha.

662
01:21:32.160 --> 01:21:33.240
Ryan Mehta: And usually when you take a

663
01:21:33.360 --> 01:21:37.710
Ryan Mehta: Test TypeScript. I would almost always still read my Tesla and JavaScript.

664
01:21:38.790 --> 01:21:39.840
You can combine the two.

665
01:21:40.890 --> 01:21:41.580
Brooke Perkins (she/her): Well, thanks.

666
01:21:43.470 --> 01:21:48.570
Ryan Mehta: So here is our little color picker self bar doesn't do much of anything.

667
01:21:52.890 --> 01:21:53.400
All right.

668
01:21:55.170 --> 01:22:02.190
Ryan Mehta: Okay, so far it's actually grab one of these. Actually, no. This is good, look good so far.

669
01:22:04.170 --> 01:22:04.740
Ryan Mehta: All right.

670
01:22:07.620 --> 01:22:14.670
Ryan Mehta: I'm going to add an additional thing here component did update

671
01:22:16.020 --> 01:22:26.850
Ryan Mehta: Component did update always gets the previous props and the previous state previous props have a type. They are coloring book props.

672
01:22:27.870 --> 01:22:30.960
Ryan Mehta: And our coloring book state.

673
01:22:34.050 --> 01:22:43.020
Ryan Mehta: In this little function. I'm going to check if we change this SVG URL. And if we do, I'm going to update the SVG.

674
01:22:44.190 --> 01:22:45.150
String here.

675
01:22:46.200 --> 01:22:49.440
Ryan Mehta: So we're going to say if previous

676
01:22:50.460 --> 01:22:56.400
Ryan Mehta: State SVG URL doesn't equal this state.

677
01:22:59.880 --> 01:23:01.080
Ryan Mehta: As well.

678
01:23:02.100 --> 01:23:07.500
Ryan Mehta: Then we're going to update our SVG. So we're actually going to fetch the SVG.

679
01:23:09.750 --> 01:23:10.230
This

680
01:23:12.780 --> 01:23:14.220
Ryan Mehta: SVG URL.

681
01:23:15.690 --> 01:23:19.380
Ryan Mehta: We're going to get a response. We will parse the response as text.

682
01:23:21.030 --> 01:23:25.710
Ryan Mehta: Will then get back that text and we will set

683
01:23:27.630 --> 01:23:30.210
Ryan Mehta: SVG to that text.

684
01:23:32.400 --> 01:23:41.400
Ryan Mehta: So whenever the SVG URL changes we're actually going to fetch the SVG from that URL and update our SVG stream here.

685
01:23:43.650 --> 01:23:46.590
Ryan Mehta: It's kind of cool. Let's see if it does anything

686
01:23:47.790 --> 01:23:51.300
Ryan Mehta: Okay, so this is the URL to some SVG.

687
01:23:53.490 --> 01:23:54.840
Ryan Mehta: As we change this URL.

688
01:23:55.890 --> 01:24:09.240
Ryan Mehta: As we change this URL, the SVG URL state will change, causing us to re fetch and get a new SVG image so gigantic right now but

689
01:24:11.400 --> 01:24:12.240
Kind of get it right.

690
01:24:13.470 --> 01:24:32.550
Ryan Mehta: So as you're typing into this box, we're changing the SVG URL in our component did update. We're checking did the SVG URL just change if it did, we're going to fetch from that SVG URL retrieving the SVG and setting our SVG state. We actually don't need line 21 mistake.

691
01:24:33.660 --> 01:24:37.800
Ryan Mehta: This isn't an input. Right. It's the result of calling or SVG.

692
01:24:38.880 --> 01:24:39.480
URL.

693
01:24:41.100 --> 01:24:42.330
Ryan Mehta: This look good so far.

694
01:24:45.360 --> 01:24:45.780
Okay.

695
01:24:47.430 --> 01:24:51.690
Ryan Mehta: The final thing that we need to do is actually fill in this handled draw

696
01:24:54.450 --> 01:24:57.240
Ryan Mehta: Our handle draw is going to get a react.

697
01:25:00.720 --> 01:25:03.030
Ryan Mehta: An event that is a react.

698
01:25:05.220 --> 01:25:09.900
Ryan Mehta: Now cement the mouse event is going to be on an HTML.

699
01:25:11.220 --> 01:25:12.450
Ryan Mehta: Output element.

700
01:25:15.690 --> 01:25:24.720
Ryan Mehta: We're going to disrupt your target off of this something that I learned actually just yesterday is there's a slight difference between target and current target.

701
01:25:26.430 --> 01:25:39.240
Ryan Mehta: They are almost always the same, the difference being that current target is always the element that the event handler is on. So in our controls.

702
01:25:40.650 --> 01:25:48.720
Ryan Mehta: Current target is always one of these inputs. It's the event. It's like the element that the event handlers on

703
01:25:49.980 --> 01:25:55.080
Ryan Mehta: Back in our display that means this output is what our current target will always be

704
01:25:56.880 --> 01:26:05.730
Ryan Mehta: Target. On the other hand, is the actual thing that we clicked on like the child most component that we clicked on the actual thing where a mouse was

705
01:26:07.350 --> 01:26:13.650
Ryan Mehta: When we clicked. So in this case, target will be one of the SVG paths that we want to color in

706
01:26:16.860 --> 01:26:19.470
Ryan Mehta: Alright, so I'm going to say that

707
01:26:21.270 --> 01:26:25.140
Ryan Mehta: We know for sure target is an HTML.

708
01:26:26.520 --> 01:26:29.100
Ryan Mehta: SVG element.

709
01:26:30.420 --> 01:26:36.780
Ryan Mehta: We're going to take that path elements set an attribute called Phil to whatever our current

710
01:26:38.550 --> 01:26:43.920
Ryan Mehta: Color is selected as so whenever we click on

711
01:26:45.150 --> 01:26:53.550
Ryan Mehta: Our SVG, we're going to grab the path element that we've clicked on and fill it with the color that we currently selected.

712
01:26:56.340 --> 01:27:05.940
Ryan Mehta: I think at this point we select an image pick like read the can start coloring in a little SVG.

713
01:27:07.740 --> 01:27:08.640
Different colors.

714
01:27:12.150 --> 01:27:14.910
Ryan Mehta: Let's make this SVG smaller it's gigantic

715
01:27:18.120 --> 01:27:26.910
Ryan Mehta: I'm going to do that here 500 pixels.

716
01:27:31.500 --> 01:27:32.160
Ryan Mehta: Can see it.

717
01:27:36.150 --> 01:27:37.380
Ryan Mehta: Okay, there's a little

718
01:27:38.790 --> 01:27:39.570
Color Picker.

719
01:27:45.540 --> 01:27:48.180
Ryan Mehta: Color Picker to point out coloring book.

720
01:27:53.580 --> 01:27:58.500
Ryan Mehta: So the big thing that we had to do on this handled draw is we had to do this casting here.

721
01:28:00.210 --> 01:28:03.840
Ryan Mehta: This is because of TypeScript. If we didn't do this casting

722
01:28:05.670 --> 01:28:07.710
Ryan Mehta: It would err on this set attribute

723
01:28:09.480 --> 01:28:13.530
Ryan Mehta: TypeScript actually has no idea what type of thing target is.

724
01:28:14.940 --> 01:28:20.340
Ryan Mehta: Target is whatever we clicked on and that could be any sort of HTML element right

725
01:28:21.810 --> 01:28:32.850
Ryan Mehta: We happen to know that the, the only elements that we can click on in our application our path elements SVG path elements because that's the only thing that we put in our output.

726
01:28:34.080 --> 01:28:41.250
Ryan Mehta: But TypeScript doesn't really know that since we have a little bit more information. We're going to cast it as an SVG.

727
01:28:41.970 --> 01:28:56.340
Ryan Mehta: Path element we know for sure. It's an SVG path element SVG path elements have this set attribute function on it now that we test it to an SVG element TypeScript will allow us to call that attribute on it.

728
01:28:59.160 --> 01:29:08.760
Ryan Mehta: So we're like TypeScript, believe me, if this is for sure and SVG path element TypeScript like cool thumbs up and then allows us to call set attribute on it.

729
01:29:09.780 --> 01:29:13.110
Ryan Mehta: I guess it doesn't really say. Cool. Thumbs up. It says, I guess you know what you're doing.

730
01:29:19.020 --> 01:29:20.550
Ryan Mehta: And that's a little color draw our

731
01:29:21.810 --> 01:29:22.260
Buck

732
01:29:24.570 --> 01:29:26.460
Ryan Mehta: So then it's actually

733
01:29:28.620 --> 01:29:36.720
Ryan Mehta: The only TypeScript stuff. There's some confusing stuff in here probably just because of the application that we chose that might be new to a lot of you.

734
01:29:38.790 --> 01:29:47.490
Ryan Mehta: Then TypeScript stuff though are the defining of the props in this state at the top passing them as generics to the component

735
01:29:48.780 --> 01:29:53.100
Ryan Mehta: And then our event handlers have event types.

736
01:29:54.120 --> 01:30:04.980
Ryan Mehta: These event types are what led us the structure. These items off of it because online 20 we said that this is a change event on an input element.

737
01:30:06.030 --> 01:30:20.280
Ryan Mehta: Current target becomes input element and has all of the properties and functions that input element would have like current target name and current targets out value. These are two things that exist on input elements.

738
01:30:22.410 --> 01:30:33.330
Ryan Mehta: If you, if we put a current targets here this current target isn't an HTML input element, it is an HTML output element.

739
01:30:34.590 --> 01:30:43.020
Ryan Mehta: Those current targets don't have things like I guess it has a has those two things. I don't know. It has some things are not other things.

740
01:30:53.160 --> 01:30:57.810
Ryan Mehta: So the main TypeScript stuff typing our events.

741
01:30:59.760 --> 01:31:05.070
Ryan Mehta: And creating both prop types and a state type component

742
01:31:10.650 --> 01:31:11.160
Look good

743
01:31:14.340 --> 01:31:28.110
Ryan Mehta: Okay, let's try to do this same sort of thing, but with a function component instead. So I'm going to comment out all of this and we'll build the same sort of thing with a function component

744
01:31:29.550 --> 01:31:33.600
Ryan Mehta: So we'll start off by defining a coloring book.

745
01:31:38.250 --> 01:31:41.340
We will export coloring book.

746
01:31:46.470 --> 01:31:48.900
Ryan Mehta: Our coloring book is going to be a react.

7.

442
00:51:37.860 --> 00:51:40.470
Ryan Mehta: So how do we how do we avoid that.

443
00:51:43.740 --> 00:51:44.700
Ryan Mehta: I have a good idea.

444
00:51:46.860 --> 00:51:55.980
Ryan Mehta: What if instead of separating these two tests we combine the two tests because they're really kind of one in the same. Right.

445
00:51:56.280 --> 00:52:10.830
Ryan Mehta: Where we really wanted to, we really want the test to say that it displays a loading page and then it displays a list of characters. That's really what the user experiences. So maybe this is displays a loading.

446
00:52:13.980 --> 00:52:16.530
Ryan Mehta: And then a list of characters.

447
00:52:18.240 --> 00:52:20.310
Ryan Mehta: And then we can move this thing.

448
00:52:21.720 --> 00:52:22.560
Ryan Mehta: Down here.

449
00:52:25.560 --> 00:52:27.660
Ryan Mehta: And then delete this test altogether.

450
00:52:29.280 --> 00:52:37.230
Ryan Mehta: So now we render all characters when the all characters first loads on first renders on the page, the user sees loading.

451
00:52:38.160 --> 00:52:50.370
Ryan Mehta: And then at some point after they see loading. They see a list of characters that isn't empty that has Rick inside of it. That seems to like actually flow with how the user experience is the page a lot better.

452
00:52:52.320 --> 00:52:54.240
Adrian Simental: Would there be any instance in which

453
00:52:55.650 --> 00:53:01.830
Adrian Simental: The API call is just make fast enough that it would never say loading or that like the test wouldn't read it.

454
00:53:03.150 --> 00:53:03.810
Adrian Simental: I'm

455
00:53:05.910 --> 00:53:15.870
Ryan Mehta: Probably not because you. I mean, almost certainly not because the component first amounts and like loads everything here.

456
00:53:16.740 --> 00:53:24.510
Ryan Mehta: And when it mounts after it's already drawn on the page. This use effect triggers so its first going to mount with a loading state of true

457
00:53:25.230 --> 00:53:34.800
Ryan Mehta: So you'll see that loading thing. And after you after amounts of this loading this function would trigger. So, this always triggers after you see bloating.

458
00:53:39.960 --> 00:53:43.110
Ryan Mehta: I mean, it might be fast enough. So it's very hard to perceive

459
00:53:45.210 --> 00:53:48.540
Ryan Mehta: But it's never going to be so fast that it was never there.

460
00:53:55.530 --> 00:53:56.070
Alright.

461
00:53:57.360 --> 00:54:01.680
Ryan Mehta: So this is our hook or hooks away. How does this one look everyone

462
00:54:07.050 --> 00:54:08.880
Ryan Mehta: Any questions about the hooks.

463
00:54:18.810 --> 00:54:24.840
Ryan Mehta: Let's actually put the hooks and the class way side by side and see

464
00:54:26.190 --> 00:54:29.670
Ryan Mehta: That triggers. Any questions.

465
00:54:32.910 --> 00:54:36.150
Ryan Mehta: See if we can get them kind of lined up to the next.

466
00:54:40.710 --> 00:54:42.240
Ryan Mehta: Kind of lined up. No.

467
00:54:44.250 --> 00:54:46.020
Jerud Moyer: I mean, I guess the question is like

468
00:54:49.200 --> 00:54:51.210
Jerud Moyer: What, what makes it so much better again.

469
00:54:53.460 --> 00:54:54.960
Ryan Mehta: Yeah, nothing in my opinion.

470
00:54:56.460 --> 00:54:58.680
Adrian Simental: Cool relaunch shoulder

471
00:54:59.970 --> 00:55:00.390
Ryan Mehta: It's the

472
00:55:01.080 --> 00:55:01.890
Brooke Perkins (she/her): Get you a job.

473
00:55:02.820 --> 00:55:04.440
Ryan Mehta: It's the way that will get you a job.

474
00:55:04.590 --> 00:55:05.310
Jerud Moyer: That is better.

475
00:55:06.030 --> 00:55:21.510
Ryan Mehta: So there's this thing in encoding where something new comes out and everybody was very bored with like writing this millions of times. So it was a new thing that they could write a million times. So that's part of the excitement. I think people were also confused.

476
00:55:24.480 --> 00:55:27.360
Ryan Mehta: At the very beginning about i mean

477
00:55:28.530 --> 00:55:40.590
Ryan Mehta: There is something cool about this. If it's not because of how it's written right now, but it's what we're going to do with these custom hooks in just a little bit. That does make this hooks pattern super nice.

478
00:55:42.300 --> 00:55:53.580
Ryan Mehta: But as it stands between these two files one isn't better than the other. They're just like slightly different syntax is that do the exact same thing people did seem in

479
00:55:54.720 --> 00:56:02.760
Ryan Mehta: hyped because they could write the code on the right, instead of the code on the left, but to me that's not a reason to love hooks, it's just

480
00:56:04.200 --> 00:56:13.560
Ryan Mehta: Yeah, it would be silly to like be on one side of this argument or the other, it would. It's like people do do that in tech though like

481
00:56:15.630 --> 00:56:24.900
Ryan Mehta: There were the people take sides on these types of things. And like think one side is better than the other. But in this case to me personally. Both of these seem like equivalence

482
00:56:26.970 --> 00:56:28.170
Patrick Wilson: Is the know

483
00:56:30.960 --> 00:56:37.950
Patrick Wilson: If the if the chain of components was deeper than just two would hooks be easier.

484
00:56:40.230 --> 00:56:41.310
Ryan Mehta: Not really, um,

485
00:56:41.460 --> 00:56:42.840
Patrick Wilson: You have the same

486
00:56:43.110 --> 00:56:49.350
Ryan Mehta: I mean, in both cases, you do the exact same process. Right. You're like, constructing state.

487
00:56:51.690 --> 00:57:01.470
Ryan Mehta: Having component did mouth and this sort of thing. So the way you pass that state, no matter how deep you need to pass it is going to be the same.

488
00:57:05.310 --> 00:57:12.540
Annalise: Do you think some of the like hook enthusiasm comes from like the customizable factor of it or customizing

489
00:57:14.040 --> 00:57:28.650
Ryan Mehta: That's what makes it good for sure. But initially, when this when hooks first came out, people weren't talking about the custom hooks. They were talking just about like look at so much cooler, we can, like, say you stay instead of like loading state equals

490
00:57:28.710 --> 00:57:29.250
Or whatever.

491
00:57:32.010 --> 00:57:34.890
Ryan Mehta: But yeah, the custom hunts do make them pretty nice.

492
00:57:36.450 --> 00:57:45.450
Ryan Mehta: Especially custom hooks with the context API, which we'll talk about tomorrow, make them a real step up. I think once we get to the

493
00:57:46.710 --> 00:57:55.110
Ryan Mehta: Context API. It really changes the way that we write react because you no longer have to pass props to components. If you don't want to

494
00:57:56.400 --> 00:57:58.320
Ryan Mehta: There's an alternative to prop passing

495
00:58:01.980 --> 00:58:04.950
Annalise: That sounds amazing considering most of my issues are prompts ish

496
00:58:06.060 --> 00:58:06.450
Ryan Mehta: Yeah.

497
00:58:06.480 --> 00:58:20.280
Ryan Mehta: It's a trade off though props are at like there. It's hard to keep all the props in your mind. But once you start adding stuff to like global state that presents a whole nother problem probably right.

498
00:58:24.840 --> 00:58:27.270
Thomas Stussi: Um, I have one more question if that's okay.

499
00:58:27.600 --> 00:58:27.750
Yeah.

500
00:58:29.460 --> 00:58:35.190
Thomas Stussi: When you introduced container presentation style, um,

501
00:58:36.570 --> 00:58:49.980
Thomas Stussi: You said, I believe that we're supposed to use functions for the presentation components is that was that kind of just priming us for this section of the class, or is it by convention, for sure.

502
00:58:54.630 --> 00:58:56.130
Thomas Stussi: Did my question even make sense.

503
00:59:00.540 --> 00:59:01.470
Michelle Stermitz: I think he's muted.

504
00:59:01.620 --> 00:59:02.550
Thomas Stussi: I think he's muted.

505
00:59:02.880 --> 00:59:03.930
Ryan Mehta: My zoom crashed.

506
00:59:04.380 --> 00:59:07.080
Ryan Mehta: So the last thing I heard was okay.

507
00:59:08.520 --> 00:59:24.420
Thomas Stussi: Yes. So we had container presentation style of writing apps, you said that you should use functions for your presentation components. Was that like priming us because you knew we were going to cover hooks.

508
00:59:25.740 --> 00:59:28.140
Thomas Stussi: Or is it just like should we always do that.

509
00:59:29.850 --> 00:59:33.030
Ryan Mehta: Yeah. Presentation component should always be functions.

510
00:59:34.200 --> 00:59:35.670
Ryan Mehta: And then classically

511
00:59:35.940 --> 00:59:38.460
Ryan Mehta: containers are always classes.

512
00:59:39.810 --> 00:59:41.400
Ryan Mehta: Except when we get to hooks.

513
00:59:42.510 --> 00:59:51.510
Ryan Mehta: I still kind of prefer classes for containers over functions just because it gives you a nice visual cue, which were up during

514
00:59:53.730 --> 00:59:59.220
Ryan Mehta: That being said, I, if I were writing my own react applications. I would almost never write a class. So take that

515
01:00:00.720 --> 01:00:02.160
Ryan Mehta: For whatever will

516
01:00:05.010 --> 01:00:12.180
Ryan Mehta: Once we get to custom hooks, which we'll talk about next. I think that's the best way to write react applications, far more flexible.

517
01:00:14.070 --> 01:00:19.410
Ryan Mehta: If you look at the person who made the container or like really popularized

518
01:00:22.140 --> 01:00:23.460
Ryan Mehta: The container pattern.

519
01:00:28.140 --> 01:00:36.870
Ryan Mehta: He has this like very popular blog post from 2015 or so I intend to share your screen right now. Oh, I'm not sharing my screen. Thank you.

520
01:00:38.460 --> 01:00:41.040
Ryan Mehta: So he has this very popular blog posts from

521
01:00:43.440 --> 01:00:49.080
Ryan Mehta: With a big huge bolted update on it that says I don't do this anymore.

522
01:00:51.870 --> 01:00:53.400
Ryan Mehta: So like the gist of it.

523
01:00:55.230 --> 01:01:03.720
Ryan Mehta: I wrote this article, long time ago and my views have since evolved in particular I don't suggest splitting your components like this anymore, which is the way that we've been splitting them.

524
01:01:04.890 --> 01:01:13.110
Ryan Mehta: If you find it naturally in your code base this pattern can be handy, but I've seen it enforced without any necessity and with almost dogmatic forever.

525
01:01:13.530 --> 01:01:30.000
Ryan Mehta: Far too many times. The main reason I found it useful was because of let me separate complex state for logic from other aspects of the component hooks, let me do the same thing without an arbitrary division. This text is left intact for historical reasons, but don't take it too seriously.

526
01:01:34.920 --> 01:01:43.680
Ryan Mehta: Yeah, so there's that to keep in mind. Also, there's also been backlash against this, so nobody can decide what's the best way

527
01:01:44.790 --> 01:01:45.360
Typical

528
01:01:47.220 --> 01:02:00.270
Ryan Mehta: That's why we always talk about like best practices and I think maybe now's a good time to say that these best practices, don't actually exist. They're all like totally contended nobody can agree on what the best practices.

529
01:02:03.060 --> 01:02:04.290
Ryan Mehta: It's all made up stuff.

530
01:02:08.040 --> 01:02:08.190
Michelle Stermitz: I

531
01:02:08.760 --> 01:02:08.970
Know,

532
01:02:10.260 --> 01:02:19.830
Michelle Stermitz: You and I know you explain this Ryan but online 15 on the right. What is that the array symbol doing again.

533
01:02:20.430 --> 01:02:20.880
Ryan Mehta: Yeah.

534
01:02:21.600 --> 01:02:22.920
Ryan Mehta: So this is the change the

535
01:02:22.920 --> 01:02:23.580
List.

536
01:02:24.990 --> 01:02:30.660
Ryan Mehta: Whatever you put in here whenever that thing changes that will read trigger the US effect.

537
01:02:31.830 --> 01:02:33.390
Ryan Mehta: So if we put like

538
01:02:35.400 --> 01:02:47.430
Ryan Mehta: Like a variable in here whenever that variable changed this us effect would reach rigor, since we're putting nothing in here. This use effect will never read trigger it will only run once when the component first mounts.

539
01:02:49.260 --> 01:02:52.200
Ryan Mehta: Eventually will have page in here when we add paging

540
01:02:52.350 --> 01:02:58.560
Ryan Mehta: That will say whenever the page changes re trigger the user fact which will reset your list of characters for us.

541
01:02:59.700 --> 01:03:06.810
Ryan Mehta: The other thing that you can do is leave it off completely which will make it re trigger the US effect. Whenever any piece of state changes.

542
01:03:09.150 --> 01:03:14.580
Ryan Mehta: So right now this is just saying great trigger never because there's nothing in there.

543
01:03:17.280 --> 01:03:22.500
Adrian Simental: Can you do multiple fetches within a single use effect.

544
01:03:22.980 --> 01:03:24.060
Ryan Mehta: Totally. Yep.

545
01:03:24.540 --> 01:03:25.860
Adrian Simental: We'll just go after the comma.

546
01:03:27.300 --> 01:03:31.590
Ryan Mehta: You just, this is a function body. So you can just add more

547
01:03:34.110 --> 01:03:36.870
Adrian Simental: Need more for a raise at the end or anything.

548
01:03:37.350 --> 01:03:39.060
Ryan Mehta: It wouldn't need multiple arrays or anything.

549
01:03:45.720 --> 01:03:50.070
Patrick Wilson: Is there a nice easy shortcut to set up a new functional component, like the RCC

550
01:03:52.980 --> 01:03:55.830
Ryan Mehta: I don't know. I don't use either. I don't use that thing.

551
01:03:57.060 --> 01:03:59.880
Ryan Mehta: I do, however, that being said, I guess.

552
01:04:01.680 --> 01:04:04.110
Ryan Mehta: I did make my own called are fun.

553
01:04:06.900 --> 01:04:08.970
Ryan Mehta: I mean I can share that if you want it.

554
01:04:09.540 --> 01:04:19.830
Ben Waples: Um, you can do RFC for like just a functional component. And you can do RFC P for a functional component with the prop types using this

555
01:04:21.000 --> 01:04:21.630
Ben Waples: As well.

556
01:04:22.530 --> 01:04:24.330
Patrick Wilson: Okay, thank you. Yeah.

557
01:04:24.540 --> 01:04:26.190
Ryan Mehta: I'll share this to you all want to

558
01:04:31.170 --> 01:04:34.860
Ryan Mehta: You can make your own snippets. By the way, if you want to in the future.

559
01:04:37.170 --> 01:04:41.760
Ryan Mehta: Okay, any other questions about this hook way.

560
01:04:50.850 --> 01:04:51.210
Ryan Mehta: Cool.

561
01:04:52.530 --> 01:04:53.880
Ryan Mehta: Let's close these things out.

562
01:04:55.050 --> 01:05:05.880
Ryan Mehta: I'm going to copy, actually this hook style and let's call it all characters hook

563
01:05:08.460 --> 01:05:09.570
Ryan Mehta: Basic cook.

564
01:05:12.000 --> 01:05:13.590
Ryan Mehta: And then

565
01:05:15.570 --> 01:05:17.490
Ryan Mehta: Let's delete everything, and despite again.

566
01:05:20.490 --> 01:05:20.940
Ryan Mehta: Alright.

567
01:05:22.800 --> 01:05:29.460
Ryan Mehta: So we're going to start building up our all characters again, but this time we're going to use a custom hook

568
01:05:31.470 --> 01:05:35.010
Ryan Mehta: I kind of think of custom hooks. The same way that I think of services.

569
01:05:36.390 --> 01:05:40.770
Ryan Mehta: They're going to be something that returns data for me some way for me to get data.

570
01:05:41.880 --> 01:05:44.670
Ryan Mehta: So let's see how we can start taking this

571
01:05:46.170 --> 01:05:52.440
Ryan Mehta: We're going to import react from react, we're going to create our all characters components.

572
01:05:53.640 --> 01:05:58.380
Ryan Mehta: And then we're going to export our all chae could probably it's probably best to put this thing at least

464
00:49:47.850 --> 00:49:53.400
Ryan Mehta: In a forum probably can separate we'll just have three forms on the page.

465
00:49:55.830 --> 00:49:58.530
Ryan Mehta: That way it's like organized a little bit better.

466
00:50:02.160 --> 00:50:06.750
Ryan Mehta: Okay, so we have those two inputs that we're able to access now.

467
00:50:07.770 --> 00:50:15.090
Ryan Mehta: I'm going to import user events from at testing library.

468
00:50:17.190 --> 00:50:20.100
Ryan Mehta: User events don't have that thing.

469
00:50:28.260 --> 00:50:30.930
Ryan Mehta: Something about this package wheels off.

470
00:50:32.310 --> 00:50:37.260
Ryan Mehta: Okay, look over here. Do we have our testing library user events we don't

471
00:50:38.490 --> 00:50:40.440
Ryan Mehta: So let's see. Am I

472
00:50:43.620 --> 00:50:45.060
Ryan Mehta: Asking testing library.

473
00:50:46.200 --> 00:50:46.740
Ryan Mehta: Sir,

474
00:50:49.950 --> 00:50:52.680
Ryan Mehta: That's the thing that lets us type into the inputs.

475
00:50:55.080 --> 00:50:57.870
Ryan Mehta: But that's not the right name of the package.

476
00:51:01.080 --> 00:51:02.940
Ryan Mehta: Let's see what the right name is

477
00:51:09.030 --> 00:51:11.700
Ryan Mehta: Consistent user event singular

478
00:51:16.350 --> 00:51:20.820
Ryan Mehta: Okay, well that's installing user of vent user event.

479
00:51:22.290 --> 00:51:27.930
Ryan Mehta: I'm looking user event. We're going to type into the subreddit input.

480
00:51:29.040 --> 00:51:31.650
Ryan Mehta: Will type news.

481
00:51:33.480 --> 00:51:34.800
Ryan Mehta: And then we will

482
00:51:37.170 --> 00:51:40.530
Ryan Mehta: Click on the subreddit button.

483
00:51:48.300 --> 00:51:51.840
Ryan Mehta: And then after we click on the subreddit button, after some time.

484
00:51:53.310 --> 00:51:55.170
Ryan Mehta: You should be able to wait for

485
00:52:09.570 --> 00:52:09.990
Next,

486
00:52:15.090 --> 00:52:19.380
Ryan Mehta: So we don't even need the expect tonight. This will just fail the can't find it.

487
00:52:20.520 --> 00:52:22.740
Ryan Mehta: Searching for

488
00:52:26.070 --> 00:52:28.020
Ryan Mehta: So after we submit the form

489
00:52:29.040 --> 00:52:33.930
Ryan Mehta: We expect the state to change and somewhere on the page for to say searching for

490
00:52:35.010 --> 00:52:44.490
Ryan Mehta: News make sense. We want to like say that we are searching for whatever subreddit, we put here test will totally fail.

491
00:52:46.410 --> 00:52:48.390
Ryan Mehta: It'll never say searching for news.

492
00:52:50.190 --> 00:52:52.470
Ryan Mehta: But we want it to this test make sense.

493
00:52:55.260 --> 00:53:00.180
Ryan Mehta: Sorry type into our input we press the button and we expected to say searching for news.

494
00:53:02.550 --> 00:53:04.770
Ryan Mehta: All right, let's edit this a little bit.

495
00:53:06.720 --> 00:53:16.440
Ryan Mehta: When we when we type into this input. We want to store that value somewhere in state, right. Normally we have something like value.

496
00:53:18.330 --> 00:53:21.120
Ryan Mehta: Equal something and on change.

497
00:53:22.230 --> 00:53:24.240
Ryan Mehta: Equals something else on the form

498
00:53:25.740 --> 00:53:40.680
Ryan Mehta: In order to get this to work. We're going to need to store the current value of this subreddit input into our Redux state, which is what we had in our plan and it closes other tabs. So if you look back at our plan.

499
00:53:41.700 --> 00:53:54.330
Ryan Mehta: We have a reducer that holds both the subreddit input and then the subreddit, like the value of the subreddit input after we submit the form. So we're going to create the subreddit reducer.

500
00:53:56.940 --> 00:54:04.470
Ryan Mehta: Remember reduces file will make her sub reddit to survive JS file.

501
00:54:05.520 --> 00:54:08.430
Ryan Mehta: And then in here. We'll make our initial state.

502
00:54:10.020 --> 00:54:14.550
Ryan Mehta: Will have subreddit start off as an empty string and subreddit

503
00:54:16.200 --> 00:54:22.290
Ryan Mehta: Input. It's also started off as an empty string and then we will export.

504
00:54:23.400 --> 00:54:24.570
Ryan Mehta: Producer function.

505
00:54:37.980 --> 00:54:48.720
Ryan Mehta: So we're starting to construct our little reducer here that will control these two pieces of state and now that we have this actual reducer. We can go back to the combine reducer. I put this little

506
00:54:51.090 --> 00:54:56.220
Ryan Mehta: Fake thing here, and instead use our sub reddit reducer.

507
00:54:59.010 --> 00:55:01.680
Ryan Mehta: subreddit do sir

508
00:55:03.960 --> 00:55:09.120
Ryan Mehta: Okay, so I use that subreddit reducer here look good.

509
00:55:14.520 --> 00:55:23.340
Ryan Mehta: We're going to have this subreddit that subreddit and subreddit that subreddit input. So maybe we just call this thing input and we call this one.

510
00:55:25.110 --> 00:55:25.800
What

511
00:55:26.880 --> 00:55:27.540
Ryan Mehta: Current

512
00:55:29.310 --> 00:55:30.660
Ryan Mehta: Those things make sense.

513
00:55:32.490 --> 00:55:39.900
Ryan Mehta: So that when we don't have like State DOT subreddit that subreddit would have stayed dot subreddit current and State DOT subreddit that input.

514
00:55:42.210 --> 00:55:42.690
Ryan Mehta: All right.

515
00:55:43.800 --> 00:55:54.090
Ryan Mehta: I also think, because we have this behavior tests going. We don't actually need to unit test this reducer we totally could unit test the reducer. But it would be redundant.

516
00:55:55.620 --> 00:56:05.850
Ryan Mehta: If the behavior test works. That means this subreddit reducer has to work also. So the two tests would be covering the same lines of code, which is kind of cool because

517
00:56:06.690 --> 00:56:15.930
Ryan Mehta: By starting off by doing these behavior tests and starting off with the component we no longer have to write the unit tests for the reducer because they would be duplicated.

518
00:56:16.260 --> 00:56:23.730
Ryan Mehta: There's no way that this header test would be able to work if the reducer doesn't work. So we're covering that use case.

519
00:56:25.200 --> 00:56:38.940
Ryan Mehta: All right. We want to be able to type into this input we type into this input we want to change our input reducer state or Yeah, our subreddit reducer input state right here.

520
00:56:39.960 --> 00:56:49.590
Ryan Mehta: To do that will need to create an action. So we're going to make it actions directory and their subreddit action stop JS file.

521
00:56:51.330 --> 00:56:55.980
Ryan Mehta: In here, we're going to make a new action type will call it

522
00:56:59.010 --> 00:57:01.320
Ryan Mehta: Set subreddit

523
00:57:11.730 --> 00:57:12.270
Ryan Mehta: Action.

524
00:57:17.610 --> 00:57:21.150
Ryan Mehta: The action creator will get our new input value.

525
00:57:22.620 --> 00:57:28.740
Ryan Mehta: To return an action where the payload is that input value.

526
00:57:30.870 --> 00:57:32.430
Ryan Mehta: This action creator look okay

527
00:57:33.540 --> 00:57:39.360
Ryan Mehta: So we're going to be using this in our header component eventually in our reduce or though first

528
00:57:39.870 --> 00:57:56.610
Ryan Mehta: We need a case for this set subreddit input. When we get that separate an input. We're going to keep all a state, the same, but we're going to update the input to whatever is in the action payload. The value that we want to change the input to

529
00:57:58.020 --> 00:57:59.730
Ryan Mehta: So now we're handling this case.

530
00:58:01.290 --> 00:58:09.540
Ryan Mehta: Back in our header. We said that we wanted to fill in both this value and the on change function to get the value

531
00:58:11.820 --> 00:58:25.890
Ryan Mehta: We are going to use a selector. It's going to take state. We're going to go into state DOT subreddit dot input and then we'll pass that input value here.

532
00:58:26.970 --> 00:58:29.910
Ryan Mehta: Will also need our dispatch function.

533
00:58:32.610 --> 00:58:35.550
Ryan Mehta: And will construct the handle change.

534
00:58:36.690 --> 00:58:38.160
Ryan Mehta: The structure target.

535
00:58:39.780 --> 00:58:51.600
Ryan Mehta: When we get this change will dispatch our set subreddit input with target value and will pass this handled change function to our James

536
00:59:01.740 --> 00:59:03.000
And the smaller

537
00:59:04.560 --> 00:59:07.110
Actually import these things.

538
00:59:13.410 --> 00:59:14.820
Ryan Mehta: How does this look so far.

539
00:59:18.000 --> 00:59:31.830
Ryan Mehta: So we get our input value we set it to the input here on change we dispatch our subreddit input which should hit our reducer here and actually change our state or input state here.

540
00:59:33.930 --> 00:59:41.520
Ryan Mehta: That all looks good. We also said that we wanted to display this input or the actual value.

541
00:59:45.150 --> 00:59:48.390
Ryan Mehta: Well, yeah. Okay, so that's all that all should be kind of working now.

542
00:59:50.130 --> 00:59:53.550
Ryan Mehta: Can actually go and load our application and see what happens.

543
00:59:56.280 --> 00:59:59.910
Ryan Mehta: See what it looks like in reality, instead of ENCODE only

544
01:00:02.880 --> 01:00:18.540
Ryan Mehta: Okay, there's our subreddit. If we open up our Redux tools and type into this box you can see we're triggering our set subreddit input we look at our state our input state now matches the state.

545
01:00:20.160 --> 01:00:26.190
Ryan Mehta: Of our input box and you can see this event triggering over and over again as we type into the box.

546
01:00:27.600 --> 01:00:28.140
Ryan Mehta: Good.

547
01:00:30.330 --> 01:00:31.770
Ryan Mehta: So that part is working.

548
01:00:33.660 --> 01:00:49.710
Ryan Mehta: We then want to be able to click the button when we click this button, it's going to submit the form when we submit the form we want to change in our reducer. The current string to whatever the input stream is right.

549
01:00:50.790 --> 01:00:52.350
Ryan Mehta: So we're going to make another

550
01:00:53.970 --> 01:00:56.970
Ryan Mehta: Action type. Let's call it set

551
01:01:14.250 --> 01:01:17.220
Ryan Mehta: This time we're not gonna pass it anything

552
01:01:19.770 --> 01:01:23.220
Ryan Mehta: We're just going to give it a tight set subreddit

553
01:01:26.310 --> 01:01:38.700
Ryan Mehta: I think we can get away with this because on the left hand side and the actual producer. We're just going to move whatever's in the input into the current field. So we don't need to send that extra information here.

554
01:01:40.260 --> 01:01:41.640
Ryan Mehta: We go in, submit

555
01:01:45.570 --> 01:01:48.600
Ryan Mehta: You're going to sleep state, the same

556
01:01:51.720 --> 01:02:00.000
Ryan Mehta: So UPDATE current to whatever state input currently is like moving the input into current and then we'll also

557
01:02:02.490 --> 01:02:04.320
Ryan Mehta: Set in took the empty string.

558
01:02:06.360 --> 01:02:07.830
Ryan Mehta: Like resetting the form

559
01:02:10.680 --> 01:02:12.180
Ryan Mehta: This auto imports.

560
01:02:18.480 --> 01:02:26.130
Ryan Mehta: Now that we have this action creator back in our header, we can create our handles submit function.

561
01:02:29.100 --> 01:02:31.950
Ryan Mehta: A handle submit function will prevent

562
01:02:33.510 --> 01:02:35.490
Ryan Mehta: Default on the event.

563
01:02:38.430 --> 01:02:43.500
Ryan Mehta: And it will dispatch our set subreddit action.

564
01:02:44.700 --> 01:02:47.010
Ryan Mehta: And will pass this handle submit

565
01:02:58.170 --> 01:02:58.560
All right.

566
01:03:03.120 --> 01:03:19.830
Ryan Mehta: I think our tests. Well, let's actually go back over here it's reload our actual front end of just manually tests lists by type a news we get our three subreddit input events, one for each letter that I typed for

567
01:03:21.450 --> 01:03:32.100
Ryan Mehta: They'll see our subreddit state has input news when I press submit our current subreddit is now news and we clear out the form here.

568
01:03:33.390 --> 01:03:42.960
Ryan Mehta: And we also said that we wanted to display this current subreddit that we're searching for right back in our test we said

569
01:03:44.790 --> 01:03:55.890
Ryan Mehta: That we wanted to display searching for and the subreddit that we're searching for. So back in our component. Let's put that somewhere maybe like an H two

570
01:03:58.440 --> 01:03:59.370
Ryan Mehta: That will say,

571
01:04:01.380 --> 01:04:12.540
Ryan Mehta: Searching for and then the current subreddit that we have selected to get this current subreddit that we have selected. We are going to

572
01:04:22.020 --> 01:04:24.870
Ryan Mehta: Are correct subreddit, I got no taking off of

573
01:04:28.500 --> 01:04:28.920
State.

574
01:04:32.760 --> 01:04:33.990
Ryan Mehta: This line makes sense.

575
01:04:37.170 --> 01:04:41.220
Ryan Mehta: that'll get us our current subreddit, we can drop that into

576
01:04:42.420 --> 01:04:51.690
Ryan Mehta: This age to now I think our tests, hopefully pass if we go back to our front end searching for

577
01:04:54.330 --> 01:04:55.410
Ryan Mehta: Searching for news.

578
01:04:58.230 --> 01:04:58.770
Ryan Mehta: The good

579
01:05:02.970 --> 01:05:03.540
Right.

580
01:05:05.010 --> 01:05:08.610
Ryan Mehta: So the header is starting to come together a little bit.

581
01:05:14.220 --> 01:05:26.160
Ryan Mehta: One little refactor that I want to do before we get too much further, I kind of want to refactor these selector functions that we're using here and move them into their own files.

582
01:05:27.210 --> 01:05:40.110
Ryan Mehta: These functions are totally reusable right and any component that I want to get this subreddit input, I can reuse this function and then the component that I want to get the current subreddit, I can reuse this function.

583
01:05:41.220 --> 01:05:45.330
Ryan Mehta: So I'm going to make a folder called selectors.

584
01:05:47.310 --> 01:05:48.810
Ryan Mehta: And a subreddit

585
01:05:49.980 --> 01:06:03.180
Ryan Mehta: selectors.js the point. The goal of this file is to contain all of the selectors that grabbed state from the subreddit reducer.

586
01:06:04.410 --> 01:06:08.040
Ryan Mehta: So we'll have like a get sub reddit

587
01:06:09.120 --> 01:06:13.500
Ryan Mehta: Input which will take state and

588
01:06:16.170 --> 01:06:17.610
Ryan Mehta: It's just gonna move that

589
01:06:19.800 --> 01:06:22.050
Ryan Mehta: This code over here.

590
01:06:28.410 --> 01:06:29.670
Ryan Mehta: And then same for like

591
01:06:45.390 --> 01:06:49.950
Ryan Mehta: Okay, so we're just moving these arrow functions into this file over here.

592
01:06:51.000 --> 01:07:07.200
Ryan Mehta: So in the future, if we want to reuse these selectors. We don't have to think about how to get to the state. We just reuse the selector that does it for us. So here would be like get subreddit input. This one is

593
01:07:08.910 --> 01:07:10.830
Ryan Mehta: Brad Pitt current

594
01:07:16.770 --> 01:07:21.510
Ryan Mehta: So one more file and folder, but that's the last one.

595
01:07:22.590 --> 01:07:35.280
Ryan Mehta: Last one. You can kind of see the, the one hard thing well one hard thing about the one hard thing one hard thing about Redux is just the number of files that you end up having to manage

596
01:07:38.790 --> 01:07:41.250
Ryan Mehta: That is one of the most overwhelming things about it.

597
01:07:45.690 --> 01:07:51.210
Ryan Mehta: But yeah, it's conve One provider and one title context and you would just add more and more things to that big bucket.

421
00:45:58.110 --> 00:46:07.290
Ryan Mehta: And then you would have a bunch of custom hooks that would essentially look like. Just imagine we're in a hooks folder over here.

422
00:46:09.060 --> 00:46:11.130
Ryan Mehta: For a second, if that's possible.

423
00:46:12.570 --> 00:46:16.770
Ryan Mehta: You would have a hook called like constant news.

424
00:46:22.320 --> 00:46:27.060
Ryan Mehta: Which would be a custom hook, but the custom hook would do something very small, it would

425
00:46:28.200 --> 00:46:31.830
Ryan Mehta: Grab characters off of your bucket.

426
00:46:34.950 --> 00:46:41.490
Ryan Mehta: And you'd probably call this bucket like your state context for something all of your global state and this would

427
00:46:41.490 --> 00:46:42.450
Ryan Mehta: Just return

428
00:46:43.080 --> 00:46:55.860
Ryan Mehta: Those characters. So from your individual components, they would use these like intermediary hooks and then inside of your state context to be all of your data that your application uses

429
00:46:56.970 --> 00:46:59.670
ryan Diffenbaugh: Yeah, it seems like super scalable like

430
00:47:01.050 --> 00:47:03.360
ryan Diffenbaugh: Like totally yeah this is pretty cool.

431
00:47:04.440 --> 00:47:05.160
Ryan Mehta: Totally it's

432
00:47:05.250 --> 00:47:11.010
Ryan Mehta: Super, super scalable, this is basically what Redux does for us get to Redux

433
00:47:12.210 --> 00:47:22.830
Ryan Mehta: Will actually be recreating Redux next week and then at the very end of the week, we'll have this cool payoff and like realize that we just recreated what this library does for us.

434
00:47:23.730 --> 00:47:28.740
Ron Yonker: So what is, what is it that feeling that Redux does for us.

435
00:47:29.460 --> 00:47:31.440
Ryan Mehta: It just gives us access to global fate.

436
00:47:32.490 --> 00:47:38.010
Ryan Mehta: Pretty much. And then it gives us a pattern for how you change that global state.

437
00:47:39.600 --> 00:47:42.960
Ron Yonker: Oh, I think I see. So by using

438
00:47:44.220 --> 00:47:52.200
Ron Yonker: Custom a hoax and custom hawks and context, we can sidestep having to use Redux and a lot of cases.

439
00:47:52.380 --> 00:47:54.000
Ron Yonker: Then totally

440
00:48:01.260 --> 00:48:01.680
Ryan Mehta: All right.

441
00:48:01.980 --> 00:48:03.270
Brooke Perkins (she/her): Explain Redux at all.

442
00:48:03.900 --> 00:48:05.430
Ryan Mehta: Yep. Next week, we're going to explore

443
00:48:05.430 --> 00:48:06.450
Ryan Mehta: relax a little bit

444
00:48:10.230 --> 00:48:11.880
Ryan Mehta: All right, Ben. Did you figure out your mic.

445
00:48:15.810 --> 00:48:17.520
Ben Waples: I think so. Can you, can you hear me.

446
00:48:17.820 --> 00:48:18.570
Ryan Mehta: We can hear you.

447
00:48:19.020 --> 00:48:20.040
Ben Waples: Eating still no

448
00:48:20.130 --> 00:48:20.910
Ryan Mehta: No, I'm just kidding.

449
00:48:21.180 --> 00:48:21.720
Oh,

450
00:48:24.270 --> 00:48:27.420
Ben Waples: Yeah, no, I bring asked my question actually. So I was very keen

451
00:48:31.770 --> 00:48:32.910
Ryan Mehta: Alright, let's take a break.

452
00:48:33.000 --> 00:48:39.030
Ryan Mehta: We'll come back and we're going to make our classic color picker with this context provider stuff.

453
00:48:39.240 --> 00:48:47.730
Annalise: Yay. Oh wait, the color picker, not the change the whole global environment to a dark mode. My own sort of thing.

454
00:48:47.850 --> 00:48:48.810
Ryan Mehta: Are you gonna do your lab.

455
00:48:50.340 --> 00:48:53.820
Annalise: Are we going to cover that and another demo.

456
00:48:55.110 --> 00:48:56.370
Ryan Mehta: You have to figure it out.

457
00:48:57.630 --> 00:48:58.380
Annalise: Cool.

458
00:48:59.640 --> 00:49:00.030
Ryan Mehta: Nice.

459
00:49:01.260 --> 00:49:07.590
Ryan Mehta: See y'all in a bit. Let's come back at 10 O'clock 1005 10 five I'm

460
00:49:07.680 --> 00:49:08.730
Brooke Perkins (she/her): Good, good.

461
00:49:12.150 --> 00:49:12.510
Okay.

462
00:49:14.700 --> 00:49:16.650
Ryan Mehta: Let's build our color picker.

463
00:49:18.420 --> 00:49:21.840
Ryan Mehta: Application same one that we built a few times.

464
00:49:25.830 --> 00:49:28.950
Ryan Mehta: And see how that whole process looks

465
00:49:30.780 --> 00:49:39.360
Ryan Mehta: So we're going to start off with a new piece of context. I'm going to call it our color picker on text that JS x

466
00:49:40.800 --> 00:49:47.220
Ryan Mehta: In our color picker context, we are going to import react from react.

467
00:49:48.330 --> 00:49:51.720
Ryan Mehta: And then we're going to create our context.

468
00:50:06.780 --> 00:50:14.760
Ryan Mehta: Yeah, that looks good. And then let's create under components, our color picker.

469
00:50:16.020 --> 00:50:27.660
Ryan Mehta: And we're going to have a color picker J effects file. We're also going to have a controls CSS file and the display.

470
00:50:30.090 --> 00:50:31.350
Ryan Mehta: Dot CSS file.

471
00:50:32.580 --> 00:50:44.670
Ryan Mehta: The display will display like that block of color. The control to have our two color inputs in a text input and the Color Picker component will combine the controls and display together.

472
00:50:47.130 --> 00:50:47.940
Ryan Mehta: seem good

473
00:50:49.710 --> 00:51:03.060
Ryan Mehta: Okay, the only component that we really have to test is our color picker JS X file. So we're going to make a color picker test dot j SX also

474
00:51:04.710 --> 00:51:06.180
Ryan Mehta: To test our

475
00:51:07.350 --> 00:51:08.910
Ryan Mehta: Overall color picker.

476
00:51:11.010 --> 00:51:14.130
Ryan Mehta: Will import react from react.

477
00:51:15.270 --> 00:51:18.990
Ryan Mehta: Will import render and screen.

478
00:51:22.860 --> 00:51:25.080
Ryan Mehta: Testing library react.

479
00:51:29.400 --> 00:51:34.620
Ryan Mehta: And we will describe our color picker.

480
00:51:42.900 --> 00:51:58.230
Ryan Mehta: Okay, looks good so far. First thing. Let's test the interaction that we can change the background color or a color picker. So let's say it changes the background color.

481
00:52:00.000 --> 00:52:03.660
Ryan Mehta: So we expect to be able to render our color picker.

482
00:52:05.610 --> 00:52:14.160
Ryan Mehta: Controlling it right now. There's nothing to import because you haven't implemented our collect picture at all. So I am going to start implementing it.

483
00:52:16.380 --> 00:52:18.840
Ryan Mehta: Will have our color picker component over here.

484
00:52:21.090 --> 00:52:21.780
And

485
00:52:23.280 --> 00:52:30.240
Ryan Mehta: A color picker component is just going to use our controls component

486
00:52:31.980 --> 00:52:41.160
Ryan Mehta: I can't import my controls component yet because I haven't written anything in the controls file. So I'm going to start writing some stuff for our controls.

487
00:52:43.890 --> 00:52:49.530
Ryan Mehta: Controls isn't going to take any props. We're going to be using global state to pass all of our values around

488
00:52:50.700 --> 00:52:52.170
Ryan Mehta: So we will just have it.

489
00:52:55.620 --> 00:52:56.490
Ryan Mehta: Like this for now.

490
00:52:58.800 --> 00:53:06.150
Ryan Mehta: And now we can import controls and then same for display. We won't be able to import it because there's nothing here yet. So let's

491
00:53:10.620 --> 00:53:14.850
Ryan Mehta: Maker display component or display components.

492
00:53:16.710 --> 00:53:22.200
Ryan Mehta: Will also not need any props. We're going to do something else.

493
00:53:23.580 --> 00:53:28.260
Ryan Mehta: Now that we have that we can put our display component here.

494
00:53:30.570 --> 00:53:33.510
Ryan Mehta: Right. And now we can import our color picker.

495
00:53:35.490 --> 00:53:54.720
Ryan Mehta: After we import our color picker. We want to be able to grab our background input. I'm working going to grab our background input by labeled. So we'll look onto the screen you will get by label text something called background color.

496
00:53:56.250 --> 00:54:05.130
Ryan Mehta: In order to get this background input back in our controls. We're going to need to add an input. So I guess a label.

497
00:54:08.070 --> 00:54:13.260
Ryan Mehta: Background color and this label will need to be attached to a

498
00:54:16.050 --> 00:54:23.820
Ryan Mehta: Big color input will make that big color input. It's going to be a type color.

499
00:54:24.960 --> 00:54:27.660
Ryan Mehta: It's going to have an ID of big color.

500
00:54:29.520 --> 00:54:43.380
Ryan Mehta: It's going to have a name of the color, it will have a value that will need to figure out how to get and on change function that will also need to figure out what to do.

501
00:54:44.880 --> 00:54:45.270
Or

502
00:54:47.130 --> 00:54:52.140
Ryan Mehta: And this needs to be surrounded by a fragment.

503
00:54:56.430 --> 00:54:58.140
Ryan Mehta: Okay look good so far.

504
00:55:01.500 --> 00:55:16.500
Ryan Mehta: For now, so this thing can actually compile, let's just put dummy information in here won't actually work, but it's fine. Now it should at least compile, I should actually be running my tests. I'm like, mentally running my tests, but the computer.

505
00:55:17.910 --> 00:55:19.680
Ryan Mehta: Will do a much better job.

506
00:55:21.000 --> 00:55:22.260
Ryan Mehta: Running these things for me.

507
00:55:28.650 --> 00:55:32.940
Okay, let's see obsolete snapshot

508
00:55:34.350 --> 00:55:35.400
Okay, perfect.

509
00:55:36.420 --> 00:55:47.850
Ryan Mehta: So we get our BG color. Next thing that we want to be able to get is our display. Let's say our display, we get from screen get by test ID.

510
00:55:48.900 --> 00:55:49.590
Display

511
00:55:50.850 --> 00:55:55.200
Ryan Mehta: And then in our display component, we're going to create a section.

512
00:55:57.150 --> 00:56:01.590
Ryan Mehta: In that and we're going to give that section A data test ID.

513
00:56:06.510 --> 00:56:06.930
So,

514
00:56:10.170 --> 00:56:32.250
Ryan Mehta: We should get our passing tests mail mixing that we want to do is change our background input. So we're going to fire an event. It's going to be a change event on our background input. We're going to pass it a target and that target value will be will change it to read

515
00:56:35.190 --> 00:56:42.300
Ryan Mehta: So after we change our background input to read. We're going to wait for

516
00:56:44.430 --> 00:56:50.970
Ryan Mehta: The display expect the display to have style.

517
00:57:03.120 --> 00:57:08.400
Ryan Mehta: So we fire the change event. And then we expect the display to have it style change.

518
00:57:09.960 --> 00:57:26.640
Ryan Mehta: This should totally fail because we're not doing anything right now. Exactly. We expected the background color to have or the display to have a background color, red, but it doesn't have any background color right now customer makes sense.

519
00:57:29.400 --> 00:57:31.530
Ryan Mehta: All right, let's start hooking this whole thing up.

520
00:57:32.820 --> 00:57:37.260
Ryan Mehta: So we have two things to help up. We need our display to be able to get the background color.

521
00:57:37.950 --> 00:57:53.580
Ryan Mehta: And we need our controls to be able to get the background color and some change function to change that background color, the way that we're going to do this, is create a context. And in that context, we're going to put our background color and a change function.

522
00:57:54.900 --> 00:57:59.970
Ryan Mehta: From the same file, we're going to create our color picker provider.

523
00:58:02.070 --> 00:58:07.890
Ryan Mehta: And our color picker provider is going to be a function component that takes children.

524
00:58:10.290 --> 00:58:15.630
Ryan Mehta: By the way, I don't think we've actually talked about actually did you all do children stuff.

525
00:58:20.700 --> 00:58:23.820
Ryan Mehta: Foundations so children here. You know how

526
00:58:25.320 --> 00:58:26.010
Ryan Mehta: In

527
00:58:27.900 --> 00:58:44.280
Ryan Mehta: Like our label components. This is the child have label like normal HTML elements. You don't have to have self closing tags. You can put stuff in between the tags. You can do the same thing in React, you can have stuff like your controls can take children also

528
00:58:46.920 --> 00:58:47.880
Ryan Mehta: If you wanted it to.

529
00:58:48.990 --> 00:58:58.890
Ryan Mehta: So this and you can put stuff in between here, whatever you put in between there gets passed as a prop to your controls and that prop is always called children.

530
00:59:00.840 --> 00:59:13.650
Ryan Mehta: So in our case, our color picker provider is going to take children. We're eventually going to, I guess, right now replace this fragment with our color picker provider.

531
00:59:15.900 --> 00:59:21.450
Ryan Mehta: Provider. So our color picker providers, children are controls and display.

532
00:59:23.550 --> 00:59:23.700
And

533
00:59:25.290 --> 00:59:33.300
Ryan Mehta: We're going to return from this provider our color picker context. Stop provider. We're going to give it a value.

534
00:59:34.740 --> 00:59:36.690
Ryan Mehta: And then we're going to put our children.

535
00:59:37.890 --> 00:59:44.400
Ryan Mehta: Here. So, just like our initial example, bringing up our initial example.

536
00:59:45.450 --> 00:59:56.580
Ryan Mehta: That can act as an app JS, we had this title context provider, we gave it a value and then that value had chilled the provider had children.

537
00:59:57.360 --> 01:00:07.800
Ryan Mehta: Were doing the same thing here. Just a little bit more programmatically. We have our color picker context provider. We're going to pass it children whatever children.

538
01:00:08.640 --> 01:00:20.370
Ryan Mehta: Are passed and those children will be the same as the children that are passed to our color picker provider in this case our color picker provider is getting controls and display as children.

539
01:00:23.910 --> 01:00:27.690
Ryan Mehta: So let's start setting up some of the values that we're going to pass here.

540
01:00:28.860 --> 01:00:37.590
Ryan Mehta: We said that we wanted to pass background color. Great. So we're going to create a big color and set eg color.

541
01:00:39.360 --> 01:00:44.130
Ryan Mehta: Using state will initialize our background color as

542
01:00:56.670 --> 01:01:08.820
Ryan Mehta: So we have our background color, we're going to place our background color into the provider. We're also going to want to place a handle change function, I can change this background color.

543
01:01:09.870 --> 01:01:13.770
Ryan Mehta: So I'm going to make a candle change function.

544
01:01:15.120 --> 01:01:16.830
Ryan Mehta: That would be structure target.

545
01:01:18.240 --> 01:01:21.390
Ryan Mehta: And then set PG color with target.

546
01:01:24.990 --> 01:01:25.440
So,

547
01:01:27.930 --> 01:01:39.840
Ryan Mehta: And then we'll pass this handle change function here as well. So our bucket now has both background color and to handle change function inside of it.

548
01:01:41.340 --> 01:01:43.230
Ryan Mehta: Back in our controls.

549
01:01:44.700 --> 01:01:52.020
Ryan Mehta: We can grab those values. So we want to get big color and candle change.

550
01:01:57.930 --> 01:02:00.930
Ryan Mehta: Our color picker context.

551
01:02:10.830 --> 01:02:11.190
So,

552
01:02:14.160 --> 01:02:24.060
Ryan Mehta: Close out this right hand side. So we're going to get both of those from the context, we put them in the bucket back over herehere's this error to

414
00:49:23.310 --> 00:49:24.330
Ryan Mehta: Everybody know this one.

415
00:49:27.120 --> 00:49:27.660
Jerud Moyer: Favorite

416
00:49:27.960 --> 00:49:30.750
Thomas Stussi: I got stuck on that for three and a half hours last night.

417
00:49:31.410 --> 00:49:32.490
Ryan Mehta: I get it all this one.

418
00:49:34.440 --> 00:49:35.580
Ryan Mehta: That means my

419
00:49:35.700 --> 00:49:36.960
Ryan Mehta: My Postgres isn't running

420
00:49:38.070 --> 00:49:39.630
Ryan Mehta: So let me start Postgres.

421
00:49:42.480 --> 00:49:43.230
Ryan Mehta: And

422
00:49:43.290 --> 00:49:48.480
Ryan Mehta: Now that Postgres is running. Let's start this that's

423
00:49:50.220 --> 00:49:57.720
Ryan Mehta: Clear this sign up again. Okay. Users does not exist. How do we fix that one.

424
00:50:04.410 --> 00:50:05.760
Ryan Mehta: We have any good ideas.

425
00:50:12.540 --> 00:50:14.250
Ryan Mehta: I'm going to open up PG admin.

426
00:50:15.300 --> 00:50:19.050
Ryan Mehta: And run our setup sequel, we have, we don't have our tables created yet.

427
00:50:31.740 --> 00:50:35.970
Ryan Mehta: So we're in here, let me connect it to my local

428
00:50:37.110 --> 00:50:38.370
Ryan Mehta: Postgres.

429
00:50:39.720 --> 00:50:41.730
Ryan Mehta: Let's grab our setup sequel.

430
00:50:45.600 --> 00:50:50.460
Ryan Mehta: And just drop it into here and run it, that'll create our tables for us.

431
00:50:52.020 --> 00:50:54.750
Ryan Mehta: And now with some luck.

432
00:50:56.400 --> 00:51:01.950
Ryan Mehta: Everything will work just perfect. Can I move this tab right here.

433
00:51:09.360 --> 00:51:20.010
Ryan Mehta: All right, let's clear this again. Let's try again 200. That seems pretty promising. There's our users. So we're able to sign up now a

434
00:51:21.450 --> 00:51:31.530
Ryan Mehta: Little bit of bug fixing. Little bit of air fixing. But now we're able to sign up for check out our application cookies.

435
00:51:32.910 --> 00:51:38.490
Ryan Mehta: We should hopefully well we don't. That's no good. We have no cookie yet.

436
00:51:39.690 --> 00:51:41.850
Ryan Mehta: Which is troublesome.

437
00:51:43.500 --> 00:51:45.510
Ryan Mehta: Let's go back to this network call

438
00:51:46.530 --> 00:51:50.880
Ryan Mehta: And see if we tried to get a cookie.

439
00:51:52.350 --> 00:51:55.950
Ryan Mehta: Yeah, check it out. We have this little yellow thing.

440
00:51:57.000 --> 00:52:06.600
Ryan Mehta: This set cookie was blocked because it had the secure attribute, but it was not received over a secure connection. Anybody have any ideas what that might mean

441
00:52:15.300 --> 00:52:36.900
Ryan Mehta: So when we put six here, here, it meant that we needed to use HTTPS. So it needs to be over HTTPS McAfee over normal HTTP. By default, the web pack applications that we use only use HTTP not HTTPS. There's they're not secure connections.

442
00:52:38.460 --> 00:52:43.980
Ryan Mehta: Anybody no way to fix this quickly, by any chance, anybody read anything on fixing this.

443
00:52:47.850 --> 00:52:54.390
Ryan Mehta: It's really nice because I believe the dev server allows us to do.

444
00:52:56.250 --> 00:52:56.760
That

445
00:52:59.970 --> 00:53:05.610
Ryan Mehta: If we restart web pack after putting HTTPS true on our dev server.

446
00:53:08.190 --> 00:53:22.620
Ryan Mehta: Be able to go back here and manually type in HTTPS colon slash slash localhost 7891 actually we scroll up here to you'll notice that this now says HTTPS instead of HTTP.

447
00:53:24.510 --> 00:53:35.910
Ryan Mehta: We go here. It will tell us that it's not secure how HTTPS works is there's central authorities that say like your HTTPS connection is valid.

448
00:53:36.450 --> 00:53:45.750
Ryan Mehta: We didn't pay money for this central authority to validate us, but we're pretty sure that we trust ourselves so we can proceed unsafely to this thing.

449
00:53:48.570 --> 00:53:51.060
Brooke Perkins (she/her): Is that secure like

450
00:53:52.110 --> 00:53:59.220
Brooke Perkins (she/her): That it. Where does it like that secure like that requirement for it to be secure come from. Is that from the browser.

451
00:53:59.850 --> 00:54:01.920
Ryan Mehta: That is from the back end.

452
00:54:02.940 --> 00:54:05.190
Brooke Perkins (she/her): Oh, secured true. Okay, thank you. Yeah.

453
00:54:05.640 --> 00:54:09.450
Ryan Mehta: So I can say only secure connections that will give this cookie to you.

454
00:54:09.810 --> 00:54:15.150
Brooke Perkins (she/her): But so if you wanted to be like, I don't want to deal with that you could just take that away right

455
00:54:15.480 --> 00:54:17.370
Ryan Mehta: Totally, yeah. Gotcha.

456
00:54:19.830 --> 00:54:22.860
Ryan Mehta: That's let's try making another user test one test.

457
00:54:25.650 --> 00:54:31.530
Ryan Mehta: Let's sign up, we get our two hundreds again free go and look at it.

458
00:54:35.910 --> 00:54:39.600
Ryan Mehta: Under headers, we still have a little thing.

459
00:54:45.750 --> 00:54:50.040
Ryan Mehta: I'm so upset. Why would you take out my HTTPS.

460
00:54:55.980 --> 00:55:01.560
Ryan Mehta: Okay, well, that's kind of upsetting to me okay Breck I like your idea.

461
00:55:02.310 --> 00:55:03.240
Ryan Mehta: Let's get rid of this.

462
00:55:03.780 --> 00:55:04.920
Brooke Perkins (she/her): Let's just take it away.

463
00:55:07.080 --> 00:55:10.800
Brooke Perkins (she/her): That's not how I solve my debugging. Usually, I swear.

464
00:55:14.820 --> 00:55:16.620
Ryan Mehta: Let's see if that worked.

465
00:55:22.860 --> 00:55:23.220
Three.

466
00:55:24.900 --> 00:55:28.350
Ryan Mehta: If this works, then we can come up with a good way

467
00:55:30.120 --> 00:55:36.270
Ryan Mehta: See, now I think that it has to be secure because of the same site none.

468
00:55:41.010 --> 00:55:43.800
Ryan Mehta: So silly. How do we fix this.

469
00:55:50.010 --> 00:55:51.120
Ryan Mehta: I think we want that.

470
00:55:52.260 --> 00:55:54.990
Ryan Mehta: We want this to be HTTPS.

471
00:55:56.520 --> 00:55:57.000
Ryan Mehta: Oh,

472
00:56:00.840 --> 00:56:01.200
Ryan Mehta: I know

473
00:56:09.840 --> 00:56:14.850
Ryan Mehta: I just realized we put HTTPS at one place, but we never put it in the other place.

474
00:56:17.670 --> 00:56:19.470
Ryan Mehta: So back in our service.

475
00:56:22.620 --> 00:56:23.970
Ryan Mehta: Is

476
00:56:25.980 --> 00:56:26.970
Back over here.

477
00:56:29.040 --> 00:56:31.140
Ryan Mehta: This is to be HTTPS also

478
00:56:32.850 --> 00:56:39.720
Ryan Mehta: To continue to secure connection from front end back end. And now I forget which test to use around

479
00:56:47.250 --> 00:56:47.640
Ryan Mehta: Okay.

480
00:56:48.960 --> 00:56:50.940
Ryan Mehta: Let's make this sign up request.

481
00:56:52.200 --> 00:56:53.370
Ryan Mehta: totally failed.

482
00:56:55.500 --> 00:56:56.970
Ryan Mehta: Because the back end.

483
00:56:59.340 --> 00:57:00.930
Ryan Mehta: is stupid.

484
00:57:05.190 --> 00:57:07.560
Ryan Mehta: This is so annoying to me. How do we do this in dev

485
00:57:09.060 --> 00:57:16.650
Ryan Mehta: It's kind of annoying to me because this requirement is brand new. You all are the first cohort that have to experience this.

486
00:57:18.270 --> 00:57:19.890
Ryan Mehta: Same site issue.

487
00:57:25.170 --> 00:57:37.980
Ryan Mehta: And it's annoying to me right now. All right. Well, let's take a break and well I think of a good way around this thing for our dev environments. Anyways, let's come back at 1110

488
00:57:38.520 --> 00:57:39.090
Ron Yonker: Sounds good.

489
00:57:40.290 --> 00:57:40.710
Ron Yonker: Sounds good.

490
00:57:45.570 --> 00:57:48.780
Ryan Mehta: Um, so secure will only be enabled in production.

491
00:57:49.830 --> 00:58:03.090
Ryan Mehta: Node automatically sets these environment variables for us. So node and will be production when we actually deploy it to her Roku, it'll be devil, we have this in dev like when I'm running it right now. It's a dev

492
00:58:03.810 --> 00:58:14.490
Ryan Mehta: And test. This will be test so secure will only be this will only be true in production will have same site none and production or lacks in development.

493
00:58:16.830 --> 00:58:19.590
Ryan Mehta: In this case, now we can

494
00:58:20.700 --> 00:58:27.060
Ryan Mehta: Up. Well, I've given boy. If we sign up another user we sign up

495
00:58:30.120 --> 00:58:33.330
I've already broken it and just a few seconds.

496
00:58:34.470 --> 00:58:34.980
10

497
00:58:36.660 --> 00:58:44.970
Ryan Mehta: Okay we sign up our user, the cookie is good. Now, and we see our session cookie here in the browser.

498
00:58:47.280 --> 00:58:51.540
Ryan Mehta: So the fix was just to conditionally you sit here and same site.

499
00:58:55.260 --> 00:58:55.890
Ryan Mehta: But good

500
00:58:59.220 --> 00:59:00.510
Ryan Mehta: Okay, cool.

501
00:59:03.120 --> 00:59:12.720
Ryan Mehta: Next thing that we want to do is login. We want to make sure that a user can log into our site also. So let's start off on the front and again

502
00:59:13.890 --> 00:59:15.990
Ryan Mehta: We have our signup component

503
00:59:17.280 --> 00:59:28.590
Ryan Mehta: We're going to make another component called login that will be almost identical to the signup component except will call a login function instead of a signup function.

504
00:59:29.340 --> 00:59:41.610
Ryan Mehta: I'm just going to duplicate these two components. I think you all should if you choose to have authentication on your final project, figure out a way to combine the signup component and the login component

505
00:59:43.260 --> 00:59:46.320
Ryan Mehta: I'm going to copy these so you can see how similar they are

506
00:59:47.790 --> 00:59:52.140
Ryan Mehta: My copy. I'm going to call login and I will change.

507
00:59:53.190 --> 00:59:54.870
Ryan Mehta: The component name to login

508
00:59:55.950 --> 01:00:00.630
Ryan Mehta: Again, and we'll just like step through this thing to see the stuff that we're going to change.

509
01:00:01.740 --> 01:00:05.550
Ryan Mehta: So instead of the button saying sign up the button, and I was going to say login

510
01:00:06.960 --> 01:00:12.510
Ryan Mehta: Instead of bringing in this signup function, we are in our off provider.

511
01:00:13.830 --> 01:00:17.100
Ryan Mehta: Going to construct a login function.

512
01:00:19.050 --> 01:00:21.690
Ryan Mehta: Which will also take an email and a password.

513
01:00:23.850 --> 01:00:28.620
Ryan Mehta: And will call sub login service that will create in a little bit.

514
01:00:32.460 --> 01:00:38.340
Ryan Mehta: So will export this login function or off stay also in our hooks.

515
01:00:39.600 --> 01:00:45.810
Ryan Mehta: Oops, that's our service in this hook. We're going to construct another book called us login

516
01:00:48.180 --> 01:00:49.020
Ryan Mehta: That will

517
01:00:50.640 --> 01:00:53.370
Ryan Mehta: The structure login off of our context.

518
01:00:54.690 --> 01:00:55.590
Ryan Mehta: And turn it

519
01:00:57.690 --> 01:01:04.230
Ryan Mehta: So then instead of using sign up here, we will use login, which we will get from our login

520
01:01:05.310 --> 01:01:05.970
Ryan Mehta: Instead,

521
01:01:11.160 --> 01:01:20.670
Ryan Mehta: And that's really the entirety of the differences between the two components. So, change the name change the service, change the function that would call here.

522
01:01:21.090 --> 01:01:35.880
Ryan Mehta: And change the button text. The rest of it all remains the same kind of see how silly it is to have two components that are almost identical. These for sure can be merged, but I'll let you all think about how to merge these two things in your own applications.

523
01:01:37.530 --> 01:01:45.030
Ron Yonker: You can just rename it like with a dynamic variable and do a ternary like a conditional render. Couldn't you

524
01:01:47.610 --> 01:01:55.800
Ryan Mehta: Could I get. I mean, you really want to change how this handled submit function works. Maybe it's by sending in a different sending in some props.

525
01:01:56.220 --> 01:01:56.700
Yeah.

526
01:02:00.720 --> 01:02:13.950
Ryan Mehta: Alright. So back in our off provider. We want to fill in our login. Here we're going to fill that in inside of, like, we're going to use a service that we construct over here.

527
01:02:14.520 --> 01:02:23.520
Ryan Mehta: Before we can construct the service. We need to have a backend route that does the login for us. So we're going to have to migrate our way on to the back end.

528
01:02:25.290 --> 01:02:38.430
Ryan Mehta: That's still the front end onto the back end and construct a login route in order to have a login route we are going to have to have some way to look up a user in our model.

529
01:02:40.650 --> 01:02:42.660
Ryan Mehta: So let's construct a

530
01:02:45.810 --> 01:03:03.090
Ryan Mehta: Another method here called find by email the brand is going to send us a user's email. We're going to take that email and we want to be able to find a user with that email. So we'll get some rows back

531
01:03:07.050 --> 01:03:08.250
Ryan Mehta: You're going to

532
01:03:09.510 --> 01:03:10.200
Ryan Mehta: Wait.

533
01:03:14.970 --> 01:03:19.830
Ryan Mehta: We're going to do a select star from users were

534
01:03:20.880 --> 01:03:22.500
Ryan Mehta: Equals dollar sign one

535
01:03:38.760 --> 01:03:49.710
Ryan Mehta: I will say if we don't have a rose zero will return know otherwise we'll return a new user with rose

536
01:03:53.100 --> 01:03:55.500
Ryan Mehta: So will attempt to find the user by their email.

537
01:03:59.430 --> 01:04:00.720
Good. Okay.

538
01:04:03.570 --> 01:04:06.480
Ryan Mehta: Back in our off controller.

539
01:04:08.910 --> 01:04:14.190
Ryan Mehta: We can now find a user by their email, but we also want to check that their password matches.

540
01:04:16.740 --> 01:04:27.240
Ryan Mehta: We're gonna so we're going to add another service that both finds a user by their email and checks her password like verify validates a password.

541
01:04:28.590 --> 01:04:30.840
Ryan Mehta: It's called this concept.

542
01:04:32.520 --> 01:04:33.690
Ryan Mehta: Author eyes.

543
01:04:35.760 --> 01:04:42.090
Ryan Mehta: And they could a sink. We're going to get past a user's email and they're clear text passwords.

544
01:04:44.340 --> 01:04:52.110
Ryan Mehta: First thing that we're going to do is find a user using our user model find by email with their email.

545
01:04:56.970 --> 01:05:00.450
Ryan Mehta: If we don't get a user back. So if we don't have a user

546
01:05:02.610 --> 01:05:07.260
Ryan Mehta: We're gonna throw a new error invalid.

547
01:05:09.240 --> 01:05:10.410
Ryan Mehta: Or password.

548
01:05:14.520 --> 01:05:18.330
Ryan Mehta: If we do have a user, then we're going to check their password so

549
01:05:23.970 --> 01:05:24.780
Ryan Mehta: Password.

550
01:05:26.070 --> 01:05:35.280
Ryan Mehta: We'll wait we're going to use the crypt compare recap be crypt compare takes their plain text password and the hash version of their password.

551
01:05:36.420 --> 01:05:41.520
Ryan Mehta: And lets us know if they match. If we don't have a valid password.

552
01:05:45.720 --> 01:05:48.240
Ryan Mehta: Then we will throw a new error.

553
01:05:50.010 --> 01:05:51.000
Ryan Mehta: Invalid

554
01:05:53.910 --> 01:05:54.660
Ryan Mehta: Password.

555
01:05:55.980 --> 01:05:58.950
Ryan Mehta: If we do find the user and the password is.

556
01:06:01.530 --> 01:06:05.850
Ryan Mehta: Valid. Then we'll return the usifferent resellers so yes. Wow. Okay, cool.

609
01:21:43.260 --> 01:21:45.540
jared: And that's the other cool thing. I mean, if you had

610
01:21:46.710 --> 01:21:47.250
jared: You know,

611
01:21:48.480 --> 01:21:56.580
jared: 20 different resolves you could ask for them all in the same query. At the same time, you don't just have to do just users once

612
01:21:58.020 --> 01:22:01.410
jared: You do multiple mutations to, but I don't think you could do.

613
01:22:03.570 --> 01:22:08.100
jared: Like create like to have the same mutation in the same one.

614
01:22:09.360 --> 01:22:16.530
jared: Probably. Same thing with queries you probably can't ask for users. And then also asked for users. Again, I think it would yell at you.

615
01:22:18.240 --> 01:22:18.840
jared: But we can try.

616
01:22:23.910 --> 01:22:25.290
jared: It groups in the go

617
01:22:27.150 --> 01:22:27.840
Interesting.

618
01:22:30.450 --> 01:22:32.520
Ryan Mehta: Yeah. Wonder if I made two players on the back end.

619
01:22:35.970 --> 01:22:37.290
jared: I wonder that too.

620
01:22:40.410 --> 01:22:43.440
jared: We we've been having some trouble with a

621
01:22:44.460 --> 01:22:46.650
jared: Fee that we've been doing recently.

622
01:22:51.900 --> 01:23:01.140
jared: We just made it not too long ago, almost 300 times faster by filtering out some stuff before they hit our results.

623
01:23:16.470 --> 01:23:20.160
jared: Yeah, we were filtering out pre kind of branch know just once.

624
01:23:25.980 --> 01:23:29.550
jared: Cool, cool, cool. Yeah, so I guess it just won't, won't do it twice.

625
01:23:30.690 --> 01:23:34.710
Ryan Mehta: What if you alias a second one you have an alias those things.

626
01:23:35.340 --> 01:23:37.740
Ryan Mehta: I totally taking it off track but

627
01:23:39.390 --> 01:23:40.110
jared: Um,

628
01:23:41.970 --> 01:23:43.500
jared: I know that you can name them.

629
01:23:47.670 --> 01:23:51.960
jared: Know that you can even there, but I'm not sure how to

630
01:24:01.980 --> 01:24:02.310
jared: Don't know.

631
01:24:02.940 --> 01:24:09.990
Ryan Mehta: I think if you put a colon. Like if you say toy one colon toy create it will alias the query.

632
01:24:11.250 --> 01:24:12.480
And copy 21

633
01:24:17.550 --> 01:24:18.600
jared: Years it suffers.

634
01:25:02.220 --> 01:25:03.390
jared: Another cool thing about

635
01:25:04.830 --> 01:25:08.160
jared: This you notice that it's returning errors in data.

636
01:25:10.020 --> 01:25:14.250
jared: If one of these errors out the other one can still resolve.

637
01:25:16.710 --> 01:25:24.840
jared: Which is it like another positive if you're doing, you know, if you ask for 16 things you're trying to create multiple things at the same time.

638
01:25:26.190 --> 01:25:27.690
jared: You have to duplicate key on

639
01:25:29.640 --> 01:25:30.600
jared: One of these

640
01:25:31.860 --> 01:25:33.510
jared: You know, because they made it before.

641
01:25:34.590 --> 01:25:36.600
jared: The other one actually was still created

642
01:25:39.240 --> 01:25:43.560
jared: So one thing breaks the whole ship doesn't go down, which is kind of cool.

643
01:25:48.300 --> 01:25:49.920
jared: Yeah, looks like. That's okay.

644
01:25:51.930 --> 01:25:53.820
I'm curious if we get rid of these

645
01:26:01.440 --> 01:26:05.220
jared: Nope. Yeah, so they would have to be named. So, good question.

646
01:26:15.600 --> 01:26:18.510
jared: Toy toy toy looks good.

647
01:26:21.270 --> 01:26:21.720
jared: Looks good.

648
01:26:27.510 --> 01:26:28.440
Types

649
01:27:23.160 --> 01:27:27.840
jared: Could do something kind of fun with toy. Actually, let's say,

650
01:27:33.120 --> 01:27:33.960
jared: Is

651
01:27:58.110 --> 01:27:59.910
jared: We can start making a loop.

652
01:28:01.470 --> 01:28:02.190
jared: Toy result.

653
01:28:04.920 --> 01:28:05.730
jared: We asked for.

654
01:28:08.670 --> 01:28:09.480
jared: A sink.

655
01:28:51.270 --> 01:28:53.850
jared: Okay that's good choice. Okay.

656
01:29:40.320 --> 01:29:43.080
jared: Even an owner doesn't have

657
01:29:45.090 --> 01:29:48.060
jared: Any dogs on the database model.

658
01:29:53.640 --> 01:29:55.320
jared: Just kind of talking about itself here.

659
01:29:56.700 --> 01:29:59.580
jared: If we want to get all the dogs that a user owns

660
01:30:01.410 --> 01:30:10.170
jared: We could find basically all dogs, whose owner is that users user ID.

661
01:30:11.910 --> 01:30:13.380
jared: This idea here.

662
01:30:15.750 --> 01:30:20.550
jared: Would be the user IDs that gets returned from from these functions.

663
01:30:24.330 --> 01:30:25.590
jared: matches up with

664
01:30:26.670 --> 01:30:27.780
jared: The return user ID.

665
01:30:30.120 --> 01:30:32.250
jared: So let's even go around in a bunch of circles.

666
01:30:34.920 --> 01:30:36.000
jared: Dogs.

667
01:30:37.980 --> 01:30:39.660
jared: Will be an array of dog.

668
01:30:45.570 --> 01:30:46.440
jared: Nothing changes.

669
01:30:48.390 --> 01:30:48.960
jared: To

670
01:30:52.710 --> 01:30:53.250
Tape.

671
01:30:56.010 --> 01:30:59.640
jared: Owners will be user. So not

672
01:31:02.220 --> 01:31:05.190
jared: The user does this me a broken some stuff but I

673
01:31:06.960 --> 01:31:08.610
jared: Can't find my job to

674
01:33:08.910 --> 01:33:14.040
jared: Right now we got three boys all owned by the same person.

675
01:33:17.160 --> 01:33:20.550
jared: So let's try and do some funny business.

676
01:33:22.110 --> 01:33:23.910
jared: Query for

677
01:33:26.850 --> 01:33:28.650
jared: What for dogs.

678
01:35:46.590 --> 01:35:50.490
Ryan Mehta: No, not really. But I did notice in that other file that you're just in

679
01:35:52.440 --> 01:35:56.730
Ryan Mehta: I think user solvers. Perhaps you just have that

680
01:35:59.790 --> 01:36:00.660
Ryan Mehta: On the toy model.

681
01:36:21.450 --> 01:36:22.560
jared: Should be able to

682
01:37:03.210 --> 01:37:08.370
Ryan Mehta: It's also totally possible that the idea that you copied is on the user's ID.

683
01:39:37.980 --> 01:39:38.190
Okay.

684
01:39:45.960 --> 01:39:47.100
jared: Cool. Great.

685
01:39:50.460 --> 01:39:52.110
jared: So if I wanted to find a

686
01:39:59.370 --> 01:40:03.390
jared: I wanted to figure out all of the toner. The owners.

687
01:40:04.650 --> 01:40:13.170
jared: Toys, you know, basically, to go through here and find your dog and find the owner find all the toys it that owner

688
01:40:16.020 --> 01:40:19.530
jared: Has but maybe no. Not all spots to us. We don't know.

689
01:40:20.610 --> 01:40:28.230
jared: But that's kind of example of kind of how you can use these results in types to kind of work your way around and get information.

690
01:40:29.400 --> 01:40:31.290
jared: That otherwise you might have to make

691
01:40:32.640 --> 01:40:35.220
jared: More specific kind of rest endpoints for

692
01:40:37.290 --> 01:40:38.040
jared: Um,

693
01:40:41.160 --> 01:40:42.870
Ryan Mehta: Let's see.

694
01:40:45.510 --> 01:40:47.550
jared: We can keep adding models or

695
01:40:49.050 --> 01:40:50.550
jared: I could show you

696
01:40:51.990 --> 01:40:54.210
jared: Well, actually, we're out of time.

697
01:40:56.520 --> 01:40:57.600
Ryan Mehta: Pretty close, yeah.

698
01:40:59.970 --> 01:41:01.350
jared: Any questions anybody has

699
01:41:07.230 --> 01:41:18.090
Evan Andrewson: A question I was just curious. So I've see we've been making all these queries in in the playground. But how would you like hit this API on a front end or in post, man.

700
01:41:19.320 --> 01:41:20.730
jared: Got you think

701
01:41:25.980 --> 01:41:26.400
jared: Um,

702
01:41:27.540 --> 01:41:33.660
jared: I believe a like If using a React app or whatnot, like that. There is a craft to client.

703
01:41:34.950 --> 01:41:37.050
jared: It's kind of a package you download and

704
01:41:38.520 --> 01:41:39.210
jared: You hit

705
01:41:40.620 --> 01:41:45.720
jared: You can put in your querying, they're all they're all post queries, actually.

706
01:41:59.550 --> 01:42:02.880
jared: Post man has a little graph que el kind of interface for you.

707
01:42:05.070 --> 01:42:08.130
jared: Think I need some headers.

708
01:42:14.760 --> 01:42:16.770
jared: So three salary for this from

709
01:42:18.120 --> 01:42:18.420
You

710
01:42:19.830 --> 01:42:21.870
jared: Guys garden app that I was building so

711
01:42:34.080 --> 01:42:35.790
jared: Like if you're familiar with the

712
01:42:37.590 --> 01:42:49.200
jared: Super agent, you can kind of do like that post and you send a chunk of JSON and then you said like data set authorization bearer token, whatnot.

713
01:42:50.760 --> 01:42:53.820
jared: These headers would get put in set and then

714
01:42:54.930 --> 01:42:55.740
jared: Not sure if

715
01:42:56.880 --> 01:43:01.710
jared: There's like something new that super agent would have for sending graph que el queries.

716
01:43:03.480 --> 01:43:17.130
jared: But you can do here and post man and Apollo comes with a client that you download. I'm assuming it would be similar like basically making a JSON object and adding it to your, your post body.

717
01:43:18.510 --> 01:43:24.360
Ryan Mehta: What if you change that to raw instead of graph que el what happens and then paste that same thing

718
01:43:26.070 --> 01:43:26.700
Beat it up.

719
01:43:58.230 --> 01:44:05.400
jared: Yeah, so I think it'd be similar. I'm just kind of sending a chunk of data. It's basically your query to an endpoint.

720
01:44:06.510 --> 01:44:07.350
jared: And getting back

721
01:44:08.610 --> 01:44:10.140
jared: Or either data or here's

722
01:44:12.870 --> 01:44:25.620
Ryan Mehta: What if you make it sorry to just try this. Some things. What if you make it JSON again so raw and then JSON and then copy that whole thing there.

723
01:44:27.180 --> 01:44:27.870
Ryan Mehta: And then

724
01:44:30.330 --> 01:44:32.070
Ryan Mehta: It's going to have to be on one single line.

725
01:44:34.650 --> 01:44:36.180
Ryan Mehta: Nevermind. It's too hard.

726
01:44:39.240 --> 01:44:40.080
jared: About putting it

727
01:44:41.700 --> 01:44:48.810
Ryan Mehta: Because I think it takes like the the raw graph que el thing that you send like up here to do with super agent.

728
01:44:50.070 --> 01:45:01.710
Ryan Mehta: I think it's an object with query as the key and then this thing here is this like the value of query in a string cruncher

729
01:45:04.290 --> 01:45:04.620
jared: Bye.

730
01:45:50.550 --> 01:45:56.430
Ryan Mehta: Yeah, but it's not valid JSON. What if you do a JSON string of phi curly braces.

731
01:45:57.870 --> 01:46:02.970
Ryan Mehta: Query colon and then back tix that thing that you have

732
01:46:32.250 --> 01:46:34.170
Ryan Mehta: To get one too many curly brace at the end.

733
01:47:19.950 --> 01:47:20.220
Ryan Mehta: Yeah.

734
01:47:21.870 --> 01:47:25.350
Ryan Mehta: It's like the JSON output. It is all weird looking

735
01:47:25.980 --> 01:47:26.970
jared: Yeah, it actually

736
01:47:31.890 --> 01:47:32.970
jared: It's like pulled it out of it.

737
01:47:46.920 --> 01:47:48.060
jared: Well the next line stuff.

738
01:47:49.800 --> 01:47:55.560
Ryan Mehta: Yeah, I'm like these extra light because like quotes around everything. I don't know. Just seems weird

739
01:48:22.920 --> 01:48:23.400
jared: toner.

740
01:48:33.990 --> 01:48:35.280
Ryan Mehta: Is worth a shot. Yeah, I

741
01:48:36.150 --> 01:48:39.570
jared: Think you're right, though. I think that's kind of how it works, but

742
01:48:43.530 --> 01:48:44.760
Pretty simple query.

743
01:48:45.810 --> 01:48:53.160
Ryan Mehta: You could do just go to the browser and then look at the Network tab and then press that play button.

744
01:48:54.630 --> 01:48:57.000
Let's see what request it makes

745
01:48:59.190 --> 01:49:00.090
Ryan Mehta: So it's probably like

746
01:49:06.240 --> 01:49:07.950
Ryan Mehta: Where's the post body and stuff.

747
01:49:11.010 --> 01:49:12.090
Ryan Mehta: There's the request.

748
01:50:06.060 --> 01:50:08.460
Ryan Mehta: Like question my query equals that thing.

749
01:50:26.580 --> 01:50:31.920
Ryan Mehta: Maybe. Okay, I think I can fix it for curly braces here instead of the body.

750
01:50:33.540 --> 01:50:34.230
Ryan Mehta: And then

751
01:50:35.460 --> 01:50:38.250
Ryan Mehta: Quotes query double quotes query.

752
01:50:39.810 --> 01:50:45.180
Ryan Mehta: And then colon. Yeah, and then paste that stuff. Yep.

753
01:50:46.500 --> 01:50:47.880
Ryan Mehta: We can prob. Yeah.

754
01:50:56.670 --> 01:50:57.300
jared: Pretty good.

755
01:50:58.290 --> 01:50:58.830
Nice.

756
01:51:03.360 --> 01:51:05.850
Ryan Mehta: Well, thanks for coming. Jared and showing us all this stuff.

757
01:51:07.470 --> 01:51:08.310
Ron Yonker: Yeah, thank you.

758
01:51:08.520 --> 01:51:08.700
Langston Beckwith Stanley(TA): Yeah.

759
01:51:08.760 --> 01:51:11.280
Ryan Mehta: Thank you Greg to so cool because

760
01:51:12.570 --> 01:51:25.680
Ryan Mehta: I think he kind of mentioned this. It's like a really cool orchestration layer between my like we have a bunch of microservices, it seems like graph que el is like the perfect orchestration layer to use

761
01:51:27.630 --> 01:51:29.730
Ryan Mehta: With micro services so

762
01:51:32.100 --> 01:51:32.460
Ryan Mehta: Yeah.

763
01:51:40.710 --> 01:51:44.160
Ryan Mehta: Alright, well thanks for coming. Thanks for sharing Jared and

764
01:51:45.180 --> 01:51:46.320
Ryan Mehta: See you all next week.

765
01:51:47.520 --> 01:51:49.830
jared: Yeah. Have a good weekend, everybody. Thank you.

766
01:51:50.400 --> 01:51:50.940
Ron Yonker: Take care.

767
01:51:52.500 --> 01:51:53.040
Nathan Martel: Thanks so much.

reate actions are these objects with a type in it. Right. So these are action creators. We're going to take it one step further. We're also going to explore a concept called increment.

376
00:46:45.840 --> 00:46:49.260
Ryan Mehta: Which will be set to our increment string.

377
00:46:50.610 --> 00:46:53.190
Ryan Mehta: And will also create a concept.

378
00:46:56.910 --> 00:46:57.540
Ryan Mehta: Called

379
00:46:59.580 --> 00:47:08.490
Ryan Mehta: Which will be set to the detriment string and then we'll workplace our types here with those Constance

380
00:47:12.180 --> 00:47:27.630
Ryan Mehta: The big advantage of this is I'm going to put our reducer over here on the left is we're no longer going to use these strings here in our cases we're going to import them from our actions file.

381
00:47:28.830 --> 00:47:33.810
Ryan Mehta: Now, there's no longer any chance for this to not match this

382
00:47:34.980 --> 00:47:55.050
Ryan Mehta: Right there, imported from each other. So if I happen to have a typo. It's okay. I'll have a typo. But the connection will remain right because now on both sides. I have the exact same typo still nice to not have typos, but at least a typo won't break the entire application.

383
00:47:57.000 --> 00:48:03.690
Ryan Mehta: So now we're importing this here, and we're using the same variable. In our case, and in our action creator

384
00:48:06.210 --> 00:48:14.760
Ryan Mehta: And then back in our counter J SX instead of dispatching an object manually, we're going to use our

385
00:48:16.290 --> 00:48:19.470
Ryan Mehta: Action creator functions.

386
00:48:28.110 --> 00:48:28.860
Ryan Mehta: renaming

387
00:48:39.390 --> 00:48:39.660
Okay.

388
00:48:42.480 --> 00:48:59.280
Ryan Mehta: So then we'll import these action creators from our actions file. And now we're no longer like at risk of accidentally creating the wrong object we always reliably create the detriment object and the increment object by using our action creators.

389
00:49:00.630 --> 00:49:01.770
In the right places.

390
00:49:03.180 --> 00:49:09.180
Ryan Mehta: So now we're saying dispatch the detriment action dispatch the increment action.

391
00:49:10.410 --> 00:49:12.180
Ryan Mehta: And everything hopefully

392
00:49:14.460 --> 00:49:16.230
Ryan Mehta: Works just like it did before.

393
00:49:24.900 --> 00:49:27.270
Adrian Simental: Brian can you put a switch inside a switch.

394
00:49:31.980 --> 00:49:35.250
Ryan Mehta: Can try it. What would you switch on, like, just something

395
00:49:35.280 --> 00:49:38.970
Adrian Simental: But yeah, I just meant like in the document we could put a switch like if

396
00:49:40.860 --> 00:49:45.300
Adrian Simental: The whatever state DOT count if you didn't want to go to negative zero

397
00:49:46.710 --> 00:49:47.160
I see.

398
00:49:48.780 --> 00:49:50.040
Ryan Mehta: I probably wouldn't put another

399
00:49:50.040 --> 00:49:52.500
Ryan Mehta: Switch there. I would probably do something

400
00:49:52.500 --> 00:49:53.880
Ryan Mehta: Like math.

401
00:49:57.510 --> 00:49:58.230
Ryan Mehta: Max.

402
00:50:00.660 --> 00:50:03.510
Ryan Mehta: Of State minus one and zero.

403
00:50:04.620 --> 00:50:09.750
Ryan Mehta: Because now, it will like take the maximum of zero or this I'll never be able to go negative.

404
00:50:11.040 --> 00:50:12.570
Adrian Simental: Believe so you can

405
00:50:13.560 --> 00:50:18.510
Ryan Mehta: Go up, we can go down, but it never goes below zero.

406
00:50:33.150 --> 00:50:35.550
Sarah Rector: So, Brandon, how

407
00:50:36.570 --> 00:50:37.500
Sarah Rector: Are you using

408
00:50:38.910 --> 00:50:42.420
Sarah Rector: The lowercase document increment because it's calling the function

409
00:50:43.770 --> 00:50:51.300
Sarah Rector: And in counting reducer not as you're using the all uppercase because it's just using the type is that right

410
00:50:51.900 --> 00:50:53.280
Ryan Mehta: Exactly, yeah.

411
00:50:56.400 --> 00:50:59.700
Ryan Mehta: So yeah, they're all uppercase or the string types.

412
00:51:00.330 --> 00:51:02.640
Ryan Mehta: And the lowercase ones are these

413
00:51:02.640 --> 00:51:05.160
Ryan Mehta: Functions that create the actions for us.

414
00:51:06.750 --> 00:51:26.100
Ron Yonker: He said the actual you doing that. Just so it's like a visual mental note. Like, I don't like this incremental document. These are specifically to go into the action creators. I don't ever want to rewrite these words anywhere else in the application. So I spell.

415
00:51:27.420 --> 00:51:31.590
Ryan Mehta: Yep, exactly. We don't want to miss spell them. We don't want to rewrite them. We went to import them.

416
00:51:32.460 --> 00:51:46.800
Ryan Mehta: We also don't want other developers to have to know how these like they don't need to know what's going on inside of these functions. They just need to know that they want to dispatch a detriment action. They don't care how we construct the detriment action.

417
00:51:48.210 --> 00:51:53.700
Ryan Mehta: Makes it much more reliable for other developers to just step in and do the same sort of thing.

418
00:51:55.980 --> 00:51:56.520
Ron Yonker: Thank you.

419
00:52:06.450 --> 00:52:10.950
Ryan Mehta: All right, should we try our classic color picker with us reducer.

420
00:52:12.630 --> 00:52:15.690
Ryan Mehta: Alright, and we'll break some tests to go along with it.

421
00:52:16.080 --> 00:52:22.680
Ryan Mehta: One really really nice thing about this whole process is you can unit test, a lot of it.

422
00:52:23.790 --> 00:52:26.820
Ryan Mehta: We don't even need to behavioral test pieces.

423
00:52:28.200 --> 00:52:28.620
Ryan Mehta: Okay.

424
00:52:33.300 --> 00:52:36.360
Ryan Mehta: So let's make a component

425
00:52:43.350 --> 00:52:46.830
Ryan Mehta: And let's start off with the display sex.

426
00:52:47.970 --> 00:52:50.580
Ryan Mehta: We're just going to do our classic sort of

427
00:52:54.390 --> 00:52:59.250
Ryan Mehta: presentational components display that will take a background color.

428
00:53:03.360 --> 00:53:05.460
Ryan Mehta: It will take a foreground color.

429
00:53:43.980 --> 00:53:47.070
Ryan Mehta: Display seeing this thing millions of times

430
00:53:48.960 --> 00:53:51.630
Ryan Mehta: Velocity make our controls.

431
00:53:57.420 --> 00:54:00.870
Ryan Mehta: Controls will take the color.

432
00:55:32.160 --> 00:55:33.930
Ryan Mehta: So this one should now be

433
00:55:38.250 --> 00:55:39.030
Color

434
00:55:54.660 --> 00:55:55.620
Ryan Mehta: This will be

435
00:56:05.310 --> 00:56:07.710
Ryan Mehta: Our typical color picker controls.

436
00:56:09.120 --> 00:56:17.370
Ryan Mehta: And then we will make our color picker sex file. This one will also be a function component

437
00:56:19.050 --> 00:56:21.630
Ryan Mehta: It will not take any props, though.

438
00:56:24.000 --> 00:56:27.120
Ryan Mehta: But will combine the

439
00:56:28.260 --> 00:56:30.630
Ryan Mehta: Two components that we just created. So

440
00:56:31.890 --> 00:56:41.790
Ryan Mehta: I will put our controls on top and then our display on the bottom and then will render this in app JS.

441
00:56:45.630 --> 00:56:56.490
Ryan Mehta: So we see our friends and now we should see the controls and our display none of these are changeable because we haven't actually set any of this stuff up.

442
00:57:00.210 --> 00:57:09.090
Ryan Mehta: Back over here, we need to pass some stuff to these things. We need background color foreground color text and on change function.

443
00:57:10.170 --> 00:57:23.160
Ryan Mehta: Instead of US utilizing our normal use state. We're going to utilize a reducer to do all of this. So my producers directory. I'm going to create a color reduces.js file.

444
00:57:24.450 --> 00:57:31.170
Ryan Mehta: And then in my actions folder, a minute, create a color actions.js file.

445
00:57:33.450 --> 00:57:37.260
Ryan Mehta: And let's go ahead and test these things also smoke.

446
00:57:38.850 --> 00:57:40.620
Ryan Mehta: Test JS file.

447
00:57:43.650 --> 00:57:44.340
All right.

448
00:57:55.260 --> 00:58:03.300
Ryan Mehta: All right, first thing we want our color reducer to be able to do is, it should be able to change the background color.

449
00:58:05.520 --> 00:58:12.390
Ryan Mehta: So we should be able to dispatch some action that changes our background color for us. Makes sense.

450
00:58:14.100 --> 00:58:20.280
Ryan Mehta: In order to do that, we need some sort of action that will tell the reducer to change the background color.

451
00:58:21.480 --> 00:58:25.770
Ryan Mehta: So back in our actions folder, we're going to create a

452
00:58:29.040 --> 00:58:30.630
Ryan Mehta: Let's call it eg

453
00:58:41.790 --> 00:58:44.370
Ryan Mehta: This action will also create our

454
00:58:54.960 --> 00:58:55.410
Ryan Mehta: Creator.

455
00:58:55.890 --> 00:58:57.990
Greg Mall: To have the screaming snake.

456
00:59:00.060 --> 00:59:02.790
Ryan Mehta: Yeah, I almost always do this.

457
00:59:05.940 --> 00:59:22.740
Ryan Mehta: In addition to the type or action is also going to need to send the new value of the background color, right, because our reducer will eventually want to know what should it change the background color to in our actions, whenever we want to send an extra value will use a payload.

458
00:59:24.060 --> 00:59:27.810
Ryan Mehta: Or action creators going to get the new background color.

459
00:59:29.280 --> 00:59:31.590
Ryan Mehta: And send it as a payload.

460
00:59:33.660 --> 00:59:48.480
Ryan Mehta: So our background color action crater needs to be passed the new background color, it's going to send that new background color to our producer, the reducer needs to handle this type and use the payload to update the state appropriately.

461
00:59:50.850 --> 00:59:56.760
Ryan Mehta: Back in our color reducer. We are going to make a function

462
00:59:59.070 --> 01:00:00.450
Ryan Mehta: Called reducer.

463
01:00:01.560 --> 01:00:04.050
Ryan Mehta: That will take the current state and in action.

464
01:00:05.880 --> 01:00:13.800
Ryan Mehta: Will have a switch on action type. And for now, we'll just default with current state.

465
01:00:15.150 --> 01:00:33.420
Ryan Mehta: In our test over here on the left hand side, we're going to use our reducer. We're going to pass it some state and an action and expect that we get the correct state back. So let's create some states, let's say our initial state has background color of

466
01:00:35.550 --> 01:00:36.180
Black

467
01:00:38.190 --> 01:00:51.600
Ryan Mehta: So we're just constructing our state. We're going to start off with a state of background color black. We're going to construct your action we already have a function that constructs or action for us. It's called Big color change.

468
01:00:53.010 --> 01:00:54.990
Ryan Mehta: And will change our color to

469
01:00:56.790 --> 01:00:57.420
Ryan Mehta: White

470
01:00:58.950 --> 01:01:05.070
Ryan Mehta: And then if we pass state and action to our producer who should get back some new state.

471
01:01:08.370 --> 01:01:11.100
Ryan Mehta: Will pass our state and our action.

472
01:01:12.720 --> 01:01:14.790
Ryan Mehta: What do we expect a new state to equal

473
01:01:19.230 --> 01:01:20.280
Ryan Mehta: You have any ideas.

474
01:01:25.620 --> 01:01:26.520
Thomas Stussi: Yep, exactly.

475
01:01:31.200 --> 01:01:43.200
Ryan Mehta: So our reducer is a function that takes some state and some action and returns a new state that we expect to look like this kind of makes sense.

476
01:01:46.680 --> 01:01:48.240
I don't want to use

477
01:01:50.430 --> 01:01:53.400
These I want to import import

478
01:01:56.580 --> 01:01:57.990
Ryan Mehta: Why did it use those.

479
01:02:02.730 --> 01:02:08.550
Thomas Stussi: I had that happen to me on the lab because I hadn't imported react into my file yet.

480
01:02:09.630 --> 01:02:11.370
Thomas Stussi: I'm not sure if that's the case here.

481
01:02:15.480 --> 01:02:16.230
Ryan Mehta: Totally could be

482
01:02:17.430 --> 01:02:19.890
Ryan Mehta: We won't need react for this test. Anyway, so

483
01:02:21.510 --> 01:02:23.250
Ryan Mehta: All right, let's run these tests.

484
01:02:24.450 --> 01:02:26.580
Ryan Mehta: And see how they fail.

485
01:02:29.160 --> 01:02:31.470
Ryan Mehta: So totally totally totally fail.

486
01:02:35.340 --> 01:02:38.040
Ryan Mehta: Let me get rid of this app snapshot test.

487
01:02:40.620 --> 01:02:41.220
Are you

488
01:02:49.110 --> 01:02:49.500
Ryan Mehta: Okay.

489
01:02:50.670 --> 01:02:54.240
Ryan Mehta: We get a failure for all the wrong reasons.

490
01:03:07.740 --> 01:03:08.100
Okay.

491
01:03:09.240 --> 01:03:10.230
Ryan Mehta: So here we go.

492
01:03:11.280 --> 01:03:14.490
Ryan Mehta: We expected background color to be white, but we got a black

493
01:03:16.200 --> 01:03:20.910
Ryan Mehta: To fix this, we're going going to add another case here.

494
01:03:22.260 --> 01:03:30.360
Ryan Mehta: Whenever the cases big color change you're going to return everything from our current state.

495
01:03:32.220 --> 01:03:38.190
Ryan Mehta: We're going to change the background color, though, to be whatever is an action dot payload.

496
01:03:42.420 --> 01:03:43.950
Ryan Mehta: This line of code make sense.

497
01:03:48.000 --> 01:03:49.020
Or two lines of code.

498
01:03:57.720 --> 01:03:58.320
Ryan Mehta: So,

499
01:04:00.630 --> 01:04:07.890
Ryan Mehta: One big thing here is we have to kind of as for writing these tests, not even think about react for a little bit.

500
01:04:08.790 --> 01:04:25.380
Ryan Mehta: What we have on the right hand side is just a normal JavaScript function this normal JavaScript function takes state and an action and then returns a new object that are all based on the state that gets passed to it and the action that gets passed to it.

501
01:04:27.990 --> 01:04:38.970
Ryan Mehta: On the left hand side we construct a state object we construct an action, object and we pass both to our reducer. When we do that we expect some new piece of state.

502
01:04:39.840 --> 01:04:56.100
Ryan Mehta: In our case, if we pass state. We're background colors black we pass an action where the type is BG color change and the payload is F, F, F, F, F, then we expect our new state to have everything from the previous state.

503
01:04:58.110 --> 01:05:07.890
Ryan Mehta: And the background color should now be what's ever in the action payload, which is F, F, F, F, F. So we really expect an object that looks like this.

504
01:05:10.800 --> 01:05:14.850
Ryan Mehta: It's kind of the nice thing about this is, they're just pure JavaScript functions.

505
01:05:17.430 --> 01:05:24.150
Ryan Mehta: Let's make another one. So we also have one where we want to change the foreground.

506
01:05:25.320 --> 01:05:25.890
Color

507
01:05:28.140 --> 01:05:35.340
Ryan Mehta: We're going to do the same sort of thing. We have some state. This time, let's say that we have background color state and it's a

508
01:05:36.960 --> 01:05:39.600
Ryan Mehta: Zero and we have foreground color.

509
01:05:41.730 --> 01:05:44.460
Ryan Mehta: Which is right now read

510
01:05:48.000 --> 01:05:55.410
Ryan Mehta: We need to construct an action that we're going to pass to our producer. So let's pause right here and go to our actions directory

511
01:05:56.730 --> 01:06:04.050
Ryan Mehta: We're going to export constant f g color change action type

512
01:06:07.380 --> 01:06:11.550
Ryan Mehta: And we're going to export constant FT color change.

513
01:06:13.830 --> 01:06:14.940
Ryan Mehta: Action creator

514
01:06:16.950 --> 01:06:21.450
Ryan Mehta: The type of our FT color change action creator will be this f g color change.

515
01:06:22.800 --> 01:06:27.270
Ryan Mehta:ave text.

627
01:15:01.500 --> 01:15:10.170
Ryan Mehta: Required string and we have our on change function which is going to be a required function.

628
01:15:11.970 --> 01:15:14.940
Ryan Mehta: Well, the structure, all of these things here.

629
01:15:22.170 --> 01:15:24.750
Ryan Mehta: Right. Our component inside of this

630
01:15:27.090 --> 01:15:28.230
Ryan Mehta: Space right there.

631
01:15:29.820 --> 01:15:34.950
Ryan Mehta: I'm gonna write a fragment. We're gonna have an input.

632
01:15:38.430 --> 01:15:48.180
Ryan Mehta: Type color will give it a name called BG color would give it a value of the G color.

633
01:15:49.650 --> 01:15:57.330
Ryan Mehta: And whenever you change this input we will invoke the on change function that's passed to us.

634
01:15:59.760 --> 01:16:02.370
Ryan Mehta: I'm also going to have a label for this thing.

635
01:16:03.510 --> 01:16:06.030
Ryan Mehta: Label HTML for

636
01:16:07.500 --> 01:16:08.160
Ryan Mehta: Color

637
01:16:12.810 --> 01:16:15.120
Ryan Mehta: And so we'll give this thing and ID also

638
01:16:19.470 --> 01:16:30.840
Ryan Mehta: Right. And then we just need to repeat this where other two inputs. So we have our background color. Let's make one for our for ground color.

639
01:16:33.030 --> 01:16:34.290
Ryan Mehta: F G color.

640
01:16:39.930 --> 01:16:42.660
Ryan Mehta: And these are all f g colors.

641
01:16:44.820 --> 01:16:48.930
Ryan Mehta: And then one final one for our text input.

642
01:16:52.110 --> 01:16:53.280
This will be

643
01:16:54.720 --> 01:16:58.680
Ryan Mehta: Next, and all of these big colors will turn to text.

644
01:17:01.140 --> 01:17:01.590
Ryan Mehta: All right.

645
01:17:02.760 --> 01:17:04.620
Ryan Mehta: Those controls make sense.

646
01:17:06.930 --> 01:17:13.290
Ryan Mehta: So we could display this in our app, and then snapshot test this one as well to make sure it all looks good.

647
01:17:14.550 --> 01:17:18.000
Ryan Mehta: But I'm pretty confident. I'm pretty confident and move forward.

648
01:17:19.980 --> 01:17:28.320
Ben Waples: Ah, just to, um, these channel for that connects to the input name right or is it the input ID.

649
01:17:28.530 --> 01:17:29.730
Ryan Mehta: I believe it's the ID.

650
01:17:30.090 --> 01:17:32.820
Ben Waples: Okay, and what do we use the name for them.

651
01:17:34.350 --> 01:17:39.660
Ryan Mehta: The name is what we're going to use when we do that like handle change.

652
01:17:40.080 --> 01:17:41.520
Ryan Mehta: With you. Oh, right, that name.

653
01:17:41.730 --> 01:17:43.050
Ben Waples: Okay, thank you.

654
01:17:46.650 --> 01:17:53.940
Ryan Mehta: Alright, so we have our controls. We have our display. We have both of our presentational components.

655
01:17:55.050 --> 01:18:06.570
Ryan Mehta: Now we can start working on our color picker container, whether we're using hooks or the old class based way we're always still going to have presentational components and containers.

656
01:18:08.070 --> 01:18:10.860
Ryan Mehta: So anything that holds state is that container still

657
01:18:12.720 --> 01:18:16.050
Ryan Mehta: So back in source. I am going to make a containers.

658
01:18:17.610 --> 01:18:29.760
Ryan Mehta: Directory and inside of containers. I'm going to make my color picker J SX file. I'm also going to make my color picker test got jazz X file.

659
01:18:31.020 --> 01:18:32.610
Ryan Mehta: Right. Both of these together.

660
01:18:35.760 --> 01:18:38.520
Ryan Mehta: Alright, we're going to import react.

661
01:18:40.800 --> 01:18:41.760
React

662
01:18:43.020 --> 01:18:50.490
Ryan Mehta: React over here, we are also going to import some stuff from

663
01:18:51.510 --> 01:18:54.780
Ryan Mehta: That test library, a little auto import those

664
01:18:57.000 --> 01:19:00.360
Ryan Mehta: You're going to describe our color picker container.

665
01:19:03.000 --> 01:19:14.790
Ryan Mehta: Alright first test that we wonder. Right. We want to make sure that when we change the background color here that it changes the background color in our display. Correct.

666
01:19:16.350 --> 01:19:22.500
Ryan Mehta: So let's write a test. It changes the background color.

667
01:19:27.120 --> 01:19:27.840
Ryan Mehta: Scheme. Okay.

668
01:19:29.400 --> 01:19:34.110
Ryan Mehta: First thing that we want to do. It's actually run these tests and see what happens.

669
01:19:46.320 --> 01:19:52.770
Ryan Mehta: All right, everything's good right now. First thing we want to do is render our color picker container.

670
01:19:55.770 --> 01:19:57.720
Ryan Mehta: This will first sure fail.

671
01:20:01.530 --> 01:20:04.080
Ryan Mehta: We also want to make sure we input this render

672
01:20:09.180 --> 01:20:10.680
Ryan Mehta: Comes from

673
01:20:15.510 --> 01:20:17.280
Ryan Mehta: Testing library react.

674
01:20:18.840 --> 01:20:31.380
Ryan Mehta: All right we fail, we actually can't import color picker yet because we haven't even started implementing it over here on the right hand side for a first pass on this implementation. I'm going to use the class based way.

675
01:20:32.580 --> 01:20:52.440
Ryan Mehta: So we can see and kind of remember how that whole flow went import react and component from react. We're going to export default class color picker expands component

676
01:20:54.660 --> 01:20:58.860
Ryan Mehta: Alright, so we have our little color picker, we need a render method.

677
01:21:00.600 --> 01:21:07.350
Ryan Mehta: Our color picker is going to render the controls.

678
01:21:10.260 --> 01:21:14.850
Ryan Mehta: Component, and it's also going to render the display component

679
01:21:16.170 --> 01:21:18.720
Ryan Mehta: Will put a fragment around these things.

680
01:21:20.190 --> 01:21:24.780
Ryan Mehta: And let me open up display so I can auto import it.

681
01:21:28.860 --> 01:21:34.920
Ryan Mehta: Alright, so our color picker will display these two things and we will import it. Now, on the right hand side.

682
01:21:38.550 --> 01:21:44.100
Ryan Mehta: Alright, we get our test passing tests, we have some warnings about not passing props correctly.

683
01:21:45.210 --> 01:21:56.910
Ryan Mehta: Which will handle in a little bit, but at least we have some passing stuff. Now, next thing to do. We want to grab the background color in so big input.

684
01:21:58.080 --> 01:22:00.210
Ryan Mehta: We get that with our

685
01:22:03.420 --> 01:22:06.540
Ryan Mehta: Screen. So we go to the screen.

686
01:22:07.560 --> 01:22:12.480
Ryan Mehta: Get by label text background.

687
01:22:15.810 --> 01:22:32.370
Ryan Mehta: Label text here is background color because if we look back at controls, we gave our background color label the text background color. So we're having our user looked at the screen. They find the background color label and then they fill in the input.

688
01:22:33.540 --> 01:22:35.640
Ryan Mehta: For also going to want to get the display.

689
01:22:37.560 --> 01:22:45.750
Ryan Mehta: There isn't a convenient way to get this display without adding a test ID. So we're going to add our test ID.

690
01:22:47.490 --> 01:22:48.810
Ryan Mehta: And we'll call it display.

691
01:22:51.030 --> 01:22:52.800
Ryan Mehta: And then we can get our display.

692
01:22:54.750 --> 01:23:02.490
Ryan Mehta: Test ID display. So this word here has to match up with our test ID over there on the right hand side.

693
01:23:04.740 --> 01:23:11.370
Ryan Mehta: And then we're going to fire an event. It's going to be a change event on the big input.

694
01:23:12.690 --> 01:23:18.510
Ryan Mehta: We're going to give it a target and that target is going to have a value of, let's say,

695
01:23:20.550 --> 01:23:20.910
Ryan Mehta: Read

696
01:23:23.610 --> 01:23:25.230
Ryan Mehta: Make this slightly smaller

697
01:23:27.570 --> 01:23:31.110
Ryan Mehta: After we change the background color to read

698
01:23:32.250 --> 01:23:35.340
Ryan Mehta: We're going to wait for

699
01:23:37.500 --> 01:23:44.460
Ryan Mehta: A re render after the re render happens we expect the display to

700
01:23:45.540 --> 01:23:46.380
Ryan Mehta: Dial

701
01:23:48.570 --> 01:23:49.290
Color

702
01:23:53.220 --> 01:23:53.520
Read

703
01:23:56.100 --> 01:23:58.650
Ryan Mehta: This should fail almost for sure.

704
01:24:05.820 --> 01:24:17.370
Ryan Mehta: Okay fails. We expected the background color to change to read and then never did. So what it's telling us makes sense, right, because we haven't put that up at all.

705
01:24:19.020 --> 01:24:34.230
Ryan Mehta: So right now the testers say render color picker, grab the background color and put grab the display change the background color input. So it's now read and then expect the display to have a background color of red

706
01:24:35.190 --> 01:24:35.640
Around

707
01:24:37.080 --> 01:24:46.380
Patrick Wilson: How would that change the test. If you had a button like if you had to change the color to read and then click like a submit button to change it.

708
01:24:47.040 --> 01:24:50.250
Ryan Mehta: You could fire a submit event.

709
01:24:52.800 --> 01:24:56.610
Ryan Mehta: So you'd fire submit also on your form.

710
01:24:58.470 --> 01:24:58.830
Okay.

711
01:25:05.460 --> 01:25:08.970
Ryan Mehta: We're actually I'm going to introduce at some point these user

712
01:25:10.590 --> 01:25:11.400
Events.

713
01:25:13.170 --> 01:25:20.220
Ryan Mehta: Library. I kind of want to do it today because it makes some of these like on change things super nice. Sorry for the side

714
01:25:21.690 --> 01:25:24.150
Ryan Mehta: But if you want to take a look at some of

715
01:25:25.860 --> 01:25:26.820
These things

716
01:25:28.140 --> 01:25:28.860
Are kind of cool.

717
01:25:30.660 --> 01:25:33.570
Ryan Mehta: All right. Sorry. So back over here.

718
01:25:35.040 --> 01:25:36.750
Ryan Mehta: This test makes sense for the most part.

719
01:25:39.090 --> 01:25:39.480
Ryan Mehta: All right.

720
01:25:39.600 --> 01:25:41.250
Ben Waples: Back in our color picker.

721
01:25:41.310 --> 01:25:43.410
Ryan Mehta: We need to make it so this passes.

722
01:25:43.650 --> 01:25:51.210
Ryan Mehta: First thing that we need to do is add some state for a background color will start off our background color as

723
01:25:53.070 --> 01:25:54.810
Ryan Mehta: Let's actually started background colors like

724
01:25:57.120 --> 01:26:00.000
Ryan Mehta: And then we'll pass background color to display.

725
01:26:01.710 --> 01:26:04.980
Ryan Mehta: The loss of pass background color to our controls.

726
01:26:13.500 --> 01:26:19.950
Ryan Mehta: So to get this background color variable right above our return. We're going to the structure

727
01:26:24.120 --> 01:26:27.600
Ryan Mehta: Background color off of state.

728
01:26:29.760 --> 01:26:30.360
Like so.

729
01:26:33.600 --> 01:26:36.390
Ron Yonker: Both controls and displaying background color.

730
01:26:37.560 --> 01:26:40.050
Ryan Mehta: Because both of them expect that as a prop.

731
01:26:40.560 --> 01:26:41.460
Oh,

732
01:26:42.540 --> 01:26:42.720
Ron Yonker: Yeah.

733
01:26:47.220 --> 01:26:57.450
Ryan Mehta: Because yeah, both of them actually display it right the display displays the background color as the actual background color the controls displays the background color as the value of the input.

734
01:27:01.320 --> 01:27:16.620
Ryan Mehta: And then we need to handle change function. So let's have a handle change function that these structures target off of the event and sets the big color to target value.

735
01:27:18.150 --> 01:27:23.640
Ryan Mehta: And then we'll pass this handle change function to our controls. So I'm going to put these on.

736
01:27:24.720 --> 01:27:28.230
Ryan Mehta: multiple lines will pass her on change.

737
01:27:30.330 --> 01:27:30.900
Change.

738
01:27:32.220 --> 01:27:36.330
Ryan Mehta: And that I think should get our test to pass.

739
01:27:39.420 --> 01:27:46.890
Ryan Mehta: Or test passes. So now when you change the background color, we're actually changing the background color.

740
01:27:49.440 --> 01:27:56.160
Ryan Mehta: Alright, let's do the same sort of thing for the foreground color. It changes for

741
01:28:00.390 --> 01:28:03.510
Ryan Mehta: The test is going to look almost the same. We're going to render

742
01:28:04.680 --> 01:28:06.630
Ryan Mehta: Our color picker.

743
01:28:09.060 --> 01:28:20.430
Ryan Mehta: This time we're going to get our foreground input by grabbing just like before by label text for ground.

744
01:28:22.530 --> 01:28:24.690
Ryan Mehta: Will also grab our display.

745
01:28:29.550 --> 01:28:29.910
Test.

746
01:28:33.960 --> 01:28:38.760
Ryan Mehta: We're gonna fire a change event on the foreground input.

747
01:28:39.540 --> 01:28:44.760
Ryan Mehta: Will give it a target with a value, let's say,

748
01:28:47.100 --> 01:28:47.610
Green.

749
01:28:50.670 --> 01:29:05.670
Ryan Mehta: And then we will wait for a re render after the re render. We expect the display to have a style where the color is now.

750
01:29:07.230 --> 01:29:07.530
Green.

751
01:29:10.170 --> 01:29:13.080
Ryan Mehta: Okay, so okay so very similar to the previous

752
01:29:13.080 --> 01:29:13.560
Ben Waples: Test.

753
01:29:13.800 --> 01:29:16.980
Ryan Mehta: we render a color picker, we get our foreground input and our

754
01:29:16.980 --> 01:29:17.730
Ryan Mehta: Display

755
01:29:18.150 --> 01:29:26.070
Ryan Mehta: We change our foreground input we wait for re render and we expect the display to have a foreground color of green now.

756
01:29:27.930 --> 01:29:29.070
Ben Waples: Tests on

757
01:29:29.130 --> 01:29:29.670
Online.

758
01:29:31.050 --> 01:29:38.460
Ben Waples: Um, what would it look like if we didn't do structure, it would it be event target value equals i.

759
01:29:39.180 --> 01:29:40.950
Ron Yonker: asked the same question.

760
01:29:43.050 --> 01:29:45.000
Ryan Mehta: This is a restructuring right here.

761
01:29:45.120 --> 01:29:49.320
Ryan Mehta: This is actually constructing our object. So this is the event itself.

762
01:29:51.780 --> 01:29:57.480
Ryan Mehta: We're actually making an object here so I could do something like cost event.

763
01:29:57.600 --> 01:29:58.500
Equals

764
01:30:00.630 --> 01:30:01.620
Ryan Mehta: Value.

765
01:30:08.130 --> 01:30:10.920
Ryan Mehta: And this now is

766
01:30:12.930 --> 01:30:20.220
Ben Waples: OK, so we're making it was like on the right side online 10 target. We're making that up on the left side.

767
01:30:20.850 --> 01:30:21.900
Ben Waples: Exactly, yep.

768
01:30:22.680 --> 01:30:23.580
Ben Waples: Cool. Thank you.

769
01:30:26.070 --> 01:30:32.760
Ryan Mehta: So we have our failing test. It's telling us that expected the color to change to green. But it never did.

770
01:30:34.530 --> 01:30:40.290
Ryan Mehta: So on the right hand side, we're going to add our foreground color.

771
01:30:41.790 --> 01:30:44.460
Ryan Mehta: Let's start off our foreground color as black

772
01:30:46.770 --> 01:30:51.690
Ryan Mehta: Will pass the foreground color to both our controls.

773
01:30:55.680 --> 01:31:01.350
Ryan Mehta: And our display put these on multiple lines now also

774
01:31:05.460 --> 01:31:08.220
Ryan Mehta: So both of them get that same foreground color.

775
01:31:09.720 --> 01:31:21.120
Ryan Mehta: And then let's change your handle change a little bit so that way instead of only changing the background color we now change the background color or the foreground color. We could have an if

776
01:31:21.630 --> 01:31:33.090
Ryan Mehta: Else if type of thing here, but we conveniently made it so the names of our inputs are the same as the names of our state.

777
01:31:34.230 --> 01:31:44.640
Ryan Mehta: So over here on my, we c> 00:39:21.930
Brooke Perkins (she/her): Articles is going to grab articles. Do I, I don't know what else to say about that part.

459
00:39:22.800 --> 00:39:24.990
Ryan Mehta: Yeah, I think that's great. Okay.

460
00:39:25.950 --> 00:39:29.010
Ryan Mehta: Great. Anything you would change about these lines.

461
00:39:29.640 --> 00:39:37.350
Brooke Perkins (she/her): Um, it bothers me that there's all of those things just in the same indentation at the bottom 46 or 48

462
00:39:38.490 --> 00:39:43.140
Brooke Perkins (she/her): But that's it. I don't know if that's correct, or I feel like they should be like

463
00:39:45.660 --> 00:39:45.900
Brooke Perkins (she/her): Oh,

464
00:39:47.070 --> 00:39:50.370
Brooke Perkins (she/her): But that's, that's, I mean it looks good to me.

465
00:39:53.520 --> 00:39:56.820
Brooke Perkins (she/her): Yeah. Yeah, no, I wouldn't change anything actually

466
00:39:57.510 --> 00:40:08.250
Ryan Mehta: Yeah, I kind of agree with you. I think this render should be indented one level, which means that all of this stuff here should be invented. One more.

467
00:40:10.620 --> 00:40:12.720
Ryan Mehta: And then the div.

468
00:40:13.770 --> 00:40:14.070
Ryan Mehta: Yeah.

469
00:40:16.410 --> 00:40:20.130
Brooke Perkins (she/her): That looks good. I think you can highly all of it and just do tab.

470
00:40:20.430 --> 00:40:21.810
Greg Mall: Okay, thank you.

471
00:40:22.290 --> 00:40:26.850
Jerud Moyer: Is it conventional to use a sink and promise chained together like that.

472
00:40:30.450 --> 00:40:31.740
Brooke Perkins (she/her): Oh, good question.

473
00:40:32.880 --> 00:40:44.640
Ryan Mehta: Let's fix this white space really quick first and then Jared, you can walk us through that. Let's in depth, this did a little bit more. So it should be indented past the return because it's nested into that return

474
00:40:46.530 --> 00:40:54.480
Ryan Mehta: One more time. Yep. And then yep that matches this thing should match up with that thing.

475
00:40:56.760 --> 00:41:02.040
Ryan Mehta: So this should go in with the return right there and then this one should come out one

476
00:41:03.330 --> 00:41:08.280
Ryan Mehta: Sorry, I know the the annotations lag. So when I say this one and then like annotated

477
00:41:09.360 --> 00:41:12.420
Ryan Mehta: Doesn't help, but you have 47 should be invented one

478
00:41:13.530 --> 00:41:15.660
Ryan Mehta: And you have an extra space right there.

479
00:41:18.480 --> 00:41:21.420
Ryan Mehta: On top 46 Yep, looks great.

480
00:41:21.960 --> 00:41:22.680
Gorgeous.

481
00:41:24.060 --> 00:41:27.750
Ryan Mehta: So, Jared. Tell us about this a sink and promise chain stuff but

482
00:41:27.750 --> 00:41:32.580
Jerud Moyer: We just, I'm just curious. I mean, not the authority because my stupid app doesn't even work so

483
00:41:34.200 --> 00:41:46.320
Jerud Moyer: However, I thought that a sink await and promise joining we're sort of alternatives to each other. So here he's online 80s got it set as amazing function but Benny's

484
00:41:47.220 --> 00:41:56.010
Jerud Moyer: Dot venting or promise changing off of it on 22 and 23 so I would think you can either get rid of the a sink or you can await what you're spending.

485
00:41:58.860 --> 00:42:03.870
Greg Mall: Your right yeah I think I've built that thinking a sink and then just end up it

486
00:42:05.100 --> 00:42:05.430
Greg Mall: Still

487
00:42:06.900 --> 00:42:07.800
Greg Mall: Works so

488
00:42:08.010 --> 00:42:08.670
Jerud Moyer: Yeah, we're

489
00:42:09.210 --> 00:42:09.960
Ron Yonker: Kind of at least

490
00:42:10.380 --> 00:42:10.950
One.

491
00:42:12.450 --> 00:42:13.080
Greg Mall: still works.

492
00:42:13.110 --> 00:42:16.860
Ron Yonker: Kind of two are related things that kind of made me want to scream.

493
00:42:19.230 --> 00:42:19.500
Greg Mall: Okay.

494
00:42:21.330 --> 00:42:32.700
Ron Yonker: Um, why are you setting state initially loading to false then as soon as you handle submit sending it to true.

495
00:42:33.150 --> 00:42:35.550
Ron Yonker: Then at the end, setting up to false again.

496
00:42:36.090 --> 00:42:38.370
Greg Mall: Because this is when I wanted to load.

497
00:42:40.890 --> 00:42:43.650
Greg Mall: Different because when a and then while it's

498
00:42:44.910 --> 00:42:49.950
Greg Mall: Setting state or grabbing this I wanted to be hitting the load screen.

499
00:42:53.310 --> 00:42:56.940
Greg Mall: Down here. So if it's loading it shows alone screen.

500
00:42:57.990 --> 00:43:11.670
Greg Mall: So if loading it goes. True. Then we show that cool little graphic and then as soon as it completes this fetch, then it sets the boss. Well, after two seconds.

501
00:43:12.810 --> 00:43:15.540
Greg Mall: And then it says back to false. And then it continues down to hear

502
00:43:17.160 --> 00:43:38.610
Ron Yonker: The rest. I understand that. Just to my sensibility not saying that what you did is wrong to my sensibility, I would for to that same piece of steak less and I would probably just handle all of that in something like a component didn't mount rather than manually flipping back and forth.

503
00:43:39.150 --> 00:43:47.010
Greg Mall: I pretty much on this was going just following the demo yesterday. Ryan did it and

504
00:43:48.420 --> 00:43:51.600
Greg Mall: So that's kind of the way I approached it. But yeah, you're right.

505
00:43:52.830 --> 00:44:02.010
Patrick Wilson: You wouldn't want it to be loading when you before you search, right, like you only want it to be loading. After you click the button before the results come back.

506
00:44:02.280 --> 00:44:04.350
Patrick Wilson: Right, so I did it the same way.

507
00:44:06.000 --> 00:44:06.780
Patrick Wilson: That you did, Greg.

508
00:44:11.040 --> 00:44:13.470
Patrick Wilson: Because it just waiting for that button click to happen.

509
00:44:17.010 --> 00:44:20.940
Jerud Moyer: Right. Or else you got the loading screen going like when you have your controls. Oh.

510
00:44:21.330 --> 00:44:22.860
Patrick Wilson: Yeah, before you even search

511
00:44:24.600 --> 00:44:28.230
Ron Yonker: Well, if you submit that should trigger a re render

512
00:44:29.490 --> 00:44:33.360
Ron Yonker: The component gets remelted it's kind of what I'm thinking.

513
00:44:35.610 --> 00:44:41.790
Ron Yonker: So to me, like if you stuck that in a component of mouth sort of thing.

514
00:44:42.750 --> 00:45:03.660
Ron Yonker: A lot of that feels like it's unnecessary and whenever you first load the component, if it's still loading than you display your arm loading icon. If you hit the submit button, it's going to trigger a render and you see the loading icon.

515
00:45:04.950 --> 00:45:20.160
Ron Yonker: And if you need to put a set timeout, then you can do that. But also, like in that same sort of component did now. So whenever there's some sort of re render you let that handle rather than manually flipping it, but at this point I think I'm splitting hairs.

516
00:45:22.800 --> 00:45:31.830
Ryan Mehta: Yeah, by the way, the component did mount only happens once when the component first gets drawn it doesn't get redraw it doesn't get remounted when you press the submit button.

517
00:45:37.470 --> 00:45:39.870
Ryan Mehta: There's a component did update that would get

518
00:45:41.160 --> 00:45:47.880
Ryan Mehta: Called not when you press the submit button. But every time you do a set state. So you might be able to do something with that.

519
00:45:49.290 --> 00:45:56.760
Ryan Mehta: But it'd be hard to figure out the exact logic with that because the component did update will could get triggered when you update the text also

520
00:45:58.500 --> 00:46:03.390
Ryan Mehta: So you don't know if you're updating the text or if you're clicking the button when you're in the component did update

521
00:46:08.340 --> 00:46:15.480
Ryan Mehta: All right, one little thing for me. I think this set timeout should be proceeded with an arrow.

522
00:46:18.870 --> 00:46:33.750
Ryan Mehta: It works either way, but it's a slight little bug because you're starting to set timeout, not after the articles finish retrieving, but when you first run the handle submit function as it is.

523
00:46:34.170 --> 00:46:45.990
Ryan Mehta: So if it takes five seconds to fetch the articles, you're going to go out of the loading state in two seconds and you're still be fetching your articles. So it's possible that you haven't finished.

524
00:46:47.190 --> 00:46:48.960
Ryan Mehta: So it's like parentheses arrow.

525
00:46:50.880 --> 00:46:51.150
Right.

526
00:46:54.090 --> 00:46:55.260
Greg Mall: Oops, what I do.

527
00:46:56.190 --> 00:47:01.860
Ryan Mehta: Those parentheses should go in. Yep, a closing one and then spaces, probably around the arrow.

528
00:47:04.710 --> 00:47:07.530
Ryan Mehta: So you've gotten lucky. Up until this point because

529
00:47:08.610 --> 00:47:15.450
Ryan Mehta: It's the API is faster than two seconds. But if the API was slower than two seconds you're loading screen would have come off.

530
00:47:15.960 --> 00:47:25.980
Ryan Mehta: Before you've actually finished fetching your articles. Now it's saying fetch the articles and then two seconds after finished fetching the articles take off the loading screen.

531
00:47:26.970 --> 00:47:27.480
Oh,

532
00:47:28.500 --> 00:47:29.280
Greg Mall: Okay, cool.

533
00:47:32.760 --> 00:47:34.110
Ryan Mehta: All right. Looks great.

534
00:47:35.040 --> 00:47:39.690
Michelle Stermitz: Sorry, I have a question. Um, Greg, do you mind showing your loading component

535
00:47:39.750 --> 00:47:42.930
Greg Mall: I'm just curious. It's fascinating.

536
00:47:44.700 --> 00:47:47.370
Michelle Stermitz: Okay, so you're just sourcing to that URL.

537
00:47:47.670 --> 00:47:51.720
Greg Mall: Yeah, that's, that's kind of how I did it. You just plain old fashioned

538
00:47:53.430 --> 00:47:54.300
Greg Mall: image source.

539
00:47:55.800 --> 00:48:01.080
Michelle Stermitz: Um, but, Ryan, it would be possible to use an asset here, right.

540
00:48:02.730 --> 00:48:04.230
Ryan Mehta: Totally, yeah. Okay.

541
00:48:05.580 --> 00:48:06.030
Thanks, Greg.

542
00:48:10.890 --> 00:48:13.530
Thomas Stussi: But did you write a test file for your loading screen.

543
00:48:13.860 --> 00:48:20.430
Greg Mall: I didn't, I didn't. So that's something I'm gonna have to work on over the weekend probably put some hours into that one.

544
00:48:21.480 --> 00:48:23.370
Thomas Stussi: I definitely. I mean, very important.

545
00:48:24.300 --> 00:48:31.020
Greg Mall: I didn't do the test for this either. And I know that something's important so I I was planning on doing it this morning but

546
00:48:32.160 --> 00:48:35.460
Greg Mall: I had to get some return in that was passing CI so

547
00:48:36.810 --> 00:48:41.220
Greg Mall: I did that. And I'm going to work on this probably Fridays, we can at least finish it.

548
00:48:45.930 --> 00:48:47.100
Ryan Mehta: Cool. Nice job.

549
00:48:48.360 --> 00:48:58.890
Ryan Mehta: We're going to take a break for about 10 minutes and then we'll come back and write a little bit of code together at 11 o'clock. We're going to do that build

550
00:49:00.510 --> 00:49:08.010
Ryan Mehta: Where you all will make a name tag and react and you'll have an hour to do it. We'll just do that in this ring together, and then

551
00:49:09.390 --> 00:49:13.830
Ryan Mehta: Lots of talk about the lab at some point in the next hour before we start to build probably

552
00:49:15.000 --> 00:49:25.680
Ryan Mehta: Let's take a break. Let's come back at 1005 and get back together. Thanks for sharing your code, Greg. By the way, and thanks for everyone, with all the critiques. Nice job.

553
00:49:26.160 --> 00:49:28.320
Greg Mall: Nice job, Greg. Thank you.

554
00:49:28.710 --> 00:49:29.310
Sarah Rector: Good job.

555
00:49:32.100 --> 00:49:39.840
Ryan Mehta: Um, so we can cover whatever we want today based on the lab, whatever you all want to. I'll put out a straw poll and just a bit.

556
00:49:43.110 --> 00:49:47.430
Ryan Mehta: Alright, the lab today we are making this thing called touristy

557
00:49:48.720 --> 00:49:51.510
Ryan Mehta: Which is a post man clone.

558
00:49:52.980 --> 00:49:59.460
Ryan Mehta: So you're going to make an A react application that looks that behaves and looks a bit like post, man.

559
00:50:01.770 --> 00:50:05.070
Ryan Mehta: Here is an example one

560
00:50:07.140 --> 00:50:09.420
Ryan Mehta: Actually me a better example.

561
00:50:28.620 --> 00:50:30.420
Ryan Mehta: Tell us where we deployed this thing.

562
00:50:34.140 --> 00:50:36.540
Thomas Stussi: Isn't it in the about section Breslow style.

563
00:50:37.830 --> 00:50:40.980
Ryan Mehta: Thank you, your genius. Okay.

564
00:50:43.980 --> 00:50:54.000
Ryan Mehta: Here is an example. Once you should be able to like paste a URL here select the method that you want to

565
00:50:55.560 --> 00:50:57.300
Ryan Mehta: Fetch with and then

566
00:50:58.770 --> 00:51:03.450
Ryan Mehta: Click on the go button and get your results.

567
00:51:06.420 --> 00:51:17.850
Ryan Mehta: Like so. So behave. Sort of like post Amanda's right you type in your URL you pick your method you press go and then you see your results down below.

568
00:51:19.050 --> 00:51:28.290
Ryan Mehta: On the left hand side is a history of the requests that you've made. So if I do request to a different API, like let's say Rick and Morty.

569
00:51:29.730 --> 00:51:30.660
Ryan Mehta: Character.

570
00:51:32.070 --> 00:51:38.850
Ryan Mehta: And put that here. It'll add that to my history over on the left hand side.

571
00:51:40.830 --> 00:51:43.020
Ryan Mehta: And then, yeah, that's pretty much it.

572
00:51:44.610 --> 00:51:48.540
Ryan Mehta: Seem. Okay, does that goal. Makes sense the app makes sense.

573
00:51:49.800 --> 00:51:56.580
Ryan Mehta: I think it's a super cool application. It looks so so impressive. I think in some ways.

574
00:51:58.290 --> 00:52:02.910
Ryan Mehta: And because it's kind of a tool that you all have been using up until now, it seems super cool.

575
00:52:07.320 --> 00:52:10.080
Ryan Mehta: Yeah. Anybody super worried about this type of application.

576
00:52:13.230 --> 00:52:13.650
Ron Yonker: Um,

577
00:52:13.710 --> 00:52:15.240
Jerud Moyer: Yes, yeah.

578
00:52:18.180 --> 00:52:35.250
Ryan Mehta: Yeah, it's kind of a crazy application, but it turns out to be all stuff that you've done before. It's super impressive looking because you and it's kind of hard to disassociate because you've used this sort of tool so much. You don't realize like the little components that go into it.

579
00:52:36.270 --> 00:52:38.580
Ryan Mehta: But what you really have is a form

580
00:52:40.470 --> 00:52:53.190
Ryan Mehta: Right, like the controls that we've had with a text input some radio buttons and a text area when you type into this. It said some piece of state right a URL piece of state.

581
00:52:53.910 --> 00:53:03.360
Ryan Mehta: A method piece of state and a body piece of state when you submit it makes effects request, just like you did with the news API.

582
00:53:07.380 --> 00:53:15.300
Ryan Mehta: So you click here and makes effects request, just like the news API, you get a response back like a list of articles or whatever.

583
00:53:16.410 --> 00:53:20.310
Ryan Mehta: And you display the JSON down here at the bottom.

584
00:53:21.690 --> 00:53:23.250
Ryan Mehta: So you have controls.

585
00:53:24.990 --> 00:53:26.490
Ryan Mehta: You have display.

586
00:53:31.200 --> 00:53:40.260
Ryan Mehta: You don't have to worry about this like nice looking display view you can just like print out the JSON, if you want to. This is a library right here.

587
00:53:40.800 --> 00:53:52.680
Ryan Mehta: That Jacobtussi: So for us, the Alchemy bootstrap we're probably going to need to do that.

133
00:15:39.540 --> 00:15:41.070
Ryan Mehta: I just fixed alchemy bootstrap

134
00:15:41.070 --> 00:15:41.460
Ryan Mehta: Oh, so

135
00:15:41.730 --> 00:15:42.060
Sweet.

136
00:15:44.880 --> 00:15:52.530
Ryan Mehta: So now we have our little Hello World app. It's perfect just the way it is.

137
00:15:56.940 --> 00:16:05.040
Ryan Mehta: Okay, so we have here is that app JS component hello world if we change this to hello everyone.

138
00:16:06.540 --> 00:16:10.560
Ryan Mehta: It should re compile and we should see hello everyone there instead

139
00:16:11.850 --> 00:16:12.510
Ryan Mehta: Sense.

140
00:16:15.270 --> 00:16:17.340
Ryan Mehta: There's also a snapshot test here.

141
00:16:19.290 --> 00:16:29.010
Ryan Mehta: So there is a test file that snapshot tests this component. Have you all been snapshot tests and foundations.

142
00:16:29.190 --> 00:16:35.400
Annalise Murphy: And we touched on it, like, very briefly, like once and I think Danny just use it as an example and said,

143
00:16:36.810 --> 00:16:39.660
This other thing right now so cool.

144
00:16:41.280 --> 00:16:45.120
Ryan Mehta: So the history of snapshot test these come from mobile development.

145
00:16:46.170 --> 00:16:58.110
Ryan Mehta: Um, they're called a snapshot because people used to take screenshots of their mobile UI eyes and make sure that made sure that the screenshots matched over time. So as you added more code.

146
00:16:58.770 --> 00:17:04.110
Ryan Mehta: The screenshots would continue to match. If you didn't break anything we're doing the same sort of thing.

147
00:17:05.580 --> 00:17:07.500
Ryan Mehta: we render our application.

148
00:17:08.760 --> 00:17:21.330
Ryan Mehta: And then we expect that the fragment of our application matches the previous snapshot. So we just changed the text from hello world to hello everyone. So now our test fails.

149
00:17:22.530 --> 00:17:36.960
Ryan Mehta: It says that in our snapshot. It said hello world, but our text now says hello everyone. You can actually take a look at the snapshot that just creates over here in this snapshots directory this automatically gets created for us.

150
00:sometimes you'll console log a promise on accident and you'll see something like

267
00:45:52.650 --> 00:45:55.500
Ryan Mehta: Anybody. I'm sure a bunch of you have done this already.

268
00:45:56.580 --> 00:46:00.090
Ryan Mehta: You'll see something like promise.

269
00:46:04.320 --> 00:46:04.980
Pending

270
00:46:06.840 --> 00:46:15.990
Ryan Mehta: Um, if you ever console log a value and you see something like this, it's because you need to either dot then after the thing your console logging or you need to await it

271
00:46:17.640 --> 00:46:22.590
Ryan Mehta: And that will give you this pending value, the actual value of the promise.

272
00:46:24.480 --> 00:46:27.090
Ryan Mehta: And have you all seen this sort of thing before.

273
00:46:29.520 --> 00:46:32.970
Ryan Mehta: Yeah, that's a clear indicator that you need to await something

274
00:46:34.530 --> 00:46:40.410
Ryan Mehta: If you try to send a promise over HTTP like as a

275
00:46:44.550 --> 00:46:54.030
Ryan Mehta: As an express response. So let's say like we have a promise that we raise dot send

276
00:46:58.860 --> 00:47:06.180
Ryan Mehta: We don't got them off of off of this and we don't await it on the other side, you're going to see an empty object.

277
00:47:07.590 --> 00:47:14.490
Ryan Mehta: So that's another indicator that the thing that you sent was a promise. If you get an empty object on the other side.

278
00:47:15.630 --> 00:47:17.070
I can test for example.

279
00:47:20.340 --> 00:47:30.630
Ryan Mehta: It doesn't make it really hard to figure out sometimes because you see an empty object and you wonder why you didn't get your data. It just turns out that you didn't wait for your data to resolve.

280
00:47:31.800 --> 00:47:33.060
Ryan Mehta: It. That's what's going on there.

281
00:47:42.900 --> 00:47:51.270
Ryan Mehta: All right. There are a few instance methods on promises. There is then so you can always then off of a promise.

282
00:47:52.350 --> 00:47:57.900
Ryan Mehta: This is why promises are sometimes called Venables because all promise have a then instance method.

283
00:48:01.230 --> 00:48:03.240
Ryan Mehta: The promise.

284
00:48:05.010 --> 00:48:06.540
So on this.

285
00:48:09.420 --> 00:48:09.900
Then

286
00:48:11.160 --> 00:48:18.660
Ryan Mehta: The then method takes a callback function, the place after then with the fulfilled.

287
00:48:21.360 --> 00:48:21.960
Ryan Mehta: Value.

288
00:48:25.590 --> 00:48:30.600
Ryan Mehta: So this callback function gets the fulfilled VALUE WHATEVER THE PROMISE promise to return.

289
00:48:34.650 --> 00:48:40.470
Ryan Mehta: It also take has a catch method. So you can always got catch

290
00:48:42.480 --> 00:48:48.060
Ryan Mehta: Up a promise, and this will get the error or the reason for the failure.

291
00:48:50.220 --> 00:49:01.770
Ryan Mehta: So the fulfilled value with the promise moves to the fulfilled state and the error reason. The reason for failure if the promise moves to the rejected state.

292
00:49:02.910 --> 00:49:05.250
Ryan Mehta: For this is when it moves to full

293
00:49:06.630 --> 00:49:11.730
Ryan Mehta: Filled and this is what it moves to the check.

294
00:49:21.450 --> 00:49:28.980
Ryan Mehta: And there's also a finally finally gets invoked. So I need to redraw this I forgot about finally

295
00:49:30.300 --> 00:49:31.320
Promise.

296
00:49:32.520 --> 00:49:33.540
God and

297
00:49:35.100 --> 00:49:35.820
Catch

298
00:49:38.430 --> 00:49:40.110
Ryan Mehta: And a dot finally

299
00:49:41.310 --> 00:49:47.160
Ryan Mehta: Finally, also takes a callback function this callback function is invoked.

300
00:49:48.690 --> 00:49:54.360
Ryan Mehta: Whenever the promise finishes. So whether it moves to the fulfilled state or the rejected state.

301
00:49:56.940 --> 00:50:02.340
Ryan Mehta: So if you need to do something, regardless of if the promise fulfilled or rejected.

302
00:50:04.800 --> 00:50:09.090
Ryan Mehta: You do it and I finally this is really good for closing database connections.

303
00:50:11.070 --> 00:50:15.450
Ryan Mehta: So fulfilled rejected fulfilled or rejected.

304
00:50:23.100 --> 00:50:35.820
Ryan Mehta: There are a few static methods on the promise class also the main one that we use is this promise saw all I'm sure you all have had some experience with this thing.

305
00:50:36.840 --> 00:50:40.650
Ryan Mehta: It takes an array of promises. So promised all

306
00:50:46.440 --> 00:50:50.220
Ryan Mehta: takes an array of promises.

307
00:50:58.710 --> 00:50:59.160
Right.

308
00:51:00.360 --> 00:51:06.120
Ryan Mehta: And it returns a promise. So this thing actually gives us back a promise that we can then off of

309
00:51:08.580 --> 00:51:15.060
Ryan Mehta: This promise resolves when each one of these promises in the array results.

310
00:51:16.140 --> 00:51:19.980
Ryan Mehta: If any promise in the array rejects it goes to the catch.

311
00:51:21.330 --> 00:51:22.680
Ryan Mehta: If all of them resolve.

312
00:51:23.160 --> 00:51:26.670
Ron Yonker: Should be only used and really specific that you

313
00:51:28.980 --> 00:51:31.770
Ryan Mehta: Like for example, if you wanted to get the

314
00:51:32.010 --> 00:51:35.820
Ryan Mehta: All the pages of a website, for example, yeah.

315
00:51:39.930 --> 00:51:43.860
Ryan Mehta: This resolves with the fulfilled value of promise, one

316
00:51:47.970 --> 00:51:50.460
Ryan Mehta: One fulfilled.

317
00:51:53.070 --> 00:51:56.460
Ryan Mehta: Two etc in an array.

318
00:51:59.760 --> 00:52:08.310
Ryan Mehta: So each one of these promises fulfilled values ends up in an array in this doc that they have access to all of the fulfilled values.

319
00:52:09.420 --> 00:52:11.610
Ryan Mehta: Of each promise and they are reading from above.

320
00:52:13.680 --> 00:52:26.910
Ryan Mehta: So it's all promises fulfill than the unfulfilled callback. The dot then is passing array, where each item is a fulfilled value from the fulfilled promises passed to the promise. All in order

321
00:52:27.510 --> 00:52:30.000
Ryan Mehta: That's very wordy. You just get

322
00:52:31.500 --> 00:52:33.060
Ryan Mehta: I don't know how better to say that though.

323
00:52:34.980 --> 00:52:44.250
Ryan Mehta: So they're in the these fulfilled values here are in the same order as the promises that you passed along up in this original array.

324
00:52:47.460 --> 00:52:48.180
Ryan Mehta: seem okay

325
00:52:55.020 --> 00:52:58.050
Ryan Mehta: There's a few other like brand new.

326
00:53:01.920 --> 00:53:08.160
Ryan Mehta: static methods that you can use. There's this thing called all settled. Now also, in addition to all

327
00:53:10.830 --> 00:53:13.710
Ryan Mehta: Which I'll let you all take a look at because I haven't really used it.

328
00:53:14.730 --> 00:53:16.980
Ryan Mehta: I can't really think of a good use case for it.

329
00:53:18.210 --> 00:53:29.910
Ryan Mehta: But the main difference is instead of going to the catch. If any of the promises reject that all settled always goes to the den whether or not one of these promises rejects or not.

330
00:53:36.360 --> 00:53:39.930
Ryan Mehta: So let's look at some code for a promise all

331
00:53:43.290 --> 00:53:51.630
Ryan Mehta: So if we have one promise in this array fulfilled value sub zero gives us the fulfilled value for promise one

332
00:53:52.650 --> 00:54:04.140
Ryan Mehta: If we add another promise to this array fulfilled value sub one gives us a fulfilled value from promise to so they're always in order sub zero is always

333
00:54:04.890 --> 00:54:17.370
Ryan Mehta: The first item. The fulfill value from the first item sub one is always a second item and sub two gives us if a build value for the third item in disarray.

334
00:54:19.380 --> 00:54:24.540
Ryan Mehta: Oftentimes, what you'll see is we will be structure this array like so.

335
00:54:26.400 --> 00:54:31.380
Ryan Mehta: So the structure that array, the same array that we had over here.

336
00:54:34.080 --> 00:54:37.500
Ryan Mehta: And now D structuring that array taking fulfilled one

337
00:54:38.670 --> 00:54:39.630
Ryan Mehta: Fulfilled to

338
00:54:41.010 --> 00:54:42.120
Ryan Mehta: Unfulfilled three

339
00:54:50.400 --> 00:54:51.060
Ryan Mehta: This makes sense.

340
00:54:51.090 --> 00:54:54.480
Ron Yonker: To wait, I'm sorry, what's happening there. What's the difference between the two again.

341
00:54:55.350 --> 00:54:57.600
Ryan Mehta: For the same just different syntax, so

342
00:54:59.190 --> 00:55:19.860
Ryan Mehta: This is an array of items right the three fulfilled values from the three promises. Mm hmm. You could use this sub syntax to get this the bracket notation syntax or you can de structure the array and get the first item second item and third item.

343
00:55:20.970 --> 00:55:26.640
Ryan Mehta: This is just using the structuring instead of using the bracket notation. Come over here.

344
00:55:30.030 --> 00:55:40.410
Ben Waples: And then the destruction example we can call those parameters anything like you can, yeah have fulfilled value one there for the right

345
00:55:40.890 --> 00:55:43.500
Ryan Mehta: Yeah, this could be like apple, banana pair.

346
00:55:45.900 --> 00:55:56.460
Ron Yonker: So is that what d structuring is doing for us it's giving us item names, rather than having to refer to the index of the parent

347
00:55:57.720 --> 00:56:09.600
Ryan Mehta: Yep. So instead of having to do like fulfilled values zero here, we're taking this thing and restructuring it on line one and the naming them, giving them.

348
00:56:18.420 --> 00:56:20.100
Ryan Mehta: All right, see him. Okay, everyone.

349
00:56:26.100 --> 00:56:29.580
Ryan Mehta: So side by side using subs and restructuring.

350
00:56:32.490 --> 00:56:43.890
Ryan Mehta: Promise one on the left hand side, we are using the bracket notation to grab the first fulfilled value and setting it to a variable called fulfilled one

351
00:56:44.700 --> 00:56:57.600
Ryan Mehta: On the right hand side. We're restructuring theory ray and setting fulfilled one here. So fulfilled one matches promise one fulfilled value sub zero is from promise one

352
00:56:58.740 --> 00:57:07.230
Ryan Mehta: We add a second promise to it. We can create fulfilled to by sending an equal to fulfilled values sub one.

353
00:57:08.280 --> 00:57:17.820
Ryan Mehta: Or we can D structure and take the second item fulfilled, to which is the fulfilled value of promise to

354
00:57:18.960 --> 00:57:26.700
Ryan Mehta: We add a third promise we can add another concept with fulfilled values sub two, or we can D structure.

355
00:57:27.870 --> 00:57:36.060
Ryan Mehta: As on the right hand side. So, these two things are now equivalent. This is just a little bit more concise than the one on the left hand side.

356
00:57:38.190 --> 00:57:41.430
Ben Waples: When we do structure is always going to be cons, or would it be like, but

357
00:57:44.460 --> 00:57:47.100
Ryan Mehta: You could do either. You can have it as either

358
00:57:48.270 --> 00:57:49.230
Ben Waples: Let's our costs.

359
00:57:49.320 --> 00:57:50.670
Ryan Mehta: In this case it's neither

360
00:57:50.700 --> 00:57:51.360
It's, um,

361
00:57:52.860 --> 00:57:59.850
Ryan Mehta: It depends on what this array is in this. It's really more like a let right now this function, the structure

362
00:58:00.960 --> 00:58:01.650
Ben Waples: All right. Thank you.

363
00:58:10.740 --> 00:58:11.130
All right.

364
00:58:12.900 --> 00:58:16.290
Ryan Mehta: The scene, see the similarities between these two.

365
00:58:20.520 --> 00:58:31.080
Ryan Mehta: All right. One other big thing promise chains versus a sink away. We're going to run through a problem we've actually seen this problem once before. I think maybe on day one or two of career track.

366
00:58:32.400 --> 00:58:37.680
Ryan Mehta: We're going to fetch X file character names using the X Files API.

367
00:58:38.880 --> 00:58:49.440
Ryan Mehta: We want to get an array of character names. So this is what the X Files API returns it returns that object with the quantity and the array of results.

368
00:58:50.520 --> 00:59:00.390
Ryan Mehta: So one character. I only put this single character here because I think I got lazy. But in this case, there should be three characters in the array.

369
00:59:04.020 --> 00:59:05.070
That's what it looks like.

370
00:59:06.090 --> 00:59:16.710
Ryan Mehta: So quantity results, which is an array of characters each result is an object with a name a gender status occupation cetera

371
00:59:20.100 --> 00:59:28.590
Ryan Mehta: So we want to create two functions that do the same thing. In both cases, they're going to fetch an array of characters.

372
00:59:30.600 --> 00:59:35.820
Ryan Mehta: In the middle here. We're going to do a promise chain. And on the right, we're going to use a sink await

373
00:59:37.320 --> 00:59:41.520
Ryan Mehta: So, in both cases, we're going to fetch from our X Files URL.

374
00:59:43.800 --> 00:59:59.070
Ryan Mehta: With the promise chain. We're going to dot then off effects and get the response with a wait we're going to await the fetch and get the same response. So they're just alternative syntax is that they do the exact same thing.

375
01:00:01.290 --> 01:00:08.250
Ryan Mehta: When you await a fetch the left hand side of the equal is the fulfill the value of the promise.

376
01:00:09.690 --> 01:00:16.890
Ryan Mehta: When you dot then off of fetch the fulfilled value is passed to this call back that you pass dot then

377
01:00:18.090 --> 01:00:28.530
Ryan Mehta: You can only await things that can be dot bend and you can only dot then things that can be awaited you can only do these things to promises. So on both sides, we have a promise.

378
01:00:30.630 --> 01:00:33.000
Ryan Mehta: Which is different ways of handling promises.

379
01:00:35.790 --> 01:00:39.780
Ron Yonker: You repeat that, please. The you can only dot them things of what what what

380
01:00:40.470 --> 01:00:45.900
Ryan Mehta: You can only dot then off of things that can be a weighted and you can only await things that can be done.

381
01:00:46.950 --> 01:00:47.880
Okay, thank you.

382
01:00:51.000 --> 01:00:59.460
Ryan Mehta: Next thing that we're going to do is get the JSON result. So red dot JSON returns the JSON from the response.

383
01:01:00.900 --> 01:01:07.530
Ryan Mehta: Um, red dot JSON returns a promise, so we can't deal with this JSON right away. We have to return it.

384
01:01:08.550 --> 01:01:19.080
Ryan Mehta: When you ever whenever you return a promise inside of a promise chain inside of adventure. The resolve the value or the fulfilled value gets passed to the next dot then

385
01:01:20.640 --> 01:01:32.280
Ryan Mehta: On the right hand side we await red dot JSON, the left hand part of this await gives us the result of that dot JSON. The result of that promise.

386
01:01:33.390 --> 01:01:38.430
Ryan Mehta: So we await it here on the left hand side you'll see we dot then

387
01:01:39.750 --> 01:01:49.980
Ryan Mehta: R dot then gets the fulfilled value of the previous dot then whatever the previous dot then returned gets passed to the next dot then

388
01:01:51.120 --> 01:01:58.980
Ryan Mehta: So we have our JSON here and then we manipulate the JSON to get each character's name. Same thing on the right hand side.

389
01:01:59.490 --> 01:02:11.760
Ryan Mehta: We get the JSON that we received from awaiting red dot JSON and then we manipulate that JSON to get each character's name and return our list of characters character names.

390
01:02:13.560 --> 01:02:25.770
Ryan Mehta: On both of these functions do the exact same thing on the right hand side you'll notice returning character names on the left hand side, we're returning this promise chain.

391
01:02:27.180 --> 01:02:31.680
Ryan Mehta: In eith
01:22:08.820 --> 01:22:09.330
Yeah, exactly.

695
01:22:12.360 --> 01:22:20.880
Ryan Mehta: And then we can add this middle where we can apply this middleware to our store will need to import this function called apply middleware.

696
01:22:22.110 --> 01:22:26.010
Ryan Mehta: When we create our store we pass it the reducer.

697
01:22:27.210 --> 01:22:40.500
Ryan Mehta: And we're applying middleware function with the middleware that we just created. And then if you wanted more middleware here. It's a comma separated list of each middleware that you want to add

698
01:22:41.760 --> 01:22:45.510
Ryan Mehta: So if we executed this index JS file now.

699
01:22:46.740 --> 01:22:51.630
Ryan Mehta: Every time we dispatch an action, we will see the middleware.

700
01:22:53.100 --> 01:22:56.880
Ryan Mehta: console log since our, our middleware just console logging.

701
01:22:58.320 --> 01:22:58.590
Here.

702
01:23:00.090 --> 01:23:08.850
Ryan Mehta: Right. That's how middle where works. It's just functions that run in between the dispatch action and the reducer being invoked.

703
01:23:10.980 --> 01:23:19.830
Ryan Mehta: At the very beginning of today. We said that actions are always plain JavaScript objects that is the case, unless you're using middleware.

704
01:23:20.280 --> 01:23:36.840
Ryan Mehta: The reducer can only handle a plain JavaScript object we kind of see that just based on how the reducer is working right, the reducer expects action here to be a plain JavaScript object that it can notate off of so action type

705
01:23:38.850 --> 01:23:55.110
Ryan Mehta: Of how this funk piece of middleware works we look back at this stunk piece of middleware. It will allow us to dispatch actions that are functions, the middle where here will catch anytime it sees an action that is a function

706
01:23:56.130 --> 01:23:58.290
Ryan Mehta: It's going to do something different.

707
01:23:59.880 --> 01:24:04.260
Ryan Mehta: Otherwise, it goes on to next it calls next with the action groups.

708
01:24:06.960 --> 01:24:27.090
Ryan Mehta: So line seven, nothing happens in this middleware. But if the action isn't a plain JavaScript object. It's a function. This piece of middleware invoke stop function and passes it some arguments and then never sends it to the reducer.

709
01:24:28.740 --> 01:24:45.870
Ryan Mehta: So if we look back at our, our typical picture of Redux normally we dispatch plain JavaScript actions plain plain JavaScript objects as actions those actions go through a series of middleware, and then hit the producer.

710
01:24:47.760 --> 01:24:58.200
Ryan Mehta: If we're using the funk middleware. However, this action could be either a plain JavaScript object. Let's use

711
01:24:59.610 --> 01:25:08.790
Ryan Mehta: This color. It could be a plain JavaScript object. If it is a plain JavaScript object, it will go through the funk middle where

712
01:25:09.330 --> 01:25:24.330
Ryan Mehta: The middle where we'll just immediately call next and send it on to the reducer. That's what's happening online seven of this code. If the action. Is it the function, it goes to the next. It's done.

713
01:25:26.220 --> 01:25:30.960
Ryan Mehta: If the action, though, is a function. So let's just notate that as

714
01:25:32.670 --> 01:25:33.690
An arrow function.

715
01:25:35.310 --> 01:25:41.460
Ryan Mehta: Then when it goes. Actually, let's use a different color right so we can follow the two different paths.

716
01:25:44.130 --> 01:25:44.760
This

717
01:25:49.260 --> 01:25:51.570
Ryan Mehta: Is that visible that green on this white

718
01:25:54.300 --> 01:25:54.900
Greg Mall: Kind just

719
01:25:56.670 --> 01:26:12.870
Ryan Mehta: So if the action we're a function. It's going to go into the thump pizza middleware the funk middleware is going to invoke the function and never calls next so that function never makes it to the producer. It's like get short circuited.

720
01:26:15.090 --> 01:26:19.620
Ryan Mehta: That's how that's all the funk middleware is doing it does nothing. Besides that,

721
01:26:20.790 --> 01:26:38.130
Ryan Mehta: It just so happens that this by short circuiting here and invoking the action we're allowed to do a synchronous actions. So the action will fetch from some API and then read dispatch a plain JavaScript action after it's done fetching from an API.

722
01:26:39.300 --> 01:26:42.000
Ryan Mehta: We'll see how this works in practice in a second.

723
01:26:43.170 --> 01:26:59.160
Ryan Mehta: But I think the main lesson here is that funk allows us to dispatch two different types of actions. We can do the normal thing dispatch a plain JavaScript object and funk middleware doesn't change that at all. Everything behaves just like it did before.

724
01:27:00.210 --> 01:27:14.670
Ryan Mehta: We can also dispatch a function. If we dispatch a function, the funk middleware will see that we're dispatching a function invoke that function and never send it on to the reducer it's short circuits that call.

725
01:27:16.470 --> 01:27:25.920
Ryan Mehta: And here it is in the code, right, if we get an incoming action that is a type function, then we invoke the action. It's a function

726
01:27:26.970 --> 01:27:28.470
Ryan Mehta: And we never call next

727
01:27:29.670 --> 01:27:38.760
Ryan Mehta: If it isn't a function, then we call next with the action just send it along. There's nothing for us to do. And that's all this stuff middleware is doing.

728
01:27:39.930 --> 01:27:48.570
Ryan Mehta: It's like very basic code. Basically, are you, it checks to see if something is a function. If it is, it calls it if it isn't. It does nothing.

729
01:27:51.690 --> 01:27:52.950
Ryan Mehta: That's gonna work.

730
01:27:54.420 --> 01:28:00.180
Thomas Stussi: So the functionality is in the reducer mostly but if we want to like

731
01:28:01.470 --> 01:28:07.110
Thomas Stussi: Add a function. This will just call it for us. And like, take the place of the reducer.

732
01:28:08.520 --> 01:28:10.770
Ryan Mehta: It takes place at the reducer but

733
01:28:10.950 --> 01:28:12.270
Ryan Mehta: It also gets past the

734
01:28:12.270 --> 01:28:20.520
Ryan Mehta: Dispatch function. So typically these actions in the future will call dispatch again with a plain JavaScript object.

735
01:28:21.630 --> 01:28:33.000
Ryan Mehta: It's actually, our way of doing asynchronous action. So like something that's like we say that we want to dispatch an action in the future. After we fetch from an API. Let's see how that looks in a second.

736
01:28:35.520 --> 01:28:40.560
Adrian Simental: So does this middleware handle the a sink or do we still need to put that in our function that we're passing it

737
01:28:41.010 --> 01:28:50.130
Ryan Mehta: will still need to put that in our function. It just makes it a US able to handle a sink into Redux doesn't handle it for us.

738
01:28:53.280 --> 01:28:53.550
Adrian Simental: Okay.

739
01:28:55.050 --> 01:29:03.600
Ryan Mehta: So let's build a little list of things application we're going to use our Redux Thunk in our list of things application and see what that looks like.

740
01:29:04.800 --> 01:29:16.200
Ryan Mehta: Here is our Redux list application to start off with. I am going to install all of our necessary dependencies Redux

741
01:29:17.220 --> 01:29:26.040
Ryan Mehta: React redux and we're also going to use the Redux fuck middleware. So we'll install those three dependencies.

742
01:29:27.840 --> 01:29:32.700
Ryan Mehta: And then we're going to get started by creating our

743
01:29:33.990 --> 01:29:38.640
Ryan Mehta: Producers file, we will create an actions file.

744
01:29:40.290 --> 01:29:52.410
Ryan Mehta: Or folder and then in our actions folder will create a character actions as in our producers folder will create a character.

745
01:29:54.030 --> 01:29:58.680
Ryan Mehta: Character juicer JS and a character reducer.

746
01:30:01.980 --> 01:30:02.580
Ryan Mehta: Test.

747
01:30:03.720 --> 01:30:04.200
Yes.

748
01:30:05.790 --> 01:30:08.310
Ryan Mehta: Okay, so something similar to what we did last time.

749
01:30:09.390 --> 01:30:11.910
Ryan Mehta: This time I'm going to scaffold out our

750
01:30:15.150 --> 01:30:18.360
Ryan Mehta: Producer Mr stage will be

751
01:30:20.190 --> 01:30:21.990
Ryan Mehta: So we'll have an array of characters.

752
01:30:23.100 --> 01:30:24.630
Ryan Mehta: Will have some loading state.

753
01:30:26.100 --> 01:30:36.780
Ryan Mehta: Start off as loading and we'll have some error state inside of our producer will export default function producer.

754
01:30:37.980 --> 01:30:45.360
Ryan Mehta: State is initialize as initial state and we'll get an action, we will have a switch on action type

755
01:30:46.410 --> 01:30:49.380
Ryan Mehta: Will have a default case will return state.

756
01:30:51.540 --> 01:30:56.190
Ryan Mehta: Took over do so for us, now that we have this typical reducer.

757
01:30:57.360 --> 01:31:03.570
Ryan Mehta: At the root in my source directory. I'm going to create a store JS.

758
01:31:04.620 --> 01:31:15.210
Ryan Mehta: And then we'll scaffold out our store store. Also, so we'll bring in create store from the ducks, and I will export default

759
01:31:17.370 --> 01:31:26.490
Ryan Mehta: Create store with the reducer that we just created. We're also going to bring in our funk middleware.

760
01:31:32.040 --> 01:31:32.910
Ryan Mehta: Ducks

761
01:31:34.800 --> 01:31:40.950
Ryan Mehta: In order to apply this funk middleware will need to bring in our apply middleware function.

762
01:31:42.000 --> 01:31:53.760
Ryan Mehta: And he will apply that funk were like so. So now we're able to dispatch actions that are functions, not just actions that are playing JavaScript objects.

763
01:31:54.960 --> 01:32:07.080
Ryan Mehta: One last thing that I want to do. I want to make sure that we're using the Redux dev tools. So we can see things that are happening in the in Chrome, and the Redux dev tools and chrome and then go back to

764
01:32:08.940 --> 01:32:09.720
Ryan Mehta: Our

765
01:32:12.150 --> 01:32:19.590
Ryan Mehta: Like the GitHub page. I always do the same sort of thing and just copy the lines of code that they tell me to copy the green lines.

766
01:32:20.610 --> 01:32:32.130
Ryan Mehta: So we need this thing, this compose function also comes from Redux for bringing compose, and then we will use

767
01:32:33.300 --> 01:32:34.320
This line here.

768
01:32:35.340 --> 01:32:37.560
Ryan Mehta: So it says compose enhancers.

769
01:32:39.660 --> 01:32:41.130
Ryan Mehta: Goes here.

770
01:32:43.290 --> 01:32:43.800
Like so.

771
01:32:45.300 --> 01:32:49.080
Ryan Mehta: So just kind of copying a little bit from that GitHub page.

772
01:32:51.510 --> 01:32:57.510
Ryan Mehta: Look good, and you can copy from my store JS file, it's totally fine. It's all boilerplate pretty much

773
01:32:59.070 --> 01:33:04.380
Ryan Mehta: So now we're using the funk middleware and the Redux dev tools.

774
01:33:06.990 --> 01:33:16.230
Ryan Mehta: And that is our store. What now that our store is complete in index JS. I'm going to wrap our application with provider.

775
01:33:18.210 --> 01:33:19.920
Ryan Mehta: From React redux

776
01:33:23.850 --> 01:33:31.980
Ryan Mehta: And then provider needs a store. So looking forward, store from score and pass that to our provider.

777
01:33:36.270 --> 01:33:46.620
Ryan Mehta: And that's all the setup that we really need for Redux. It's kind of a lot but creative like a reducer create our store JS and then rapper application and provide

778
01:33:49.200 --> 01:33:52.350
Ryan Mehta: Now we are ready to start writing some Redux code.

779
01:33:55.680 --> 01:34:03.750
Ryan Mehta: So back in our character reducer. Let's start describing it. We're going to describe our character reducer.

780
01:34:07.020 --> 01:34:17.850
Ryan Mehta: First thing that we want to be able to do is probably set a list of characters in our state, right. So we'll say it set

781
01:34:21.960 --> 01:34:22.170
It.

782
01:34:24.060 --> 01:34:26.340
Set characters.

783
01:34:28.020 --> 01:34:28.500
Action.

784
01:34:31.200 --> 01:34:39.840
Ryan Mehta: Okay, so we'll have this set characters action that will set a list of characters for us in states like sense

785
01:34:41.700 --> 01:34:51.240
Ryan Mehta: You're going to construct our initial state state starts off as characters, an empty array loading true

786
01:34:52.410 --> 01:34:52.860
Ryan Mehta: Knowledge.

787
01:34:55.050 --> 01:34:56.820
Ryan Mehta: And then will construct an action.

788
01:34:59.610 --> 01:35:08.370
Ryan Mehta: Will go back to our character actions file and create this action type an action creator to export concept.

789
01:35:09.630 --> 01:35:10.500
Characters

790
01:35:12.300 --> 01:35:13.470
Ryan Mehta: It will be

791
01:35:16.230 --> 01:35:20.010
Ryan Mehta: Excel and we will construct an action creator

792
01:35:24.870 --> 01:35:28.410
Ryan Mehta: Which will return an object.

793
01:35:29.610 --> 01:35:42.870
Ryan Mehta: That set characters type and the payload with the characters that we want to set. So we'll pass those characters into our set characters function and pass that as a payload.

794
01:35:44.040 --> 01:35:52.080
Ryan Mehta: So on the left hand side, we can call our set characters we can give it an array of characters that we expect name, Rick.

795
01:35:53.550 --> 01:35:56.250
Whatever me already.

796
01:35:59.610 --> 01:36:00.330
Ryan Mehta: Imported

797
01:36:01.380 --> 01:36:12.720
Ryan Mehta: Okay, so we constructed our action and then we expect new to be able to get new state from calling overdue, sir, with the current state and our action.

798
01:36:14.250 --> 01:36:16.260
Ryan Mehta: Make sure we can put this reducer.

799
01:36:18.690 --> 01:36:20.520
Ryan Mehta: That is super, super annoying.

800
01:36:47.490 --> 01:37:01.080
Ryan Mehta: reducer. And then we expect new state to equal and object characters is this. Now this array of characters that were sent in with the action.

801
01:37:02.430 --> 01:37:04.380
Ryan Mehta: Loading should remain unchanged.

802
01:37:05.580 --> 01:37:08.190
Ryan Mehta: And error should remain unchanged.

803
01:37:10.320 --> 01:37:10.890
Look good

804
01:37:14.160 --> 01:37:16.170
Ryan Mehta: Our test should probably fail.

805
01:37:19.920 --> 01:37:34.380
Ryan Mehta: Here's our failing tests we expected to get an array of characters, but we got an empty array because I reducer is at handling that action yet so under reducer will have a new case for SEC characters.

806
01:37:35.550 --> 01:37:44.190
Ryan Mehta: In this case will return everything from state stays the same but our characters list becomes action doc payload.

807
01:37:47.670 --> 01:37:55.530
Ryan Mehta: And our test passes at this point. So we now have an action that lets us set our characters list.

808
01:37:57.000 --> 01:37:57.570
With good

809
01:37:59.790 --> 01:38:07.170
Ryan Mehta: Let's make one more action that lets us change loading from true to false and back and forth.

810
01:38:09.240 --> 01:38:16.020
Ryan Mehta: So, it handles the loading candles set floating

811
01:38:19.290 --> 01:38:21.690
Ryan Mehta: In this case, will have staked

812
01:38:22.800 --> 01:38:25.260
Ryan Mehta: Will have our characters list.

813
01:38:26.970 --> 01:38:32.850
Ryan Mehta: Loading set to true and air to know will construct an action.

814
01:38:34.890 --> 01:38:43.020
Ryan Mehta: In order to construct this action will need to go back to our character actions and create a set loading action type

815
01:38:46.290 --> 01:38:47.850
Ryan Mehta: Will create a

816
01:38:52.170 --> 01:38:53.520
Ryan Mehta: Set loading.

817
01:38:57.210 --> 01:38:59.880
Ryan Mehta: Action creator, the type will be set loading.

818
01:39:02.640 --> 01:39:08.160
Ryan Mehta: f you sometimes, sometimes

259
00:33:30.660 --> 00:33:37.410
Annalise Murphy: Yeah, I could totally see that and see into the rhythm of like placement like totally

260
00:33:37.470 --> 00:33:37.860
Yeah.

261
00:33:39.720 --> 00:33:46.770
Ryan Mehta: Where we're declaring what state is like that. It's text background color, etc. It's just up there so

262
00:33:48.750 --> 00:33:49.170
Okay.

263
00:33:50.880 --> 00:33:52.560
I guess I was thinking it would

264
00:33:53.790 --> 00:33:58.200
Ryan Mehta: Be more global than that. Yeah. No, it's

265
00:33:58.350 --> 00:33:59.580
Ryan Mehta: It's only state.

266
00:33:59.610 --> 00:34:03.060
Ryan Mehta: Only exists for a single component. Okay.

267
00:34:03.510 --> 00:34:05.910
Ryan Mehta: And then that single component is responsible for

268
00:34:05.940 --> 00:34:09.450
Ryan Mehta: Passing that state to its children, if it needs to

269
00:34:10.260 --> 00:34:11.040
Brooke Perkins (she/her): I see. Okay.

270
00:34:13.140 --> 00:34:17.070
Ryan Mehta: Thank you. Okay. So, yeah, we defined our state or three pieces of state.

271
00:34:18.000 --> 00:34:25.770
Ryan Mehta: We restructured our state in our Render method. And then we pass the appropriate state to all of our to our to presentational components.

272
00:34:26.040 --> 00:34:33.270
Ryan Mehta: We've also created this handle change function, which doesn't do anything yet, but is enough to get our test to start passing

273
00:34:34.200 --> 00:34:48.750
Ryan Mehta: Because we needed to pass this prop because of types. So we're back to a green test we did so little test and Dr. Phil and so much of our component to get that single test to pass, which is great.

274
00:34:49.710 --> 00:35:06.240
Ryan Mehta: Let's move on in this test. We also want to be able to grab the text input and the display. Right. We need to grab the text input, because we want to type into it and we wanted to grab the display because we want to check that it changes in response that typing.

275
00:35:07.980 --> 00:35:12.090
Ryan Mehta: So let's say concepts text input equals

276
00:35:13.260 --> 00:35:26.430
Ryan Mehta: We're going to look at the screen. So we're just writing code, but we're coding, as if we were, I don't know, had as if our code had eyeballs or something. So we're looking at our screen. We're going to get

277
00:35:27.780 --> 00:35:31.710
Ryan Mehta: An input by label text so

278
00:35:32.790 --> 00:35:49.140
Ryan Mehta: A user comes to our page they see the label is back or they see the label as text and they get the input based on that label right. That's how a user actually looks at our web page. So we're doing the same sort of thing. Give me the input, where the label says text.

279
00:35:50.970 --> 00:35:57.150
Ryan Mehta: So look at the page. Find the label that says text and give me the input that's associated with that.

280
00:36:00.030 --> 00:36:01.920
Ryan Mehta: And we also need to grab the display.

281
00:36:03.390 --> 00:36:12.870
Ryan Mehta: The display is a little bit harder to grab because it changes so much. There's no big like really good visual indicator for the display.

282
00:36:14.220 --> 00:36:20.340
Ryan Mehta: What people often do in this case is attach a test ID to this div.

283
00:36:21.420 --> 00:36:30.360
Ryan Mehta: So we wanted to still be able to grab this div will grab it by test ID and we'll give this thing a test ID of display.

284
00:36:32.010 --> 00:36:39.060
Ryan Mehta: And this allows us in our test to do something like screen get by test ID display.

285
00:36:40.590 --> 00:36:41.970
Ryan Mehta: With the react.

286
00:36:42.990 --> 00:36:59.070
Ryan Mehta: Testing library. You don't grab stuff by ID you only grab stuff by test ID. The whole point of this library is to not have to like add things to your code but add things that will actually display on the end resulting code.

287
00:37:01.140 --> 00:37:09.840
Ryan Mehta: That you don't want to be there. So you add these test ID. So, you know, this is just for your test. It's not for actual like CSS styling or anything.

288
00:37:11.850 --> 00:37:15.210
Ryan Mehta: Alright, so we grab our display we grab our text input.

289
00:37:17.160 --> 00:37:21.000
Ryan Mehta: The next thing that we want to do is type into that text input. Right.

290
00:37:22.050 --> 00:37:24.180
Ryan Mehta: So we're going to fire an event.

291
00:37:25.740 --> 00:37:29.070
Ryan Mehta: It's going to be a change event on our text input.

292
00:37:30.210 --> 00:37:35.130
Ryan Mehta: We're going to have a target with a value.

293
00:37:36.630 --> 00:37:39.480
My great text.

294
00:37:42.240 --> 00:37:45.810
Ryan Mehta: Maybe I'll put this on multiple lines. So we can see it a little bit better.

295
00:37:48.960 --> 00:37:54.630
Ryan Mehta: Alright, this part look good. So we typed into the text input is what this part is saying.

296
00:37:56.250 --> 00:38:08.400
Ryan Mehta: And then we're going to wait for so this should trigger a state change. Right, we're going to wait for the state change to cause a re render of our React component

297
00:38:09.720 --> 00:38:17.640
Ryan Mehta: After re renders we expect the display to have text content.

298
00:38:19.080 --> 00:38:20.730
By great

299
00:38:25.350 --> 00:38:34.590
Ryan Mehta: Right. So after we type into that text input and react has a chance to render. We expect the display to now say migrate text.

300
00:38:36.840 --> 00:38:37.680
That makes sense.

301
00:38:39.720 --> 00:38:41.910
Ryan Mehta: I'm going to pause here, really, really quick.

302
00:38:42.180 --> 00:38:50.070
Ryan Mehta: I'm gonna go back to app JS and remove controls here and our color picker container here instead. So we can

303
00:38:50.160 --> 00:38:51.900
Ryan Mehta: visually see this in the browser.

304
00:38:51.900 --> 00:38:54.420
Ron Yonker: Also, as you're writing the test.

305
00:38:56.730 --> 00:38:58.950
Ryan Mehta: All right, this totally fails right now.

306
00:39:02.310 --> 00:39:06.570
Ryan Mehta: Which we kind of expect right because we haven't actually set it up to work.

307
00:39:08.910 --> 00:39:25.620
Ryan Mehta: We expected it to change as we type into the input, but it never changed. We never got my great text in the div, which makes sense if we actually go to the browser physically and try to type into this box, nothing happens. Right now we're unable to type into the box.

308
00:39:27.120 --> 00:39:31.830
Ryan Mehta: That's because in our color picker. We haven't set up our handled change function yet.

309
00:39:33.450 --> 00:39:41.970
Ryan Mehta: The handle change function is what makes it so when you type into the box when it sees a change event. We actually change this text piece of state.

310
00:39:43.350 --> 00:39:58.800
Ryan Mehta: So let's do that are handled change receives an event with the structure target off of that event, and then we will set state of our text to target value.

311
00:40:00.150 --> 00:40:06.420
Ron Yonker: In Ryan is target just something we're calling this or are you to find somewhere.

312
00:40:07.140 --> 00:40:09.480
Ryan Mehta: I target is at property on event.

313
00:40:10.410 --> 00:40:12.300
Ron Yonker: So part of the event.

314
00:40:14.640 --> 00:40:24.600
Ryan Mehta: test passes so target when when you type into this input box here, it fires an event called change.

315
00:40:25.890 --> 00:40:32.580
Ryan Mehta: The event target is the input box itself. So the target is actually this input box here.

316
00:40:35.130 --> 00:40:37.620
Ryan Mehta: Let's see what happens if we cancel.

317
00:40:42.270 --> 00:40:52.710
Ryan Mehta: Some console logging the target. Now when I type into this input box you'll see we get the actual DOM element input here. It's a target of the event.

318
00:41:00.180 --> 00:41:06.990
Ryan Mehta: Alright so test passes and I can actually type into the input box and it does what my test just said that it should be.

319
00:41:09.720 --> 00:41:10.260
In good

320
00:41:12.000 --> 00:41:19.110
Ben Waples: Um I yesterday, didn't we do in a single wait for the test and we awaited each of the screen grabs

321
00:41:20.130 --> 00:41:23.550
Ryan Mehta: We did. Yeah, so I got tired of doing that, but

322
00:41:24.690 --> 00:41:36.480
Ryan Mehta: Totally there's there's two different query methods here there's get which does it synchronously. And there's find which doesn't asynchronously, in which case you have to await it

323
00:41:38.130 --> 00:41:39.000
Ben Waples: Okay, thank you.

324
00:41:41.160 --> 00:41:42.720
Ryan Mehta: I just learned about get

325
00:41:42.960 --> 00:41:46.140
Ryan Mehta: Today, as I was like looking at their react testing.

326
00:41:47.820 --> 00:41:50.520
Ryan Mehta: Library docs and I feel like it's so much better.

327
00:41:54.870 --> 00:42:13.290
Ryan Mehta: Alright, so we have our first piece of functionality done. Let's move on to another piece of functionality, we should also be able to change this background color and in response to changing this background color input the actual background color of our display should change in response

328
00:42:15.150 --> 00:42:23.820
Ryan Mehta: That makes sense. So we want to be able to click on this change it to read and this thing actually change to read

329
00:42:25.890 --> 00:42:35.280
Ryan Mehta: So let's say it changes the display background color on that.

330
00:42:41.700 --> 00:42:51.210
Ryan Mehta: So on changing on edit on changing that input we should change the actual background color first thing that we're going to do is render or color picker.

331
00:42:53.460 --> 00:42:59.310
Ryan Mehta: Just like I'm the last test, we need to have our color picker on the page in order to grab elements from it.

332
00:43:00.780 --> 00:43:03.540
Ryan Mehta: We're then going to grab our background input.

333
00:43:05.040 --> 00:43:10.380
Ryan Mehta: We're going to look onto the screen. We're going to get the input by label text.

334
00:43:11.400 --> 00:43:16.290
Ryan Mehta: The label of our background color input is background color.

335
00:43:17.640 --> 00:43:27.360
Ryan Mehta: So back over here we're going to grab a label background color, grab that labels input roster going to grab our display.

336
00:43:30.630 --> 00:43:32.400
Ryan Mehta: By its test ID.

337
00:43:38.640 --> 00:43:48.390
Ryan Mehta: And then we're going to fire a change. So let's fire an event. It's going to be a change event on our background input.

338
00:43:49.740 --> 00:43:59.100
Ryan Mehta: Via the event is going to have a target. The target is going to have a value. Let's say we change the background color to read

339
00:44:00.810 --> 00:44:07.200
Ryan Mehta: Upon changing that background color we expect react to re render on re rendering

340
00:44:09.900 --> 00:44:32.940
Ryan Mehta: We expect the display to have style. So instead of expecting the content, the text content of our display to change. We expect the background color of our display to change. So the style should change from black to a background color.

341
00:44:34.290 --> 00:44:34.830
Ryan Mehta: Of

342
00:44:37.500 --> 00:44:37.860
Red

343
00:44:40.260 --> 00:44:41.970
Ryan Mehta: I think this test will pass fail.

344
00:44:43.230 --> 00:44:44.220
Yep. Nice.

345
00:44:47.460 --> 00:44:48.750
Ryan Mehta: This test makes sense.

346
00:44:50.850 --> 00:45:07.350
Ryan Mehta: So we render our color picker onto the screen we grab the background color input and the display we change the background color and we expect the background color of the display to change. Right now it doesn't work great. It actually changes the text input.

347
00:45:08.850 --> 00:45:12.960
Ryan Mehta: Strangely, anybody know why it's changing the text input instead of the background color.

348
00:45:16.200 --> 00:45:27.480
Ryan Mehta: What you're telling it to do there and change their totally yeah on any change we're always changing the text color or the text instead of the background color.

349
00:45:28.650 --> 00:45:30.330
Ryan Mehta: This is where we need to get a bit fancy

350
00:45:32.340 --> 00:45:42.870
Ryan Mehta: So there's a few ways that we could do this. The first way we'll do it this way for now. If target that name equals text.

351
00:45:43.920 --> 00:45:45.270
Ryan Mehta: Then we want to

352
00:45:48.480 --> 00:45:49.950
Ryan Mehta: Change the text color.

353
00:45:53.280 --> 00:45:55.320
Ryan Mehta: Otherwise, else

354
00:45:57.210 --> 00:46:08.700
Ryan Mehta: Target name equals background color. Then we're going to change the background color.

355
00:46:13.980 --> 00:46:26.610
Ron Yonker: Right, I just wanted to clarify in places like lines 13 and 14 of color picker dot j SX you're passing in objects arm.

356
00:46:27.660 --> 00:46:37.050
Ron Yonker: And like loading 12 for handle change for with a target you're passing objects because this is a jazz sex file instead of a JS file.

357
00:46:39.840 --> 00:46:40.680
Ron Yonker: That correct that.

358
00:46:42.240 --> 00:46:43.020
Ryan Mehta: Here, you mean

359
00:46:45.000 --> 00:46:45.660
Ryan Mehta: Or here.

360
00:46:47.190 --> 00:47:02.400
Ron Yonker: Like for 12 yeah like there, for example, with the curly braces, you're passing in on that because it's a jazz sex file when you have to define that as JavaScript is that while you're doing that.

361
00:47:03.090 --> 00:47:07.020
Ryan Mehta: This is the structuring right here. So normally we get an event.

362
00:47:08.370 --> 00:47:08.730
Ryan Mehta: Here.

363
00:47:09.000 --> 00:47:14.490
Ryan Mehta: And then we have to event target and target and

364
00:47:15.810 --> 00:47:16.440
Target.

365
00:47:18.180 --> 00:47:23.250
Ryan Mehta: Target, what we're doing with the curly braces is the structuring event.

366
00:47:24.450 --> 00:47:34.140
Ryan Mehta: So we're taking that same event and restructuring target off of the event. So then we don't need this leading event.on all of these lines.

367
00:47:35.340 --> 00:47:43.140
Ryan Mehta: So it's not because you're JS access anywhere in JavaScript, you can do this sort of thing, the structure, a function

368
00:47:43.710 --> 00:47:44.190
Program.

369
00:47:49.920 --> 00:47:56.610
Ryan Mehta: We're actually doing the exact same thing in our presentational components over here. We're. This is receiving props.

370
00:47:59.280 --> 00:48:06.330
Ryan Mehta: Props props is an object with text background color and foreground color.

371
00:48:07.560 --> 00:48:12.240
Ryan Mehta: We're just D structuring those products here.

372
00:48:13.830 --> 00:48:14.790
That object.

373
00:48:24.360 --> 00:48:27.780
Ryan Mehta: Alright, let's see if our test passes. I think it probably should.

374
00:48:29.250 --> 00:48:33.390
Ryan Mehta: And our background color now works.

375
00:48:37.200 --> 00:48:38.130
Ryan Mehta: Looks pretty good.

376
00:48:39.360 --> 00:48:54.210
Ryan Mehta: We have one final test to write for the foreground color. So we wanted to be able to change the background color change the background color change the text and change this text and change the foreground color and change the foreground color of the text.

377
00:48:55.350 --> 00:48:59.130
Ryan Mehta: So one last test. It changes the

378
00:49:03.420 --> 00:49:08.190
Ryan Mehta: Color on or brown but

379
00:49:11.370 --> 00:49:21.150
Ryan Mehta: I'm saying sorry strategy here. We're going to render our color picker. So there's something on the page. We're going to grab our for ground.

380
00:49:22.380 --> 00:49:31.410
Ryan Mehta: Input by getting by label text, the label says for ground.

381
00:49:32.730 --> 00:49:36.090
Ryan Mehta: Color. We're also going to get our display.

382
00:49:43.650 --> 00:49:48.900
Ryan Mehta: We're then going to fire a change event on the foreground input.

383
00:49:50.880 --> 00:50:00.450
Ryan Mehta: It's ould say target dot name, which will get either BG color or f g color and said it equal to target value.

778
01:31:45.990 --> 01:31:47.640
Ryan Mehta: And that I believe

779
01:31:48.930 --> 01:31:52.620
Ryan Mehta: Should get our test to pass. It's double check.

780
01:31:54.240 --> 01:31:55.560
Ryan Mehta: Yeah. Testers passing

781
01:31:57.840 --> 01:31:58.920
Ryan Mehta: Look good, everyone.

782
01:32:00.330 --> 01:32:00.600
Ryan Mehta: What

783
01:32:00.900 --> 01:32:06.210
Adrian Simental: Do you expect. Does it say color, rather than foreground color.

784
01:32:07.590 --> 01:32:11.670
Ryan Mehta: In CSS when you're changing the foreground color, they just call this thing color.

785
01:32:15.150 --> 01:32:15.900
Thomas Stussi: Because if they're

786
01:32:15.960 --> 01:32:17.340
Having a CSS property.

787
01:32:20.610 --> 01:32:23.670
Thomas Stussi: Is there a benefit to clean up after these tests.

788
01:32:25.050 --> 01:32:31.440
Ryan Mehta: When we're doing this react stuff I've learned that they automatically do clean up for us, so we don't have to manually do it.

789
01:32:35.130 --> 01:32:36.450
Ryan Mehta: I finally read the manual

790
01:32:39.540 --> 01:32:41.880
Ryan Mehta: All right one last test for this thing.

791
01:32:42.960 --> 01:32:45.780
Ryan Mehta: It changes the text.

792
01:32:48.390 --> 01:32:51.750
Ryan Mehta: This one is going to look very similar. Also, so we're going to render

793
01:32:53.370 --> 01:32:54.660
Ryan Mehta: Our color picker.

794
01:32:56.460 --> 01:32:59.400
Ryan Mehta: We're going to grab our text input.

795
01:33:00.570 --> 01:33:05.880
Ryan Mehta: Will get it by getting by label the label was called text.

796
01:33:07.140 --> 01:33:09.090
Ryan Mehta: And will also get our display.

797
01:33:11.130 --> 01:33:12.870
Ryan Mehta: By test ID.

798
01:33:19.980 --> 01:33:21.030
Ryan Mehta: User event on this thing.

799
01:33:25.050 --> 01:33:28.680
Ryan Mehta: I do. OK. OK. Let's try this.

800
01:33:30.960 --> 01:33:36.630
Ryan Mehta: So I'm going to import at the top that other library, just so we can see kind of how it works.

801
01:33:39.300 --> 01:33:40.230
Ryan Mehta: Because it's so cool.

802
01:33:42.630 --> 01:33:57.210
Ryan Mehta: For this one particular case. So we've been using fire event right here to fire the change event, there is this really cool user event library that lets us say something like type

803
01:33:58.770 --> 01:34:00.420
Ryan Mehta: Into the text input.

804
01:34:01.740 --> 01:34:03.630
Ryan Mehta: The word HELLO.

805
01:34:05.580 --> 01:34:23.250
Ryan Mehta: So instead of doing like the dot change and giving it the target and the event you kind of just say what you expect your user to be doing so we expect the user to type into the text input, the word HELLO super cool right like makes it super, super readable.

806
01:34:24.300 --> 01:34:33.000
Ryan Mehta: If we were using the fire event syntax. I'll comment that out on the line below, just so we can see how about would have left would have been target.

807
01:34:34.290 --> 01:34:35.250
Ryan Mehta: Value.

808
01:34:36.270 --> 01:34:36.840
Ryan Mehta: Hello.

809
01:34:39.510 --> 01:34:46.020
Ryan Mehta: So live 42 is equivalent to line 43 through 45

810
01:34:47.850 --> 01:34:49.680
Ryan Mehta: It just kind of cool. This word type

811
01:34:52.620 --> 01:34:56.070
Ryan Mehta: All right. Then we'll return a wait for

812
01:34:57.690 --> 01:35:11.490
Ryan Mehta: So we'll wait for the user type and the component to render after renders we expected display to have a text content of hello

813
01:35:12.810 --> 01:35:19.680
Ryan Mehta: So slightly different instead of expecting a different style. We expect the content to have changed of the display.

814
01:35:21.660 --> 01:35:23.730
Ryan Mehta: Or tested fail. Good.

815
01:35:26.130 --> 01:35:32.490
Ryan Mehta: Probably because the text content is it. Hello. Yeah, text content is empty, instead of hello

816
01:35:34.350 --> 01:35:38.580
Ryan Mehta: So let's add our final piece of state text.

817
01:35:39.780 --> 01:35:44.760
Ryan Mehta: We will pass this text piece of state to both controls.

818
01:35:47.670 --> 01:35:49.890
Ryan Mehta: And to display.

819
01:35:53.310 --> 01:36:00.510
Ryan Mehta: Our handle change function is already set up its generic right now. So as long as the target name is text.

820
01:36:02.100 --> 01:36:12.240
Ryan Mehta: Which it is the handle change function should automatically work for it. So we kind of expect our all of our tests to pass at this point, which they do.

821
01:36:16.530 --> 01:36:19.200
Ron Yonker: Reserve reference to text input again.

822
01:36:21.390 --> 01:36:23.340
Ron Yonker: 142 one

823
01:36:24.180 --> 01:36:31.650
Ryan Mehta: Yep. So line 39 would get the input. And then my 42 a user types into the text input, the word HELLO.

824
01:36:33.060 --> 01:36:36.450
Brooke Perkins (she/her): And sorry, where did you get user event from what library again.

825
01:36:37.560 --> 01:36:43.740
Ryan Mehta: It's called at testing library slash user event. It comes with the alchemy bootstrap

826
01:36:44.970 --> 01:36:47.640
Ryan Mehta: Oh, I was just like reading through the manual

827
01:36:48.090 --> 01:36:57.630
Ryan Mehta: Or like the docs. I'm starting to call these things manual. So I can slowly bring into the really the RT FM language into this

828
01:36:59.460 --> 01:37:02.430
Ryan Mehta: Is it read the, like, read the manual

829
01:37:03.810 --> 01:37:05.880
Ryan Mehta: Yeah, so I read the manual and

830
01:37:07.680 --> 01:37:15.600
Ryan Mehta: They have these like ecosystem things. So a bunch of like cool plugins that you can use it the library. That's where I learned about this.

831
01:37:19.440 --> 01:37:20.100
Thanks.

832
01:37:25.470 --> 01:37:27.930
Ryan Mehta: All right, look good. All of our tests pass

833
01:37:30.690 --> 01:37:31.080
Okay.

834
01:37:36.810 --> 01:37:53.220
Ryan Mehta: Let's take a break and then we're going to refactor this class based component into a function component with hooks. Instead, the really cool thing about it is our tests remain unchanged. So we know the refactor was successful. If our tests continue to pass.

835
01:37:55.440 --> 01:37:56.970
Ryan Mehta: Let's come back at 1110

836
01:37:59.400 --> 01:38:00.030
Ryan Mehta: Sounds good.

837
01:38:05.130 --> 01:38:06.570
Ryan Mehta: So we left off.

838
01:38:07.830 --> 01:38:12.300
Ryan Mehta: With a class based component and all of our tests passing

839
01:38:14.040 --> 01:38:21.270
Ryan Mehta: We want to refactor our class based component into a function component that uses state.

840
01:38:22.350 --> 01:38:30.900
Ryan Mehta: Going to close these tests out on the left, we're not going to have to change these tests at all. They should all continue to pass moving forward if we're successful with our refactor.

841
01:38:32.520 --> 01:38:45.150
Ryan Mehta: And we are though going to comment out this class based component and replace it with a function component. So I'm going to have a console color picker.

842
01:38:47.070 --> 01:38:52.770
Ryan Mehta: And will export our color picker class based component

843
01:38:54.030 --> 01:39:06.090
Ryan Mehta: Our classmates component is in return the same sort of thing that our class or function composites going to return the same sort of thing that our class component returned. We are going to return our controls.

844
01:39:07.980 --> 01:39:10.170
Ryan Mehta: And our display.

845
01:39:12.240 --> 01:39:12.960
Ryan Mehta: Like so.

846
01:39:14.250 --> 01:39:19.980
Ryan Mehta: And then we're going to slowly build up our state right now all of our pap test should fail.

847
01:39:22.230 --> 01:39:31.440
Ryan Mehta: Because we're not doing any of our changes. So we have three failing tests right now background color change foreground color change text change.

848
01:39:33.390 --> 01:39:46.140
Ryan Mehta: Let's start off by creating our background color. So instead of important component. We're going to import you state from react and then we're going to construct our background color state.

849
01:39:47.550 --> 01:39:54.330
Ryan Mehta: So we'll get a background color and a set background color all from you state.

850
01:39:55.500 --> 01:39:58.080
Ryan Mehta: will initialize our state with the color.

851
01:39:59.190 --> 01:39:59.760
White

852
01:40:01.380 --> 01:40:06.720
Ryan Mehta: And then we'll pass this steak to our controls eg color.

853
01:40:09.000 --> 01:40:12.000
Ryan Mehta: And will also pass the state to our display.

854
01:40:18.840 --> 01:40:24.090
Ryan Mehta: So both of these things now. Get that background color piece of state the props.

855
01:40:25.140 --> 01:40:35.280
Ryan Mehta: We're also going to need to create a handle change function that's able to change our background color pieces state. So I'm going to construct a handle change function.

856
01:40:36.450 --> 01:40:44.130
Ryan Mehta: Or handle change function with the structure target off of event. And then for right now, let's just set our background color.

857
01:40:48.870 --> 01:40:50.250
Ryan Mehta: To target value.

858
01:40:52.440 --> 01:40:56.880
Ryan Mehta: And then we'll pass this handle change function to the on change.

859
01:40:59.310 --> 01:41:11.520
Ryan Mehta: Handler, I'm at this point. I think at least one of those two failing tested past. So now we only are one of the 3D. So now we only have two failing tests the foreground color change and the text color change.

860
01:41:12.210 --> 01:41:18.060
Ryan Mehta: Right now we're functioning component has background color, and it's able to change that background color.

861
01:41:20.220 --> 01:41:21.390
Ryan Mehta: That makes sense so far.

862
01:41:23.520 --> 01:41:25.050
Ryan Mehta: So we've replaced

863
01:41:26.100 --> 01:41:30.780
Ryan Mehta: Line six replaces this line 29 of our color picker.

864
01:41:34.110 --> 01:41:43.350
Ryan Mehta: Let's add foreground color. Now, also. So I'm going to make another constant for foreground color and set foreground

865
01:41:44.670 --> 01:41:45.150
Ryan Mehta: Color

866
01:41:47.430 --> 01:41:53.220
Ryan Mehta: Will get that from you state will start off our foreground color black

867
01:41:54.270 --> 01:41:58.110
Ryan Mehta: We will pass this foreground color to our controls.

868
01:41:59.460 --> 01:42:04.170
Ryan Mehta: Will also pass the foreground color to our display.

869
01:42:06.570 --> 01:42:24.660
Ryan Mehta: Like so. And now we need some way to change both our background color and our foreground color based off of target name. Unfortunately, there isn't a slick of a way to do this as there was in with the class based component

870
01:42:25.710 --> 01:42:31.860
Ryan Mehta: We can have a series of ifs. So if Target dot name is

871
01:42:33.240 --> 01:42:34.380
Ryan Mehta: The G color.

872
01:42:37.020 --> 01:42:46.590
Ryan Mehta: Then we will set our background color. Otherwise, if it's foreground color, then we will set our foreground color.

873
01:42:48.480 --> 01:42:53.430
Ryan Mehta: And now we should just have one failing test the text Ellen, the text.

874
01:42:54.510 --> 01:43:09.810
Ron Yonker: Piece of state. So Ryan but name property is really just a common property, we're using to be able to have a generic, like on change function basically or handle change function.

875
01:43:10.980 --> 01:43:12.090
Ryan Mehta: Exactly, yeah.

876
01:43:15.570 --> 01:43:19.350
Ryan Mehta: So let's construct our text piece of steak or set text.

877
01:43:20.430 --> 01:43:25.530
Ryan Mehta: Function will get both of those from you state and we'll start off our text as an empty string.

878
01:43:26.790 --> 01:43:29.820
Ryan Mehta: Will pass the text to controls.

879
01:43:31.320 --> 01:43:34.560
Ryan Mehta: Will also pass the text to display.

880
01:43:36.330 --> 01:43:46.860
Ryan Mehta: And then in our handle change function, we need to check to see if the target name is text. If it is we're going to set our text piece of state.

881
01:43:48.870 --> 01:43:53.820
Ryan Mehta: And then all of our tests should pass again.

882
01:43:56.040 --> 01:44:00.210
Ryan Mehta: So here is our function based container.

883
01:44:20.520 --> 01:44:21.990
Adrian Simental: New module between

884
01:44:22.050 --> 01:44:28.440
Ryan Mehta: 11 and 13 yeah there's some strategies that we could take

885
01:44:30.300 --> 01:44:30.780
Ryan Mehta: But

886
01:44:31.140 --> 01:44:34.890
Ryan Mehta: I mean, it's all going to be just as bad probably

887
01:44:35.910 --> 01:44:41.880
Ryan Mehta: You could construct, what is called like a factory method object.

888
01:44:44.850 --> 01:44:50.220
Ryan Mehta: Which would be like the G color is associated with set the color.

889
01:44:56.340 --> 01:45:03.210
Ryan Mehta: Text is associated with set text and then down here you would do something like factory.

890
01:45:15.030 --> 01:45:15.420
Ryan Mehta: Or

891
01:45:18.570 --> 01:45:25.350
Ryan Mehta: You could do something like this. But that's probably just as if just discover some if not more.

892
01:45:27.510 --> 01:45:40.020
Ryan Mehta: The, the big advantage of this way, though, is it's a little bit easier to add new inputs, adding a new input with this below method is like adding a whole if adding a new input with this above is like adding a single

893
01:45:41.100 --> 01:45:44.880
Ryan Mehta: Like a much smaller surface area line.

894
01:45:50.340 --> 01:45:50.520
Yeah.

895
01:45:52.500 --> 01:45:55.290
So if you like this sort of thing there commented

896
01:46:06.300 --> 01:46:09.150
Ryan Mehta: Ok look ok seem okay

897
01:46:11.280 --> 01:46:19.320
Ryan Mehta: See the commonalities between like our state equals stuff our set state.

898
01:46:20.490 --> 01:46:21.570
Everything in this

899
01:46:23.580 --> 01:46:35.010
Ryan Mehta: They're like very, very similar. I think so. It's not like it's different syntax for sure, but there's like you can kind of see it's even the same like layout of the component

900
01:46:37.140 --> 01:46:38.040
Ryan Mehta: You stay

901
01:46:39.210 --> 01:46:43.950
Ryan Mehta: Candler J SX same sort of flow.

902
01:46:48.630 --> 01:47:02.100
Ryan Mehta: All right, let's make another one. Uh, let's pick another application. I am going to use this API muffin labs, the stain history API.

903
01:47:04.320 --> 01:47:08.100
Ryan Mehta: That gives us the events that happened on a particular date.

904
01:47:13.020 --> 01:47:20.340
Ryan Mehta: I've already constructed the presentational components for this so we don't have to really go through that whole thing, but I'll show them quickly.

905
01:47:21.690 --> 01:47:37.140
Ryan Mehta: There is an event presentational components that takes a year and text we look back at the API. It gives us the year of the event and like what happened on that year, on this day so year in text from the API.

906
01:47:38.220 --> 01:47:43.290
Ryan Mehta: Year in tech. So we'll have year and then two dashes and the thing that happened on that year.

907
01:47:44.880 --> 01:47:59.220
Ryan Mehta: And then we have an event list that iterate through an array of events creates an Li for each event with that event inside of it. So we'll have a bunch of bullet points a year dash dash the event that happened on that year.

908
01:48:01.980 --> 01:48:05.010
Ryan Mehta: Got any questions about those two presentational components.

909
01:48:06.060 --> 01:48:08.640
Ryan Mehta: Here, let me draw this application really quick also

910
01:48:09.720 --> 01:48:11.220
Ryan Mehta: So we have

911
01:48:12.240 --> 01:48:13.080
Our

912
01:48:15.660 --> 01:48:16.530
Ryan Mehta: Page.

913
01:48:17.970 --> 01:48:31.860
Ryan Mehta: On the page. We're going to have a list of events with the year so :46:37.140 --> 00:46:37.830
Ryan Mehta: Or you would just

448
00:46:37.860 --> 00:46:39.750
Ryan Mehta: Choose like maybe you have

449
00:46:39.780 --> 00:46:41.190
Thomas Stussi: A page called

450
00:46:41.280 --> 00:46:53.760
Ryan Mehta: Like a Arnold page and a page called X Files page, the page itself like you'd reuse the character list component on both of those pages and then wrap a different provider around it on both pages.

451
00:46:54.690 --> 00:47:10.110
Ryan Mehta: So the bottom side of your application tree always looks the same on every single page. It's just the one change the provider is different on each page, which is a really cool way to reuse code. I think

452
00:47:18.780 --> 00:47:26.100
Ryan Mehta: Yeah, I guess you could get even more generic right, this doesn't have to be a character list, it might just be a list a thing that knows how to display lists.

453
00:47:27.540 --> 00:47:28.200
Ryan Mehta: Providers

454
00:47:32.100 --> 00:47:37.230
Thomas Stussi: So you'd have to make sure like in your provider that you massage the data.

455
00:47:38.310 --> 00:47:46.740
Thomas Stussi: So that it it is a component below it. The list component can accept multiple providers.

456
00:47:47.430 --> 00:47:49.230
Ryan Mehta: Yeah, the providers would have to

457
00:47:49.230 --> 00:47:49.740
Thomas Stussi: Have

458
00:47:49.830 --> 00:47:53.190
Ryan Mehta: The same data structure that they return

459
00:48:11.190 --> 00:48:12.090
Ryan Mehta: Questions.

460
00:48:20.520 --> 00:48:23.760
Annalise: The other day, it was just a different method, but just to be clear.

461
00:48:24.300 --> 00:48:25.620
Ryan Mehta: Yeah, different

462
00:48:25.710 --> 00:48:26.670
Ryan Mehta: Different approach.

463
00:48:47.040 --> 00:48:50.040
Ryan Mehta: Any other questions review stuff.

464
00:48:54.390 --> 00:48:57.000
Ryan Mehta: Okay, let's talk a bit about reactor performance.

465
00:48:59.790 --> 00:49:07.320
Ryan Mehta: So the major performance concern with React applications is the re rendering that happens on the page.

466
00:49:09.270 --> 00:49:12.030
Ryan Mehta: Let's say that we have an application.

467
00:49:15.240 --> 00:49:15.720
Here.

468
00:49:16.920 --> 00:49:20.160
Ryan Mehta: We could actually kind of draw our yes no application.

469
00:49:22.920 --> 00:49:24.840
Yes. No.

470
00:49:26.370 --> 00:49:38.880
Ryan Mehta: Whenever app JS is state changes or gets a new prop yes no re renders even if it doesn't have to even if it all of its props remained the same. It will still re render

471
00:49:40.470 --> 00:49:48.060
Ryan Mehta: Which is kind of a problem, right. Like, imagine this being a component that takes a long time to render or expensive to render

472
00:49:49.380 --> 00:49:58.230
Ryan Mehta: Even if it doesn't have to re render gets the same props, it's going to display the exact same content this yes no component will still re render

473
00:49:59.940 --> 00:50:08.040
Ryan Mehta: So let's take a look at like a super simple application. I'm going to make a

474
00:50:09.480 --> 00:50:10.560
Ryan Mehta: Header file.

475
00:50:13.440 --> 00:50:14.190
Sex.

476
00:50:15.840 --> 00:50:19.530
Ryan Mehta: That we will use in our app JS x

477
00:50:27.780 --> 00:50:31.950
Ryan Mehta: We're going to console log at the top of this file just

478
00:50:35.430 --> 00:50:37.470
Ryan Mehta: And we'll have this thing return

479
00:50:44.340 --> 00:50:44.880
Ryan Mehta: Okay.

480
00:50:49.890 --> 00:50:50.490
This

481
00:50:52.560 --> 00:50:55.260
Ryan Mehta: Are yes no here and above that have our header.

482
00:51:02.550 --> 00:51:12.060
Ryan Mehta: So we should see this, I just rendered console log would first load our page, we go back over here, inspect and go to our console.

483
00:51:13.650 --> 00:51:21.930
Ryan Mehta: Here's I just render. We only see at once, which is kind of what we expect because it had at least draw onto the page one time.

484
00:51:24.750 --> 00:51:30.270
Ryan Mehta: But what if we add some state here to app. So we have

485
00:51:33.660 --> 00:51:37.530
Ryan Mehta: No, we're just going to make a super easy counter

486
00:51:43.590 --> 00:51:44.250
Ryan Mehta: Zero.

487
00:51:46.020 --> 00:51:47.010
Ryan Mehta: Function.

488
00:51:48.960 --> 00:51:50.610
Ryan Mehta: Which will set count.

489
00:51:54.390 --> 00:51:55.320
Ryan Mehta: Plus one.

490
00:51:58.500 --> 00:52:00.480
Ryan Mehta: And then we'll put a button on our page.

491
00:52:10.020 --> 00:52:10.350
Ryan Mehta: So,

492
00:52:12.660 --> 00:52:19.530
Ryan Mehta: Whenever you click on this account button, it's going to increment our count. Right.

493
00:52:20.580 --> 00:52:37.830
Ryan Mehta: Every time it increments the count, it's actually going to re render these other two components, which is sort of annoying because header is always going to look the same. There's no reason to call this function again right and re render things. It's actually go to our front end.

494
00:52:39.120 --> 00:52:49.350
Ryan Mehta: refresh this, so we see our I just rendered when I press this count button it's re rendering my header component over and over and over again.

495
00:52:50.670 --> 00:52:58.920
Ryan Mehta: Which is okay I guess because our header component isn't super complicated, it's not doing a lot of work, but if it were, this would be

496
00:53:00.360 --> 00:53:03.420
Ryan Mehta: Like a huge performance hit on our application.

497
00:53:05.700 --> 00:53:13.140
Ryan Mehta: Luckily react has a nice way to deal with this. It's actually an old solution called memo ization

498
00:53:14.280 --> 00:53:22.410
Ryan Mehta: One of the easiest ways to prevent your component from re rendering needlessly is to bring in this memo.

499
00:53:23.940 --> 00:53:28.440
Ryan Mehta: Function and wrap your component with memo.

500
00:53:33.180 --> 00:53:34.110
Where are you so mad.

501
00:53:37.380 --> 00:53:39.420
Ryan Mehta: Oh, I should probably do it down here.

502
00:53:43.980 --> 00:53:43.980
Ron Yonker: Better

503
00:53:45.210 --> 00:53:49.050
Ryan Mehta: Okay, so we'll wrap our component with this memo function.

504
00:53:50.340 --> 00:54:06.030
Ryan Mehta: Will talk about what that memo function does in a second. Like under the hood. But you'll notice now if we go back over to our front end when I click this button we no longer see that I just rendered again.

505
00:54:08.190 --> 00:54:17.220
Ryan Mehta: So we've saved calling that function again over and over again by wrapping it with this memo thing.

506
00:54:19.260 --> 00:54:22.560
Ron Yonker: But still doing that though so

507
00:54:24.090 --> 00:54:29.700
Ryan Mehta: It's not so it won't recall this function again every time it's parents state change.

508
00:54:29.700 --> 00:54:31.920
Ron Yonker: And how is it increasing the count.

509
00:54:33.060 --> 00:54:36.030
Ryan Mehta: The app is still changing the app is still going to re render

510
00:54:37.200 --> 00:54:41.370
Ryan Mehta: But its children this header component. What we render. So if we put

511
00:54:41.430 --> 00:54:42.630
Ryan Mehta: A console log here.

512
00:54:45.990 --> 00:54:46.590
Ron Yonker: Okay.

513
00:54:50.880 --> 00:54:55.260
Ryan Mehta: And did the same sort of thing, we get the app for rendered

514
00:54:56.160 --> 00:55:11.790
Ron Yonker: But not the header component. So is the memo ization function when you wrap component in it. Is it just say like unless something is changing with this specific component, but the love of God, don't re render me

515
00:55:12.750 --> 00:55:13.650
Ryan Mehta: Pretty much, yeah.

516
00:55:15.660 --> 00:55:16.080
Ron Yonker: Okay.

517
00:55:16.890 --> 00:55:19.800
Ryan Mehta: So how react normally works without the memo.

518
00:55:20.940 --> 00:55:23.580
Ryan Mehta: Now we have our app component

519
00:55:25.140 --> 00:55:27.960
Ryan Mehta: Our app has three things. It has a button.

520
00:55:30.240 --> 00:55:32.160
Ryan Mehta: It has a header.

521
00:55:34.830 --> 00:55:36.900
Ryan Mehta: And it has our yes no

522
00:55:41.610 --> 00:55:50.760
Ryan Mehta: Normally in React whenever this parent component has to re render all of its children also re render

523
00:55:51.840 --> 00:56:03.870
Ryan Mehta: So if you change the state in this parent component, the app has to re render right anytime state changes you trigger a re render so can redraw the page, based on that new state.

524
00:56:05.400 --> 00:56:16.980
Ryan Mehta: Since the parent re renders all of its children re render the button re renders the Henry renders and our yes no component renders when we wrap our component and memo.

525
00:56:22.140 --> 00:56:30.270
Ryan Mehta: This a memo function will check Tasman have my props changed if my props haven't changed that. I'm not going to re render

526
00:56:31.350 --> 00:56:39.570
Ryan Mehta: So even though the parent renders the parent is going to attempt to trigger re render on header still the memo function will block it.

527
00:56:40.020 --> 00:56:51.420
Ryan Mehta: It will first check its props. If it's props are the same, then it's going to return the old header. The header that is currently on the page instead of recalling this function and re rendering

528
00:56:53.310 --> 00:56:56.670
Ryan Mehta: So memo is doing two things, it's checking props.

529
00:57:01.200 --> 00:57:02.760
Ryan Mehta: If props have changed.

530
00:57:05.010 --> 00:57:06.570
Ryan Mehta: Then it will still be render

531
00:57:09.420 --> 00:57:11.070
Ryan Mehta: If props haven't changed.

532
00:57:13.320 --> 00:57:14.220
Changed.

533
00:57:16.710 --> 00:57:18.300
Ryan Mehta: Then it will

534
00:57:19.530 --> 00:57:21.810
Ryan Mehta: Return the old header.

535
00:57:25.290 --> 00:57:26.400
Ryan Mehta: If kind of makes sense.

536
00:57:27.930 --> 00:57:36.030
Adrian Simental: Would it be advisable than just putting them on everything, or does the actual like checking of changing props take time. So you wouldn't want to do it unless bad to

537
00:57:36.510 --> 00:57:41.490
Ron Yonker: Exactly what I was going to ask, like is there a top level way to do this.

538
00:57:43.380 --> 00:57:48.930
Ryan Mehta: So there's a few. There's a few things wrong and that could go wrong with memorization, you really want to be careful.

539
00:57:48.990 --> 00:57:51.150
Ryan Mehta: With where you put this memo thing.

540
00:57:53.520 --> 00:58:00.930
Ryan Mehta: First, yes it does take a little bit of extra memory but you always get speed increases like render time increases.

541
00:58:02.580 --> 00:58:08.790
Ryan Mehta: So I don't know in computers, there's always this trait or a common trade off is between CPU and memory.

542
00:58:11.340 --> 00:58:12.450
Ryan Mehta: Vs memory.

543
00:58:14.280 --> 00:58:15.630
Ryan Mehta: Or you can say like

544
00:58:17.910 --> 00:58:32.520
Ryan Mehta: Yeah, let's just say CPU vs memory. It's like computation versus space complexity is what you'll see if you read like some algorithm and Buck about it computation versus space complexity things getting Bernie.

545
00:58:32.580 --> 00:58:33.330
Fast

546
00:58:35.160 --> 00:58:46.320
Ryan Mehta: Like you can either optimized for speed or optimized for memory. Whenever you optimize for speed you usually take up extra memory. You need to store stuff so you can access it quickly later.

547
00:58:46.830 --> 00:58:53.040
Ryan Mehta: If you optimize for memory, you're throwing away everything as soon as you see it because you want to keep everything nice and clean.

548
00:58:53.610 --> 00:59:04.920
Ryan Mehta: But when you need to get that thing again. You need to reconfigure everything. So you've lost some computation time. So there's like always this trade off between the two. They're always intention and it's the same

549
00:59:04.950 --> 00:59:08.550
Ryan Mehta: Tension with memo you're gaining CPU.

550
00:59:09.840 --> 00:59:14.220
Ryan Mehta: performance benefits at the expense of some memory performance benefits.

551
00:59:16.320 --> 00:59:25.860
Ron Yonker: When we're when we're talking about web application is is is one generally more favorable than the other, like favoring

552
00:59:27.210 --> 00:59:30.330
Ron Yonker: CPU efficiency or memory efficiency.

553
00:59:31.980 --> 00:59:44.610
Ryan Mehta: Usually on a web page, you don't really care about memory too much like at least in the general case. Most people have like pretty nice machines with tons and tons of memory like gigabytes of memory.

554
00:59:45.840 --> 00:59:52.380
Ryan Mehta: There could be exceptions to this, though. You could be programming for like Fred Meyers

555
00:59:53.700 --> 00:59:58.020
Ryan Mehta: Staff who are like on some crappy device.

556
01:00:00.360 --> 01:00:05.730
Ryan Mehta: Checking like orders that are coming in and their, their device probably has very, very little memory.

557
01:00:07.170 --> 01:00:18.900
Ryan Mehta: You could also be programming for like a car's visual display that display that shows up in everybody's car that thing has very little memory. So you would trade off. You wouldn't want to take up too much of it.

558
01:00:19.620 --> 01:00:31.740
Ryan Mehta: So it really depends, but in our like day to day lives. We probably don't care too much about memory. Most people are on like laptops are pretty like even phones nowadays have a ton of memory on them.

559
01:00:37.320 --> 01:00:39.990
Ryan Mehta: And by memories you here. I mean, RAM, for the most part.

560
01:00:41.730 --> 01:00:51.480
Annalise: Yeah, it's crazy. I remember back in the 90s, always having to pull apart my computer or my just have to replace the room every so often. Yeah.

561
01:00:52.140 --> 01:00:52.770
Ryan Mehta: Yeah I know when I

562
01:00:52.800 --> 01:01:00.210
Ryan Mehta: When I was first buying computers like I still have this tendency, like I just always want the maximum amount of RAM.

563
01:01:00.390 --> 01:01:00.960
Annalise: Same

564
01:01:01.020 --> 01:01:09.810
Annalise: Same me the most. I'm just like, I don't I don't actually you like replace it like physically, you're just kind of like, okay, just give me, you never forget that, I guess.

565
01:01:10.020 --> 01:01:10.620
Ryan Mehta: Yeah.

566
01:01:10.860 --> 01:01:11.790
Annalise: Even if it doesn't matter.

567
01:01:13.830 --> 01:01:15.540
Ryan Mehta: Yeah, yeah. Like my computer is like

568
01:01:15.540 --> 01:01:21.210
Ryan Mehta: 64 gigs of RAM and I could probably I could live with like 16 probably and be just fine.

569
01:01:21.390 --> 01:01:26.310
Annalise: No. Totally. I just think memories like that kind of like haunting like never again.

570
01:01:29.820 --> 01:01:32.010
Ryan Mehta: So yeah, this is the story of memo.

571
01:01:33.390 --> 01:01:35.130
Ryan Mehta: These are the two cases.

572
01:01:38.340 --> 01:01:41.130
Ryan Mehta: Sometimes we will we render. Other times you won't

573
01:01:45.510 --> 01:01:47.880
Ben Waples: How would this work with global state.

574
01:01:49.170 --> 01:02:02.400
Ryan Mehta: Yeah, oh yeah, that's where we're going. I lost my train of thought. Thank you. Why wouldn't we always do this so global state is a great example of why we wouldn't have

575
01:02:03.900 --> 01:02:25.230
Ryan Mehta: So this memo function only checks are incoming props and it doesn't do a deep check so it doesn't do a DP quality check it does a shallow quality check so anytime you're passing in a complex object, the memo function won't be a good use, like wouldn't be a good use. So if you have

576
01:02:26.940 --> 01:02:33.870
Ryan Mehta: By complex object. I mean like if we were passing in a character and that character 50
Ryan Mehta: Go back over to our create card.

413
00:50:24.300 --> 00:50:27.150
Maybe I'll put one on top of the other.

414
00:50:31.020 --> 00:50:31.620
Ryan Mehta: Side by side.

415
00:50:33.960 --> 00:50:44.940
Ryan Mehta: So we're going to make our handle submit, which is going to get an event. We want to make sure that we prevent the faults.

416
00:50:46.710 --> 00:50:57.630
Ryan Mehta: So the page doesn't reload, and then we want to dispatch our credit card action in order to dispatch that action. We're going to need to bring in dispatch.

417
00:50:59.010 --> 00:51:08.040
Ryan Mehta: From react router DOM after submitting. We're going to dispatch the Create card action creator

418
00:51:08.580 --> 00:51:27.690
Ryan Mehta: The credit card action creator expects us to pass it a card a card is an object with name, description, and cost. So we will pass it an object with name, description and costs, which we're getting from our state, which is what's currently typed into the input fields.

419
00:51:30.660 --> 00:51:34.140
Ryan Mehta: After we dispatch that we're also going to set name.

420
00:51:35.250 --> 00:51:44.670
Ryan Mehta: To empty string set prescription to empty string and set costs for empty string zero, the whole thing out.

421
00:51:45.720 --> 00:51:47.070
Ryan Mehta: The form resets

422
00:51:48.450 --> 00:51:52.410
Ryan Mehta: And then we're going to pass our handle submit to our

423
00:51:54.540 --> 00:51:54.960
Forum.

424
00:51:59.220 --> 00:52:00.570
Ryan Mehta: Alright, but good.

425
00:52:02.310 --> 00:52:15.000
Ryan Mehta: Um, one last thing to do. Back in app JS. Let's drop our create card into App JS, so we can see something on the screen. And let's start

426
00:52:16.830 --> 00:52:17.790
Ryan Mehta: Our application.

427
00:52:20.430 --> 00:52:27.240
Ryan Mehta: Head back to the browser local first 7891 here is our beautiful, beautiful form.

428
00:52:28.350 --> 00:52:34.830
Ryan Mehta: will open up our Redux Dev Tools gnosis state. Anybody have any ideas why we're missing state here.

429
00:52:42.480 --> 00:52:43.950
Ryan Mehta: We forgot

430
00:52:45.480 --> 00:52:48.180
Ryan Mehta: To add our card reducer.

431
00:52:51.570 --> 00:52:52.440
Ryan Mehta: To

432
00:52:54.300 --> 00:52:57.090
Ryan Mehta: Our combined producers. So let's make sure we do that.

433
00:52:59.760 --> 00:53:03.840
Ryan Mehta: And I will at the top import card reducer.

434
00:53:05.760 --> 00:53:06.300
Producer

435
00:53:07.830 --> 00:53:14.340
Ryan Mehta: Now if we go back to the browser. Hopefully we will see everything break. That's not really what I wanted to see

436
00:53:15.540 --> 00:53:25.200
Ryan Mehta: reducer card returned undefined during initialization. If the State pass it pass to the reducer is undefined. You must explicitly return the initial state.

437
00:53:25.890 --> 00:53:36.210
Ryan Mehta: Okay, so the same we're returning undefined in our card reducer. Probably because we never use this initial state thing. So let's make sure that

438
00:53:37.320 --> 00:53:38.970
Ryan Mehta: Use initial state.

439
00:53:40.830 --> 00:53:41.760
Ryan Mehta: And then

440
00:53:43.080 --> 00:53:54.000
Ryan Mehta: Go back over here. Okay. We have our form back in state. We have our card state and our list of cards. Let's give our card a name.

441
00:53:55.470 --> 00:53:56.460
Ryan Mehta: Description

442
00:53:58.380 --> 00:53:59.580
Ryan Mehta: And a cost.

443
00:54:00.690 --> 00:54:01.860
Ryan Mehta: Create our card.

444
00:54:03.000 --> 00:54:04.440
Ryan Mehta: Let's check out the console.

445
00:54:06.300 --> 00:54:07.440
Ryan Mehta: That makes sense.

446
00:54:08.550 --> 00:54:17.250
Ryan Mehta: Because we never started her back end. So was it connection refused. Let's go to our back end, let's make sure we actually start this thing.

447
00:54:22.950 --> 00:54:24.300
Ryan Mehta: And let's try again.

448
00:54:28.260 --> 00:54:38.970
Ryan Mehta: One cost is one to create a card. Perfect. Anybody know this one. This is like when that came up for you all.

449
00:54:40.170 --> 00:54:44.880
Greg Mall: Few times I think you need to include course your controller.

450
00:54:46.410 --> 00:55:08.070
Ryan Mehta: The controller include cores. Yeah, exactly. So, uh, back on our back end. We need to make sure that causes enabled, of course, is a security precaution. So by default, no application is allowed to hit our backend routes, except for other back ends. So from brown a browser to our back end.

451
00:55:08.970 --> 00:55:15.270
Ryan Mehta: The browser blocks these requests unless we explicitly allow it to make requests for our backend.

452
00:55:17.160 --> 00:55:22.080
Ryan Mehta: The easy way to get this done is to install the cores middleware.

453
00:55:23.820 --> 00:55:26.820
Ryan Mehta: And use that chorus middleware.

454
00:55:30.330 --> 00:55:30.750
XL.

455
00:55:33.510 --> 00:55:37.620
Ryan Mehta: And then we can go back to our friends and try again.

456
00:55:40.320 --> 00:55:42.030
Ryan Mehta: Is it Sky One or scribe to

457
00:55:43.470 --> 00:55:45.750
Ryan Mehta: Okay, we got no errors. That's good.

458
00:55:47.100 --> 00:55:49.800
Ryan Mehta: We go back to our network tab.

459
00:55:52.020 --> 00:55:53.700
Ryan Mehta: We got a successful post

460
00:55:55.110 --> 00:56:06.450
Ryan Mehta: If we preview it we got this response back. If we go to our Redux dev tools. We now have a card inside of our list. What is another card.

461
00:56:08.760 --> 00:56:10.800
Thomas Stussi: Lightning bolt carrier smells good.

462
00:56:15.450 --> 00:56:15.810
Ryan Mehta: It's like

463
00:56:16.890 --> 00:56:18.120
Thomas Stussi: Three damage to a target.

464
00:56:25.470 --> 00:56:27.240
Ryan Mehta: And the cost to yes

465
00:56:27.390 --> 00:56:28.080
Thomas Stussi: Just one red.

466
00:56:28.710 --> 00:56:29.250
Thomas Stussi: One.

467
00:56:30.000 --> 00:56:31.980
Thomas Stussi: Yeah. Oh, powerful such a great card.

468
00:56:36.420 --> 00:56:39.300
Brooke Perkins (she/her): How much about this game. During this program.

469
00:56:41.850 --> 00:56:43.350
Ryan Mehta: So there's our lightning bolt.

470
00:56:43.410 --> 00:56:46.710
Ryan Mehta: Into Redux we now have both the lightning bolt and

471
00:56:49.320 --> 00:56:54.930
Ryan Mehta: pretended to some lightning bolts on top because we've pretended it. Cool. Good.

472
00:56:56.490 --> 00:56:57.090
Ryan Mehta: What's up in

473
00:56:59.760 --> 00:57:13.560
Ben Waples: Um, I had a question about forums. The you we didn't have any event or any on click on the button. But when you click the button, it behaves like a summit, um,

474
00:57:15.420 --> 00:57:16.410
Ben Waples: Why is that

475
00:57:18.180 --> 00:57:19.260
Ryan Mehta: Yeah, so

476
00:57:19.890 --> 00:57:27.690
Ryan Mehta: By default, if you have a button inside of a form and when you click on the button it's automatically going to submit the form

477
00:57:28.740 --> 00:57:30.660
Ryan Mehta: Button time a few different types

478
00:57:31.830 --> 00:57:33.270
Ryan Mehta: And the button.

479
00:57:36.450 --> 00:57:37.980
Ryan Mehta: They show us the types

480
00:57:45.930 --> 00:57:52.500
Ryan Mehta: Okay so buttons have a few different types. The possible values are submit this is the default

481
00:57:53.790 --> 00:57:56.490
Ryan Mehta: Which will submit whatever form. The button is inside of

482
00:57:58.110 --> 00:58:11.820
Ryan Mehta: Reset. I've actually never used this reset thing the button resets all controls to their initial values so resets the forum. And then if you do button type equals button you can only have clicked behavior.

483
00:58:13.170 --> 00:58:14.040
Ryan Mehta: So I think

484
00:58:15.090 --> 00:58:16.590
Ryan Mehta: Given that information.

485
00:58:16.920 --> 00:58:31.710
Ryan Mehta: If we change this to type equals button, then it's going to have that behavior that you expected, will be able to click the button, but it will no longer submit the form. So we should be able to take and stuff here.

486
00:58:34.860 --> 00:58:38.670
Ryan Mehta: And click this button, nothing happens because it's no longer submitting the form

487
00:58:41.040 --> 00:58:51.750
Ben Waples: Okay, cool. And if you have multiple buttons, um, that didn't have a tight button I'm inside of a form which I guess maybe less likely

488
00:58:53.550 --> 00:58:56.880
Ben Waples: Be like that. Like any every button would fire on Smith.

489
00:58:57.480 --> 00:58:57.870
Yep.

490
00:58:59.280 --> 00:59:04.950
Ryan Mehta: So yeah, if you wanted multiple buttons to do different things inside of the form, you need to take button, then

491
00:59:14.640 --> 00:59:15.180
Ron Yonker: Brian

492
00:59:16.590 --> 00:59:33.870
Ron Yonker: Mr random thought, is it possible to have both the front end and the back end working in concert within one workspace in BSC or you necessarily have to split it into two different workspaces, like you have

493
00:59:34.680 --> 00:59:36.600
Ryan Mehta: You could tell they have them in one workspace.

494
00:59:40.080 --> 00:59:41.040
Ryan Mehta: Told the can have them.

495
00:59:42.420 --> 00:59:45.180
Ryan Mehta: In one workspace and one repo, if you wanted to.

496
00:59:47.400 --> 00:59:52.470
Ron Yonker: How would you launch each respective application terminal.

497
00:59:53.700 --> 00:59:54.330
Ryan Mehta: Yeah.

498
00:59:55.620 --> 01:00:04.470
Ryan Mehta: You just have different scripts. So you'd have like a script called start back end and a script called start for and that would start one or the other.

499
01:00:07.590 --> 01:00:08.910
Ron Yonker: Okay, thank you.

500
01:00:09.930 --> 01:00:10.680
Ryan Mehta: So you could just

501
01:00:12.030 --> 01:00:23.550
Ryan Mehta: Add to Your package JSON right now our script is called start you could change this to start front end and then add another script start back, and that is that will start the back end for you instead

502
01:00:33.090 --> 01:00:33.540
Ryan Mehta: Okay.

503
01:00:34.560 --> 01:00:44.220
Ryan Mehta: Should we take a break and then make our next route. So we have the Create route. We're going to do this same four steps for our get all route so we can at least see a list of things.

504
01:00:44.820 --> 01:00:54.630
Ryan Mehta: And then we'll just keep building on to this until he reached the end of the day, but hopefully that clear clarifies a little bit how to do that connection between the front end and back end.

505
01:00:56.760 --> 01:01:00.120
Ryan Mehta: All right, let's take a 10 minute break. Let's come back at about 11 o'clock.

506
01:01:02.070 --> 01:01:02.730
Ryan Mehta: Sounds good.

507
01:01:08.610 --> 01:01:15.450
Ryan Mehta: So we said that the next route that we wanted to create was our list route to get a list of things back

508
01:01:17.610 --> 01:01:26.010
Ryan Mehta: disinfect the perfect one because on our, on our application page, it would be really nice to be able to see that list update as we're creating our cards.

509
01:01:27.690 --> 01:01:28.320
Ryan Mehta: So,

510
01:01:29.340 --> 01:01:36.600
Ryan Mehta: On the back end, we're going to start on our model and then our endpoint service view, same sort of flow.

511
01:01:37.830 --> 01:01:43.170
Ryan Mehta: So background our model. This is where we're going to make our SQL request.

512
01:01:44.520 --> 01:01:50.760
Ryan Mehta: Is us constructing an API for our endpoint to use our endpoint code to use

513
01:01:53.340 --> 01:01:58.230
Ryan Mehta: So let's make a static a sink. Find all

514
01:02:00.930 --> 01:02:13.770
Ryan Mehta: We are going to get some rows back by a wading pool dot query, we're going to select star from cards.

515
01:02:15.270 --> 01:02:17.610
Ryan Mehta: And then we're going to return.

516
01:02:19.590 --> 01:02:25.080
Ryan Mehta: We'll get a map through all of the rows for each row, we are going to construct a new card.

517
01:02:27.780 --> 01:02:30.090
Ryan Mehta: So this will give us an array of cards.

518
01:02:31.440 --> 01:02:37.710
Ryan Mehta: Good. I forgot to write a test. So let's make sure that we do that.

519
01:02:39.660 --> 01:02:40.320
Ryan Mehta: It.

520
01:02:41.670 --> 01:02:47.280
Ryan Mehta: finds a all cards. The yet.

521
01:02:51.840 --> 01:02:57.960
Ryan Mehta: All right before we can get a list of cards, we have to create a list of cards.

522
01:02:59.220 --> 01:03:01.050
Ryan Mehta: So I am going to

523
01:03:03.060 --> 01:03:04.140
Ryan Mehta: Create

524
01:03:06.870 --> 01:03:08.520
Ryan Mehta: A list of cards.

525
01:03:10.680 --> 01:03:17.070
Ryan Mehta: We can do that by using our cards model, right. So, we will card insert

526
01:03:18.300 --> 01:03:19.620
Ryan Mehta: cards have a name.

527
01:03:23.400 --> 01:03:24.510
Ryan Mehta: Description

528
01:03:35.220 --> 01:03:36.300
Ryan Mehta: Three cards.

529
01:03:51.000 --> 01:03:52.110
Ryan Mehta: What else do we want

530
01:04:00.960 --> 01:04:01.620
Ryan Mehta: Doesn't matter.

531
01:04:17.010 --> 01:04:34.260
Ryan Mehta: We're going to return. We're going to make a request of our app. It's going to be a GET request to API V1 cards. The dead going to get back a response. We expect the response body to equal

532
01:04:35.340 --> 01:04:36.960
Ryan Mehta: An array.

533
01:04:37.980 --> 01:04:40.020
Ryan Mehta: Containing cards.

534
01:04:41.190 --> 01:04:45.990
Ryan Mehta: Boy, that right we expect to get that list of cards back tests look good.

535
01:04:48.600 --> 01:04:49.110
Ryan Mehta: Okay.

536
01:04:50.220 --> 01:05:03.600
Ryan Mehta: So we have our find all method. Over here we have our endpoint over here we're going to use this find all API to find all of our cards. So when they get

537
01:05:04.650 --> 01:05:08.010
Ryan Mehta: They have one to invoke this function.

538
01:05:09.840 --> 01:05:22.710
Ryan Mehta: This function is going to use the Find all method to find a list of cards. It's then going to send that list of cards. We're going to catch any errors and pass it to next.

539
01:05:25.170 --> 01:05:40.740
Ryan Mehta: So our endpoint users are find all API from the endpoint side it has no idea the implementation details of find all we've now exposed a new endpoint for the front end to use a new API for the front end to use

540
01:05:43.290 --> 01:05:53.700
Ryan Mehta: It again will not know any of the implementation details, but the service will be invoking this function and getting this response when it makes the appropriate fetch call

541
01:05:55.320 --> 01:06:04.890
Ryan Mehta: So we have the backend fetch the back end and point we can now move on to building our service on the front end, it's all seem good so far.

542
01:06:07.920 --> 01:06:12.330
Ryan Mehta: All right, back to our friends and service.

543
01:06:13.800 --> 01:06:19.950
Ryan Mehta: Here we're going to get a list of cards. Let's export cards to get cards.

544
01:06:22.980 --> 01:06:25.800
Ryan Mehta: We are going to, let's make this basic

545
01:06:30.180 --> 01:06:36.750
Ryan Mehta: There's a way we're going to make a factual quest to this same and point

546
01:06:38.340 --> 01:06:38.760
Here.

547
01:06:41.670 --> 01:06:46.830
Ryan Mehta: We're then going to get back some JSON by awaiting rest dot JSON.

548
01:06:48.180 --> 01:06:55.830
Ryan Mehta: If Rez not read. Okay, we're going to grow our JSON of allies proving a return

549
01:06:56.970 --> 01:06:57.690
JSON.

550
01:06:58.980 --> 01:07:13.560
Ryan Mehta: Something like that. So this is saying, Go to this route. By default, it's a get method. So it's going to be a GET request on that route we parse it as JSON and return that JSON. So this right here.

551
01:07:14.640 --> 01:07:20.130
Ryan Mehta: Is telling the backend to run this function right here.

552
01:07:21.330 --> 01:07:31.0817:38.550 --> 00:17:51.120
Ryan Mehta: So it says that our application should be an H1 that says hello world in it, which is why we're getting this failing test. If you want to update your snapshot. You can press you on your keyboard.

151
00:17:52.410 --> 00:17:54.330
Ryan Mehta: And it will take you

152
00:17:55.530 --> 00:18:00.690
Ryan Mehta: On your keyboard and it will update the snapshot. So everything passes now.

153
00:18:02.640 --> 00:18:07.410
Ryan Mehta: When you first create a snapshot test, you won't have this snapshots directory

154
00:18:09.210 --> 00:18:12.360
Ryan Mehta: You would write this test. And when you run it for the first time.

155
00:18:13.740 --> 00:18:22.170
Ryan Mehta: That snapshots directory will automatically get created with a snapshot of your app. So it's basically just taking a picture of your HTML.

156
00:18:22.560 --> 00:18:36.210
Ryan Mehta: And making sure that that HTML doesn't change over time. And if it does change. It's going to notify you that it changed and you can double check to make sure that this was actually a legitimate change and not a typo or something.

157
00:18:39.810 --> 00:18:53.790
Ryan Mehta: The one beauty of snapshot tests is that every single snapshot test looks exactly the same. You can just like copy this code and drop it for another component and just change the component thing pretty much

158
00:18:55.320 --> 00:19:08.550
Annalise Murphy: He Ryan, um, let's say I wanted my snapshot to be more dynamic as I'm like changing it. Could I like online nine set it to like

159
00:19:09.870 --> 00:19:18.150
Annalise Murphy: Like too much snapshot like to any string or something of that nature, or does it need to be like to a team.

160
00:19:20.640 --> 00:19:22.620
Ryan Mehta: It has to be to a tee matching

161
00:19:22.980 --> 00:19:23.610
Annalise Murphy: Okay, yeah.

162
00:19:25.350 --> 00:19:29.490
Ryan Mehta: So yeah, if you get props past you would pass the prop still here.

163
00:19:30.840 --> 00:19:36.270
Ryan Mehta: Components should if he passed the same props always have the same output right we shouldn't change.

164
00:19:39.150 --> 00:19:39.540
Ryan Mehta: All right.

165
00:19:39.600 --> 00:19:44.130
Ron Yonker: Ryan, I'm having a hard time understanding line eight

166
00:19:47.250 --> 00:19:49.500
Ryan Mehta: So we're rendering or application.

167
00:19:50.910 --> 00:20:00.690
Ryan Mehta: And then this as fragment thing is just something that comes with three testing library. It's a function that lets us get the HTML fragment that makes up our

168
00:20:02.430 --> 00:20:11.400
Ryan Mehta: Component. So it's a fragment, because it's not the entire page. It's just the fragment of the page that is represented by our component

169
00:20:20.040 --> 00:20:35.430
Ryan Mehta: So render our component we get this as fragment function when you call the ass fragment function and gets the HTML that is rendered by our component and we expect it to match the HTML in our snapshot directory

170
00:20:39.090 --> 00:20:40.590
Jerud Moyer: And what's the cleanup doing

171
00:20:43.560 --> 00:20:49.110
Ryan Mehta: It's just this after the test runs it just destroys all of the like closing

172
00:20:49.140 --> 00:20:50.070
Out discount

173
00:20:55.680 --> 00:20:57.510
Ryan Mehta: So it's like under rendering the page.

174
00:21:02.280 --> 00:21:12.900
Ryan Mehta: Alright, let's create our color picker components. I'm going to write another directory inside of components called color picker.

175
00:21:15.210 --> 00:21:15.960
Ryan Mehta: And

176
00:21:17.130 --> 00:21:21.300
Ryan Mehta: We will create a color picker J SX

177
00:21:22.950 --> 00:21:27.150
Ryan Mehta: Where you all using J SX as your extension or j s as your extension before

178
00:21:28.380 --> 00:21:28.950
Greg Mall: Yes.

179
00:21:29.340 --> 00:21:34.470
Ryan Mehta: Yes, the same. You can choose whichever one you want to

180
00:21:35.940 --> 00:21:43.890
Ryan Mehta: Everything will work exactly the same. The only reason why I use gas X is because it has this nice fancy react logo. When you put that J SX

181
00:21:44.970 --> 00:21:48.870
Annalise Murphy: It's cool. It is really fancy. Oh really.

182
00:21:49.680 --> 00:22:03.660
Ryan Mehta: And I'm also going to make a color picker test dot j SX five file. So I'm going to put this color picker test over to the side. Oh, I can't

183
00:22:04.770 --> 00:22:07.950
Ryan Mehta: I hate when this happens. Okay, let's

184
00:22:10.380 --> 00:22:14.550
Ryan Mehta: Let's close this. I'm going to reopen it so I can actually move stuff around

185
00:22:22.860 --> 00:22:26.910
Ryan Mehta: Back over here. I can't move it. Perfect.

186
00:22:30.120 --> 00:22:30.630
Ryan Mehta: Okay.

187
00:22:36.570 --> 00:22:38.700
Ryan Mehta: I have to be able to move this it's a

188
00:22:40.470 --> 00:22:41.100
Ryan Mehta: Matter of

189
00:23:00.690 --> 00:23:01.230
Ryan Mehta: Here we go.

190
00:23:06.000 --> 00:23:10.530
Ryan Mehta: Alright so test is over here on the left implementation will be on the right.

191
00:23:11.610 --> 00:23:19.830
Ryan Mehta: I kind of wanted to do some behavior testing with our React components. So this is going to be a little bit of a new way to

192
00:23:21.060 --> 00:23:28.650
Ryan Mehta: Write our React components, but I thought we could get started with it right on day one of React, just so you get used to it.

193
00:23:30.150 --> 00:23:44.850
Ryan Mehta: Behavior testing is very much like TDD that we've done on the back end where we write our tests first and then implement the like right our implementation. Second, I'm in this case we don't have like a route that we can

194
00:23:46.260 --> 00:23:55.980
Ryan Mehta: Go to and expect some values back what we have instead is some behaviors and some views that we can look at and expect it to look like a certain thing.

195
00:23:57.510 --> 00:24:04.530
Ryan Mehta: To get started, you can copy, like a lot of this stuff that we have here. So we're going to import react into our test.

196
00:24:05.580 --> 00:24:11.910
Ryan Mehta: From react. We're also going to import render

197
00:24:13.830 --> 00:24:14.580
Ryan Mehta: Test.

198
00:24:17.880 --> 00:24:18.240
Yeah.

199
00:24:20.850 --> 00:24:22.650
Ryan Mehta: And then we're going to describe

200
00:24:24.480 --> 00:24:27.270
Ryan Mehta: Our color picker.

201
00:24:32.310 --> 00:24:32.760
Alright.

202
00:24:33.870 --> 00:24:44.580
Ryan Mehta: This library this testing library reacts also is like slowly becoming the like cool way to do react testing. It's pretty new, and

203
00:24:47.430 --> 00:24:57.120
Ryan Mehta: Like I would say in the last six months or so is when it got famous or popular. This is my first cohort using this library. Also, so will experience it together.

204
00:24:59.640 --> 00:25:00.120
Ryan Mehta: All right.

205
00:25:01.170 --> 00:25:01.440
Ryan Mehta: All right.

206
00:25:01.890 --> 00:25:08.700
Annalise Murphy: Ryan Just real quick, like which like this whole processes new or what specifically

207
00:25:09.480 --> 00:25:10.710
Ryan Mehta: This testing library.

208
00:25:10.800 --> 00:25:14.700
Annalise Murphy: Okay, I've never used it before. Thanks. I just needed some clarification.

209
00:25:15.510 --> 00:25:18.990
Ryan Mehta: Before this, we were using a library called enzyme, which was the

210
00:25:19.110 --> 00:25:21.750
Ryan Mehta: Probably still is slightly more popular than this, but

211
00:25:21.750 --> 00:25:27.300
Ryan Mehta: The trajectory of the two are going in opposite directions. And that was starting to be less than

212
00:25:27.300 --> 00:25:28.200
Annalise Murphy: Less used and

213
00:25:28.740 --> 00:25:44.340
Ryan Mehta: This one is starting to be more and more used. And if you look at the state of JavaScript like that survey. This is the one that people are most looking forward to using. So I'm guessing that they will. This will be the most popular like in six months to a year.

214
00:25:44.790 --> 00:25:46.200
Annalise Murphy: Okay, cool. Thank you.

215
00:25:48.570 --> 00:25:51.030
Ryan Mehta: So we will import this thing.

216
00:25:52.140 --> 00:26:00.210
Ryan Mehta: Everybody kind of remember the app that we want to build the three cup. The two color pickers the text input and below it. The display.

217
00:26:02.520 --> 00:26:18.120
Ryan Mehta: Let's start off with that text input. So we want to test that it changes the text when the text input is

218
00:26:22.980 --> 00:26:26.070
Ryan Mehta: That's a kind of a bad title it changes the

219
00:26:27.900 --> 00:26:30.570
Ryan Mehta: display text.

220
00:26:31.710 --> 00:26:34.350
Ryan Mehta: So one big thing that we do with this library is

221
00:26:34.350 --> 00:26:46.710
Ryan Mehta: We don't test the implementation at all. We don't test that the state actually changes when we check is that when I type when I changed the input. It changes. What's displayed on the page.

222
00:26:47.340 --> 00:26:59.430
Ryan Mehta: So right now we're going to only be focusing on. We had our page here we have an input and a display underneath it as you type into this input.

223
00:27:00.720 --> 00:27:11.700
Ryan Mehta: It should put that same text inside of this div down below. We just want to make sure that these two things are tied together. That's the goal of this test.

224
00:27:13.980 --> 00:27:14.430
Okay.

225
00:27:16.530 --> 00:27:22.290
Ryan Mehta: So first thing that we're going to do is render our color picker.

226
00:27:23.610 --> 00:27:24.240
Component.

227
00:27:25.380 --> 00:27:28.050
Ryan Mehta: And I think this will get our test to fail.

228
00:27:34.410 --> 00:27:39.060
Ryan Mehta: Because there's nothing in our color picker component at all.

229
00:27:41.940 --> 00:27:46.710
Ryan Mehta: On the right hand side, you need to import react will import component

230
00:27:47.910 --> 00:27:53.670
Ryan Mehta: From react and then we'll start creating our component export default

231
00:27:55.980 --> 00:28:00.690
Ryan Mehta: Color Picker extends component

232
00:28:01.920 --> 00:28:03.960
Ryan Mehta: And components have a render method.

233
00:28:06.060 --> 00:28:06.630
Like so.

234
00:28:08.820 --> 00:28:16.650
Ryan Mehta: All render methods need to return some J sx. Let's just put a little placeholder J SX for now an H1 that says

235
00:28:18.540 --> 00:28:18.840
Hi.

236
00:28:21.090 --> 00:28:26.190
Ryan Mehta: All right, that gets our test to pass. So we're just slowly building up the component one step at a time.

237
00:28:27.270 --> 00:28:37.650
Ryan Mehta: We've rendered our page, we can get access to the entire screen that gets rendered by importing screen also to screen is like the browser window.

238
00:28:39.540 --> 00:28:40.800
Ryan Mehta: That we have access to

239
00:28:42.840 --> 00:28:53.160
Ryan Mehta: The next thing that we want to do is type into the input box. So we're gonna bring in one more thing called fire event.

240
00:28:55.410 --> 00:29:00.090
Ryan Mehta: We need to get the input box. So I'm going to do something like constant

241
00:29:01.920 --> 00:29:15.240
Ryan Mehta: text input equals, we're going to look on the screen. We're going to find by label text. So our text input is going to have a label next to it.

242
00:29:16.890 --> 00:29:26.820
Ryan Mehta: That will say text and this will find the input that's associated with the text label. So this lets you find our input for us.

243
00:29:28.170 --> 00:29:47.640
Ryan Mehta: And then we're going to fire an event. We're going to fire the change event so on, you know, like the inputs have on change this fires that on change event on our text input and then we pass it an event. So an event has a target and the value

244
00:29:49.200 --> 00:29:50.520
I text.

245
00:29:52.440 --> 00:29:56.370
Ryan Mehta: So here we're saying what the event should look like.

246
00:29:57.750 --> 00:30:00.540
Ryan Mehta: Events have a target and then they have a value.

247
00:30:02.160 --> 00:30:06.210
Ryan Mehta: And this is what like this is what the user just typed into our input box.

248
00:30:08.400 --> 00:30:11.370
Ryan Mehta: We get a failing test the given element does not

249
00:30:12.630 --> 00:30:20.730
Ryan Mehta: Does not have a value setter, because we don't have this text input doesn't exist on the screen yet so wasn't able to find it.

250
00:30:22.200 --> 00:30:29.280
Ryan Mehta: Let's make it so that text input exists. I'm going to make a little fragment here. We're going to make a label.

251
00:30:30.870 --> 00:30:37.980
Ryan Mehta: Whose text is text, the label is going to be for our text.

252
00:30:39.840 --> 00:30:40.650
Control.

253
00:30:42.210 --> 00:30:44.490
Ryan Mehta: And then we'll have an input right below this

254
00:30:46.920 --> 00:30:49.800
Ryan Mehta: ID is text control.

255
00:30:53.400 --> 00:30:55.680
Ryan Mehta: Who's tight.

256
00:30:56.880 --> 00:30:58.320
Is text.

257
00:30:59.550 --> 00:31:01.830
Ryan Mehta: The value should be something

258
00:31:02.940 --> 00:31:05.640
Ryan Mehta: And on change, we need to do something.

259
00:31:10.230 --> 00:31:11.880
Ryan Mehta: Where should this value come from.

260
00:31:15.390 --> 00:31:15.990
Ben Waples: Stay

261
00:31:16.500 --> 00:31:17.760
Ryan Mehta: stay exactly

262
00:31:17.910 --> 00:31:19.560
Ryan Mehta: Yeah, so we'll set up some

263
00:31:19.590 --> 00:31:31.350
Ryan Mehta: State will have text will start off as an empty string. And I'm going to start the structuring our state up here so we'll grab text from this state.

264
00:31:32.520 --> 00:31:34.440
Ryan Mehta: And then we can pass that text.

265
00:31:37.500 --> 00:31:45.870
Ryan Mehta: All right. And for now, instead of putting an actual function here, I'm just gonna have a little placeholder arrow function that does nothing.

266
00:31:48.720 --> 00:31:50.610
Ryan Mehta: Which hopefully gets our test to pass.

267
00:31:52.920 --> 00:31:59.760
Ryan Mehta: Same error label text HTML for text control.

268
00:32:02.700 --> 00:32:06.000
Ryan Mehta: The given element does not have a value.

269
00:32:07.650 --> 00:32:07.980
Ryan Mehta: Set

270
00:32:25.410 --> 00:32:27.240
Ryan Mehta: Anybody seen typos that I have

271
00:32:28.200 --> 00:32:29.670
Edgar Cuellar: Is it because it's capitalized.

272
00:32:42.000 --> 00:32:46.140
Ben Waples: What's the HTML for tag of nursing not inside of the label.

273
00:32:46.770 --> 00:32:52.020
Ryan Mehta: Yeah, so on labels. You can have a for usually in HTML.

274
00:32:53.400 --> 00:33:01.770
Ryan Mehta: And this just ties the label to the input. So when you click on the label it will click on the input, you probably have seen does a radio buttons before

275
00:33:02.970 --> 00:33:19.560
Ryan Mehta: But in React, you can't say for here because we're in JavaScript. So it renamed it to HTML for and this is just, again, tying the label to the input. So it should tie this label to this input.

276
00:33:27.180 --> 00:33:33.090
Ryan Mehta: The given element does not have a value setter. Well, what if we got rid of this part for now.

277
00:33:38.490 --> 00:33:40.110
Ryan Mehta: It looks like he passed. Ah.

278
00:33:48.150 --> 00:33:51.570
Ryan Mehta: That's because this needs to be a weighted

279
00:33:55.980 --> 00:33:57.240
Ryan Mehta: We await this thing.

280
00:34:00.240 --> 00:34:06.120
Ryan Mehta: Okay, perfect. And at the top, we need to import or

281
00:34:07.740 --> 00:34:09.600
Ryan Mehta: Okay, I'm getting it. I'm getting there.

282
00:34:11.040 --> 00:34:23.490
Ryan Mehta: So when you find a piece of when you do these queries to find something on the screen, you need to await it like it needs to go and find it and that returns a promise to find the element.

283
00:34:24.660 --> 00:34:29.550
Ryan Mehta: So every timer case, we get the same result when you return the promise chain.

392
01:02:32.820 --> 01:02:37.020
Ryan Mehta: The end result is whatever is returned from this last dot then

393
01:02:38.490 --> 01:02:41.400
Ryan Mehta: So this case, it's our list of characters.

394
01:02:42.630 --> 01:02:48.330
Ryan Mehta: In our basic await case, it's kind of a little bit more clear for returning that list of character names.

395
01:02:53.010 --> 01:02:58.800
ryan Diffenbaugh: Here. Right. Is there a reason to use one or the other, or is it just a matter of personal preference. I'm

396
01:03:00.570 --> 01:03:03.690
ryan Diffenbaugh: Just trying to think about your use case for using one rather than

397
01:03:04.920 --> 01:03:07.170
Ryan Mehta: Yeah, totally, a matter of personal preference. You can

398
01:03:07.890 --> 01:03:10.710
Ryan Mehta: Always do the same things with both

399
01:03:11.820 --> 01:03:22.170
Ryan Mehta: And there are cases where promise chains look nicer. And there's some cases where a single wait looks nicer. So just case by case really a sink await is newer

400
01:03:24.750 --> 01:03:26.340
That's something to keep in mind also

401
01:03:29.400 --> 01:03:40.080
Ryan Mehta: In either of these cases, whether we use the promise chain style or the a sink await style, the user of the function. Oh, hold on. Here's a little refactor.

402
01:03:41.280 --> 01:03:42.120
That's super important.

403
01:03:43.680 --> 01:03:52.470
Ryan Mehta: In either case, whether we use promise chains or a sink await the user the function has no idea whether we use the promise chain or a sink await

404
01:03:54.210 --> 01:03:57.000
Ryan Mehta: Those functions always return promises.

405
01:03:57.870 --> 01:04:10.350
Ryan Mehta: So we can drop them off effects characters to get the list of character names, whether we use a sink away or promise chains. We can also await fetch characters, whether we use promise chains or a single wait

406
01:04:10.710 --> 01:04:18.990
Ryan Mehta: To get our list of characters, the user of our function has no idea what should the two strategies we took to create our function.

407
01:04:22.140 --> 01:04:26.670
Ryan Mehta: So they're totally equivalents from the outside world to the outside world.

408
01:04:35.310 --> 01:04:36.030
Ryan Mehta: Make sense

409
01:04:39.420 --> 01:04:39.750
Ryan Mehta: Yeah.

410
01:04:41.010 --> 01:04:43.320
Ryan Mehta: I think for me.

411
01:04:47.040 --> 01:04:49.380
Ryan Mehta: I like both of the syntax is honestly

412
01:04:52.650 --> 01:04:55.710
Ryan Mehta: I tend to default to promise chains.

413
01:04:56.940 --> 01:05:00.390
Ryan Mehta: Just because I'm more used to them. I think a single weight is a bit new

414
01:05:02.640 --> 01:05:09.420
Ryan Mehta: So I default to this, but there's no reason why couldn't default to a think await instead

415
01:05:10.770 --> 01:05:31.830
Ron Yonker: Almost chains really look a lot to me like comparative almost like C plus plus like line by lines reprogramming in some ways I guess it makes it really explicit. What you're doing like I'm seeing the do this, then do this after that. Take this, then do that.

416
01:05:33.300 --> 01:05:34.170
Ryan Mehta: Yeah, totally.

417
01:05:36.570 --> 01:05:42.330
Ryan Mehta: Yeah, I think, because while you're using the then the promise chains.

418
01:05:43.350 --> 01:05:49.710
Ryan Mehta: Day entire time that you're writing your code, you realize that you're dealing with promises. I think that's the reason why I default to it.

419
01:05:50.580 --> 01:06:04.260
Ryan Mehta: Because I never lose track of the idea that I'm dealing with asynchronous code when you use a single wait. Sometimes you can lose track that you're dealing with asynchronous code at all to kind of hide that fact for you.

420
01:06:05.610 --> 01:06:08.430
Ryan Mehta: And I think because of that you could make some bad decisions.

421
01:06:10.440 --> 01:06:12.300
About dealing with your asynchronous code.

422
01:06:17.970 --> 01:06:18.780
Ryan Mehta: web pack.

423
01:06:19.860 --> 01:06:24.450
Ryan Mehta: Did you all do that reading about web pack. Anybody know what but it kind of know what web pack is

424
01:06:25.740 --> 01:06:26.670
Ryan Mehta: A bit confusing.

425
01:06:27.180 --> 01:06:40.290
Ron Yonker: It feels like it's if you wanted to do all of the things that create React app has been doing for ue you use these like find query things you need to await the

284
00:34:30.990 --> 00:34:32.340
Ryan Mehta: Put in a week beforehand.

285
00:34:33.450 --> 00:34:35.970
Ryan Mehta: So now our test passes. Good.

286
00:34:37.890 --> 00:34:41.160
Ryan Mehta: So we found this text out this input.

287
00:34:42.300 --> 00:34:47.010
Ryan Mehta: And then we change the input typing in my text into the input.

288
00:34:47.910 --> 00:34:49.290
Jerud Moyer: When that happens,

289
00:34:49.440 --> 00:34:50.550
Ryan Mehta: We want to make sure that

290
00:34:50.550 --> 00:34:59.940
Ryan Mehta: There's some sort of div or something on the page that now says my text. So let's get another element will call it our display element.

291
00:35:01.260 --> 00:35:01.470
Michelle Stermitz: Right.

292
00:35:04.140 --> 00:35:08.190
Ryan Mehta: Oh this Babel Polycom, we'll talk about that in one second. Okay.

293
00:35:09.060 --> 00:35:11.820
Ryan Mehta: This is what allows us to do a sink away.

294
00:35:12.660 --> 00:35:13.830
Ryan Mehta: On the front end.

295
00:35:15.000 --> 00:35:17.280
Ryan Mehta: Create React app just happens to come with it.

296
00:35:18.300 --> 00:35:20.070
Ryan Mehta: He didn't have to mess with it too much.

297
00:35:22.410 --> 00:35:29.970
Ryan Mehta: So we will await screen. We're going to find something by its test ID.

298
00:35:30.990 --> 00:35:33.810
Ryan Mehta: Display so you can give things IDs.

299
00:35:35.160 --> 00:35:52.770
Ryan Mehta: If you don't want the ID to actually make it to the ending resulting the like resulting HTML, you can add a test ID to things also. So in our case will have a div with a test ID equal to display.

300
00:35:54.570 --> 00:35:55.140
Like that.

301
00:35:56.790 --> 00:36:01.080
Ryan Mehta: This over here is grabbing this did for us.

302
00:36:02.970 --> 00:36:04.320
Ryan Mehta: And then we expect

303
00:36:05.370 --> 00:36:10.350
Ryan Mehta: The display to text content.

304
00:36:11.370 --> 00:36:12.300
My text.

305
00:36:19.260 --> 00:36:31.470
Ryan Mehta: So in order. This is kind of a nice little thing to be able to use this to have text content. So this is saying that this div should have my

306
00:36:32.220 --> 00:36:45.870
Ryan Mehta: Text as its text content and we're going to make you have that text content by passing this text piece of state there. But this is just grabbing that text content. Same with like vanilla JavaScript, you have that dot text content stuff.

307
00:36:47.070 --> 00:36:55.770
Ryan Mehta: In order to get this like just to understand these things. There's another library that we're going to be using tons of libraries.

308
00:36:57.300 --> 00:37:17.220
Ryan Mehta: This one is called just DOM. So just DOM gives us a bunch of these like matters that let you match based on Don values. So you can say like you expect an element to be empty or to have a class or to have

309
00:37:18.600 --> 00:37:19.530
Ryan Mehta: Were style.

310
00:37:20.760 --> 00:37:33.270
Ryan Mehta: Style. Yeah, to have a style or whatever. So these are all like very convenient ways to test that you'll react application has the appropriate values attached to it.

311
00:37:34.410 --> 00:37:41.880
Ryan Mehta: In order to use this though, we need to import it at the top. So I'm going to import testing library just DOM.

312
00:37:42.960 --> 00:37:46.530
Ryan Mehta: Splash extend expect

313
00:37:47.880 --> 00:37:48.480
It is

314
00:37:50.340 --> 00:37:56.610
Ryan Mehta: And that should allow me to now use this to have text content stuff.

315
00:38:00.030 --> 00:38:02.280
Ryan Mehta: You don't have to memorize this, you can just copy mine.

316
00:38:03.510 --> 00:38:04.290
Ryan Mehta: After this

317
00:38:05.670 --> 00:38:24.570
Ryan Mehta: So we're saying now we're rendering our color picker we're grabbing the text input this input here we're typing into that text input my text and we're expecting that this div displays whatever we typed into the input, which was our original goal right

318
00:38:25.740 --> 00:38:37.110
Ryan Mehta: Right now we have a failing test because the text content is empty. When it expected it to be my text we can put them my text inside of the div by

319
00:38:38.190 --> 00:38:39.480
Placing text.

320
00:38:40.830 --> 00:38:41.250
There.

321
00:38:43.770 --> 00:38:45.720
Ryan Mehta: And then hopefully our test passes.

322
00:38:49.770 --> 00:38:50.460
Close.

323
00:38:52.380 --> 00:38:55.560
Ryan Mehta: Very close. What do you think is happening here.

324
00:38:55.950 --> 00:38:56.760
Ryan Mehta: In the ideas.

325
00:38:59.640 --> 00:39:01.980
Ryan Mehta: What happens when you change state and react.

326
00:39:05.640 --> 00:39:06.960
ryan Diffenbaugh: it refreshes the page.

327
00:39:07.920 --> 00:39:09.240
Ryan Mehta: refreshes the page.

328
00:39:09.690 --> 00:39:09.900
Ryan Mehta: Yeah.

329
00:39:09.930 --> 00:39:16.050
Ryan Mehta: Re renders the component that whole re rendering is asynchronous. It doesn't happen right away.

330
00:39:20.190 --> 00:39:32.490
Ryan Mehta: User, it seems like it's happening right away, but it's actually taking some amount of time to actually happen. Well, we want to do is wait for some amount of time until the state changes.

331
00:39:33.570 --> 00:39:39.180
Ryan Mehta: This react testing library gives us a nice convenient way to do that. It has this wait for

332
00:39:41.100 --> 00:39:44.640
Ryan Mehta: That lets us wait for this expect

333
00:39:45.990 --> 00:39:46.650
To happen.

334
00:39:48.630 --> 00:39:49.290
Ryan Mehta: So it's like

335
00:39:50.850 --> 00:40:14.790
Ryan Mehta: Render the the Color Picker onto the screen grab the text input this thing type into the text input find this display item, we can actually put these fines together at the top, maybe this looks better. So render our color picker find our text input and find our display.

336
00:40:16.320 --> 00:40:33.390
Ryan Mehta: And then type into the text input and then wait until the display displays my text, the wait for will wait for a few seconds for that change to happen if it never happens. And the test will fail if it does happen eventually, then the test will pass

337
00:40:34.590 --> 00:40:35.760
Ryan Mehta: So I think our test.

338
00:40:36.930 --> 00:40:42.660
Ryan Mehta: should hopefully pass it does it. Which is fine.

339
00:40:45.390 --> 00:40:46.590
Ryan Mehta: My don't you pass

340
00:40:53.310 --> 00:40:56.010
Annalise Murphy: Values coming up empty is not already

341
00:40:57.360 --> 00:40:58.950
Ryan Mehta: That makes me a bit worried. Yeah.

342
00:41:03.270 --> 00:41:04.350
Ryan Mehta: For me experiment.

343
00:41:17.760 --> 00:41:21.690
Michelle Stermitz: Us away line 19 is written with data test ID.

344
00:41:25.140 --> 00:41:26.730
Michelle Stermitz: Underlined I

345
00:41:26.790 --> 00:41:30.690
Ryan Mehta: Think. Oh, I think it's okay. Just, just as lead thing.

346
00:41:32.100 --> 00:41:33.810
Ryan Mehta: But yeah, somebody said it's because we

347
00:41:34.140 --> 00:41:37.920
Ryan Mehta: We haven't done it yet. It's like expected to fail, really.

348
00:41:39.990 --> 00:41:42.270
Ryan Mehta: So a lot of debugging.

349
00:41:42.750 --> 00:41:44.250
Ryan Mehta: Or something that should fail.

350
00:41:44.970 --> 00:41:54.810
Ryan Mehta: So, it fails because we never wrote this on change handler. Let's write that little method up above and don't change.

351
00:41:57.120 --> 00:41:59.850
Ryan Mehta: When we do our handle change or get an event.

352
00:42:01.020 --> 00:42:10.950
Ryan Mehta: We want to set state when a set the text state based on a bed so event target dot

353
00:42:11.970 --> 00:42:12.600
Ryan Mehta: Value.

354
00:42:15.210 --> 00:42:18.960
Ryan Mehta: And then we're going to use this handle change function secret.

355
00:42:21.120 --> 00:42:22.110
Ryan Mehta: Can change.

356
00:42:23.730 --> 00:42:28.590
Ryan Mehta: And then our test should pass. Okay, we got there.

357
00:42:31.800 --> 00:42:36.840
Ryan Mehta: So let's look at the test and the implementation. One more time, since that was a bit much. I think

358
00:42:38.490 --> 00:42:45.570
Ryan Mehta: we render a color picker, which is this component here onto the screen we find the text input.

359
00:42:47.370 --> 00:42:49.890
Ryan Mehta: And the display div.

360
00:42:51.180 --> 00:43:03.030
Ryan Mehta: We fire an event, the change event on to the text input. So we typed into the text input and give it a target value of my text.

361
00:43:04.230 --> 00:43:17.760
Ryan Mehta: When we when we trigger this change, it should invoke the handle change function will be handled change function is invoked we set our text piece of state to event, which is this object.

362
00:43:18.420 --> 00:43:35.790
Ryan Mehta: Dot target value which changes this text, which causes a re render we wait for that re render to finish and expect the display to now have text my text inside of it, since that's what we typed into the box.

363
00:43:37.440 --> 00:43:37.980
With good

364
00:43:40.920 --> 00:43:42.630
Ryan Mehta: We can do a little bit of refactoring.

365
00:43:42.690 --> 00:43:46.980
Ryan Mehta: I use the D structure event here and grab just target off of it.

366
00:43:48.120 --> 00:43:50.280
Ryan Mehta: So then I don't have to have the extra

367
00:43:51.330 --> 00:43:51.750
Cool.

368
00:43:56.670 --> 00:43:59.490
Annalise Murphy: So smart that was yeah what

369
00:44:01.080 --> 00:44:01.500
Ryan Mehta: Yeah.

370
00:44:01.920 --> 00:44:02.280
Annalise Murphy: I guess like

371
00:44:02.580 --> 00:44:04.680
Ryan Mehta: That I changed that I kept

372
00:44:06.840 --> 00:44:08.490
Ryan Mehta: Saying so cool.

373
00:44:09.060 --> 00:44:10.530
Annalise Murphy: That's really cool. Yeah.

374
00:44:12.030 --> 00:44:17.880
Ryan Mehta: Sorry tested still pass after that refactor. It does. Let's also start our application.

375
00:44:19.440 --> 00:44:33.180
Ryan Mehta: And let's drop this color picker into App JS, so we can see it render on our page. So instead of using hello will use our newly developed color picker and app JS.

376
00:44:34.350 --> 00:44:39.510
Ryan Mehta: And look at it on our page. Here's a text.

377
00:44:41.550 --> 00:44:48.450
Ryan Mehta: Okay, so it works manually tested it works and automated tested it works.

378
00:44:51.270 --> 00:44:52.050
Ryan Mehta: The same good

379
00:44:54.360 --> 00:44:54.840
Ryan Mehta: Okay.

380
00:44:56.370 --> 00:44:58.890
Ron Yonker: Not have to pick your brain on it later.

381
00:45:00.990 --> 00:45:04.140
Ryan Mehta: Cool. Well, we're going to do another one of these same types of things.

382
00:45:05.370 --> 00:45:10.170
Ryan Mehta: So we just added this text input.

383
00:45:12.300 --> 00:45:14.760
Let's recapitalize these things.

384
00:45:16.140 --> 00:45:31.650
Ryan Mehta: We just added this text input. Now we want to add a color input. So, be able to change the background color of our div. Let's read another test. It changes the background color.

385
00:45:34.680 --> 00:45:35.880
Ryan Mehta: Changes the

386
00:45:37.020 --> 00:45:38.550
Ryan Mehta: Display displays.

387
00:45:41.220 --> 00:45:44.280
Ryan Mehta: Background color on color.

388
00:45:47.340 --> 00:45:55.110
Ryan Mehta: So in addition to a text input. We also want a background color input that changes the background color of this did

389
00:45:57.150 --> 00:46:00.390
Ryan Mehta: First thing we're going to do is render our color picker.

390
00:46:02.550 --> 00:46:06.690
Ryan Mehta: And then we're going to get the two things that we need, we want to get our

391
00:46:08.850 --> 00:46:09.810
Ryan Mehta: Background

392
00:46:11.610 --> 00:46:13.920
Ryan Mehta: Color and put

393
00:46:15.270 --> 00:46:19.140
Ryan Mehta: Will get that by a waiting screen find by

394
00:46:21.360 --> 00:46:22.110
Ryan Mehta: Label

395
00:46:23.130 --> 00:46:29.430
Ryan Mehta: Will have a label called back ground color on this one.

396
00:46:30.570 --> 00:46:31.770
Needs to be a sink.

397
00:46:35.100 --> 00:46:37.440
Ryan Mehta: And then we'll also get our display.

398
00:46:47.670 --> 00:46:49.800
Ryan Mehta: So we'll get our two things.

399
00:46:50.880 --> 00:47:01.980
Ryan Mehta: Are touching still passed since we're not using this background color input yet. But as soon as we fire an event. We're going to fire the change event background color.

400
00:47:05.520 --> 00:47:18.720
Ryan Mehta: We're going to give it an event object with a target and the value this time to value needs to be a color right since we're changing the color. So I'm going to give it to the hex color of red

401
00:47:26.250 --> 00:47:26.940
Ryan Mehta: That look good.

402
00:47:29.850 --> 00:47:35.400
Ryan Mehta: So to get this thing to work. We're going to need to add a label. Another label.

403
00:47:37.650 --> 00:47:43.380
Ryan Mehta: This time it's going to be HTML for our background.

404
00:47:54.690 --> 00:47:55.530
Ryan Mehta: Background

405
00:47:57.510 --> 00:47:58.980
Ryan Mehta: And then we'll have an input.

406
00:48:00.210 --> 00:48:06.150
Ryan Mehta: Whose ideas also background color label or background color control.

407
00:48:09.060 --> 00:48:21.150
Ryan Mehta: Its type is going to be color. So there's an input type color, which will give us like a little color wheel to select our color its value will need to be something and on change, it will need to do something.

408
00:48:23.790 --> 00:48:30.330
Ryan Mehta: So just like we did with the text input, we're going to add a new piece of state called background color.

409
00:48:32.400 --> 00:48:37.830
Ryan Mehta: And will default the background color to black actually to white.

410
00:48:39.030 --> 00:48:41.580
Ryan Mehta: To black so we can see it on the screen a bit better.

411
00:48:43.500 --> 00:48:47.580
Ryan Mehta: We'll have this value set to that background color piece of state.

412
00:48:49.410 --> 00:48:52.080
Ryan Mehta: And for now let's just have a

413
00:48:54.270 --> 00:48:57.840
Ryan Mehta: Function that does nothing. This time, let's not forget that we did that, though.

414
00:49:01.110 --> 00:49:19.920
Ryan Mehta: Okay, so we render a color picker we grab our background color input would grab or display. And then we've fire a change on our background color input to change the color from black and we expect it to go to read

415
00:49:21.720 --> 00:49:24.570
Ryan Mehta: So at this point we want to wait for

416
00:49:30.600 --> 00:49:36.840
Ryan Mehta: We want to expect our display to have style.

417
00:49:38.700 --> 00:49:39.900
Ryan Mehta: Background color.

418
00:49:43.290 --> 00:49:45.750
Ryan Mehta: And we expected to turn to read

419
00:49:48.720 --> 00:49:49.680
Ryan Mehta: That makes sense.

420
00:49:55.410 --> 00:50:07.110
Ryan Mehta: So we grab our color input or we render a color input we grab our background color we render a color picker we grab our background color input.

421
00:50:08.190 --> 00:50:17.130
Ryan Mehta: We grab our display on changing our background color input we want this diverse background color to change.

422
00:50:20.010 --> 00:50:29.070
Ryan Mehta: So we can add a style to this div. Have you all use the inline styles in React, I'm assuming, so right.

423
00:50:32.130 --> 00:50:34.950
Ben Waples: Danny said it back. But, you know, we have

424
00:50:35.550 --> 00:50:36.600
Ryan Mehta: It is a hack. Yeah.

425
00:50:39.900 --> 00:50:41.880
Jerud Moyer: I don't think we ever really did it to me.

426
00:50:45.900 --> 00:50:46.620
Ryan Mehta: So this is how

427
00:50:47.490 --> 00:50:51.060
Ron Yonker: We say that we watched him do it a couple times briefly.

428
00:50:57.870 --> 00:51:10.050
Ryan Mehta: So we add a style the background color should be whates manually and change some of the defaults web pack is your guy.

426
01:06:41.220 --> 01:06:47.850
Ryan Mehta: Totally, yeah. Create React app actually uses web pack under the hood. Also, it just hides it from us.

427
01:06:50.130 --> 01:07:05.520
Ryan Mehta: I think in the lab today. The last exercise is telling you to make create React app application and do this MPM eject when you object to create React app, you actually get to see the web pack config that they're using internally.

428
01:07:07.320 --> 01:07:08.550
So that will be kind of cool.

429
01:07:11.070 --> 01:07:20.250
Ryan Mehta: At the surface web pack is used to bundle multiple JavaScript files into a single file. It's called a Bundler.

430
01:07:23.220 --> 01:07:23.880
Ryan Mehta: But deliver

431
01:07:25.350 --> 01:07:31.020
Ryan Mehta: So what that really means is we start off with a bunch of JS files.

432
01:07:34.410 --> 01:07:39.300
Ryan Mehta: We've all written a bunch of JS files on our front end applications before

433
01:07:42.180 --> 01:07:48.900
Ryan Mehta: Let's say, like, maybe we have 10 of these files. Well, web pack does is take all 10 of these files.

434
01:07:50.760 --> 01:07:56.220
Ryan Mehta: And bundles them into one single large JS file.

435
01:07:58.920 --> 01:08:02.010
Ryan Mehta: There are some reasons why this was necessary at some point.

436
01:08:03.060 --> 01:08:07.980
Ryan Mehta: In the past, you all have gotten to see this import, export stuff.

437
01:08:11.130 --> 01:08:20.520
Ryan Mehta: Which makes it so your JavaScript files can live across multiple files and import and export from each other. But this syntax is super, super new

438
01:08:21.450 --> 01:08:31.620
Ryan Mehta: Like in the last couple of years browsers have supported this before that there was no way to have your JavaScript in multiple files like this easily

439
01:08:32.970 --> 01:08:46.650
Ryan Mehta: So what people would do is they would end up writing all of their JavaScript. And one really large file. Imagine putting all of your code in one file and tried to reason about what's happening in it, it would be impossible.

440
01:08:48.600 --> 01:08:53.370
Ryan Mehta: Or at least near impossible people did it so it's not impossible, but it would be really painful.

441
01:08:54.450 --> 01:09:05.700
Ryan Mehta: There had been some projects that I've worked on where there was one single JavaScript file that was like 14,000 lines of code. And it made it really, really hard to figure out.

442
01:09:06.150 --> 01:09:16.830
Ryan Mehta: Where the code that I was interested in was, it also made my computer super slow when you open up a file that large your editor starts to like lag a lot

443
01:09:18.660 --> 01:09:33.390
Ryan Mehta: This was like a totally painful experience. So things like bundlers came around which let us break up our JavaScript into multiple files and use the the node import, export syntax.

444
01:09:34.830 --> 01:09:55.560
Ryan Mehta: To share code between these files and then web pack since the browser doesn't understand the node import like require module about export syntax web pack would read all of those imports and exports and output a single JavaScript file that the browser could understand

445
01:09:57.690 --> 01:09:59.880
Ryan Mehta: So make people's life a lot easier.

446
01:10:01.290 --> 01:10:11.730
Ryan Mehta: Now that import, export exists in the browser, there's less need for this sort of bundling but it's still really nice to have. In some cases,

447
01:10:12.990 --> 01:10:27.510
Ryan Mehta: Whenever you import an export files, the browser actually makes a request to your server to get that file with this, the browser just has to make one request for your giant JavaScript file instead of run one request per file that you have

448
01:10:30.390 --> 01:10:43.950
Ryan Mehta: Some other big benefits to this that we'll talk about in a second. But at its base level. This is what web pack is made for taking a bunch of JavaScript files and bundling them all into one single JavaScript file.

449
01:10:51.000 --> 01:11:01.020
Ryan Mehta: Okay, oh why web pack until recently modules didn't exist in JavaScript, forcing you to write all of your code in a single file or deal with multiple script tags in your HTML.

450
01:11:01.890 --> 01:11:12.840
Ryan Mehta: Some browser still don't support ECMO script module that is sort of true, but none of the browsers that people actually use so less true nowadays.

451
01:11:16.350 --> 01:11:26.640
Ryan Mehta: And one of the big reasons why web pack is still used today, is it allows us to run our code through loaders that automatically trance form our code.

452
01:11:27.990 --> 01:11:33.510
Ryan Mehta: This is super important for us. It allows us to write really modern JavaScript.

453
01:11:34.560 --> 01:11:37.800
Ryan Mehta: But make it available for older browsers.

454
01:11:39.090 --> 01:11:54.270
Ryan Mehta: Or it allows us to take JS x, the browser has no idea what how to deal with jazz sex and convert it into vanilla JavaScript normal JavaScript web pack is doing both of these things for us so we can write code.

455
01:11:55.650 --> 01:12:03.660
Ryan Mehta: That people that doesn't work in browsers yet and web pack will transform it into code that does work in current browsers.

456
01:12:04.290 --> 01:12:20.160
Ryan Mehta: It will also let us write code like J SX that browsers don't understand and trance trance pilot into code that browsers do understand. And this all happens through a process through these loaders web pack.

457
01:12:21.570 --> 01:12:22.350
I have a question.

458
01:12:23.640 --> 01:12:25.260
Annalise Murphy: How recent is recent

459
01:12:26.730 --> 01:12:27.750
Ryan Mehta: For

460
01:12:28.680 --> 01:12:31.110
Annalise Murphy: The modules, the top that present

461
01:12:31.440 --> 01:12:32.940
Annalise Murphy: This one sec.

462
01:12:33.060 --> 01:12:39.750
Annalise Murphy: So like, like how, like, when did the majority start using web packs, I guess.

463
01:12:40.980 --> 01:12:44.040
Ryan Mehta: web pack has been around for a while like

464
01:12:44.670 --> 01:12:46.770
Annalise Murphy: That's why I was wondering, because it said recent

465
01:12:48.510 --> 01:12:55.500
Ryan Mehta: Yeah yeah web pack has been here for a while but ECMO script modules.

466
01:13:00.390 --> 01:13:02.730
Ryan Mehta: So since Chrome 60

467
01:13:04.560 --> 01:13:19.950
Ryan Mehta: Like I guess star that's pretty important to like between 61 and 72 62,017

468
01:13:20.280 --> 01:13:20.640
Okay.

469
01:13:21.720 --> 01:13:27.720
Annalise Murphy: Okay, I'm just trying to get a gauge of like some of these tools that we're learning and their time frames.

470
01:13:29.670 --> 01:13:35.400
Ryan Mehta: So, and then full module support didn't happen until January 2019

471
01:13:35.940 --> 01:13:37.260
Annalise Murphy: Okay, yeah, that is

472
01:13:38.880 --> 01:13:39.780
Annalise Murphy: Cool. Thank you.

473
01:13:42.180 --> 01:13:45.150
Ryan Mehta: Yeah, I don't know about. We could check these other browsers, too, but

474
01:13:45.810 --> 01:13:47.010
Ryan Mehta: Um, yeah.

475
01:13:47.610 --> 01:13:48.210
Annalise Murphy: I just

476
01:13:48.510 --> 01:13:52.020
Annalise Murphy: Yeah, I just needed like some I guess like

477
01:13:53.310 --> 01:13:55.440
Annalise Murphy: Timeframe within my mind so

478
01:13:57.780 --> 01:14:01.980
Ryan Mehta: Yeah, one of the big advantages of web pack two is you have to worry less about the different

479
01:14:01.980 --> 01:14:06.510
Ryan Mehta: Browsers because it does a lot of rewriting of your code for you.

480
01:14:13.860 --> 01:14:14.190
Ryan Mehta: Okay.

481
01:14:16.740 --> 01:14:28.650
Ryan Mehta: So what does lead pack look like web pack is a huge configuration file that tells us how to bundle. All of these JavaScript files together so

482
01:14:29.670 --> 01:14:32.160
Ryan Mehta: Let's bring back our little picture.

483
01:14:33.270 --> 01:14:38.340
Ryan Mehta: We have at the heart of web pack a bunch of JavaScript files.

484
01:14:40.650 --> 01:14:47.070
Ryan Mehta: S S and we want to bundle those into one large JS file.

485
01:14:52.380 --> 01:14:58.800
Ryan Mehta: We do this by writing a configuration file. The first piece of this configuration file is an entry point.

486
01:15:00.300 --> 01:15:09.030
Ryan Mehta: In order to start bundling our JavaScript files, we need to provide an entry point. This is our main JavaScript file. Like, where should it start bundling from

487
01:15:10.320 --> 01:15:22.410
Ryan Mehta: So our entry point file is going to be the one that imports, all of our other files. It's like the starting point of our application we tell web pack where that starting point is where that starting point is

488
01:15:24.690 --> 01:15:37.470
Ryan Mehta: When using the build in JavaScript module system, your entry point into the file you provide to the script tag, if not provided the entry field defaults to source dot index JS. So you kind of have seen these entry points before

489
01:15:39.150 --> 01:15:51.720
Ryan Mehta: In foundations one it would have been the file that you put in your source module type equals module, whatever that is the entry point of your application.

490
01:15:54.960 --> 01:16:07.200
Ryan Mehta: We also give our web pack config and output after we've we've bundled our JavaScript into one large JavaScript file. We have to tell web pack where to put this file.

491
01:16:09.510 --> 01:16:11.340
Ryan Mehta: And that is the output.

492
01:16:12.690 --> 01:16:18.930
Ryan Mehta: By default, if you don't provide an output. It's going to put this bundle JavaScript file into a disk folder.

493
01:16:20.760 --> 01:16:24.450
Ryan Mehta: And it will call the JavaScript file main dot j s

494
01:16:27.540 --> 01:16:30.210
Ryan Mehta: Okay, so this is the post bundled file.

495
01:16:33.990 --> 01:16:47.610
Ryan Mehta: There's this very annoying thing as a developer that browsers do they often cache files locally. This is really nice as a user of websites because it makes websites load faster, but as a developer can be super annoying.

496
01:16:50.040 --> 01:16:54.300
Ryan Mehta: So what happens is the browser.

497
01:16:56.010 --> 01:16:58.320
Ryan Mehta: It's dry like a little browser over here.

498
01:17:04.350 --> 01:17:05.910
Ryan Mehta: Right, this is a browser.

499
01:17:07.170 --> 01:17:09.570
Ryan Mehta: It will go and ask for a JavaScript file.

500
01:17:12.450 --> 01:17:19.410
Ryan Mehta: And then somebody returns that JavaScript file and the browser loads it like put something on the screen right

501
01:17:22.110 --> 01:17:38.130
Ryan Mehta: Once it does this. Once the browser remembers that already has gotten this JavaScript file it stores this JavaScript file. And when we go and reload the page, it doesn't actually go fetch this JavaScript file again it realizes that it already has it and it's cash.

502
01:17:39.660 --> 01:17:45.510
Ryan Mehta: So instead of going and loading the JavaScript file asking somebody else for it, it just picks it out of its own pocket.

503
01:17:47.760 --> 01:17:55.560
Ryan Mehta: This is super nice for us because it makes it so we don't have to do this network traffic. If you were on a phone. For example, it means that you don't waste data.

504
01:17:55.980 --> 01:18:09.000
Ryan Mehta: If you're on your computer and you don't care about that and makes it so the site loads a little bit faster. You don't have to download the JavaScript every time, but as a developer, this can be super annoying and let's say I'm over here.

505
01:18:10.530 --> 01:18:20.760
Ryan Mehta: Typing out some code I saved my file my browser reloads but nothing on the page changes because the browser doesn't actually go and ask for my new JavaScript file.

506
01:18:21.180 --> 01:18:27.960
Ryan Mehta: And loads the JavaScript file that I had from before. Before I just made those code changes because it's in the browser cache.

507
01:18:30.180 --> 01:18:43.950
Ryan Mehta: What we want to do is make it so the browser never grabbed stuff from this cash as we're making code changes one easy way to accomplish that is to change the file name every time we change the code.

508
01:18:45.570 --> 01:18:49.440
Ryan Mehta: This is where this like hash thing comes in handy.

509
01:18:51.030 --> 01:18:54.540
Ryan Mehta: So when you do main dot square brackets hash.js

510
01:18:55.740 --> 01:19:11.610
Ryan Mehta: web pack will automatically take the code that you've written and create a random string for it 578 a c.js and every time you change your code this string right here will change.

511
01:19:12.690 --> 01:19:22.260
Ryan Mehta: So now the browser as you change your code will realize that it needs to fetch a new JavaScript file instead of loading a JavaScript file from its cash.

512
01:19:23.490 --> 01:19:32.130
Ryan Mehta: This prevents you from like spending hours trying to figure out why your browser. Why the code isn't changing what's in your browser. Like, I thought I fixed that bug.

513
01:19:34.860 --> 01:19:37.200
Many times, nice.

514
01:19:38.940 --> 01:19:41.310
Annalise Murphy: I'm like, Damn, I gotta look at the private

515
01:19:44.070 --> 01:19:45.090
Ryan Mehta: Totally, yeah.

516
01:19:45.150 --> 01:19:48.180
Ryan Mehta: So this is like our fixed for this putting this hash thing here.

517
01:19:52.320 --> 01:19:55.470
Ryan Mehta: Okay, can I race, just this this side part

518
01:20:08.310 --> 01:20:19.230
Ryan Mehta: There's also this dev server thing. You all have experienced this thing as you were writing your create react apps. It's what lets you start your application and have it.

519
01:20:21.060 --> 01:20:27.090
Ryan Mehta: Have that developer server that lets you reload the browser. Every time you make a code change and those sorts of things.

520
01:20:29.520 --> 01:20:38.400
Ryan Mehta: Ultimately, at some point in the future when you deploy your application you're no longer going to be using this developer server.

521
01:20:39.060 --> 01:20:50.970
Ryan Mehta: The developer server like constantly re bundles your JavaScript and then actually runs a little express server and the express server gives the browser. All of this JavaScript.

522
01:20:52.290 --> 01:21:05.970
Ryan Mehta: At some point we deployed a net lo fi, you're going to be easily been detlef I server instead of the dev server that you're running locally and the network server will pass the JavaScript to the browser instead of that little developer express server.

523
01:21:07.710 --> 01:21:27.420
Ryan Mehta: With web pack. That's pretty easy to start up this dev server, you just add one more piece of configuration dev server and deport that you want this dev server to run on with create react up this port was 3001

524
01:21:28.980 --> 01:21:34.620
Ryan Mehta: Last thing is our dev tool. So this source map stuff.

525
01:21:35.910 --> 01:21:52.620
Ryan Mehta: Since our JavaScript is bundled together our error messages stop really making any sense. You can imagine what this sort of thing would look like we've gone through this bundling process. So we went from having three files to one file.

526
01:21:54.000 --> 01:22:02.100
Ryan Mehta: The error messages are now all revolving around this bundled file. So you'll see an error message like online.

527
01:22:03.480 --> 01:22:06.990
Ryan Mehta: 7000 you have an error.

528
01:22:08.130 --> 01:22:14.670
Ryan Mehta: It can be very hard to figure out where line 7000 is in the original files over there.

529
01:22:15.870 --> 01:22:25.380
Ryan Mehta: Right because line 7000 is in this bundle file, but you don't really debug your bundled file you want to debug your actual source files.

530
01:22:27.120 --> 01:22:45.930
Ryan Mehta: These source maps down here, which you can tell web pack to create our little maps that tell you how to map from this big bundled file back to the original files and lets the browser give you actually meaningful error messages like online six of file one

531
01:22:47.340 --> 01:22:50.940
Ryan Mehta: You haven't bug instead of line 7000 W bundled file.

532
01:22:52.380 --> 01:22:58.830
Ryan Mehta: So the source maps are mapping the bundle file back to the pre bundled source files.

533
01:23:04.470 --> 01:23:06.150
Race that I didn't want to

534
01:23:24.900 --> 01:23:35.610
Ryan Mehta: Alright logos are really one of the most important part of this whole bundling process, especially nowadays that I'm just an erase all of this now.

535
01:23:40.050 --> 01:23:48.750
Ryan Mehta: loaders run our JavaScript code through some function that transpires or transforms our JavaScript for us automatically

536
01:23:49.920 --> 01:24:00.120
Ryan Mehta: A few loaders that we're going to be using the Babel loader which transpires modern JavaScript and to versions that are compatible with older browsers.

537
01:24:01.560 --> 01:24:06.090
Ryan Mehta: So for example, if you use flat map.

538
01:24:08.790 --> 01:24:12.870
Ryan Mehta: Which is a fairly new array method.

539
01:24:14.550 --> 01:24:22.800
Ryan Mehta: In your code, the Babel transpire will try to pilot and to code that is available to other browsers. So it will see that you use flat map.

540
01:24:23.280 --> 01:24:39.360
Ryan Mehta: Realize that flat map is only available on the latest version of Chrome and Firefox and it will change your code into code that is is compatible with Firefox automatically. So it's actually rewriting your code for you.

541
01:24:42.030 --> 01:24:57.390
Ryan Mehta: So transpire. Your modern JavaScript into versions that are compatible with older browsers, you can actually configure this also and tell us which browsers. You want to support and which versions of those browsers. So you can totally write code that's like

542
01:24:58.950 --> 01:25:18.060
Ryan Mehta: Totally modern like using all the S6 syntax. All of our nice cool new syntax and tell the Babel loader to transpire it into code that's available for like IE nine or something and it will convert all of our nice modern JavaScript into JavaScript that Internet Explorer nine would understand

543
01:25:21.240 --> 01:25:35.400
Ryan Mehta: That is both super cool and also super scary because it's cool that we don't have to think about how to do that. It's super scary that this program is rewriting our code for us and we don't really know what it's doing to our code.

544
01:25:39.600 --> 01:25:52.770
Ryan Mehta: There is a style loader. This is what allows us to import CSS files into our JavaScript, you all have probably seen that with your react applications, you are able to import app dot CSS into your JavaScript files.

545
01:25:54.150 --> 01:26:04.440
Ryan Mehta: This loader knows how to handle importing CSS and JavaScript that's not like a normal thing that's like a I think that has to be handled by some loader.

546
01:26:05.340 --> 01:26:16.650
Ryan Mehta: So what does it mean when you import CSS and JavaScript this thing handles that so like converts that converts to CSS files into JavaScript files that injects CSS.

547
01:26:20.160 --> 01:26:25.560
Ryan Mehta: Pretty much all of these things are the same, they're all about injecting CSS and JavaScript.

548
01:26:27.210 --> 01:26:40.500
Ryan Mehta: The last two. Here are the same, but for images when you import an image into your JavaScript file. What does that mean, so some of you have probably imported image from the path to an image into your JavaScript file.

549
01:26:41.820 --> 01:26:46.650
Ryan Mehta: These loaders convert those images into things that JavaScript can understand

550
01:26:47.880 --> 01:26:51.720
Ryan Mehta: To loaders are all about taking our code and

551
01:26:53.250 --> 01:26:57.030
Ryan Mehta: Changing the code based on file types.

552
01:26:59.040 --> 01:27:06.390
Ryan Mehta: Out of all of these. I think the most important one here is this Babel loader. That's the only one that we really want to have some good intuitions about

553
01:27:10.650 --> 01:27:15.300
Ryan Mehta: This is kind of the scariest one too, because it's actually changing our code for us.

554
01:27:17.250 --> 01:27:19.860
Ron Yonker: What's post CSS.

555
01:27:21.180 --> 01:27:23.520
Ryan Mehta: Yeah, we're going to be messing around and post CSS.

556
01:27:25.110 --> 01:27:37.050
Ryan Mehta: For the next few weeks. It just gives us some extra features on top of CSS, if you've heard of SAS or less, or any of these things. It's similar to those

557
01:27:39.270 --> 01:27:43.410
Ryan Mehta: It's just a little bit lighter weight. So you can have like nested CSS and

558
01:27:44.880 --> 01:27:45.600
Things like that.

559
01:27:49.230 --> 01:27:55.170
Ryan Mehta: Alright, so these loaders are added as rules to our config file.

560
01:27:57.780 --> 01:27:59.730
Ryan Mehta: First of all, add babble loader.

561
01:28:00.810 --> 01:28:01.440
Ryan Mehta: So,

562
01:28:02.520 --> 01:28:04.260
Ryan Mehta: Each rule is an object.

563
01:28:06.840 --> 01:28:07.200
Here.

564
01:28:08.370 --> 01:28:12.780
Ryan Mehta: That uses a loader. So we're using the Babel loader.

565
01:28:14.700 --> 01:28:23.340
Ryan Mehta: To transform our JavaScript. We tell it to only transpire files that end with dot j s

566
01:28:27.210 --> 01:28:29.280
Ryan Mehta: And exclude our node modules.

567
01:28:32.280 --> 01:28:37.680
Ryan Mehta: So what's going to happen, we draw our little bundling picture again.

568
01:28:43.380 --> 01:28:46.680
Ryan Mehta: We have our JavaScript files.

569
01:28:51.720 --> 01:29:10.980
Ryan Mehta: That get bundled into one large JavaScript file during this bundling process here in this pipeline right here. Each of these files is going to be tested. So if the file ends with the jazz extension run it through the Babel loader.

570
01:29:12.060 --> 01:29:17.700
Ryan Mehta: So it takes it sees this JavaScript file, it ends with that JS. So it's going to take that file.

571
01:29:18.720 --> 01:29:35.880
Ryan Mehta: And trance pilot change the code. So it like look through it. See all the modern features for every modern feature in this code, it's going to change the code. Once it changes the code, it will add it to our bundle file and they'll do the same for each of these files.

572
01:29:36.930 --> 01:29:39.360
Ryan Mehta: So check to see if it ends with Doc JS.

573
01:29:39.720 --> 01:29:40.530
Ryan Mehta: If it does,

574
01:29:40.560 --> 01:29:41.760
Ryan Mehta: Run it through the Babel.

575
01:29:41.760 --> 01:29:42.300
Ron Yonker: loader.

576
01:29:42.900 --> 01:29:44.190
Ron Yonker: Which will change our code that's

577
01:29:46.110 --> 01:29:46.440
Good.

578
01:29:47.580 --> 01:29:52.950
Ron Yonker: I'm sorry that's taking off yes and trans piling it to jazz x

579
01:29:54.270 --> 01:29:59.250
Ryan Mehta: Other way around so it will take our J SX and transpire into regular JavaScript.

580
01:30:02.250 --> 01:30:12.930
Ron Yonker: Okay, so that's letting us right, Jeff Sachs in our jazz files and making the compiler understand it. Yep.

581
01:30:13.020 --> 01:30:18.810
Ryan Mehta: Exactly. Because the browser doesn't understand the GFX syntax like when you do this in your JavaScript file.

582
01:30:19.770 --> 01:30:35.400
Ryan Mehta: The browser would have no idea how to handle this, it would fail. So the bundle our process here the loader is taking this code and changing it into code that the browser would understand and you can actually see this

583
01:30:36.660 --> 01:30:38.340
Ryan Mehta: In the react documentation.

584
01:30:39.990 --> 01:30:45.840
Ryan Mehta: If you want to see what react looks like without J SX how you would have to write it if he didn't have this transpiring

585
01:30:48.750 --> 01:30:49.860
Clear this time.

586
01:30:51.300 --> 01:30:54.000
Ron Yonker: Yeah, all that create element crap.

587
01:30:54.840 --> 01:30:55.980
Ron Yonker: Yeah, exactly.

588
01:30:56.370 --> 01:31:03.810
Ryan Mehta: React without GFX. So here's what react looks like with J sx. Here's the same code without jazz sex.

589
01:31:04.680 --> 01:31:20.580
Ryan Mehta: So web pack is going to translate this nice looking J sex into something that the browser can actually understand here you'll notice like this isn't actually JavaScript, right. It's just like some nice syntax that we use it react this one actually looks like JavaScript.

590
01:31:21.600 --> 01:31:24.630
Ryan Mehta: But it's also very hard to write imagine

591
01:31:28.110 --> 01:31:32.970
Ryan Mehta: So web pack will transpire this into this

592
01:31:34.170 --> 01:31:35.460
Ryan Mehta: for us automatically

593
01:31:49.200 --> 01:31:51.030
Adrian Simental: Turn one of

594
01:31:51.540 --> 01:31:53.130
Adrian Simental: This one, yeah.

595
01:31:54.540 --> 01:31:55.890
Ryan Mehta: This is props.

596
01:31:59.910 --> 01:32:01.170
Ryan Mehta: Yeah, we don't have to really learn

597
01:32:01.170 --> 01:32:07.800
Ryan Mehta: This syntax is we're not going to be using it, but this would be the props that you're passing to give you can kind of see right here. Right.

598
01:32:08.850 --> 01:32:11.460
Ryan Mehta: But these are the props that you pass to hello

599
01:32:12.840 --> 01:32:16.680
Ryan Mehta: And then over here is your children.

600
01:32:18.900 --> 01:32:24.210
Ryan Mehta: The stuff that you pass inside of div. No, because hello has no children.

601
01:32:31.620 --> 01:32:34.800
Ryan Mehta: Anyways, we don't have to really worry about this one because

602
01:32:35.880 --> 01:32:39.780
Ryan Mehta: It happens all automatically for us with web pack. Luckily,

603
01:32:47.730 --> 01:33:04.410
Ryan Mehta: So this is what it looks like to transpire all these things we test our files at the end with dot j s. We run them through the Babel loader and output, something that looks slightly different will actually play with this a little bit like around 11 will write this file up

604
01:33:05.490 --> 01:33:10.050
Ryan Mehta: Line by line, this config file and see what it does to our little JavaScript files.

605
01:33:13.200 --> 01:33:13.890
Ryan Mehta: Alright.

606
01:33:15.360 --> 01:33:19.770
Ryan Mehta: Any questions about these loaders and the other questions about the loaders.

607
01:33:27.570 --> 01:33:43.650
Ryan Mehta: By the way, you don't have to memorize this stuff, either. Like, you don't have to be able to write this file from the top of your head. Nobody does that. I wouldn't be crazy. Um, these are the types of files that you would write once in a project and never write again but

608
01:33:44.880 --> 01:33:57.990
Ryan Mehta: It would take you maybe a day to write this and the project would last five years. So it's like, I don't know, one out of five times 365 days of a project, you'd have to know how to do this.

609
01:34:02.340 --> 01:34:07.980
Adrian Simental: What else do the locals get updated. What do we have to worry about bugs, because

610
01:34:09.120 --> 01:34:09.930
Ryan Mehta: You totally

611
01:34:10.650 --> 01:34:13.800
Adrian Simental: loader. It's kind of a black box. So we don't know what it's doing to our code.

612
01:34:16.140 --> 01:34:25.050
Ryan Mehta: Yeah, totally. Yeah, you should update the loaders, at least a patch versions. If they find a bug in their loader, you should update those

613
01:34:26.670 --> 01:34:34.080
Ryan Mehta: But at the same time people so rarely I think update their package JSON. Once they actually get it in place.

614
01:34:35.310 --> 01:34:37.920
Ryan Mehta: But yeah, totally should update your loaders over time.

615
01:34:40.380 --> 01:34:46.530
Ryan Mehta: You don't want to be like five years with the same loader and then at some point realized that the loader has a bug.

616
01:34:47.490 --> 01:34:55.620
Ryan Mehta: Five years later and try to update it and everything has changed. So it's like very painful to go through the update process. You want to incrementally upgrade it

617
01:34:56.070 --> 01:35:05.820
Ryan Mehta: To same that you get on your computer, right, like if you push off your computer's updates for a long time. It takes like five years that that your computer because it has to download so much stuff.

618
01:35:07.560 --> 01:35:12.900
Ryan Mehta: On savings sort of thing. It's better to incrementally update these loaders, as they released new changes.

619
01:35:17.010 --> 01:35:30.270
Ryan Mehta: All right, there's one other concept these plugins, which I think is the hardest concept to understand in this web pack process. So let's draw a picture again.

620
01:35:31.890 --> 01:35:33.660
Ryan Mehta: We have our JS files.

621
01:35:36.510 --> 01:35:37.440
Sorry, yes.

622
01:35:40.230 --> 01:35:49.260
Ryan Mehta: We bundle them into a large JavaScript file reading them through loaders, as we're doing the bundling

623
01:35:50.280 --> 01:35:52.830
Ryan Mehta: Um, the last thing that we have are these plugins.

624
01:35:53.940 --> 01:35:58.140
Ryan Mehta: plugins are little hooks into this whole process.

625
01:36:00.090 --> 01:36:01.530
Ryan Mehta: So plugins can

626
01:36:03.120 --> 01:36:08.280
Ryan Mehta: hook into the pre loader section and say like run this function.

627
01:36:09.450 --> 01:36:10.260
Ryan Mehta: Pre load.

628
01:36:13.710 --> 01:36:16.440
Ryan Mehta: Or run this function post load.

629
01:36:18.750 --> 01:36:21.300
Ryan Mehta: Or run this function post

630
01:36:22.680 --> 01:36:23.250
Ryan Mehta: Bundle

631
01:36:25.500 --> 01:36:27.120
Ryan Mehta: And I guess pre

632
01:36:28.290 --> 01:36:28.770
Bundle

633
01:36:30.270 --> 01:36:39.900
Ryan Mehta: So you could just imagine for right now that there are all of these like events that happened throughout this web pack process.

634
01:36:40.950 --> 01:36:54.480
Ryan Mehta: There is an event that gets triggered before we even start doing anything pre bundle. There is an event that happens after all of the JavaScript files are loaded. But before they run through the loaders will call that pre load.

635
01:36:55.980 --> 01:37:08.730
Ryan Mehta: The event that happens after all of the JavaScript files run through the loaders post load and a JavaScript and an event that gets triggered after this bundle file is added post the bundle.

636
01:37:10.050 --> 01:37:13.110
Ryan Mehta: The plugins, let us run functions.

637
01:37:15.270 --> 01:37:18.060
Ryan Mehta: That get triggered based on any of these events.

638
01:37:19.140 --> 01:37:22.560
Ryan Mehta: So they let us hook into the actual web pack process.

639
01:37:24.270 --> 01:37:30.510
Ryan Mehta: This is very, I think I'm hard to understand because it's so flexible and

640
01:37:33.240 --> 01:37:39.300
Ryan Mehta: Yeah, I mean, there's nothing else to really say about this other than you could do anything during these processes.

641
01:37:40.050 --> 01:37:53.190
Ryan Mehta: A few examples of plugins. There's the HTML web pack plugin which injects a bundle JavaScript file into an HTML template you all have actually seen this one. Working with create React app.

642
01:37:54.660 --> 01:37:57.750
Ryan Mehta: With create React app, you had an HTML file.

643
01:37:58.980 --> 01:38:11.430
Ryan Mehta: That was like your base HTML file. And if you ever looked at the HTML file, you wouldn't see a script tag at the bottom and never loaded your JavaScript what was happening is

644
01:38:12.480 --> 01:38:28.800
Ryan Mehta: This HTML file was used as a template and would create a new HTML file after the bundle finished it needed to wait for this post bundle event to happen before it could create the new HTML file.

645
01:38:29.940 --> 01:38:34.710
Ryan Mehta: Because it needed to know where this new JavaScript file existed.

646
01:38:36.240 --> 01:38:41.340
Ryan Mehta: It needed to know that so it could add to the bottom  in our provider Lucy side by side.

553
01:02:25.440 --> 01:02:36.930
Ryan Mehta: So our providers providing background color and handle change our controls crowds the background color and handle change from the bucket. And then we'll place it here.

554
01:02:37.950 --> 01:02:40.260
And our handle change their

555
01:02:42.840 --> 01:02:43.590
Ryan Mehta: Look good

556
01:02:46.020 --> 01:02:52.830
Ryan Mehta: And then we're going to do something similar with display. So in our display component will grab background color.

557
01:02:54.690 --> 01:02:59.430
Ryan Mehta: From us context with our color picker context.

558
01:03:04.470 --> 01:03:10.800
Ryan Mehta: Is in the right place. And then we'll use that background color context to construct hours files.

559
01:03:17.880 --> 01:03:22.950
Ryan Mehta: Eg color and we'll get this thing like a width. I don't know 250 pixels.

560
01:03:34.080 --> 01:03:34.770
That's better.

561
01:03:41.640 --> 01:03:43.290
Ryan Mehta: All right, does this look good.

562
01:03:48.030 --> 01:03:51.240
Ryan Mehta: I think our tests will pass. Now, they do.

563
01:03:53.010 --> 01:04:06.390
Ryan Mehta: So our display receives a background color from the bucket and sets are section with that background color are controls gets the background color and the handle change function from our bucket.

564
01:04:07.650 --> 01:04:19.590
Ryan Mehta: Calls the handle change function whenever input changes and sets the value of the input to that same background color, and it's getting all of those from this left hand side.

565
01:04:22.200 --> 01:04:27.780
Ryan Mehta: reconstruct our state and our provider and then we provide that state to hold our children.

566
01:04:29.430 --> 01:04:30.060
Ryan Mehta: Over here.

567
01:04:33.060 --> 01:04:35.610
Ryan Mehta: Do we see if it works on the actual in the browser.

568
01:04:36.870 --> 01:04:46.410
Ryan Mehta: Go to app JS. I'm going to comment out our old app JS stuff and instead Richter, and our new color.

569
01:04:47.460 --> 01:04:48.180
Ryan Mehta: picker.

570
01:04:56.280 --> 01:04:57.060
Ryan Mehta: Let's check out

571
01:04:57.150 --> 01:04:57.720
Brooke Perkins (she/her): Our

572
01:04:57.750 --> 01:05:00.750
Ryan Mehta: Print. And here's our background color.

573
01:05:02.610 --> 01:05:03.540
That kind of works.

574
01:05:05.730 --> 01:05:07.950
Brooke Perkins (she/her): Can you go with the children thing again.

575
01:05:10.380 --> 01:05:16.200
Ryan Mehta: So back over here, put these things, side by side.

576
01:05:17.940 --> 01:05:20.760
Ryan Mehta: We have this component called color picker provider.

577
01:05:22.320 --> 01:05:36.780
Ryan Mehta: Here we're using that component online seven in between the opening tag of color picker provider and the closing tag of color picker provider. We're putting two other components. These are color picker providers children.

578
01:05:37.680 --> 01:05:45.600
Ryan Mehta: Whenever you put stuff in between the opening and closing tag of a component, these two components get automatically passed.

579
01:05:46.620 --> 01:05:52.560
Ryan Mehta: To the Color Picker provider component as children. So it's like a special prop called children.

580
01:05:54.090 --> 01:06:01.470
Ryan Mehta: And then we're rendering those children onto the screen inside of the components actual block here. Okay.

581
01:06:02.040 --> 01:06:13.680
Brooke Perkins (she/her): And if you had like another you know like constant there with a different provider and it was still, it would still be called children, it would just be like,

582
01:06:15.270 --> 01:06:16.860
Brooke Perkins (she/her): Children or have a different provider.

583
01:06:17.490 --> 01:06:18.060
Ryan Mehta: And it would

584
01:06:18.210 --> 01:06:18.840
Give us that

585
01:06:21.240 --> 01:06:25.410
Ron Yonker: OK, I understand this. This is a fancy way of

586
01:06:26.760 --> 01:06:39.030
Ron Yonker: Giving the US state clock and handled change to all of the children nested within color picker provider without having to explicitly write that out when you invoke them.

587
01:06:41.100 --> 01:06:43.260
Ryan Mehta: Yep, it makes us like color picker provider.

588
01:06:43.260 --> 01:06:45.690
Ron Yonker: Reusable different situations.

589
01:06:49.500 --> 01:06:52.740
Brooke Perkins (she/her): Yeah, I don't know why we hadn't earned that children thing that's cool.

590
01:06:54.030 --> 01:06:55.800
Ryan Mehta: Yeah, it's, it's a convenient way to add

591
01:06:55.800 --> 01:06:58.440
Ryan Mehta: Styles. So you could have like a grid.

592
01:06:59.580 --> 01:07:08.310
Ryan Mehta: Component that gives all it puts all of your children into a grid or flex component that puts all of your children into flex box.

593
01:07:14.070 --> 01:07:15.480
Ryan Mehta: Okay, this look good.

594
01:07:18.360 --> 01:07:23.460
Ryan Mehta: All right, let's add some more state to our global state thing.

595
01:07:24.840 --> 01:07:29.160
Ryan Mehta: Let's open back up and we're tests.

596
01:07:31.350 --> 01:07:38.490
Ryan Mehta: So we tested the background color change that all seem to work. Let's now.

597
01:07:39.750 --> 01:07:43.260
Ryan Mehta: Change the foreground cover.

598
01:07:47.070 --> 01:07:51.630
Ryan Mehta: So, same sort of strategy. We're going to render our color picker.

599
01:07:53.580 --> 01:07:56.760
Ryan Mehta: This time we're going to grab the foreground input.

600
01:08:00.360 --> 01:08:03.120
Ryan Mehta: Label text round.

601
01:08:08.970 --> 01:08:19.800
Ryan Mehta: And this should cause our tests to fail because there is no foreground input yet let's go and add that I'm going to move our controls over here on the right.

602
01:08:21.600 --> 01:08:24.030
Ryan Mehta: We need to add another set of inputs.

603
01:08:25.080 --> 01:08:28.890
Ryan Mehta: So I'll just copy this out of your laziness.

604
01:08:32.070 --> 01:08:48.600
Ryan Mehta: We're going to instead of changing the background color. We're going to be changing the foreground color. This is going to be for FC color our input is f g color that name is to color and then we'll need to fill in some value here.

605
01:08:50.010 --> 01:08:55.950
Ryan Mehta: But at least with an empty string. For now, our tests should pass were able to find that foreground

606
01:08:57.150 --> 01:08:57.690
Ryan Mehta: Input

607
01:08:59.790 --> 01:09:01.380
Ryan Mehta: For get our display.

608
01:09:02.850 --> 01:09:08.100
Ryan Mehta: We're going to get it by test ID to test it was display.

609
01:09:09.840 --> 01:09:16.230
Ryan Mehta: We expect that we should be able to fire a change event on our f g input.

610
01:09:17.730 --> 01:09:19.350
Ryan Mehta: With the target.

611
01:09:20.850 --> 01:09:22.110
Ryan Mehta: Value.

612
01:09:24.150 --> 01:09:25.560
Ryan Mehta: Let's make a green

613
01:09:29.370 --> 01:09:41.400
Ryan Mehta: And then we're gonna wait for a re render wait for the state to update after updates we expect the display to have a style.

614
01:09:42.840 --> 01:09:45.360
Ryan Mehta: Where the color is now.

615
01:09:49.380 --> 01:09:52.500
Ryan Mehta: And are tested fail, most likely

616
01:09:53.790 --> 01:10:02.400
Ryan Mehta: It's so we have a failing tests we tried to change the color green, it doesn't, because we haven't set up this foreground color stuff at all.

617
01:10:04.560 --> 01:10:17.880
Ryan Mehta: So we need to add some new state to our component or to our global state or context back in our color picker context, we have background color. Let's also add

618
01:10:19.560 --> 01:10:29.100
Ryan Mehta: Foreground Color. We're going to set the foreground color. We're going to use state will start off our foreground color as white

619
01:10:30.900 --> 01:10:40.500
Ryan Mehta: And then we'll pass the foreground color to our color picker provider. This line is getting a bit long. So I am going to, let's call it bucket.

620
01:10:42.330 --> 01:10:53.490
Ryan Mehta: We'll have our big color here, we'll have our f g color here and our handle change function here and then we'll replace this object.

621
01:10:54.960 --> 01:10:55.290
Okay.

622
01:10:58.560 --> 01:10:59.820
Ryan Mehta: Just so it's a little bit shorter.

623
01:11:00.960 --> 01:11:12.360
Ryan Mehta: And then our handle change function is going to have to be updated a little bit. Also, right, we're gonna say if the target dot name is BG color.

624
01:11:14.340 --> 01:11:20.490
Ryan Mehta: Then we'll update the background color. If the target name is f g color.

625
01:11:21.630 --> 01:11:24.840
Ryan Mehta: Then we're going to update the foreground color.

626
01:11:28.440 --> 01:11:42.960
Ryan Mehta: And now we're providing both background color foreground color and this handle change function to everyone in our controllers, we're going to grab foreground color out of the bucket and put that in our value.

627
01:11:44.580 --> 01:11:46.830
Ryan Mehta: In our display component

628
01:11:48.060 --> 01:11:59.370
Ryan Mehta: We are also going to grab foreground color out of the bucket and update our styles. So the color should be equal to the foreground color.

629
01:12:01.590 --> 01:12:05.670
Ryan Mehta: And I believe our test will pass

630
01:12:08.700 --> 01:12:14.010
Ryan Mehta: Right, so we're able to grab the foreground color in the background color from context.

631
01:12:16.440 --> 01:12:17.070
Ryan Mehta: Look good

632
01:12:20.940 --> 01:12:25.950
Ryan Mehta: Alright, I'm going to do one minor refactor here just because

633
01:12:27.120 --> 01:12:33.630
Ryan Mehta: I don't usually like using this use context hook like inside of my components.

634
01:12:35.340 --> 01:12:45.030
Ryan Mehta: For whatever reason, I feel like it looks nicer if we make our own little custom hook so I'm going to make in my hooks directory. I'm going to have a color.

635
01:12:46.680 --> 01:12:52.230
Ryan Mehta: Colors JS file. I'm going to make a little tiny custom have called

636
01:12:53.640 --> 01:12:55.560
Ryan Mehta: Use color picker.

637
01:12:57.270 --> 01:12:58.350
Ryan Mehta: That will

638
01:13:05.580 --> 01:13:07.650
Ryan Mehta: Use that news context took

639
01:13:11.130 --> 01:13:13.710
Ryan Mehta: And pass it color picker context.

640
01:13:14.730 --> 01:13:19.050
Ryan Mehta: And then return the Color Picker stuff, it's kind of, it's so minor

641
01:13:20.790 --> 01:13:31.890
Ryan Mehta: But I've about I just prefer doing this. And then in my components, instead of using the use context took. I like to use the fuse color.

642
01:13:32.520 --> 01:13:43.470
Ryan Mehta: Hook and then it kind of hides our implementation, a little bit like they no longer know that this is global state. They don't really care. They just know that they want this stuff from use color picker.

643
01:13:46.260 --> 01:14:02.580
Ryan Mehta: So I added this little hook that does the US context stuff and then inside of the component will use our use color picker hook instead. And same for controls instead of using this use context thing will use color picker.

644
01:14:06.810 --> 01:14:07.170
Excel.

645
01:14:09.270 --> 01:14:14.460
Ryan Mehta: That seemed okay so it's just like a little wrapper around the context stuff.

646
01:14:19.440 --> 01:14:25.860
Ryan Mehta: All right one last little test and we're done with our color picker. It changes.

647
01:14:29.730 --> 01:14:31.740
Ryan Mehta: The text.

648
01:14:35.430 --> 01:14:38.130
Ryan Mehta: And we have a very, very similar test.

649
01:14:39.390 --> 01:14:42.240
Ryan Mehta: We're going to render our color picker.

650
01:14:44.910 --> 01:14:48.480
Ryan Mehta: We are going to grab a text input.

651
01:14:54.330 --> 01:14:55.350
Ryan Mehta: Label texts.

652
01:14:56.970 --> 01:14:58.140
Ryan Mehta: Are tested fail.

653
01:15:02.250 --> 01:15:11.820
Ryan Mehta: Because it can't find that input to get our test to pass. We need to go back to our controls and add another input.

654
01:15:13.440 --> 01:15:22.260
Ryan Mehta: Let's add another input. This time it's going to be for our text.

655
01:15:23.640 --> 01:15:25.710
Ryan Mehta: This one will be taxed.

656
01:15:27.450 --> 01:15:37.680
Ryan Mehta: The ID will be taxed. The type will be taxed and the name will be taxed. We're no longer going to have an F, G color.

657
01:15:38.910 --> 01:15:40.770
Ryan Mehta: So let's leave that blank for now.

658
01:15:41.940 --> 01:15:52.650
Ryan Mehta: It's gonna be like our tech state that will create eventually, but this is enough to get our test to pass. We will also grab our display by test ID.

659
01:15:57.690 --> 01:16:04.410
Ryan Mehta: We're gonna fire a user event. I'm going to use that user event library because I think it's cool.

660
01:16:12.960 --> 01:16:20.250
Ryan Mehta: User event. We're going to type into our text input the value. Hello.

661
01:16:21.660 --> 01:16:26.460
Ryan Mehta: And then after we wait for every render

662
01:16:32.070 --> 01:16:37.980
Ryan Mehta: We expect the display to have text content.

663
01:16:41.340 --> 01:16:42.120
Ryan Mehta: Said fail.

664
01:16:45.960 --> 01:16:55.050
Ryan Mehta: Fail. There we go. So we expected that hello to be in our display, but it's not because we haven't set up any of this state yet.

665
01:16:56.670 --> 01:16:57.750
Ryan Mehta: Test make sense.

666
01:17:06.480 --> 01:17:17.040
Ryan Mehta: Back in our provider. We've provided background color and foreground color. Let's also provide text.

667
01:17:21.300 --> 01:17:37.410
Ryan Mehta: And start off as an empty string will provide this in our bucket and our handle change needs to update a little bit when the target name is text we want to set our text state.

668
01:17:40.530 --> 01:17:43.440
Ryan Mehta: And we're now providing this value to all of our children.

669
01:17:44.910 --> 01:18:02.940
Ryan Mehta: In our display component. We're going to restructure text from our color picker hook will use that text in our section and in our controls will also grab text and we will use that as our inputs value.

670
01:18:04.410 --> 01:18:09.990
Ryan Mehta: And I think with those changes our tests should hopefully pass

671
01:18:11.160 --> 01:18:11.910
Ryan Mehta: They do.

672
01:18:13.050 --> 01:18:19.320
Ryan Mehta: If we go to our browser, we should be able to use this thing.

673
01:18:22.230 --> 01:18:22.860
Works.

674
01:18:43.170 --> 01:18:52.350
Ryan Mehta: Questions two very different way to look at React components are components are no longer getting any props, they're asking for values instead

675
01:18:53.730 --> 01:18:56.640
Annalise: Would you mind just changing it back to the display again.

676
01:18:58.560 --> 01:19:00.510
Annalise: Back to display.

677
01:19:02.640 --> 01:19:03.120
Thank you.

678
01:19:09.240 --> 01:19:10.920
Annalise: Okay. Thanks, Ryan.

679
01:19:14.970 --> 01:19:18.570
Jerud Moyer: I know he probably career a little bit earlier, but like, I'm

680
01:19:20.070 --> 01:19:27.120
Jerud Moyer: Or is there still gonna be tiring. Sometimes you're handling props. Traditionally, as well as using this

681
01:19:28.320 --> 01:19:32.370
Ryan Mehta: Yeah, totally. You can use a combination of the two. For sure.

682
01:19:39.570 --> 01:19:42.540
Ben Waples: Can we color picker context again.

683
01:20:02.100 --> 01:20:05.190
Ryan Mehta: Color Picker this color picker provider.

684
01:20:05.220 --> 01:20:07.860
Ryan Mehta: Really starts to look more like a container.

685
01:20:08.310 --> 01:20:12.120
Ryan Mehta: Really just as a container. Right. It has all of our container stuff.

686
01:20:13.710 --> 01:20:26.550
Ryan Mehta: But instead of passing props to all of our children. We set a bucket value with all of like our state stuff and then our children, instead of like put these side by side.

687
01:20:27.930 --> 01:2ntion to have these selector files with all of these selectors in it.

598
01:07:56.670 --> 01:07:59.340
Ryan Mehta: Okay, that part good so far.

599
01:08:01.410 --> 01:08:06.810
Ryan Mehta: All right, we have one feature done of our header, all of that for one feature.

600
01:08:07.950 --> 01:08:13.500
Ryan Mehta: So a lot of setup we have two more features to add to our

601
01:08:15.390 --> 01:08:20.550
Ryan Mehta: Header component we have this selector for state a

602
01:08:21.660 --> 01:08:22.020
Ryan Mehta: Right.

603
01:08:24.870 --> 01:08:27.990
Ryan Mehta: So let's go back to our app test.

604
01:08:29.370 --> 01:08:36.210
Ryan Mehta: It selects the subreddit. Perfect. We should also make it so it can select

605
01:08:37.770 --> 01:08:39.480
Ryan Mehta: What do we want to location, a

606
01:08:44.490 --> 01:08:47.370
Ryan Mehta: So we should also be able to select location, a

607
01:08:49.350 --> 01:08:53.280
Ryan Mehta: We're going to render the thing, the same way. So we will render

608
01:08:55.410 --> 01:08:57.780
Ryan Mehta: Our application with memory router.

609
01:09:01.590 --> 01:09:07.530
Ryan Mehta: And then we're going to look for a select so we're gonna have a drop down box that lets people choose their state.

610
01:09:08.820 --> 01:09:13.290
Ryan Mehta: So let's say location, a select

611
01:09:18.090 --> 01:09:18.810
Ryan Mehta: The ball.

612
01:09:22.860 --> 01:09:23.700
Ryan Mehta: This would fail.

613
01:09:26.580 --> 01:09:30.630
Ryan Mehta: Okay, can't find the input for location, a

614
01:09:31.980 --> 01:09:34.800
Ryan Mehta: Back over in our header.

615
01:09:36.450 --> 01:09:38.070
Ryan Mehta: We're going to make another form.

616
01:09:40.170 --> 01:09:44.520
Ryan Mehta: For our location like our location drop down form.

617
01:09:45.870 --> 01:09:46.830
Ryan Mehta: Will have a label.

618
01:09:48.690 --> 01:09:50.550
Ryan Mehta: With HTML for

619
01:10:02.490 --> 01:10:03.300
Ryan Mehta: A select

620
01:10:12.360 --> 01:10:19.080
Ryan Mehta: A bunch of options in here, one for each state so 50 options inside of this little select

621
01:10:20.160 --> 01:10:23.610
Ryan Mehta: That sounds incredibly painful, but we're going to do it.

622
01:10:24.870 --> 01:10:29.640
Ryan Mehta: I'm not going to do it inside of this file, though, because that's going to add 50 lines this file.

623
01:10:31.110 --> 01:10:35.850
Ryan Mehta: Would I am going to do, though, is make in our source directory, a little utility

624
01:10:37.200 --> 01:10:40.110
Ryan Mehta: Folder and like a states JS file.

625
01:10:42.630 --> 01:10:43.470
States.

626
01:10:44.490 --> 01:10:50.370
Ryan Mehta: This thing will be a function that returns an array of the 50 states.

627
01:10:52.140 --> 01:10:57.810
Ryan Mehta: I will get that array from Reddit. A gave us these 50 states here.

628
01:11:10.650 --> 01:11:12.300
Greg Mall: Frozen row.

629
01:11:13.770 --> 01:11:14.190
Annalise: Row.

630
01:11:16.650 --> 01:11:17.220
Annalise: Row.

631
01:11:17.430 --> 01:11:17.910
Yeah.

632
01:11:22.080 --> 01:11:23.640
Greg Mall: Type each state individually.

633
01:11:24.120 --> 01:11:25.530
I don't know God.

634
01:11:26.670 --> 01:11:28.620
Ryan Mehta: Your mini take take each one

635
01:11:32.610 --> 01:11:33.390
Ryan Mehta: That sounds

636
01:11:33.660 --> 01:11:34.650
Super painful.

637
01:11:37.380 --> 01:11:39.300
Ryan Mehta: Who's going to become host of this thing.

638
01:11:40.290 --> 01:11:40.620
At

639
01:11:43.080 --> 01:11:44.190
Annalise: My votes with Katie

640
01:11:45.690 --> 01:11:46.800
Annalise: Or Jared I mean

641
01:11:53.130 --> 01:11:55.650
Annalise: Katie for the win. Nice.

642
01:11:57.090 --> 01:11:58.980
Ryan Mehta: Do you mind making me host again.

643
01:12:00.810 --> 01:12:01.740
So demanding.

644
01:12:13.110 --> 01:12:13.980
Katie Perry: Price. Thank you.

645
01:12:18.780 --> 01:12:31.260
Ryan Mehta: All right, let's try. So there's a few ways that we can approach getting these things all on different lines, there's an easy way where it's just like, select all of these spaces.

646
01:12:33.330 --> 01:12:33.900
Ryan Mehta: This

647
01:12:37.980 --> 01:12:40.200
Ryan Mehta: backspace put an ending doing

648
01:12:42.210 --> 01:12:47.880
Ryan Mehta: Ah, okay. Well, that's not the way I want to approach it anyways. What I want to do something kind of cool.

649
01:12:48.990 --> 01:12:58.380
Ryan Mehta: I want to use this. Find and Replace that VS code has a writer regular expression that will find and replace these things for us.

650
01:13:00.120 --> 01:13:04.350
Ryan Mehta: So we have these things that start with us.

651
01:13:05.460 --> 01:13:09.090
Ryan Mehta: And then to word characters and the comma.

652
01:13:10.440 --> 01:13:10.890
Ryan Mehta: Right.

653
01:13:12.960 --> 01:13:18.960
Ryan Mehta: You can capture this whole thing. So in regular expressions, you can create capture groups by putting parentheses.

654
01:13:19.980 --> 01:13:33.690
Ryan Mehta: Around some text. So we're going to capture the value here. So US underscore W A or US underscore D. We're not going to capture the comma or the space that comes after the comma.

655
01:13:35.460 --> 01:13:39.540
Ryan Mehta: And then we're going to replace it with a single quote

656
01:13:40.590 --> 01:13:56.610
Ryan Mehta: Dollar sign one means the first thing that we captured. So the US WHO, the US D an end quote a comma and a new line character to cook. We do this replace all we will get

657
01:13:59.340 --> 01:14:03.930
Ryan Mehta: Our stuff all done right, your expressions or they could be useful sometimes

658
01:14:06.450 --> 01:14:07.320
Annalise: Very nice.

659
01:14:07.440 --> 01:14:08.730
Ryan Mehta: I think we do that.

660
01:14:09.780 --> 01:14:11.970
Ryan Mehta: I think we might have missed our last one, though.

661
01:14:12.360 --> 01:14:17.580
Ryan Mehta: I mean, we could just fix that we could change our regular expression, though, probably also

662
01:14:18.660 --> 01:14:21.810
Ryan Mehta: So there is only sometimes a comma.

663
01:14:23.130 --> 01:14:26.160
Ryan Mehta: And a space sometimes

664
01:14:28.560 --> 01:14:30.330
Ryan Mehta: And if we do that.

665
01:14:32.130 --> 01:14:44.670
Ryan Mehta: Fix it. Yeah. Okay, so this does it for everything for you. I mean, this is like a easier problem. We could have probably done it a different way. But regular expressions are super, super powerful because

666
01:14:45.060 --> 01:14:59.400
Ryan Mehta: Let's say that you didn't want to just add quotes around it like you wanted to take each one and add extra text to it or whatever you totally could have. You could have made to capture groups. Check this out. Okay.

667
01:15:00.420 --> 01:15:06.720
Ryan Mehta: Let's say that we had this, but we want to switch WHA and US block them.

668
01:15:08.790 --> 01:15:09.660
You can

669
01:15:11.520 --> 01:15:17.250
Ryan Mehta: Capture the US, we're going to only capture this stuff after the US and

670
01:15:19.050 --> 01:15:26.850
Ryan Mehta: That sort of thing. And then the flop around. So there's like so many crazy things that you can do with the regular expressions.

671
01:15:33.420 --> 01:15:33.930
Ryan Mehta: Whatever.

672
01:15:36.000 --> 01:15:39.420
Ryan Mehta: Anyways, he's a regular expression for that super convenient.

673
01:15:42.390 --> 01:15:51.000
Ryan Mehta: Okay, so we have a list of our states now back in our header. We are going to map through those states.

674
01:15:54.000 --> 01:15:59.580
Ryan Mehta: For each state, we're going to create an option.

675
01:16:00.960 --> 01:16:05.850
Ryan Mehta: With the state value. This is also going to have a key.

676
01:16:06.960 --> 01:16:07.620
Ryan Mehta: Stake.

677
01:16:09.330 --> 01:16:10.320
Ryan Mehta: And the value

678
01:16:21.390 --> 01:16:33.270
Ryan Mehta: Alright, so a little select with all of our states. If we go back to the front end and actually visually inspect it hopefully we'll see our little drop down with all of our 50 states in it.

679
01:16:34.080 --> 01:16:44.970
Ryan Mehta: We can make it so we like rename these to the actual state names, but that seems like a feature for the future it allegedly still working, we can use our brains a little bit to figure out

680
01:16:46.230 --> 01:16:47.250
What states, these are

681
01:16:49.890 --> 01:16:52.860
Ryan Mehta: All alright let's check out our test.

682
01:16:56.790 --> 01:17:01.290
Ryan Mehta: Test is passing. Perfect. Um, we've done enough to pass our test.

683
01:17:05.190 --> 01:17:09.930
Ryan Mehta: Here's our test. We're just selecting a select let's get location.

684
01:17:13.590 --> 01:17:15.180
Ryan Mehta: A button.

685
01:17:19.290 --> 01:17:23.070
Ryan Mehta: Test ID will do the same thing will make a test ID.

686
01:17:30.300 --> 01:17:34.380
Ryan Mehta: Back in our header will put a button here.

687
01:17:48.240 --> 01:17:54.870
Ryan Mehta: Okay. Should pass. Again, the button now exists back in our test.

688
01:17:56.070 --> 01:17:57.180
Ryan Mehta: Want to

689
01:17:59.040 --> 01:18:00.180
Ryan Mehta: Click on the button.

690
01:18:05.160 --> 01:18:06.240
Ryan Mehta: We also want to

691
01:18:10.410 --> 01:18:12.540
Ryan Mehta: Select so nice.

692
01:18:16.470 --> 01:18:18.630
Ryan Mehta: Location a select

693
01:18:20.790 --> 01:18:26.250
Ryan Mehta: So we'll select Oregon from the list, click on the submit button and then

694
01:18:29.100 --> 01:18:32.640
Ryan Mehta: Wait for something on the screen.

695
01:18:38.100 --> 01:18:41.040
Ryan Mehta: What's it say when we select our state like

696
01:18:43.830 --> 01:18:45.990
Ryan Mehta: Maybe selected.

697
01:18:49.260 --> 01:18:50.790
Ryan Mehta: Right underneath the input.

698
01:18:59.910 --> 01:19:06.030
Ryan Mehta: So like after we select one of these things and press Submit right underneath here today, like

699
01:19:07.680 --> 01:19:12.240
Ryan Mehta: What it is selected us Oregon or whatever us or

700
01:19:15.210 --> 01:19:31.170
Ryan Mehta: Okay, failing test. It's never happening because we haven't set up our actual state here this button has no handle submit our select has no handle change. We haven't set this whole thing up at all for look back at our plan.

701
01:19:32.310 --> 01:19:43.620
Ryan Mehta: Our plan was to have an a producer that held these two pieces of state, the current location that we selected and the current location that the select is hovering on

702
01:19:45.000 --> 01:19:48.180
Ryan Mehta: So we'll need to make this a reducer to go forward.

703
01:19:50.820 --> 01:19:56.340
Ryan Mehta: Let's make a producer. We're going to make an a reducer.

704
01:19:58.860 --> 01:19:59.910
Gotcha. Yes.

705
01:20:03.120 --> 01:20:09.690
Ryan Mehta: So our initial state will have location, a dislocation and

706
01:20:10.770 --> 01:20:12.540
Creation, but

707
01:20:16.470 --> 01:20:22.110
Ryan Mehta: We don't need to specify a or b, because this is already in the a reducer. So it'd be kind of redundant.

708
01:20:24.480 --> 01:20:27.090
Ryan Mehta: And then we'll export default

709
01:20:30.510 --> 01:20:43.020
Ryan Mehta: State equals initial state will get an action, we will create a switch on action type will have a default when we return state.

710
01:20:43.740 --> 01:20:57.240
Ryan Mehta: You might be able to start seeing like some of the just repetitive stuff with these producers, once we have that reducer will go back to our combined producer. We will call this A and bring in our

711
01:20:58.980 --> 01:21:01.260
Ryan Mehta: import a

712
01:21:14.550 --> 01:21:16.590
Ryan Mehta: So put that under the capital A.

713
01:21:19.980 --> 01:21:21.210
Ryan Mehta: Back to our producer.

714
01:21:22.230 --> 01:21:30.600
Ryan Mehta: The first thing that we wanted to do is be able to select so go into the drop down box and select a new location.

715
01:21:31.230 --> 01:21:53.160
Ryan Mehta: That will go into a location input kind of the same thing that we did with the subreddit, but now we have a select drop down box. Um, so we will make a new actions file will call this one a action stuff JS going to split them off to the left of our reducer. We're going to make a set

716
01:21:54.570 --> 01:21:55.740
Ryan Mehta: Location.

717
01:21:57.120 --> 01:21:57.810
Ryan Mehta: A

718
01:22:09.210 --> 01:22:10.740
Ryan Mehta: Location a

719
01:22:12.930 --> 01:22:20.250
Ryan Mehta: We're going to need to know what we're setting it to. So we'll get a location, the type will be set location, a

720
01:22:23.760 --> 01:22:27.210
Ryan Mehta: And the payload will be location.

721
01:22:37.110 --> 01:22:38.910
Ryan Mehta: That look good. This action creator

722
01:22:42.420 --> 01:22:46.290
Ryan Mehta: On the left hand side will have a case that location.

723
01:22:47.580 --> 01:22:58.800
Ryan Mehta: Location a input we get that we're going to spread state and update location input with whatever's in action doc payload.

724
01:22:59.820 --> 01:23:03.000
Ryan Mehta: To the actual payload will be the input that we just selected.

725
01:23:05.130 --> 01:23:06.390
Ryan Mehta: Back in our header.

726
01:23:08.610 --> 01:23:18.870
Ryan Mehta: We want this select on changed to dispatch or set location A action. So let's bring in

727
01:23:24.000 --> 01:23:29.010
Ryan Mehta: An on change, we kind of want to rename this on change.

728
01:23:32.310 --> 01:23:37.110
Ryan Mehta: Or should we just give these things names, so we know what to do and just have one on change.

729
01:23:40.110 --> 01:23:43.140
So read it. This one is

730
01:23:48.360 --> 01:23:50.010
Ryan Mehta: This one we can say if

731
01:24:00.630 --> 01:24:01.620
Ryan Mehta: This makes sense.

732
01:24:05.220 --> 01:24:08.550
Ryan Mehta: Otherwise if Target name is

733
01:24:09.720 --> 01:24:16.200
Ryan Mehta: Location a dispatch that location. A

734
01:24:17.400 --> 01:24:17.910
Ryan Mehta: Value.

735
01:24:24.180 --> 01:24:35.340
Ryan Mehta: Let's see what happens when we actually do this, select so we expect when I change this to see that set location A event. If we don't get that's not good.

736
01:24:38.730 --> 01:24:43.680
Ryan Mehta: I think maybe we're not using this thing in the right place or at all.

737
01:24:47.580 --> 01:24:47.940
Ryan Mehta: Okay.

738
01:24:49.140 --> 01:24:51.510
Ryan Mehta: Now we're using it. Let's go back to the

739
01:24:52.530 --> 01:24:53.220
Ryan Mehta: Form.

740
01:24:56.100 --> 01:24:58.590
Ryan Mehta: When I select a new location.

741
01:24:59.610 --> 01:25:08.250
Ryan Mehta: There's our set location A input in state under a our location A input is the location that we just

742
01:25:09.270 --> 01:25:10.020
Ryan Mehta: Selected

743
01:25:12.810 --> 01:25:14.400
Make sure there's no haters. Good.

744
01:25:16.500 --> 01:25:17.490
Ryan Mehta: Look good so far.

745
01:25:19.620 --> 01:25:28.080
Ryan Mehta: Now we need to be able to submit our form. So when we click this button we want to move this this value into

746
01:25:29.160 --> 01:25:30.330
Ryan Mehta: This right here.

747
01:25:33.210 --> 01:25:39.180
Ryan Mehta: So back in our application in our producer.

748
01:25:42.120 --> 01:25:54.870
Ryan Mehta: We need another action that lets us set location A that moves location input into location to do that will lead to action. So we'll make a new set location.

749
01:25:56.430 --> 01:25:57.570
Paid action.

750
01:26:01.830 --> 01:26:06.570
Ryan Mehta: We will make a set location should be in touch.

751
01:26:09.360 --> 01:26:13.860
Ryan Mehta: We made a huge mistake that's going to make us have to refactor everything

752
01:26:18.330 --> 01:26:21.510
Ryan Mehta: Don't forget that we need to refactor that er

557
01:06:08.220 --> 01:06:09.840
Let's make sure we export this

558
01:06:13.740 --> 01:06:14.310
Ryan Mehta: Look good

559
01:06:17.340 --> 01:06:21.840
Ryan Mehta: Find the user validate the password return the user

560
01:06:23.460 --> 01:06:23.940
Ryan Mehta: Cool.

561
01:06:26.370 --> 01:06:31.920
Ryan Mehta: All right, back in our controller will add another post route for login

562
01:06:36.360 --> 01:06:40.800
Ryan Mehta: This time we'll use our user service authorize

563
01:06:43.740 --> 01:06:53.220
Ryan Mehta: Will pass it through ref body which will have the user's email and they're clear text passwords will then get back a user. The user who just logged in.

564
01:06:54.030 --> 01:07:02.340
Ryan Mehta: And then we need to do the same exact thing that we did over here pretty much right we need to set a cookie get a token and then send the user

565
01:07:03.750 --> 01:07:12.780
Ryan Mehta: I'm going to extract this logic here into its own function. So we don't have to repeat it over and over again. We'll call it set

566
01:07:13.980 --> 01:07:21.150
Ryan Mehta: session cookie set session cookie will take the rez object and the user

567
01:07:23.100 --> 01:07:32.970
Ryan Mehta: And do all of this stuff for us. So back in our signup we can refactor a little bit, you can say set session cookie.

568
01:07:33.990 --> 01:07:38.160
Ryan Mehta: User and over here we can set session cookie.

569
01:07:39.750 --> 01:07:41.640
User and

570
01:07:43.260 --> 01:07:44.280
Our user

571
01:07:45.660 --> 01:07:50.040
Ryan Mehta: If there's an error will catch the error and pass it to the next middleware.

572
01:07:53.490 --> 01:07:54.810
Ryan Mehta: Login route look okay

573
01:07:57.780 --> 01:08:07.620
Ryan Mehta: Okay, so we're validating that the user's email is good, their password is good if both things are good. We're setting the session cookie and sending the user back

574
01:08:09.630 --> 01:08:13.680
Ryan Mehta: Back on our front end. Now we are prepared to

575
01:08:15.360 --> 01:08:17.430
Ryan Mehta: Post login

576
01:08:22.050 --> 01:08:26.670
Ryan Mehta: Will do a sink. Also, we're going to receive an email and password.

577
01:08:29.010 --> 01:08:35.340
Ryan Mehta: And then we're going to do something very, very similar to what we did up above. In fact, they're almost going to be identical.

578
01:08:35.880 --> 01:08:52.440
Ryan Mehta: The only difference is going to be the word sign up or logged in. Right. Everything else about these two are exactly the same. So we could just copy this paste it down here and swap log in here.

579
01:08:53.790 --> 01:09:07.590
Ryan Mehta: If we did that, though. We've duplicated a ton of code in the future when we realize that we don't actually want to use HTTP localhost. We want to use like an environment variable here or something, we're going to have to swap that in two places.

580
01:09:09.210 --> 01:09:22.350
Ryan Mehta: And said, I think this is a good time to start thinking about how we can standardize these requests, how we can make all of this logic available to multiple functions multiple requests.

581
01:09:24.930 --> 01:09:30.180
Ryan Mehta: What I'm going to do is in my services. I'm going to create a new file called request.js

582
01:09:31.290 --> 01:09:33.270
Ryan Mehta: Split this over here to the right.

583
01:09:34.620 --> 01:09:36.210
Ryan Mehta: And construct

584
01:09:44.430 --> 01:09:49.140
Ryan Mehta: Alright, let's try to make this as generic as possible. Over here on the right.

585
01:09:54.300 --> 01:10:05.490
Ryan Mehta: All right, first piece of generic stuff that we're going to do. We're going to make it so this path is configure, you can pass whatever path. You want to do that by putting path here.

586
01:10:07.560 --> 01:10:08.160
And

587
01:10:10.020 --> 01:10:11.580
Ryan Mehta: Placing this part.

588
01:10:14.040 --> 01:10:25.980
Ryan Mehta: This is only going to hit our back end that we're constructing so it's always going to use this right now. Seems like a good time to make this an environment variable also. So let's make this process.

589
01:10:27.210 --> 01:10:29.190
And API URL.

590
01:10:31.290 --> 01:10:34.410
Ryan Mehta: And pop that into our end file.

591
01:10:37.890 --> 01:10:40.560
Ryan Mehta: API URL API URL.

592
01:10:46.500 --> 01:10:46.950
Oops.

593
01:10:48.840 --> 01:10:50.790
Oops, oops, that's good.

594
01:10:55.860 --> 01:11:00.720
Ryan Mehta: Okay, so we have our dot and now let me restart web pack.

595
01:11:03.270 --> 01:11:21.150
Ryan Mehta: Look good so far. So we're just kind of making this generic will putting the path here another piece that we want to make more generic is the method here, we should be able to pass post get patch put delete. So we'll make the method generic bypassing the method here.

596
01:11:22.740 --> 01:11:23.550
Ryan Mehta: The variable.

597
01:11:25.980 --> 01:11:39.000
Ryan Mehta: The next thing that we need to do is make sure that we only attach these headers and this body. If we have a good method like only post patch and put can have headers and the body.

598
01:11:40.890 --> 01:11:41.220
Right.

599
01:11:42.480 --> 01:11:45.540
Ryan Mehta: So for headers. Let's say that

600
01:11:51.780 --> 01:11:52.560
Ryan Mehta: Patch.

601
01:11:55.170 --> 01:11:57.780
Ryan Mehta: Can have them right so

602
01:11:59.940 --> 01:12:00.630
Ryan Mehta: Method.

603
01:12:05.160 --> 01:12:07.710
Ryan Mehta: We'll have those otherwise we'll have

604
01:12:08.820 --> 01:12:12.630
Ryan Mehta: An empty object that's kind of a crazy line of code. And there's a bit

605
01:12:15.300 --> 01:12:18.240
Ryan Mehta: Actually can make it look a bit better. Maybe

606
01:12:30.870 --> 01:12:34.050
Ryan Mehta: So if our method is one of these

607
01:12:35.490 --> 01:12:42.420
Ryan Mehta: Then we're gonna put the content type here otherwise headers is going to be an empty object will do the same for body.

608
01:12:44.190 --> 01:12:48.780
Ryan Mehta: So if the body. If the method in is one of those

609
01:12:50.520 --> 01:12:53.820
Ryan Mehta: Then we will have our body otherwise.

610
01:12:57.390 --> 01:12:57.660
No.

611
01:12:59.220 --> 01:12:59.520
No.

612
01:13:02.070 --> 01:13:03.150
Ryan Mehta: I kind of makes sense.

613
01:13:06.660 --> 01:13:11.340
Ryan Mehta: So conditionally putting the body and the headers object in the fetch.

614
01:13:12.420 --> 01:13:13.740
Ryan Mehta: Depending on the method.

615
01:13:16.500 --> 01:13:32.610
Ryan Mehta: So if the message is one of post put or patch string a fire body otherwise it'll be know if the if the method is one of post put or patch the content type is application JSON. Otherwise, we're not specify any headers.

616
01:13:34.680 --> 01:13:37.260
Ryan Mehta: The final part that we need here is a body.

617
01:13:38.640 --> 01:13:39.300
Ryan Mehta: So,

618
01:13:41.640 --> 01:13:45.270
Ryan Mehta: We'll put a body here and we will attempt to

619
01:13:47.640 --> 01:13:48.480
Ryan Mehta: certify the body.

620
01:13:51.030 --> 01:14:00.060
Ryan Mehta: So, so all of these things are now, Pat, we can now pass into the request and we can use this request anywhere to do almost the exact same thing.

621
01:14:02.490 --> 01:14:14.700
Ryan Mehta: You notice they didn't export this thing, it's because I kind of want to make helper functions that use this request. So what I'm going to do is export constant post which will

622
01:14:15.750 --> 01:14:24.750
Ryan Mehta: Be a function that takes path and body and then uses my request function passive path. The method is

623
01:14:28.320 --> 01:14:28.950
Export

624
01:14:40.200 --> 01:14:42.600
Ryan Mehta: I don't like that that path of above is read for

625
01:14:50.700 --> 01:14:55.590
Ryan Mehta: So I'm just making all these helper functions for us to use in the future.

626
01:14:57.600 --> 01:14:58.290
Will take

627
01:15:00.450 --> 01:15:01.020
Ryan Mehta: Body.

628
01:15:19.110 --> 01:15:21.870
Ryan Mehta: The bottom we're constructing all of these little

629
01:15:23.460 --> 01:15:31.410
Ryan Mehta: Helper request methods that we can use back in our actual service. I'll split it out to you had it split

630
01:15:33.030 --> 01:15:50.190
Ryan Mehta: Over here on the right, we can replace all of this stuff with one of our functions that we constructed down here. So in this case, post sign up as opposed to API V1 off sign up

631
01:15:51.330 --> 01:15:52.560
Ryan Mehta: And it sends it

632
01:16:00.060 --> 01:16:02.910
Ryan Mehta: We're going to send it as a body.

633
01:16:13.980 --> 01:16:33.150
Ryan Mehta: LOT SIMPLER over here on the right now. So this isn't a call this method post over here, which takes a path and the body email and password which will make the request fetch for us we can reuse this every time we're hitting our back end, which will simplify all of our little

634
01:16:35.040 --> 01:16:36.090
Ryan Mehta: service calls

635
01:16:37.680 --> 01:16:44.040
Ryan Mehta: The same thing for this one we're going to post to API be one off login

636
01:16:49.650 --> 01:16:57.810
Ryan Mehta: And then every feature requests will be about the same pick our method pick our path and our body. If we have one

637
01:16:58.920 --> 01:16:59.430
Ryan Mehta: Look good

638
01:17:02.010 --> 01:17:02.430
Okay.

639
01:17:03.480 --> 01:17:16.020
Ryan Mehta: Back in or off provider on login. We want to post login will send it an email and a password. And then for now let's just console log what we get back

640
01:17:21.570 --> 01:17:35.190
Ryan Mehta: To make sure everything is good. Let's go to app JS, in addition to having our signup form. Let's also have our login form the signup form will be the top one, the login form will be the bottom one.

641
01:17:37.470 --> 01:17:50.100
Ryan Mehta: So back on our front and signup form as this top one login form is the bottom one will use them strategically in the right places in the future. We know that we have a Test. A test that tests com user

642
01:17:51.390 --> 01:17:56.040
Ryan Mehta: So if we do this, we should see our network call

643
01:17:57.240 --> 01:18:00.330
Ryan Mehta: And we get back user

644
01:18:01.590 --> 01:18:04.920
Ryan Mehta: Everything was good. If I put in the wrong password.

645
01:18:06.570 --> 01:18:16.620
Ryan Mehta: And tried to login, we get our invalid email or password error message. So the front end in the back end are hooked up correctly right now.

646
01:18:19.290 --> 01:18:19.920
Ryan Mehta: That would good

647
01:18:25.740 --> 01:18:26.130
Alright.

648
01:18:28.200 --> 01:18:30.570
Ryan Mehta: Any questions up until this part.

649
01:18:53.220 --> 01:18:53.700
Jerud Moyer: So,

650
01:18:55.350 --> 01:18:56.910
Jerud Moyer: You could easily

651
01:18:58.560 --> 01:19:01.440
Jerud Moyer: install this on some routes and not others. Right.

652
01:19:01.830 --> 01:19:03.840
Ryan Mehta: Yeah, that's the last part that we need to do.

653
01:19:04.080 --> 01:19:04.320
Cool.

654
01:19:07.290 --> 01:19:15.270
Ryan Mehta: So yeah last part. We want some routes that are accessible to everyone and some routes that are only accessible to people who are logged in.

655
01:19:16.800 --> 01:19:27.120
Ryan Mehta: To simulate this without building an actual app. Let's make a few components here. Let's make a

656
01:19:28.830 --> 01:19:31.410
Ryan Mehta: Close everything. So we have some

657
01:19:33.420 --> 01:19:36.900
Ryan Mehta: meanness here. Let's make a home component

658
01:19:39.270 --> 01:19:40.800
Ryan Mehta: That will say,

659
01:19:46.440 --> 01:19:47.310
Ryan Mehta: Our home.

660
01:19:48.330 --> 01:19:52.080
Ryan Mehta: This is public. So we'll have a public route.

661
01:19:53.190 --> 01:19:56.130
Ryan Mehta: That we will have will be our home component

662
01:19:57.330 --> 01:19:59.280
Ryan Mehta: And will also construct the dashboard.

663
01:20:07.350 --> 01:20:22.080
Ryan Mehta: There won't be any actual information here because we don't, we're not really building a real app, but we'll just have two components that are kind of placeholders, this one will be ah one dashboard. This is right.

664
01:20:23.880 --> 01:20:36.930
Ryan Mehta: Okay, so I have one component for private and one component for public will just notify the user, which when they're on back in our home or app JS. We are going to use React router DOM.

665
01:20:39.240 --> 01:20:42.720
Ryan Mehta: To display these two routes.

666
01:20:45.780 --> 01:20:46.320
Ryan Mehta: So let's

667
01:20:51.720 --> 01:20:51.900
Take

668
01:21:01.560 --> 01:21:03.060
Ryan Mehta: Our switch

669
01:21:04.170 --> 01:21:05.700
Ryan Mehta: Our well

670
01:21:07.260 --> 01:21:13.290
Ryan Mehta: If we're at the exact path slash we're going to use our home component

671
01:21:19.470 --> 01:21:20.340
Ryan Mehta: If we are

672
01:21:28.890 --> 01:21:29.250
Actually

673
01:21:35.160 --> 01:21:36.480
Ryan Mehta: Sign up components.

674
01:21:37.980 --> 01:21:42.840
Ryan Mehta: If we are at the exact path login

675
01:21:44.130 --> 01:21:45.870
Ryan Mehta: We will use our logging component

676
01:21:52.020 --> 01:21:59.670
Ryan Mehta: Kind of like that structure that we use before I'm gonna drop the router and index day. Yes. Because that makes testing a little bit easier.

677
01:22:23.160 --> 01:22:33.870
Ryan Mehta: Okay so routers here to index JS back in app JS, we have our provider and our switches for the homepage. The signup page and a login page.

678
01:22:35.340 --> 01:22:37.950
Ryan Mehta: So we should now see

679
01:22:38.970 --> 01:22:40.500
Ryan Mehta: Once we start this thing, Dan.

680
01:22:42.570 --> 01:22:45.120
Sarah Rector: Ryan, I think your login misspelled for that.

681
01:22:47.250 --> 01:22:47.730
Thank you.

682
01:22:52.200 --> 01:22:56.580
Ryan Mehta: So here's our homepage, it's public, we can go to the sign up

683
01:22:58.200 --> 01:23:06.480
Ryan Mehta: Page and the login page so we can log in or sign up in our application.

684
01:23:08.850 --> 01:23:10.200
Ryan Mehta: Perfect good everyone

685
01:23:13.140 --> 01:23:13.680
Ryan Mehta: Okay.

686
01:23:15.930 --> 01:23:17.760
Ryan Mehta: We also want to make another route.

687
01:23:19.650 --> 01:23:25.020
Ryan Mehta: Let's say that the exact path is dashboard.

688
01:23:29.040 --> 01:23:29.700
Ryan Mehta: Is

689
01:23:31.440 --> 01:23:32.130
Ryan Mehta: Scored

690
01:23:34.470 --> 01:23:42.390
Ryan Mehta: But we only want this route to be accessible when the person is actually lot of dead, so I should be able to go to dashboard.

691
01:23:44.970 --> 01:23:57.810
Ryan Mehta: And see that it's private. But if I logged out if I get rid of this cookie and destroy my session, I should no longer be able to see this page. It's like redirect me to the login page or something. Hey,

692
01:23:59.880 --> 01:24:01.020
Ryan Mehta: That makes sense to everyone.

693
01:24:02.100 --> 01:24:02.460
Ryan Mehta: Okay.

694
01:24:03.750 --> 01:24:05.850
Ryan Mehta: So let's get that functionality working

695
01:24:07.200 --> 01:24:18.480
Ryan Mehta: Typically what people do in this case is create a new component called private route and private routes job is to first check that the person is logged in, if they're not logged in, it kicks them out.

696
01:24:19.800 --> 01:24:31.050
Ryan Mehta: So I'm going to do that same sort of approach in our off folder. I'm going to make a private without that text file. This is going to be a function component

697
01:24:33.270 --> 01:24:35.040
Inside of this component

698
01:24:36.510 --> 01:24:38.700
Ryan Mehta: We are going to get props.

699
01:24:41.370 --> 01:24:44.940
Ryan Mehta: Just like like normal components we will receive props.

700
01:24:47.370 --> 01:24:49.080
racters component

573
01:06:00.720 --> 01:06:02.790
Ryan Mehta: Inside of this component we want to

574
01:06:03.960 --> 01:06:10.350
Ryan Mehta: That's some data. We want to know if it's complete.

575
01:06:11.640 --> 01:06:12.210
Ryan Mehta: Loading

576
01:06:13.470 --> 01:06:14.520
Ryan Mehta: And we want to know.

577
01:06:21.900 --> 01:06:22.530
Ryan Mehta: Is that he saw

578
01:06:27.990 --> 01:06:31.620
Ryan Mehta: And then we want to display some J SX display.

579
01:06:35.550 --> 01:06:41.790
Ryan Mehta: All of this stuff here can go into a custom hook all of the stuff that we did before.

580
01:06:43.200 --> 01:06:52.410
Ryan Mehta: Over here is going to live in a custom hook the stuff below the display stuff is going to live inside of our components.

581
01:06:54.630 --> 01:06:59.640
Ryan Mehta: So to do this part here, all the data fetching stuff. We need to make a custom hook

582
01:07:01.770 --> 01:07:03.480
Ryan Mehta: I am going to

583
01:07:04.890 --> 01:07:06.330
Ryan Mehta: Make a hooks directory

584
01:07:07.710 --> 01:07:20.040
Ryan Mehta: And inside of that hooks directory. I'm going to make a character. There was JS file, it's a JS file, not a jazz X file because it doesn't have any JS accident. It's only going to have JavaScript in it.

585
01:07:22.560 --> 01:07:28.560
Ryan Mehta: And then let's create our first tough call these characters.

586
01:07:30.270 --> 01:07:35.670
Ryan Mehta: These characters is a function. So we'll put a function here.

587
01:07:36.720 --> 01:07:43.500
Ryan Mehta: Eventually once we're done writing this, we're going to import these characters.

588
01:07:45.000 --> 01:07:47.190
Ryan Mehta: Into our container of the year.

589
01:07:51.900 --> 01:07:59.550
Ryan Mehta: And then we're going to have all of these three things be a result of calling this us characters function.

590
01:08:01.200 --> 01:08:08.250
Ryan Mehta: So in US characters. We want to make sure that we have some loading state. So I'm going to create some loading steak.

591
01:08:11.010 --> 01:08:13.530
Ryan Mehta: Or loading state is going to start off as true.

592
01:08:16.560 --> 01:08:17.310
Perfect.

593
01:08:18.330 --> 01:08:27.330
Ryan Mehta: And then as a result of calling this, I want to make sure, since this component on the left hand side needs access to loading state that we created over here.

594
01:08:27.750 --> 01:08:40.050
Ryan Mehta: This component has to return that loading state, just like normal functions, right, if the color of your function needs something from you, you need to return that value. So we're going to return.

595
01:08:41.520 --> 01:08:42.090
Our

596
01:08:44.160 --> 01:08:45.390
Looking steak.

597
01:08:46.830 --> 01:08:57.720
Ryan Mehta: And then on the left hand side, we can grab that loading state by D structuring off of a call to use surface.

598
01:09:00.270 --> 01:09:01.050
That seem okay

599
01:09:02.730 --> 01:09:08.250
Ryan Mehta: And then we'll say, if we're loading state for going to return an H1.

600
01:09:09.330 --> 01:09:12.360
Ryan Mehta: It says loading, kind of like what we did before.

601
01:09:14.640 --> 01:09:17.370
Ryan Mehta: We also want to create some character state.

602
01:09:20.880 --> 01:09:22.560
And set testers.

603
01:09:25.590 --> 01:09:28.500
Ryan Mehta: It's going to start off as an empty array.

604
01:09:30.300 --> 01:09:33.240
Ryan Mehta: And we will return this character state.

605
01:09:34.380 --> 01:09:41.460
Ryan Mehta: From here also, since we're turning characters here. You can also disruption characters have run the left hand side.

606
01:09:44.340 --> 01:09:49.440
Ryan Mehta: And if we're not loading, we're going to return our character list.

607
01:09:50.580 --> 01:09:52.590
Ryan Mehta: With characters in it.

608
01:09:54.570 --> 01:10:01.620
Ryan Mehta: Just kind of like what we did before. And then we have one more piece of state, we have our error state.

609
01:10:05.430 --> 01:10:06.780
Ryan Mehta: Which is going to

610
01:10:08.070 --> 01:10:12.930
Ryan Mehta: Start off as know we're going to export this error state also

611
01:10:15.120 --> 01:10:18.420
Ryan Mehta: And then the structure error here.

612
01:10:20.040 --> 01:10:24.930
Ryan Mehta: And then say if we have an error. We will return an H1.

613
01:10:26.640 --> 01:10:31.620
Ryan Mehta: It says something went wrong, try again later. Copy that.

614
01:10:34.560 --> 01:10:34.830
Okay.

615
01:10:36.720 --> 01:10:49.170
Ryan Mehta: So all of the logic is moving into our custom hook and outside of this container, the custom gives us our loading characters error state. And then we choose what to display over on the left.

616
01:10:50.010 --> 01:10:58.710
Ryan Mehta: One big thing that we still need to add to our custom hook. We want to make sure that we actually fetch from our API.

617
01:11:00.240 --> 01:11:04.200
Ryan Mehta: We only want to affect on Mount. So we'll have an empty array there.

618
01:11:05.220 --> 01:11:07.500
Ryan Mehta: We're going to get our characters.

619
01:11:09.840 --> 01:11:20.220
Ryan Mehta: We're then going to get our fetch characters. After that returns. We will set our characters with those fetched characters.

620
01:11:21.510 --> 01:11:26.160
Ryan Mehta: If there was an error will catch the error and set our error state.

621
01:11:27.570 --> 01:11:33.390
Ryan Mehta: And then finally we will set our loading state to false.

622
01:11:36.180 --> 01:11:36.750
Like so.

623
01:11:38.220 --> 01:11:46.560
Ryan Mehta: And I think if we did everything correctly are all of our tests and still pass. Hopefully, they do.

624
01:11:47.940 --> 01:11:53.040
Ryan Mehta: And if we go to the browser, everything works like it did before.

625
01:11:57.570 --> 01:12:12.210
Ryan Mehta: So if we compare our hook to our original basic cook container. You'll notice all we've really done is moved all of this stuff into the custom hook

626
01:12:13.680 --> 01:12:15.780
Ryan Mehta: And returned our state at the bottom.

627
01:12:17.940 --> 01:12:24.390
Ryan Mehta: And then our container over here uses our custom hook and chooses what to display.

628
01:12:30.180 --> 01:12:31.590
The custom hooks him. Okay.

629
01:12:33.870 --> 01:12:35.400
Ryan Mehta: At least syntax wise.

630
01:12:41.160 --> 01:12:42.570
Ryan Mehta: Any questions about it.

631
01:12:47.580 --> 01:12:50.340
Ryan Mehta: All right, there's a big conceptual thing here, though.

632
01:12:51.660 --> 01:12:59.580
Ryan Mehta: A big shift. I think conceptually. Once you have these custom hooks. If you look at the hook or the container on the left hand side.

633
01:13:00.090 --> 01:13:08.430
Ryan Mehta: It's not really a container anymore. It doesn't manage state. It doesn't have any business logic. What it's doing is calling some function.

634
01:13:09.390 --> 01:13:19.860
Ryan Mehta: That does the state management and then it's real job is to figure out what to display based on the current state. It's not the container anymore. It's really just a presentational component

635
01:13:22.680 --> 01:13:34.020
Ryan Mehta: And I think that's the big groundbreaking thing with these custom hooks is once you start having custom hooks and extracting all of your state into hooks, you have a different

636
01:13:35.070 --> 01:13:41.100
Ryan Mehta: You have a different layer than containers you have custom hooks and presentational components at that point.

637
01:13:41.760 --> 01:13:49.710
Ryan Mehta: You don't have containers and presentational components, which is actually super nice before we were using classes to differentiate

638
01:13:50.430 --> 01:14:01.650
Ryan Mehta: Containers from presentational components, but it was still a bit of a weird fit because even though we had these containers. Let me go back to the class container.

639
01:14:03.780 --> 01:14:15.870
Ryan Mehta: Even though we had these containers that were classes they still sort of had something to do with visualization, they still use J SX which was a purely view based library.

640
01:14:16.230 --> 01:14:31.320
Ryan Mehta: You're saying what should be on the screen. So while we have this like conceptual break between containers and presentational components, the code itself kind of still had this like remnants of this view library.

641
01:14:32.820 --> 01:14:43.380
Ryan Mehta: Once we have hooks though you'll notice our hooks have nothing to do with the view it's purely state transformation. It's about data and business logic.

642
01:14:44.730 --> 01:14:46.710
Ryan Mehta: And then whoever uses this hook

643
01:14:48.210 --> 01:14:56.340
Ryan Mehta: Is purely about how the how the data should look afterwards. Give me some data and then I will choose how to present the data.

644
01:14:57.990 --> 01:15:10.950
Ryan Mehta: I think this is a real like the beauty of these custom hooks, we really have a true data sort of controller type of layer we have a view layer a controller layer.

645
01:15:16.200 --> 01:15:22.740
Ryan Mehta: And I think because of this once we start using custom hooks. We really need to re architect our entire application.

646
01:15:24.420 --> 01:15:29.430
Ryan Mehta: I don't think it makes sense any longer to have a containers directory

647
01:15:30.660 --> 01:15:32.310
Ryan Mehta: If we're using custom hooks.

648
01:15:34.200 --> 01:15:37.260
Ryan Mehta: Because we don't need containers. We could instead

649
01:15:38.340 --> 01:15:46.920
Ryan Mehta: Instead of calling class list in our container here we could move this whole logic, the US characters hook directly into the component

650
01:15:49.080 --> 01:15:58.470
Ryan Mehta: Right. There's no reason why we couldn't use our custom hook in this presentational component here. It's not adding business logic to big presentational components.

651
01:15:59.070 --> 01:16:09.270
Ryan Mehta: It's just adding like it's telling it where it should get this data from but it's not really changing too much about the presentational components here, right. You could just do

652
01:16:10.950 --> 01:16:11.790
Ryan Mehta: Concerts

653
01:16:14.460 --> 01:16:18.150
Characters people's these characters.

654
01:16:20.880 --> 01:16:23.190
Ryan Mehta: And no longer receive a prop anymore.

655
01:16:25.140 --> 01:16:28.110
Ryan Mehta: And this is pretty much doing exactly what it did before.

656
01:16:30.600 --> 01:16:32.340
Ryan Mehta: And then all characters.

657
01:16:33.420 --> 01:16:35.460
Ryan Mehta: would not do any of this anymore.

658
01:16:37.110 --> 01:16:40.800
Ryan Mehta: It would do this instead. And now you can see like how silly.

659
01:16:42.150 --> 01:16:46.650
Ryan Mehta: This container is it's doing absolutely nothing. At this point, it's just

660
01:16:47.670 --> 01:16:48.450
Ryan Mehta: It's a silly thing.

661
01:16:49.530 --> 01:16:59.430
Ryan Mehta: Actually if we did that too. So what we did is we moved the custom hook into our character list or presentational components.

662
01:17:00.270 --> 01:17:09.030
Ryan Mehta: And now we're containers just calling character list characterless no longer needs a prop and knows how to get its own characters, the web page. I think will still work.

663
01:17:11.850 --> 01:17:17.100
Ryan Mehta: And this container seems silly now.

664
01:17:21.000 --> 01:17:25.230
Ben Waples: What about loading because the list isn't loading.

665
01:17:25.890 --> 01:17:27.840
Ryan Mehta: Yeah, you just probably add all the logon.

666
01:17:27.840 --> 01:17:33.990
Ryan Mehta: Stuff here also because loading is really about the character list to the character list knows that it needs to load.

667
01:17:36.210 --> 01:17:38.010
Ryan Mehta: And it knows that it needs an error.

668
01:17:39.270 --> 01:17:44.340
Ryan Mehta: You would just like need to add the loading like you create a loading presentational components or something.

669
01:17:46.710 --> 01:17:48.330
Ryan Mehta: But you can totally add that stuff here.

670
01:17:50.760 --> 01:17:57.450
Ryan Mehta: Uses like if send out ifs and everything, but these are purely presentational ifs, right, they're not really

671
01:17:59.520 --> 01:18:03.030
Ryan Mehta: You would just, I mean, I would probably personally just do

672
01:18:09.360 --> 01:18:10.110
Ryan Mehta: That for the thing

673
01:18:11.880 --> 01:18:22.620
Ryan Mehta: It's still about presentation. It's not really about business logic. It's just like if you're loading present this if you're aired present this if you have characters present this

674
01:18:29.760 --> 01:18:32.340
Ryan Mehta: Now, get rid of all of this.

675
01:18:33.870 --> 01:18:35.700
Ryan Mehta: This one will no longer have this

676
01:18:36.990 --> 01:18:38.190
Ben Waples: With the

677
01:18:40.050 --> 01:18:48.360
Ben Waples: Set loading abstracted to the other file. Would you be able to export the set loading function as well. So if you want to, like,

678
01:18:49.920 --> 01:18:53.790
Ben Waples: Change state for like loading or error, you could

679
01:18:54.780 --> 01:18:56.250
Ryan Mehta: Totally, yeah, you can export.

680
01:18:56.280 --> 01:18:58.170
Ryan Mehta: Functions, also from your hooks.

681
01:18:59.640 --> 01:19:00.570
Ryan Mehta: So you could have

682
01:19:04.230 --> 01:19:04.920
Ryan Mehta: To do that.

683
01:19:11.100 --> 01:19:17.910
Thomas Stussi: So at this point, app sex, it just like called character list and you delete all characters.

684
01:19:18.870 --> 01:19:19.200
Yep.

685
01:19:21.720 --> 01:19:27.690
Ryan Mehta: I wonder, I think our tests will all given that we just move this stuff. I think

686
01:19:30.030 --> 01:19:32.280
Ryan Mehta: Our tests. It's pretty much still passed to

687
01:19:33.660 --> 01:19:39.930
Ryan Mehta: The big thing here is that we're saying what prop types. We don't actually want prop types.

688
01:19:41.190 --> 01:19:41.670
Ryan Mehta: Anymore.

689
01:19:45.420 --> 01:19:48.060
Ryan Mehta: Yeah, but everything pretty much still passes.

690
01:19:56.550 --> 01:20:03.900
Ryan Mehta: It's a big refactor do this at least mentally because now we're cutting out this container section completely

691
01:20:05.310 --> 01:20:12.180
Ryan Mehta: For me, what I do typically is I kind of keep that container layer but I rename it mentally

692
01:20:13.980 --> 01:20:21.780
Ryan Mehta: I rename I still have this directory here where containers normally go but I rename it to pages.

693
01:20:23.310 --> 01:20:29.220
Ryan Mehta: And this folder now is all of your main pages that will be used by apogee. Yes.

694
01:20:30.810 --> 01:20:37.710
Ryan Mehta: And I kind of like that because it lets us still have this layer here we have really simple components right now.

695
01:20:38.280 --> 01:20:51.270
Ryan Mehta: We're just like loading the single component onto the page. But eventually, we'll have a little bit more complicated components where we'll be like mixing multiple components together on a single page.

696
01:20:52.440 --> 01:20:56.700
Ryan Mehta: And this pages directory seems like the perfect place to like

697
01:20:59.010 --> 01:21:01.320
Ryan Mehta: combine multiple components together.

698
01:21:17.160 --> 01:21:22.470
Ryan Mehta: And then this is probably no longer called all characters. It's probably called characters.

699
01:21:41.160 --> 01:21:46.440
Ben Waples: How did we solve the act era. Again, those whose quick

700
01:21:47.670 --> 01:21:54.420
Ryan Mehta: Yeah, that one was it takes like some thinking through, I think I don't have like a good rule of thumb for it.

701
01:21:56.460 --> 01:22:01.350
Ryan Mehta: We combine the loading and the effects characters into one test.

702
01:22:03.690 --> 01:22:09.480
Ryan Mehta: So you get that act air whenever after your test finishes some state changes.

703
01:22:11.490 --> 01:22:16.980
Ryan Mehta: I was using to do this if you want to you can look at that library and do a similar thing but it's fine to just display the raw JSON, just like print it onto the screen.

588
00:53:53.790 --> 00:53:57.510
Adrian Simental: We also need to display the past good slick. He doesn't know left

589
00:53:58.050 --> 00:54:03.090
Ryan Mehta: Mm hmm. So then the other piece over here is a list of things.

590
00:54:04.380 --> 00:54:06.030
Ryan Mehta: This is like the history

591
00:54:07.650 --> 00:54:11.040
Ryan Mehta: Component, and then a history item.

592
00:54:12.990 --> 00:54:29.880
Ryan Mehta: Right, so you iterate through an array for each item in the array. You put a component here. So when you're pressing this go button. You're doing two things you are making a fetch request like you did with the news API. And you're also adding an item into an array.

593
00:54:30.990 --> 00:54:40.020
Ryan Mehta: When you add the item into the array, it should populate this list of things. So then you end up with surrounding container.

594
00:54:43.080 --> 00:54:44.430
Ryan Mehta: Around this whole thing.

595
00:54:47.070 --> 00:54:55.020
Ryan Mehta: This surrounding container contains the URL that you've typed in this input box. The method.

596
00:54:56.580 --> 00:55:00.600
Ryan Mehta: That you've selected here the body.

597
00:55:01.740 --> 00:55:03.180
Ryan Mehta: That you typed into here.

598
00:55:04.410 --> 00:55:06.330
Ryan Mehta: The response.

599
00:55:07.770 --> 00:55:12.840
Ryan Mehta: That you get back from the API and a history.

600
00:55:13.860 --> 00:55:14.430
Ryan Mehta: Or array.

601
00:55:17.670 --> 00:55:29.520
Ryan Mehta: So a lot of pieces of state are like five pieces of state, but kind of similar to some of the things that you've already done. There's a form. There's a list of things and a display.

602
00:55:31.140 --> 00:55:34.440
Ryan Mehta: And then you probably have a handle change function.

603
00:55:38.970 --> 00:55:48.780
Ryan Mehta: When you type into the input box. When you select the radio button when you type into this text area you handle change and change the appropriate piece of state.

604
00:55:50.730 --> 00:55:51.330
Appear

605
00:55:53.910 --> 00:55:57.450
Ryan Mehta: And then you also have a handle submit

606
00:56:02.460 --> 00:56:20.520
Ryan Mehta: When you click on the go button. You're going to push into your history or add an item to your history re and update the response based on your fetch call. So you're going to make a fetch request to this URL with this method with this body.

607
00:56:22.260 --> 00:56:26.280
Ryan Mehta: And get a response and set the response to response.

608
00:56:28.440 --> 00:56:28.650
Rate.

609
00:56:30.960 --> 00:56:46.020
Ryan Mehta: So I think this is such a cool application because it seems so big and it looks very impressive, from the outset, but it really is just a bunch of the stuff that we've already done. It's a form, it's a display. And it's a list of things.

610
00:56:57.930 --> 00:57:07.980
Thomas Stussi: Are the history display and control components all siblings. There's not like it's not like an articles and an article situation.

611
00:57:09.240 --> 00:57:09.990
Ryan Mehta: And the

612
00:57:11.520 --> 00:57:12.420
Ryan Mehta: Which one, sorry.

613
00:57:12.930 --> 00:57:18.720
Thomas Stussi: I was just wondering about the presentational components, if any of them are children or if they're all siblings of each other.

614
00:57:19.710 --> 00:57:21.690
Ryan Mehta: Yeah, you probably you're going to have

615
00:57:22.020 --> 00:57:23.280
Something that

616
00:57:24.630 --> 00:57:37.230
Ryan Mehta: So you'll have app at the top. Apple have another container called rusty. That's what I'm calling this like outer thing and then rusty has history.

617
00:57:41.280 --> 00:57:43.920
Ryan Mehta: It's going to have the controls.

618
00:57:46.920 --> 00:57:49.650
Ryan Mehta: And it's going to have a display.

619
00:57:54.450 --> 00:57:58.770
Ryan Mehta: And then history is going to have a child by history item.

620
00:58:03.660 --> 00:58:06.270
Ryan Mehta: Right, that's this like individual item over here.

621
00:58:09.720 --> 00:58:24.540
Ryan Mehta: So it's almost like a slamming together have a couple of your applications. It's like the new search, kind of, it's kind of like the color picker. It's kind of like your like list of things from the first day.

622
00:58:28.680 --> 00:58:29.940
Ryan Mehta: And it's not doing until Monday.

623
00:58:35.700 --> 00:58:36.750
Brooke Perkins (she/her): Well, that's good.

624
00:58:48.390 --> 00:58:53.820
Ryan Mehta: I think my approach to this application would be to start off with this controls thing.

625
00:58:54.630 --> 00:59:10.680
Ryan Mehta: And just make sure that I can hook up the state. So it doesn't actually have to make a fetch call, just make sure that when I typed into the input box. It sets the URL state. When I select a radio button. It sets the method state when I typed into the body text area. It sets the body.

626
00:59:11.790 --> 00:59:17.160
Ryan Mehta: State. And then once you like actually connected all of your state to this thing.

627
00:59:18.540 --> 00:59:25.830
Ryan Mehta: The next thing that I would probably do is so that that would mean that you'd have these three pieces of state over here.

628
00:59:28.080 --> 00:59:34.290
Ryan Mehta: That's invisible. These three pieces of state over here and you would have your hand will change done.

629
00:59:35.820 --> 00:59:44.670
Ryan Mehta: Right, if you can type into these boxes you need these four things done and then you can handle this. Go button.

630
00:59:45.480 --> 00:59:54.600
Ryan Mehta: When you press on the go button, you're going to have a service that makes an API request, where you insert the URL. The method and the body.

631
00:59:55.590 --> 01:00:02.850
Ryan Mehta: And that will give you like and then I would just like console log the results at that point the JSON response that you get

632
01:00:03.480 --> 01:00:11.280
Ryan Mehta: Then you'll sort of have this like scaffold it out and then from there you can start figuring out, like, Okay, once I get the response. I'm going to set

633
01:00:12.180 --> 01:00:27.060
Ryan Mehta: I'm going to set the JSON to this response piece of state and then display it. So then after I have all this controls all created I would start off, I would go to the display. So I would do like one

634
01:00:28.140 --> 01:00:30.480
Ryan Mehta: Two. And then I would end over here.

635
01:00:31.650 --> 01:00:32.580
With the history

636
01:00:35.400 --> 01:00:40.620
Ryan Mehta: So it would be like candle the URL method body state and the handle changes one

637
01:00:42.360 --> 01:00:49.710
Ryan Mehta: And then do the handle submit as to and then do the history and the handle submit as three

638
01:00:51.660 --> 01:00:52.650
Ryan Mehta: Three steps.

639
01:00:57.900 --> 01:01:01.950
Michelle Stermitz: Is there any error handling here. Like, what happens if you put a broken again.

640
01:01:12.030 --> 01:01:12.540
Michelle Stermitz: Nice.

641
01:01:14.070 --> 01:01:15.870
Michelle Stermitz: I think that gets handled by the

642
01:01:16.020 --> 01:01:19.560
Edgar Cuellar: API, doesn't it, what it sends you back the error response.

643
01:01:33.360 --> 01:01:34.530
Michelle Stermitz: Ryan, I think you're muted.

644
01:01:35.250 --> 01:01:41.070
Ryan Mehta: I was gonna say, yeah, totally it's handled by this API. If you went to completely bogus website just nothing would happen

645
01:01:43.260 --> 01:01:47.760
Ryan Mehta: But you could totally make it say like that like a good error message if you wanted to.

646
01:01:49.710 --> 01:01:52.020
Ryan Mehta: Get help have a dot capture something somewhere.

647
01:01:54.870 --> 01:01:56.250
Ron Yonker: Ryan. What's that

648
01:01:57.510 --> 01:02:01.470
Ron Yonker: Display what's what's exactly being returned, they're

649
01:02:03.270 --> 01:02:04.170
Ryan Mehta: Down at the bottom.

650
01:02:05.430 --> 01:02:09.660
Ron Yonker: Yeah, where you've got the pointer or there's a route that Aaron everything

651
01:02:11.160 --> 01:02:12.720
Ryan Mehta: So if I went to the future Rama.

652
01:02:12.720 --> 01:02:18.840
Ryan Mehta: Quotes, it returns a list of quotes. It's just the exact

653
01:02:20.550 --> 01:02:23.190
Ryan Mehta: It's just this JSON that the API returns

654
01:02:23.610 --> 01:02:23.940
Okay.

655
01:02:27.270 --> 01:02:28.770
Ryan Mehta: And this thing is a library.

656
01:02:30.780 --> 01:02:31.830
Ryan Mehta: That just lets you like

657
01:02:32.280 --> 01:02:38.880
Ryan Mehta: Do this, like, cool stuff. But for years. You can totally just display the JSON. If you want to

658
01:02:42.540 --> 01:02:43.530
Ryan Mehta: Either ways. Fine.

659
01:02:47.640 --> 01:02:54.570
Patrick Wilson: Or should we worry about. I'm like cores not interacting properly with some API's.

660
01:02:55.230 --> 01:02:58.740
Ryan Mehta: Nope, that's not that's on the API side so cams.

661
01:03:09.720 --> 01:03:20.700
Ryan Mehta: Yeah, I think this is a cool project I think once you get into it. It's good. It's not going to be easy. Probably the radio buttons will probably be hard because I don't, I don't know if any of you have done radio buttons yet.

662
01:03:21.810 --> 01:03:24.330
Ryan Mehta: But you can do it, you can figure that part out.

663
01:03:26.340 --> 01:03:31.200
Ryan Mehta: The rest of this form is stuff that you've done like text inputs.

664
01:03:35.850 --> 01:03:36.090
Yeah.

665
01:03:37.470 --> 01:03:40.320
Ben Waples: So is there only one container, but

666
01:03:41.640 --> 01:03:43.410
Ryan Mehta: There's only one container. Okay.

667
01:03:43.830 --> 01:03:44.670
Ben Waples: And that's rusty

668
01:03:53.940 --> 01:03:57.300
Thomas Stussi: Do one page applications like almost always have one container.

669
01:03:59.970 --> 01:04:06.480
Ryan Mehta: Now they could definitely have more. We just have a very simple app so far. So just have only needed one container.

670
01:04:11.910 --> 01:04:22.380
Ryan Mehta: Alright so that is the lab rusty is an API server client application. It's a lot like post map but it runs in the browser. Cool.

671
01:04:29.490 --> 01:04:35.070
Ryan Mehta: Alright, any questions about that. I can paste this link to say you have something to

672
01:04:38.250 --> 01:04:39.210
Ryan Mehta: Look to

673
01:04:42.270 --> 01:04:43.440
Thomas Stussi: We're going to deploy this

674
01:04:44.010 --> 01:04:46.110
Ryan Mehta: Yeah, I tried it to play it to net Wi Fi.

675
01:04:50.130 --> 01:04:52.950
Ryan Mehta: Okay, there is that restless thing.

676
01:04:54.240 --> 01:04:59.700
Ryan Mehta: There's also a bonus lab today. So if you happen to finish this early or when something else to do.

677
01:05:00.720 --> 01:05:03.210
Ryan Mehta: during the weekend or whenever

678
01:05:04.890 --> 01:05:17.190
Ryan Mehta: You're like board. There is a bonus lab. It's a GitHub. We were lab. So it uses the GitHub API to be a user's repos PRS and issues.

679
01:05:19.530 --> 01:05:21.090
Ryan Mehta: So it should be a form

680
01:05:22.260 --> 01:05:35.340
Ryan Mehta: Inside of the form you type in some of these GitHub username and then under the form it will display all of that user's repos, and then a stretch goal is to also display all of their PRs and all of their issues.

681
01:05:38.700 --> 01:05:41.280
Ryan Mehta: That's almost like the GitHub like

682
01:05:43.980 --> 01:05:45.510
Ryan Mehta: When you go to somebody's

683
01:05:46.950 --> 01:05:56.640
Ryan Mehta: GitHub account, you can see all of their repos. You just going to be doing the same thing. You type in somebody's GitHub username and you display all of their repos.

684
01:05:58.260 --> 01:06:00.090
Ryan Mehta: And there's some links to the

685
01:06:02.040 --> 01:06:04.350
Ryan Mehta: GitHub documentation for

686
01:06:06.930 --> 01:06:11.820
Ryan Mehta: Like the GitHub API documentation. Some of you already use this

687
01:06:12.900 --> 01:06:15.390
Ryan Mehta: API for your mid project.

688
01:06:18.090 --> 01:06:19.470
Ryan Mehta: So you all have like

689
01:06:21.330 --> 01:06:23.040
Ryan Mehta: A step forward, I guess.

690
01:06:26.430 --> 01:06:32.310
Ryan Mehta: Any questions about this lab this bonus lab. You don't have to do this one. If you don't want to, but you can if you want

691
01:06:33.990 --> 01:06:34.620
Ryan Mehta: Bonus

692
01:06:36.630 --> 01:06:38.220
Ryan Mehta: It's worth zero points also

693
01:06:39.240 --> 01:06:41.640
Ryan Mehta: Just for your own satisfaction.

694
01:06:48.690 --> 01:06:49.260
Ryan Mehta: All right.

695
01:06:51.870 --> 01:06:52.830
Ryan Mehta: Well, we have like

696
01:06:55.440 --> 01:07:01.920
Ryan Mehta: Like 30 minutes I guess to do stuff. Anybody have anything that

697
01:07:03.000 --> 01:07:06.600
Ryan Mehta: They really really want to cover before we do this build

698
01:07:09.450 --> 01:07:14.070
Ryan Mehta: Or any questions, I should say. First, any questions about those two labs for a move on.

699
01:07:14.880 --> 01:07:20.850
Nate Kruck: Maybe we could we could do like or I guess it would be part of the bill, but some more of the testing. Mm hmm.

700
01:07:22.290 --> 01:07:26.460
Nate Kruck: I'm still kind of like if he on that aspect. Totally.

701
01:07:29.520 --> 01:07:31.980
Nate Kruck: Let's do some tests.

702
01:07:37.170 --> 01:07:37.620
Ryan Mehta: Okay.

703
01:07:39.360 --> 01:07:43.230
Ryan Mehta: I'm trying to think of a good application to use. Do you have an application in mind.

704
01:07:45.630 --> 01:07:49.230
Nate Kruck: I do not just like, you know, I guess.

705
01:07:50.130 --> 01:07:53.340
Ryan Mehta: Yeah. No idea. Yeah, let's make

706
01:07:57.240 --> 01:07:58.620
Ryan Mehta: Let's make a form

707
01:07:59.550 --> 01:08:02.550
Ryan Mehta: That you type into so

708
01:08:05.130 --> 01:08:10.680
Ryan Mehta: Let's make a little. Anybody have any. Anybody have anything else that they want to work on, or does it seem

709
01:08:12.150 --> 01:08:12.330
Like

710
01:08:14.100 --> 01:08:20.190
Ron Yonker: Maybe like a radio buttons and capturing the state properly in React

711
01:08:22.020 --> 01:08:24.090
Jerud Moyer: Yeah. Also, I wouldn't mind seeing like

712
01:08:27.030 --> 01:08:32.730
Jerud Moyer: Using in React using JavaScript to change the CSS class name on an element.

713
01:08:34.950 --> 01:08:36.090
Jerud Moyer: Depending on conditions.

714
01:08:38.580 --> 01:08:45.300
Ryan Mehta: Perfect. Okay, what can do all of these things together, besides the radio button, you're going to have to figure out the radio buttons.

715
01:08:45.630 --> 01:08:54.900
Ryan Mehta: Will cover will have like an optional thing tomorrow for anybody who's around after the morning hack day where we'll talk about radio buttons. If you're totally stuck.

716
01:08:56.610 --> 01:09:03.990
Ryan Mehta: And I want you all to try the radio button stuff because there's so many good approaches and react to do radio buttons.

717
01:09:05.100 --> 01:09:07.230
Ryan Mehta: All right, we're going to make like a little dog form.

718
01:09:09.090 --> 01:09:12.120
Ryan Mehta: So our formal take a dog's name.

719
01:09:13.740 --> 01:09:17.340
Ryan Mehta: A dog's age and the dogs. Wait.

720
01:09:21.900 --> 01:09:37.710
Ryan Mehta: When, when you press the submit button, it will add this dog to an array of dogs and on the right hand side or the bottom wherever somewhere on the page. We will display all of our added dog's name, age.

721
01:09:38.940 --> 01:09:39.990
And weights.

722
01:09:42.870 --> 01:09:49.080
Ryan Mehta: Like so. So every time you add a new dog. You should see a new list item.

723
01:09:50.820 --> 01:10:03.750
Ryan Mehta: Will do t0
Ryan Mehta: So on the front end tell the backend to run this function and received back this response the responsible cards.

553
01:07:32.130 --> 01:07:32.670
Ryan Mehta: Look good

554
01:07:39.840 --> 01:07:54.030
Ryan Mehta: There are some duplicate code here that we could fix, but let's fix that sort of stuff. Monday we can make like a universal request library for our application that will unify some of this duplicate code.

555
01:07:55.170 --> 01:08:00.480
Ryan Mehta: But now we have this service this service that will fetch all cards for us but good.

556
01:08:02.220 --> 01:08:18.630
Ryan Mehta: All right, let's go back to our components. I'm going to make another folder called card list and make a card lists got J SX file.

557
01:08:20.400 --> 01:08:23.310
Ryan Mehta: This is going to be a function component

558
01:08:24.900 --> 01:08:26.790
Ryan Mehta: We won't need any prop types here.

559
01:08:29.610 --> 01:08:40.020
Ryan Mehta: What we will need though is a way to get access to that list of cards that we have right so we're going to want to get our cards.

560
01:08:41.040 --> 01:08:43.020
Ryan Mehta: To do that we're going to use a selector.

561
01:08:45.030 --> 01:09:02.430
Ryan Mehta: Cards already live in state so selector is a card top list. This will give us our list of cards right we look back at our reducer can kind of see this, the reducer has a list inside of it.

562
01:09:03.840 --> 01:09:11.280
Ryan Mehta: That reducer is added to Redux to be a disc combine reducer. So we have state DOT card.

563
01:09:12.690 --> 01:09:15.690
Ryan Mehta: Dot list to get our list of cards.

564
01:09:16.860 --> 01:09:17.610
Ryan Mehta: That look good.

565
01:09:21.390 --> 01:09:29.640
Ryan Mehta: And then we'll construct our list items so card elements. We're going to map through cards.

566
01:09:31.920 --> 01:09:33.270
Ryan Mehta: For each card.

567
01:09:34.440 --> 01:09:43.680
Ryan Mehta: In cards. We're going to construct a list item with a paragraph in it with the cards name.

568
01:09:46.020 --> 01:09:49.800
Ryan Mehta: For the key we will use our cards ID.

569
01:09:51.030 --> 01:09:55.020
Ryan Mehta: And then will display these elements inside of us.

570
01:10:00.900 --> 01:10:13.020
Ryan Mehta: So we're not fetching cards yet from the back end, but we will list any cards that are in the array of cards in Redux this look good. Right here, or it's up

571
01:10:15.600 --> 01:10:27.390
Ryan Mehta: I'm going to go back to app JS and start composing some of these functions. Some of these components. So we have our create card right under create card. Let's put our card list.

572
01:10:29.130 --> 01:10:35.550
Ryan Mehta: And then when we go back to our front end, we should be able to add

573
01:10:41.070 --> 01:10:59.730
Ryan Mehta: A NEW CARD. And when we create it, we see that card appear in our list. So we're not fetching all already created cards, but we are displaying the cards that we create at the time. So if I refresh this page, even though that counter spell card is in my database, it disappears because

574
01:11:01.770 --> 01:11:05.790
Ryan Mehta: Because they're never affection those cards were never using that API call.

575
01:11:07.980 --> 01:11:14.370
Ryan Mehta: Alright, next step when our card list first mounts. So when we use an effect.

576
01:11:16.230 --> 01:11:22.020
Ryan Mehta: On us effect on melt. We want to fetch our list of cards right

577
01:11:23.130 --> 01:11:28.470
Ryan Mehta: When we fetch our list of cards. We want to store those and Redux so we're going to dispatch an action.

578
01:11:29.940 --> 01:11:36.990
Ryan Mehta: Let's go and look at our actions folder or actions file and then also our reducer.

579
01:11:38.190 --> 01:11:42.180
Ryan Mehta: We're going to create a new action called fetch cards.

580
01:11:43.980 --> 01:11:48.300
Ryan Mehta: Which will be an asynchronous action. So if punk style action creator

581
01:11:50.760 --> 01:11:59.010
Ryan Mehta: When we dispatch FX cards think is going to see that we dispatch to function. It's going to invoke the function. And this function is invoked.

582
01:11:59.400 --> 01:12:13.170
Ryan Mehta: We are going to use our get card service to get a list of cards. After we get that list of cards, we're going to want to dispatch some action that stores the list of cards in this list over here.

583
01:12:14.760 --> 01:12:20.400
Ryan Mehta: So I'm going to make another little action creator up top called set cards.

584
01:12:23.700 --> 01:12:25.800
Ryan Mehta: And we'll make a little action creator

585
01:12:26.820 --> 01:12:38.010
Ryan Mehta: Cards, which will take a list of cards and return an action with the set cards action type and the payload of cards.

586
01:12:39.120 --> 01:12:48.570
Ryan Mehta: So down fear after X effects my cards I can dispatch our set cards action with the list of cards that would just fetched.

587
01:12:50.340 --> 01:13:01.050
Ryan Mehta: When we dispatch the set cards action. We want to make sure that are reducer handles the set cards action type, it's going to return everything from state.

588
01:13:02.910 --> 01:13:08.250
Ryan Mehta: But it's going to update list to whatever action payload equals

589
01:13:10.350 --> 01:13:25.560
Ryan Mehta: This action type makes sense. So when the component first mounts. We want it to affect cards from our backend and set the list of cards to whatever the back end gives us. And then from there, every time we create a card. We're going to pre penned it to that list.

590
01:13:28.350 --> 01:13:39.930
Ryan Mehta: So back in our list. I'm going to move the card actions over here. Back in our list. In addition to getting our list of cards. We're also going to want to dispatch. So we're going to use this batch.

591
01:13:41.460 --> 01:13:47.580
Ryan Mehta: In this use effect when the component first mounts. We want to dispatch our fetch cards action.

592
01:13:48.870 --> 01:13:51.510
Ryan Mehta: Extra cards, all the cards from our back end.

593
01:13:52.650 --> 01:14:02.850
Ryan Mehta: At this point, I believe, unless we broke something. We see our list of cards here on first load.

594
01:14:05.790 --> 01:14:08.130
Ryan Mehta: And we can add other things here.

595
01:14:15.630 --> 01:14:17.100
Ryan Mehta: I don't know what's another card.

596
01:14:26.010 --> 01:14:27.060
Costs.

597
01:14:29.550 --> 01:14:29.910
Ryan Mehta: Five.

598
01:14:32.100 --> 01:14:35.490
Ryan Mehta: Massacre massacre okay massacre.

599
01:14:39.750 --> 01:14:41.820
Ryan Mehta: Oh, I can't spell that word that's no good.

600
01:14:43.980 --> 01:14:44.970
Ryan Mehta: Just have another opt

601
01:14:47.100 --> 01:14:49.830
Ryan Mehta: Okay, very good. So it's all still works.

602
01:15:01.500 --> 01:15:02.850
Ryan Mehta: Okay, good.

603
01:15:04.200 --> 01:15:05.280
Ryan Mehta: connection there.

604
01:15:11.820 --> 01:15:12.990
Ryan Mehta: Any questions.

605
01:15:17.070 --> 01:15:40.050
Ryan Mehta: Right. One little refactor that I really want to do is extract this selector function into its own selectors file and export that so I will make another directory called selectors and it's make a card selectors got JS file.

606
01:15:41.640 --> 01:15:48.510
Ryan Mehta: And we will export cards, gift cards which will take state.

607
01:15:53.370 --> 01:15:59.640
Ryan Mehta: So we'll have this little selector function that we can drop into our use selector.

608
01:16:00.780 --> 01:16:01.440
Ryan Mehta: Over here.

609
01:16:04.320 --> 01:16:11.790
Ryan Mehta: This is actually us also constructing a little API, right, we have a gift cards function that knows how to get cards from state.

610
01:16:12.720 --> 01:16:23.610
Ryan Mehta: On the left hand side when we use get cards. We don't need to know any of the implementation, we don't need to know how to get cards out of state. We just need to know that we want to get cards from state.

611
01:16:24.600 --> 01:16:30.000
Ryan Mehta: So the left hand side doesn't need to know the structure of our state. It just needs to know what it wants to do.

612
01:16:31.440 --> 01:16:42.210
Ryan Mehta: That means if we ever changed the structure of state in the future. We just need to change how the API behaves. We don't have to change the calls and the components.

613
01:16:43.350 --> 01:16:44.370
The nice thing.

614
01:16:46.890 --> 01:16:47.220
Ryan Mehta: Okay.

615
01:16:48.690 --> 01:16:52.740
Ryan Mehta: That's a friend for the list. Any questions here.

616
01:16:55.920 --> 01:16:57.000
Michelle Stermitz: Can we test this.

617
01:16:58.110 --> 01:16:58.560
Ryan Mehta: Yeah.

618
01:16:59.010 --> 01:17:00.000
Ryan Mehta: Test the list.

619
01:17:01.590 --> 01:17:05.280
Michelle Stermitz: I guess just whatever components that we have that are a little bit more complicated.

620
01:17:08.100 --> 01:17:08.730
Ryan Mehta: Yeah, let's

621
01:17:09.150 --> 01:17:11.760
Ryan Mehta: Let's write a test over here.

622
01:17:17.100 --> 01:17:18.240
Ryan Mehta: So,

623
01:17:19.950 --> 01:17:20.640
Ryan Mehta: It.

624
01:17:22.560 --> 01:17:39.510
Ryan Mehta: Renders with a list of cards. There's two things that we can test right now we're in test for both tests that a list of cards renders and then after that, test, test,

625
01:17:40.890 --> 01:17:45.690
Ryan Mehta: Can create a card for right both these tests.

626
01:17:47.340 --> 01:17:51.810
Ryan Mehta: To do this, we're going to need to mock our service. We don't actually want to make an API call.

627
01:17:53.910 --> 01:17:55.500
Ryan Mehta: Will mark our

628
01:17:57.180 --> 01:17:58.440
Ryan Mehta: Service.

629
01:18:02.730 --> 01:18:12.570
Ryan Mehta: When our component first mounts are going to do a snapshot test. We're going to render component before this, we are going to

630
01:18:14.280 --> 01:18:16.320
Ryan Mehta: Mock our get cards.

631
01:18:20.700 --> 01:18:24.870
Ryan Mehta: Get cards returns an array of cards ID.

632
01:18:53.850 --> 01:18:59.160
Ryan Mehta: Two cards, come back from the API with this mock resolved value. Now look good.

633
01:19:01.680 --> 01:19:11.460
Ryan Mehta: And then we need to get our list. So we'll take cards list equals screen which will need to import

634
01:19:14.790 --> 01:19:15.390
Ryan Mehta: Get

635
01:19:16.560 --> 01:19:17.790
Ryan Mehta: Test ID.

636
01:19:18.870 --> 01:19:21.600
Ryan Mehta: Will need a test ID on our

637
01:19:23.250 --> 01:19:29.370
Ryan Mehta: Card list. So down here on the UL will make a test ID cards.

638
01:19:32.370 --> 01:19:35.040
Ryan Mehta: And then we will use that test ideas here.

639
01:19:36.480 --> 01:19:39.900
Ryan Mehta: At some point in the future we'll wait for

640
01:19:43.440 --> 01:19:47.880
Ryan Mehta: Expect cards lists to

641
01:19:49.140 --> 01:19:50.940
Ryan Mehta: Is there a wink thing that we can do.

642
01:20:02.400 --> 01:20:11.850
Ryan Mehta: Let's see what happens if we do that, because we don't expect it to just be empty. We actually know that the list will have two items in it so we can be a little bit more explicit

643
01:20:13.350 --> 01:20:15.240
Ryan Mehta: Let's see what happens with our tests.

644
01:20:35.460 --> 01:20:38.850
Ryan Mehta: Card stop map is not a function. Perfect.

645
01:20:45.000 --> 01:20:46.560
Ryan Mehta: This thing is not a function

646
01:20:49.020 --> 01:20:50.370
Ryan Mehta: Anybody know why.

647
01:20:55.110 --> 01:21:00.480
Adrian Simental: Did you import the select your own eight because presumably, that's where we get cards from and then we didn't do

648
01:21:04.950 --> 01:21:05.460
I didn't

649
01:21:07.260 --> 01:21:08.970
Ryan Mehta: Have a bad naming convention.

650
01:21:10.410 --> 01:21:13.530
Ryan Mehta: I have two things call to get cards in this application.

651
01:21:22.020 --> 01:21:23.580
Ryan Mehta: And I want the other one.

652
01:21:31.260 --> 01:21:32.040
Ryan Mehta: Which one is it

653
01:21:35.010 --> 01:21:37.770
Ryan Mehta: I will probably come up with a better naming convention here.

654
01:21:39.300 --> 01:21:45.780
Ryan Mehta: So there's two functions in this application that have the exact same

655
01:21:47.970 --> 01:21:49.770
ryan Diffenbaugh: Gift cards and gift card listening.

656
01:21:50.610 --> 01:21:51.990
About select cards.

657
01:21:57.900 --> 01:22:00.330
Ryan Mehta: That way we know the selected.

658
01:22:02.820 --> 01:22:04.200
Ryan Mehta: Select cards.

659
01:22:08.190 --> 01:22:09.450
Ryan Mehta: Are test pass now.

660
01:22:15.330 --> 01:22:16.680
Ryan Mehta: The to have list.

661
01:22:18.060 --> 01:22:20.250
Ryan Mehta: To have length thing doesn't work.

662
01:22:21.510 --> 01:22:25.530
Ryan Mehta: There must be something kind of like that with the just DOM stuff right

663
01:22:27.480 --> 01:22:29.220
Ryan Mehta: Testing library.

664
01:22:33.690 --> 01:22:36.330
Ryan Mehta: We're using this chest thing.

665
01:22:51.270 --> 01:22:54.090
Ryan Mehta: Doesn't look like it. Does anybody see one that would be

666
01:22:55.800 --> 01:22:56.880
Ryan Mehta: Kinda like that.

667
01:23:00.690 --> 01:23:01.980
Ryan Mehta: This one might be era.

668
01:23:05.760 --> 01:23:07.050
Annalise: To be in the DOM.

669
01:23:09.030 --> 01:23:10.350
Ryan Mehta: Be in the dorm.

670
01:23:13.350 --> 01:23:21.420
Ryan Mehta: We're definitely expected to be in the DOM to that, that one, but I think that one will always pass because this is just always there.

671
01:23:23.670 --> 01:23:25.410
Ryan Mehta: To contain element.

672
01:23:28.110 --> 01:23:28.590
Annalise: Okay.

673
01:23:30.300 --> 01:23:33.810
Ryan Mehta: Maybe we'll just do this screen yet.

674
01:23:35.460 --> 01:23:37.800
Ben Waples: What if you did. I'm like, expect

675
01:23:45.900 --> 01:23:46.980
Ben Waples: Would it still thinking right

676
01:23:48.060 --> 01:23:53.250
Ryan Mehta: I'm you just said we missed like the whole middle chunk of that, or at least I did.

677
01:23:54.270 --> 01:24:01.830
Ben Waples: Okay. Sorry, I'm like how we had it before, but instead of you just add length and then say to equal to

678
01:24:03.210 --> 01:24:04.950
Ben Waples: carless length to equal to

679
01:24:08.370 --> 01:24:09.660
Ben Waples: Is because carless

680
01:24:11.040 --> 01:24:13.260
Ben Waples: should still be an earache.

681
01:24:18.840 --> 01:24:20.310
Ben Waples: No undefined.

682
01:24:22.560 --> 01:24:24.690
Ryan Mehta: child nodes children.

683
01:24:32.040 --> 01:24:34.860
Ryan Mehta: Children to have. Thanks.

684
01:24:41.970 --> 01:24:42.780
Ryan Mehta: That's pretty good.

685
01:24:44.670 --> 01:24:45.210
Ryan Mehta: Nice.

686
01:24:47.640 --> 01:24:52.290
Ryan Mehta: Okay, so we expected to list items. This test look okay

687
01:24:55.560 --> 01:24:57.000
Ryan Mehta: All right, we have the other tests that we

688
01:24:57.000 --> 01:24:59.970
Ryan Mehta: Should have written first also it

689
01:25:03.960 --> 01:25:06.780
Ryan Mehta: Creates a new card.

690
01:25:08.010 --> 01:25:09.630
Ryan Mehta: With forms.

691
01:25:14.010 --> 01:25:14.670
Ryan Mehta: Alright.

692
01:25:16.050 --> 01:25:21.480
Ryan Mehta: So we still need to mock this get cards thing I'm probably I'm going to drop this into a before

693
01:25:23.040 --> 01:25:25.260
Ryan Mehta: The floor all

694
01:25:27.510 --> 01:25:32.370
Ryan Mehta: So that way, it's always mocked mock up for each test.

695
01:25:35.190 --> 01:25:38.010
Ryan Mehta: And then we're going to render our app.

696
01:25:39.930 --> 01:25:46.320
Ryan Mehta: We need a mock. Another thing we need a mock the post card.

697
01:25:48.540 --> 01:25:49.140
Ryan Mehta: Also

698
01:26:08.580 --> 01:26:12.150
Ryan Mehta: So will mock this postcard thing here.

699
01:26:15.360 --> 01:26:16.680
Ryan Megoing to have a target whose value is the value of the color that we change to let's make it green. So we're changing the foreground color to green.

384
00:50:02.430 --> 00:50:06.780
Ryan Mehta: We're then going to wait for react to re render with the new state.

385
00:50:08.010 --> 00:50:17.580
Ryan Mehta: After re renders we expect the display to have style where color is now equal to

386
00:50:19.320 --> 00:50:20.730
Bring. Oops.

387
00:50:23.670 --> 00:50:24.840
Ryan Mehta: This should totally fail.

388
00:50:26.850 --> 00:50:27.990
Ryan Mehta: Test makes sense though.

389
00:50:29.130 --> 00:50:38.550
Ryan Mehta: render a color picker grab our input grab our display change our foreground input and expected displays color to change in response

390
00:50:43.050 --> 00:50:43.740
Makes sense.

391
00:50:45.270 --> 00:50:45.750
Ryan Mehta: Alright.

392
00:50:47.040 --> 00:50:53.580
Ryan Mehta: So the color is not changing, we actually go to the physical display to will notice it doesn't change.

393
00:50:58.410 --> 00:51:07.530
Ryan Mehta: It's not changing because our handle change function is only able to change target name or the text and the background color pieces of state.

394
00:51:08.070 --> 00:51:22.260
Ryan Mehta: We could add another else if here to also handle the target. So we could do this sort of thing. It's actually do it, and then refactor it the target name equals foreground color.

395
00:51:24.750 --> 00:51:31.560
Ryan Mehta: Then we're going to set state SG colors to target value.

396
00:51:33.690 --> 00:51:49.170
Ryan Mehta: So if the targets name is foreground color then we set the foreground color piece of state to the targets value. This caused our test to pass. We can also now actually change our foreground color.

397
00:51:50.520 --> 00:51:51.420
Ryan Mehta: Which is what we want.

398
00:51:54.930 --> 00:52:01.560
Ryan Mehta: This code doesn't feel the best. So we're going to refactor it as refactor it are tested continue to pass.

399
00:52:03.120 --> 00:52:05.550
Ryan Mehta: But let's highlight something

400
00:52:06.630 --> 00:52:15.210
Ryan Mehta: That's a bit confusing, I think, but super important of this whole thing right now is working because our targets have names.

401
00:52:17.880 --> 00:52:27.150
Ryan Mehta: That we can associate with a piece of state that we want to change. So, for example, our background color input has a name background color.

402
00:52:28.350 --> 00:52:35.010
Ryan Mehta: Which allows us to grab the targets name. Remember the target is this actual input that's actually a console on that again.

403
00:52:39.480 --> 00:52:43.590
Ryan Mehta: So the target is the actual input over here.

404
00:52:44.700 --> 00:53:01.890
Ryan Mehta: When I go and change our background color. You'll notice we get the actual input big color with its associated name if I change the foreground color. The target is this actual input with the associated name and same with text.

405
00:53:03.840 --> 00:53:19.440
Ryan Mehta: So we're saying give me that target grab that targets name if the targets name is text, then I know I want to change the text piece of state. If the targets name is big color I want to change the big color piece of state and same with foreground color.

406
00:53:21.060 --> 00:53:21.660
Ryan Mehta: What's the word

407
00:53:21.930 --> 00:53:22.770
Ron Yonker: Convenient. Yep.

408
00:53:22.830 --> 00:53:24.330
Ron Yonker: Go ahead, the whole empire.

409
00:53:24.480 --> 00:53:27.840
Ron Yonker: And just differentiating based off of a property, the name of it.

410
00:53:29.130 --> 00:53:29.460
Ron Yonker: Right.

411
00:53:32.430 --> 00:53:35.400
Ryan Mehta: Did you say we're just differentiating off of the name property.

412
00:53:37.260 --> 00:53:38.130
Ron Yonker: Yeah, that's what I said.

413
00:53:38.520 --> 00:53:40.410
Ryan Mehta: Yeah. Yeah, that's exactly what we're doing.

414
00:53:42.960 --> 00:53:57.780
Ryan Mehta: It's even more convenient to because we were smart enough over here or maybe Lucky enough over on our controls component to name the targets the exact same name that we named the pieces of state.

415
00:53:58.980 --> 00:54:06.660
Ryan Mehta: Here. So there's a really convenient refactor that we can do instead of all of this is if, else if logic.

416
00:54:08.850 --> 00:54:11.010
Ryan Mehta: When I comment that out are tested fail.

417
00:54:12.270 --> 00:54:16.170
Ryan Mehta: Hopefully, it'd be really strange if they passed, they all fail.

418
00:54:18.870 --> 00:54:21.570
Ryan Mehta: You can have one single set state line.

419
00:54:25.230 --> 00:54:43.410
Ryan Mehta: The key that we want to use is the. So you'll notice over here, these keys that we used in set state were always the exact same as the targets name. Anybody remember how to use a variable as a key and an object.

420
00:54:50.310 --> 00:54:53.490
Thomas Stussi: Sean posted in the chat. Is it square brackets.

421
00:54:54.660 --> 00:54:55.530
Ryan Mehta: It is, yeah.

422
00:54:55.560 --> 00:54:57.810
Thomas Stussi: Square brackets Sean's all over it.

423
00:54:58.110 --> 00:54:58.920
Ryan Mehta: Got name.

424
00:55:00.180 --> 00:55:01.680
Ryan Mehta: And then the value

425
00:55:01.830 --> 00:55:03.540
Ryan Mehta: Will be target value.

426
00:55:05.910 --> 00:55:10.620
Ryan Mehta: And that will do the same thing as all of this, if, else if else's stuff.

427
00:55:13.980 --> 00:55:14.910
Ryan Mehta: And there's our passing

428
00:55:15.090 --> 00:55:19.290
Ron Yonker: Rate. So, so I'll put that syntax with the square brackets.

429
00:55:20.160 --> 00:55:24.030
Ryan Mehta: This is evaluating this JavaScript. It's a computed prop.

430
00:55:25.440 --> 00:55:26.640
Ryan Mehta: Computed key.

431
00:55:26.670 --> 00:55:27.240
So,

432
00:55:28.440 --> 00:55:30.810
Ryan Mehta: We're saying evaluate what target dot name.

433
00:55:30.870 --> 00:55:39.180
Ryan Mehta: Equals and set that to the key and then the value is going to be targeted that value. So if we look in a browser. Let's try this.

434
00:55:40.200 --> 00:55:43.110
Ryan Mehta: Let's make a team called age.

435
00:55:45.900 --> 00:55:48.720
Ryan Mehta: And let's define two dogs spot.

436
00:55:51.390 --> 00:56:02.040
Ryan Mehta: Who has a name of spot and a key of five and a weight of 20 pounds.

437
00:56:03.900 --> 00:56:04.560
Ryan Mehta: What's

438
00:56:05.580 --> 00:56:07.830
Ryan Mehta: What is spot going to look like in this case.

439
00:56:15.630 --> 00:56:30.180
Ryan Mehta: This spot has a name spot key five wait 20 pounds. What if instead of using the actual string key here. We wanted to grab the value of this variable key and use that as the key here.

440
00:56:33.030 --> 00:56:34.200
Ryan Mehta: So we could make rover.

441
00:56:36.690 --> 00:56:38.940
Ryan Mehta: rovers name is rover.

442
00:56:41.010 --> 00:56:46.770
Ryan Mehta: We want to grab the keys value and set rover to 10 weight is

443
00:56:47.910 --> 00:56:49.200
Ryan Mehta: 50 pounds.

444
00:56:51.030 --> 00:57:14.460
Ryan Mehta: So a slight difference here right this time we put square brackets around key. This is telling JavaScript that we don't want key to be the name of a property. We want to evaluate the variable key and use that value as the name of our property. So now rover has an age instead of a key.

445
00:57:18.120 --> 00:57:18.930
Makes sense.

446
00:57:21.180 --> 00:57:24.720
Ryan Mehta: So whenever you're in square brackets on this left hand side hoops.

447
00:57:25.230 --> 00:57:28.530
Ryan Mehta: Whenever you see square brackets on this left hand side, we're evaluating

448
00:57:28.620 --> 00:57:33.930
Ryan Mehta: The value of key and putting that value here. So age in this case.

449
00:57:35.130 --> 00:57:36.120
Ryan Mehta: In our code.

450
00:57:37.380 --> 00:57:46.320
Ryan Mehta: We're evaluating the value of target name which is either text background color or foreground color which is perfect because they match up perfectly.

451
00:57:47.670 --> 00:57:52.950
Ryan Mehta: With these things so evaluating target name and setting it to target that value.

452
00:57:55.380 --> 00:57:57.570
Ryan Mehta: And now we have a generic change handler.

453
00:57:59.640 --> 00:58:01.680
Ryan Mehta: On our front end it all still works.

454
00:58:03.900 --> 00:58:04.140
Right.

455
00:58:08.580 --> 00:58:10.260
Get rid of this console log now.

456
00:58:13.980 --> 00:58:22.890
Ryan Mehta: Alright, I just want to do one last very, very tiny thing because that I have a pet peeve that we have on this application.

457
00:58:25.920 --> 00:58:33.990
Ryan Mehta: These things right here, this handle change function, it makes sense to call that handle change. It's a function that handles a change

458
00:58:35.460 --> 00:58:41.880
Ryan Mehta: But you'll notice and react. The thing that we passed the handle change function to eventually is called on change.

459
00:58:44.400 --> 00:58:56.010
Ryan Mehta: Whenever we're making components that take a handle change function. I hate when this function here is called handle change because then in our controls. When we use this component

460
00:58:57.360 --> 00:59:02.040
Ryan Mehta: We have handle change equals handle change which makes me feel

461
00:59:02.970 --> 00:59:20.280
Ryan Mehta: Like there's some disconnect here we pass on change handle change functions, but sometimes you pass handle change handle change functions. I would rather this be called on change also so it kind of mirrors more the default the built in inputs.

462
00:59:21.570 --> 00:59:27.360
Ryan Mehta: Um, since I want to rename this thing on change. I need to rename this thing on change.

463
00:59:32.820 --> 00:59:33.300
Like so.

464
00:59:35.460 --> 00:59:54.540
Ryan Mehta: I prefer this a lot because, as a developer, the developer of this component. It feels a little bit awkward having these on change on change things. But as the user of this component. It feels a lot better calling this thing on change. And we developed this component far less

465
00:59:54.810 --> 00:59:56.610
Ryan Mehta: Far less often than we're going to be using

466
00:59:56.610 --> 01:00:00.870
Ryan Mehta: The component. So I think we should try to use the same words that are

467
01:00:00.870 --> 01:00:01.860
Ron Yonker: Inputs use

468
01:00:02.280 --> 01:00:03.300
Ryan Mehta: For the user of our

469
01:00:03.300 --> 01:00:03.900
Ron Yonker: Component.

470
01:00:04.680 --> 01:00:06.090
Ryan Mehta: So I always call this thing.

471
01:00:06.150 --> 01:00:08.100
Ryan Mehta: On change. And then the actual

472
01:00:08.130 --> 01:00:08.790
Ron Yonker: Function.

473
01:00:09.690 --> 01:00:10.980
Ryan Mehta: The handle change function.

474
01:00:12.810 --> 01:00:12.990
Ryan Mehta: That

475
01:00:14.160 --> 01:00:35.670
Ron Yonker: Yeah, I really appreciate that. I start, I found myself starting to do the same thing in foundations to where I'm just not willing to try and trace all the different bindings. I literally can't do it. And it takes you so long, trying to debug your code when you get one of the names

476
01:00:37.230 --> 01:00:43.170
Ryan Mehta: Totally, yeah that's right makes so much of a difference being super intentional with the names that you choose.

477
01:00:46.140 --> 01:00:48.390
Ryan Mehta: Alright, are tested all still pass hopefully

478
01:00:48.420 --> 01:00:49.320
Ryan Mehta: After that,

479
01:00:49.380 --> 01:00:55.680
Ron Yonker: Very fast. You still got you still got a this dot handle Trump. That's where you're naming it all my

480
01:01:07.170 --> 01:01:07.530
Ryan Mehta: Old

481
01:01:10.620 --> 01:01:12.780
Ryan Mehta: My eyes got too lazy as I was reading it.

482
01:01:15.180 --> 01:01:24.750
Ryan Mehta: You provided a value prop to a form field without an on change handler. This will render a read only field. Okay, I probably missed

483
01:01:26.580 --> 01:01:27.720
One of these things.

484
01:01:31.350 --> 01:01:31.950
Don't change.

485
01:01:35.880 --> 01:01:36.870
Ryan Mehta: Does it still work.

486
01:01:43.260 --> 01:01:44.520
Ryan Mehta: Everything's good. Okay.

487
01:01:47.790 --> 01:01:51.120
Ryan Mehta: All your tests pass. Okay, that's a good everyone

488
01:01:54.450 --> 01:02:08.190
ryan Diffenbaugh: Totally I'm Ryan, I don't know, like Patrick, but looking at line 13 the target name in bracket. So that's basically just grabbing all the values from Target to structuring it so you don't need also right

489
01:02:09.810 --> 01:02:16.620
Ryan Mehta: Yeah, so on on changing one of these inputs. It's a particular target that changes right

490
01:02:18.870 --> 01:02:22.680
Ryan Mehta: So when we go to set the state we get that particular targets name.

491
01:02:23.910 --> 01:02:26.550
Ryan Mehta: Whichever target. We just changed name and

492
01:02:27.000 --> 01:02:27.780
Ryan Mehta: Its value.

493
01:02:29.250 --> 01:02:35.040
Ryan Mehta: So yeah, it's kind of like dynamically grabbing the targets name and do all this if, else if logic.

494
01:02:48.420 --> 01:02:49.680
The questions.

495
01:02:51.210 --> 01:02:57.390
Ron Yonker: So in controls Jeff Sachs. How are you calling that

496
01:02:59.250 --> 01:03:07.740
Ron Yonker: So it's on change there. But in your color picker, the container. You're calling it handled change.

497
01:03:09.900 --> 01:03:17.880
Ryan Mehta: And mapping it to this on change function. So, the convention is usually that you call the actual function that handled the change

498
01:03:18.900 --> 01:03:24.240
Ryan Mehta: I handle change function and the props are always called on change because like on change.

499
01:03:24.330 --> 01:03:25.950
Ryan Mehta: I said handle the change

500
01:03:27.030 --> 01:03:28.230
Ron Yonker: OK, I see no

501
01:03:40.260 --> 01:03:43.920
Ron Yonker: And then controls. It's basically a burger. You've done the mapping in the

502
01:03:44.940 --> 01:03:45.330
Ron Yonker: Got it.

503
01:03:51.240 --> 01:03:51.900
Ryan Mehta: Alright.

504
01:03:53.220 --> 01:04:00.030
Ryan Mehta: So for the next little application that we're going to make. We're going to make a list of things. Basically, your lab from yesterday.

505
01:04:01.320 --> 01:04:06.960
Ryan Mehta: With their router sir list of things in detail page. I'm going to use this

506
01:04:08.310 --> 01:04:09.690
Ryan Mehta: Animal Crossing.

507
01:04:11.850 --> 01:04:15.810
Ryan Mehta: API. I have never played Animal Crossing and know nothing about it.

508
01:04:17.160 --> 01:04:21.360
Annalise Murphy: Somebody let me know what that is, because I hear it. I have no clue.

509
01:04:23.430 --> 01:04:26.670
Ryan Mehta: It's a video game with these like little

510
01:04:27.090 --> 01:04:30.960
Ryan Mehta: Okay, people. That's all I know about it and you can go fishing.

511
01:04:31.620 --> 01:04:32.670
Ryan Mehta: Okay, I know about it.

512
01:04:36.990 --> 01:04:46.470
Ryan Mehta: So we'll use this Animal Crossing API to get a bunch of villagers and display those villagers on the page. So basically what you all had to do.

513
01:04:48.150 --> 01:04:48.870
Ryan Mehta: Yesterday,

514
01:04:51.870 --> 01:04:55.350
Ryan Mehta: And will write tests for this whole thing and everything as we go through it.

515
01:04:55.650 --> 01:05:09.090
Ryan Mehta: The one difference between what we're going to do today and what you all did yesterday is we're going to write it with container components and presentational components and be intentional about the where we're putting all of this stuff.

516
01:05:13.080 --> 01:05:25.740
Ryan Mehta: Let's, let's draw this thing first, and then take a break. So like Dr. What we're going to be building first and come up with a plan and then take a break. I'm going to close this other thing.

517
01:05:28.080 --> 01:05:29.790
Ryver we have in state for background color. Now let's see what we get for failure to snapshot test failure which makes sense.

429
00:51:12.720 --> 00:51:17.730
Ryan Mehta: So there's our little div our test probably passes.

430
00:51:21.630 --> 00:51:27.720
Ryan Mehta: Doesn't but we can check why right this time. Don't forget the on change.

431
00:51:28.800 --> 00:51:34.350
Ryan Mehta: Okay, so our test still fails because we don't actually change the background color.

432
00:51:35.460 --> 00:51:36.240
Ryan Mehta: When

433
00:51:37.320 --> 00:51:48.030
Ryan Mehta: We change the input. So we need to actually do that. Let's write another change function call it handled chain and build back around.

434
00:51:50.010 --> 00:51:50.790
Change.

435
00:51:51.930 --> 00:52:07.110
Ryan Mehta: Will do the same thing with the structure target off of event. We will set state background color to target that value. And now our test to pass.

436
00:52:08.700 --> 00:52:09.930
Ryan Mehta: Once you pass this

437
00:52:12.570 --> 00:52:14.040
And all background check.

438
00:52:17.550 --> 00:52:19.170
Okay there passes.

439
00:52:20.280 --> 00:52:26.340
Ryan Mehta: So running through the test again we render a color picker, which is this entire component

440
00:52:27.810 --> 00:52:33.870
Ryan Mehta: We grab our background color input and we grab our display.

441
00:52:35.130 --> 00:52:36.030
Which is this thing.

442
00:52:37.050 --> 00:52:42.330
Ryan Mehta: We trigger an event. So we fire this change event on the background color input.

443
00:52:43.500 --> 00:52:50.790
Ryan Mehta: Where the event is this object. So the target has a value of read

444
00:52:51.810 --> 00:53:06.510
Ryan Mehta: When we trigger that event, it fires off this on change. So the handle background color change, which is this function here, which changes our background color to whatever target that value is in this case read

445
00:53:07.560 --> 00:53:21.570
Ryan Mehta: That should re render the component we wait for that re render after the render finishes. We expect the display to now have a style whose background color is that same red color.

446
00:53:23.370 --> 00:53:37.230
Ryan Mehta: If we go to the browser. Hopefully we can type in here and we see our little background color, we should be able to change this background color, also with our little color picker.

447
00:53:41.040 --> 00:53:41.400
Cool.

448
00:53:44.220 --> 00:53:48.420
Ben Waples: What was the No curly braces on the style and react goes on.

449
00:53:49.860 --> 00:53:58.530
Ryan Mehta: So one set of curly braces to enter like the normal JavaScript land and the second set of curly braces, because we have an object.

450
00:53:59.940 --> 00:54:03.600
Ryan Mehta: Style takes an object of CSS properties.

451
00:54:03.960 --> 00:54:08.640
Thomas Stussi: Okay, thanks. And the input type color just gives us to color picker.

452
00:54:10.110 --> 00:54:10.470
Thomas Stussi: Yeah.

453
00:54:10.770 --> 00:54:13.770
Ryan Mehta: The input type colors. What gives us this nice little color picker.

454
00:54:15.360 --> 00:54:17.910
ryan Diffenbaugh: Pretty fancy right you know expecting

455
00:54:18.780 --> 00:54:20.820
Annalise Murphy: So this button I dig it.

456
00:54:20.880 --> 00:54:21.930
Thomas Stussi: So fancy

457
00:54:24.930 --> 00:54:25.350
Annalise Murphy: Gene

458
00:54:27.900 --> 00:54:36.240
Ryan Mehta: So one more little input to do same sort of flow. Hopefully it'll get smoother and smoother as we write these tests.

459
00:54:37.500 --> 00:54:43.530
Ryan Mehta: We want to have another color input that lets us change the foreground color the text color here.

460
00:54:46.140 --> 00:54:48.150
Ryan Mehta: So let's start a test.

461
00:54:49.740 --> 00:54:53.670
It changes the display.

462
00:54:56.880 --> 00:54:57.990
Ryan Mehta: text color.

463
00:55:04.410 --> 00:55:04.770
Ryan Mehta: Okay.

464
00:55:06.150 --> 00:55:27.150
Ryan Mehta: So we're going to render our color picker. To start off with, we're going to grab our text color input which will get from a waiting will use our screen will find by label text. This one will call text color.

465
00:55:28.350 --> 00:55:30.720
Ryan Mehta: And then we'll also grab our display.

466
00:55:40.110 --> 00:55:41.790
Ryan Mehta: Test display.

467
00:55:43.470 --> 00:55:46.650
Ryan Mehta: And can't forget to make this an AC function.

468
00:55:48.930 --> 00:55:55.380
Ryan Mehta: Right, so we're going to find. We're going to render a color picker will find our text input and our display.

469
00:55:56.460 --> 00:56:11.700
Ryan Mehta: We are going to fire an event. It's going to be a change event on our text color input, you're going to pass it a target an event with target and the value will set the value to

470
00:56:14.640 --> 00:56:15.180
Ryan Mehta: Green.

471
00:56:17.640 --> 00:56:19.650
Ryan Mehta: So we'll take will

472
00:56:20.970 --> 00:56:28.470
Ryan Mehta: Simulate the user changing the color input to green. And then we will wait for

473
00:56:31.950 --> 00:56:38.460
Ryan Mehta: We expect the display to have style.

474
00:56:39.930 --> 00:56:49.560
Ryan Mehta: This time the style is going to be background color black because it's going to use the old default background color.

475
00:56:50.820 --> 00:56:53.820
Ryan Mehta: And it's going to have a foreground color.

476
00:56:56.400 --> 00:56:56.850
Green.

477
00:57:01.080 --> 00:57:17.340
Ryan Mehta: I think as we write this test this previous test that we wrote is going to start to fail because we're not adding this foreground color to the styles. So let's make sure that we have color here will have a default foreground color of lights.

478
00:57:22.260 --> 00:57:22.560
Ryan Mehta: Good.

479
00:57:25.770 --> 00:57:36.960
Ryan Mehta: So will render a color picker will grab our text color input and our display will fire an event change event to our text color input changing the color to green.

480
00:57:37.620 --> 00:57:47.340
Ryan Mehta: After re render will expect our display to have a background color and black since that's the default and a color foreground color of green.

481
00:57:49.590 --> 00:57:51.720
Ryan Mehta: This should make our test fail, for sure.

482
00:57:53.130 --> 00:58:00.570
Ryan Mehta: We will get it to start passing by adding some of this stuff. So let's start off by adding color.

483
00:58:02.190 --> 00:58:11.670
Ryan Mehta: White our default color to state will the structure color off of state and we'll pass that color to our styles.

484
00:58:13.980 --> 00:58:23.910
Ryan Mehta: So now this piece of state is running through our application. It's defined. It's the structured off of state and then pass to our display.

485
00:58:25.560 --> 00:58:33.060
Ryan Mehta: The next part that we need to do is actually make it so we can handle this change to do that will need another label.

486
00:58:35.850 --> 00:58:38.370
Ryan Mehta: This time our label will be for

487
00:58:39.630 --> 00:58:41.400
Ryan Mehta: What's called a text color.

488
00:58:48.240 --> 00:58:49.890
Ryan Mehta: And we'll have an input.

489
00:58:53.850 --> 00:58:56.280
Ryan Mehta: ID is text color.

490
00:58:59.700 --> 00:59:04.290
Ryan Mehta: Type color. It has a value of color.

491
00:59:05.550 --> 00:59:08.910
Ryan Mehta: And on change. We need to write a function

492
00:59:11.010 --> 00:59:17.970
Ryan Mehta: For this, let's scroll up a little bit. We'll have a handle color change.

493
00:59:19.080 --> 00:59:24.300
Ryan Mehta: We're going to be structured target off of the event, who will set state.

494
00:59:25.320 --> 00:59:29.190
Ryan Mehta: Will set our color state to target value.

495
00:59:30.480 --> 00:59:34.260
Ryan Mehta: Color here because its color right here. Hey,

496
00:59:36.990 --> 00:59:39.780
Ryan Mehta: And then we can pass that handle color change.

497
00:59:41.790 --> 00:59:43.890
Ryan Mehta: To our input.

498
00:59:45.180 --> 00:59:49.080
Ryan Mehta: That should hopefully get our test to pass.

499
00:59:51.060 --> 00:59:52.680
Ryan Mehta: After we update a snapshot

500
00:59:55.320 --> 00:59:56.790
Ryan Mehta: Okay, where do we have

501
00:59:58.710 --> 01:00:00.330
Ryan Mehta: Did we forget to

502
01:00:02.250 --> 01:00:03.270
Wait, something

503
01:00:06.900 --> 01:00:08.040
Ryan Mehta: Fine. Oops.

504
01:00:10.440 --> 01:00:11.100
Ryan Mehta: By

505
01:00:12.360 --> 01:00:12.690
Label

506
01:00:14.010 --> 01:00:17.490
Ryan Mehta: I did find all by label texts. I was probably an array of things.

507
01:00:20.670 --> 01:00:33.450
Ryan Mehta: Okay. All of our tests pass. So the test render are compounded find the input, find the display change the input wait for the display to change.

508
01:00:36.240 --> 01:00:37.110
That makes sense.

509
01:00:39.660 --> 01:00:42.300
Ryan Mehta: Back on our front end.

510
01:00:43.470 --> 01:00:50.250
Ryan Mehta: You can type into this thing we can change the foreground color we can change the background color.

511
01:00:51.420 --> 01:00:53.490
Ryan Mehta: And we have our little crappy color picker.

512
01:01:01.200 --> 01:01:02.520
Ryan Mehta: And three tests to go with it.

513
01:01:07.680 --> 01:01:10.410
Ryan Mehta: Any questions about these things.

514
01:01:19.740 --> 01:01:25.320
Ryan Mehta: Alright, what if we wanted to. What if we decided that we actually have two different components here.

515
01:01:26.400 --> 01:01:35.160
Ryan Mehta: Which is sort of do at least have two components. Here we have a color controls component which is

516
01:01:36.420 --> 01:01:38.910
Ryan Mehta: This stuff at the top here.

517
01:01:40.830 --> 01:01:42.000
Let me pick a different color.

518
01:01:49.260 --> 01:01:50.880
Ryan Mehta: So bad at drawing straight lines.

519
01:01:54.000 --> 01:02:03.420
Ryan Mehta: So we have this stuff at the top, which seems like it's its own component. And we have a display component down here at the bottom.

520
01:02:04.770 --> 01:02:07.560
Ryan Mehta: So that makes sense to kind of two separate components.

521
01:02:08.580 --> 01:02:13.680
Ryan Mehta: Let's try to separate these things. So let's make a component called controls.

522
01:02:15.210 --> 01:02:17.880
Ryan Mehta: And the component called display.

523
01:02:20.130 --> 01:02:23.970
Ryan Mehta: If we wanted to separate these two things, where would state have to live.

524
01:02:28.410 --> 01:02:29.310
Thomas Stussi: The controls.

525
01:02:35.490 --> 01:02:36.030
Edgar Cuellar: Muted

526
01:02:39.870 --> 01:02:40.740
Greg Mall: you're muted, Ryan.

527
01:02:41.040 --> 01:02:42.000
Thomas Stussi: We can't hear you.

528
01:02:42.090 --> 01:02:42.750
For some nice

529
01:02:43.980 --> 01:02:50.730
Ryan Mehta: If state lived in controls how would how would display get this state, how would it know what to display here.

530
01:02:51.690 --> 01:02:54.090
Ryan Mehta: Because controls would have to pass it display.

531
01:02:56.430 --> 01:02:56.880
Ryan Mehta: I guess.

532
01:02:57.900 --> 01:03:00.750
Ryan Mehta: If there are two separate components that are siblings of each other.

533
01:03:01.950 --> 01:03:09.990
Ryan Mehta: There needs to be a parent component that holds the state, right. So I think what we're going to end up with is still a color picker component

534
01:03:12.960 --> 01:03:14.340
Ryan Mehta: The color picker component will

535
01:03:14.340 --> 01:03:15.450
hold our state.

536
01:03:16.500 --> 01:03:19.590
Ryan Mehta: And it will pass that state to controls.

537
01:03:23.910 --> 01:03:25.290
Ryan Mehta: And to display.

538
01:03:27.810 --> 01:03:37.200
ryan Diffenbaugh: So the Color Picker. Just be like the app JS that we didn't foundations sort of the file that controls the urn brings in the different components. Yep.

539
01:03:37.290 --> 01:03:48.870
Ryan Mehta: Totally. I'm going to put mine in color picker, and then have appt yes still important color picker. But yeah, it's totally like some like higher up component so ours will look ultimately

540
01:03:50.430 --> 01:03:51.120
Like this.

541
01:03:54.300 --> 01:04:05.190
Thomas Stussi: So you could have a tree where like App JS has all the logic that everything needs and then like color picker as the logic that specifically controllers and displays need

542
01:04:05.700 --> 01:04:16.200
Thomas Stussi: And you could have, like, another branch that's a sibling of color picker that has logic that something else needs. And that's how you structure the book. Exactly. Yeah.

543
01:04:16.650 --> 01:04:24.120
Ryan Mehta: Um, for the most part our app JS. Once we get back to react router will be like our routing logic.

544
01:04:27.180 --> 01:04:30.090
Ryan Mehta: That's where we usually have like the react router stuff.

545
01:04:33.810 --> 01:04:38.520
Ryan Mehta: Alright, let's try to do this refactor. Let's x. Let's try to take out

546
01:04:40.800 --> 01:04:45.990
Ryan Mehta: The controls and displays and display and put them in their own components.

547
01:04:49.380 --> 01:04:50.640
Ryan Mehta: What happened to

548
01:04:55.920 --> 01:04:56.310
Ryan Mehta: Alright.

549
01:04:57.750 --> 01:05:07.230
Ryan Mehta: So first thing I'm going to do is create another file in this color picker directory called controls.

550
01:05:09.390 --> 01:05:10.620
Ryan Mehta: Got jazz sex.

551
01:05:12.180 --> 01:05:29.370
Ryan Mehta: The real beauty beautiful part about this is I think we should be able to refactor our color picker component without having to change our test. I think our test should continue to pass if we do everything correctly.

552
01:05:32.940 --> 01:05:35.820
Ryan Mehta: And that will mean that we refactored successfully.

553
01:05:36.840 --> 01:05:38.100
Ryan Mehta: The controls.

554
01:05:39.750 --> 01:05:41.640
This is so annoying. Okay.

555
01:05:43.830 --> 01:05:53.670
Ryan Mehta: So here's our old color picker. Here's our controls our controls is going to import react react will make it a class component to begin with.

556
01:05:58.650 --> 01:06:01.440
Ryan Mehta: We're going to export the fault come

557
01:06:02.790 --> 01:06:04.050
Ryan Mehta: Controls.

558
01:06:08.010 --> 01:06:13.200
Ryan Mehta: Components. We need your method and I forgot the key word class.

559
01:06:15.540 --> 01:06:15.930
Okay.

560
01:06:17.370 --> 01:06:30.600
Ryan Mehta: Our render method is going to render all of this control logic over here. So all the label input stuff. So I'm just going to copy it for now and drop it back over.

561
01:06:31.740 --> 01:06:32.070
Ryan Mehta: Here.

562
01:06:33.390 --> 01:06:33.990
Like so.

563
01:06:35.880 --> 01:06:39.720
Ryan Mehta: Are you so upset. Oh, I don't have a return

564
01:06:43.290 --> 01:06:50.370
Ryan Mehta: Okay, fair. Now it's pretty happy, um, where's it going to get all of this stuff from

565
01:06:52.110 --> 01:06:52.320
From

566
01:06:53.760 --> 01:06:55.140
Ryan Mehta: From color picker so

567
01:06:56.130 --> 01:06:59.940
Ryan Mehta: What do I need to right here to grab that stuff from color picker.

568
01:07:00.750 --> 01:07:02.340
Ben Waples: Should we d structure props.

569
01:07:03.600 --> 01:07:04.020
Ben Waples: Ugly

570
01:07:04.170 --> 01:07:06.090
Ryan Mehta: Yeah, so we'll get it from props.

571
01:07:07.170 --> 01:07:11.160
Ryan Mehta: Background color and color.

572
01:07:14.550 --> 01:07:20.850
Ryan Mehta: Good stuff. Props muscle going to put this all on online just because getting a bit long.

573
01:07:22.800 --> 01:07:23.280
So,

574
01:07:25.050 --> 01:07:26.400
Ryan Mehta: And then we're using it here.

575
01:07:28.260 --> 01:07:31.590
Ryan Mehta: Okay, and what about handle change.

576
01:07:33.120 --> 01:07:38.970
Ryan Mehta: Handled background change and handle color ch And then we also expect the payload. How should we change the foreground color.

516
01:06:28.350 --> 01:06:31.290
Ryan Mehta: That is going to be passed to our action creator

517
01:06:32.490 --> 01:06:33.480
Ryan Mehta: Foreground color.

518
01:06:34.590 --> 01:06:36.330
Ryan Mehta: And foreground color.

519
01:06:37.980 --> 01:06:49.260
Ryan Mehta: Again, don't even think about react. Right now we're just making pure JavaScript functions and we will inject them into our react in a little bit. So we have a function that will construct this object for us.

520
01:06:50.310 --> 01:06:58.800
Ryan Mehta: We're going to create our action, object by calling this f g color change function and passing it a new color. Let's say

521
01:07:00.090 --> 01:07:00.480
Ryan Mehta: Green.

522
01:07:02.040 --> 01:07:08.460
Ryan Mehta: And then we should be able to construct a new state by passing to our reducer.

523
01:07:11.550 --> 01:07:12.750
Ryan Mehta: Our current state.

524
01:07:14.040 --> 01:07:14.910
Ryan Mehta: And an action.

525
01:07:16.320 --> 01:07:17.520
Ryan Mehta: The action being

526
01:07:19.230 --> 01:07:24.390
Ryan Mehta: This object here type f g color payload green

527
01:07:26.460 --> 01:07:32.970
Ryan Mehta: When we do that we expect the new state the output of the producer to equal

528
01:07:34.320 --> 01:07:39.180
Ryan Mehta: BG color should be unchanged. And I think it started off as

529
01:07:40.470 --> 01:07:43.440
Ryan Mehta: Black but foreground color.

530
01:07:44.670 --> 01:07:45.810
Ryan Mehta: should now be

531
01:07:47.850 --> 01:07:48.300
Great.

532
01:07:54.510 --> 01:07:57.450
Ryan Mehta: There's our test. Let's see what it's failing for

533
01:08:00.090 --> 01:08:06.060
Ryan Mehta: So expected for our ground color to be green, but we still get read the initial state, just kind of what we expected.

534
01:08:07.590 --> 01:08:23.610
Ryan Mehta: This makes sense. This test constructor state construct our action past the state and action to the reducer. We expect after running through the reducer. We get a new state where the foreground color has changed to green.

535
01:08:27.240 --> 01:08:30.840
Ryan Mehta: Back in our reducer we need another case.

536
01:08:32.430 --> 01:08:39.270
Ryan Mehta: On foreground color change. In this case, we are going to keep everything in our existing state.

537
01:08:40.710 --> 01:08:45.600
Ryan Mehta: But we're going to update foreground color to whatever's in the action payload.

538
01:08:47.880 --> 01:08:49.470
Ryan Mehta: Now we get a passing test.

539
01:08:51.780 --> 01:08:52.380
Look good

540
01:08:55.620 --> 01:09:02.280
Ryan Mehta: All right, we'll do the text color or the text in a second, let's just first integrate this with our component. So,

541
01:09:02.430 --> 01:09:20.370
Ron Yonker: So Ryan integration works. So on line eight of the color reducer JS a return statement like with the spread of state, you're saying, give me all of the other state unchanged, but specifically changed the foreground color.

542
01:09:22.080 --> 01:09:23.010
Ron Yonker: Okay, thank you.

543
01:09:27.540 --> 01:09:40.080
Ryan Mehta: So we're going to use this reducer back at our color picker J sx. I'm also going to make sure that we export cost so state equals

544
01:09:41.430 --> 01:09:44.130
Ryan Mehta: We'll start off our beat background color as

545
01:09:45.240 --> 01:09:48.330
Ryan Mehta: Black and our foreground color as

546
01:09:50.490 --> 01:09:50.940
White

547
01:09:52.350 --> 01:09:52.740
So,

548
01:09:54.090 --> 01:10:00.540
Ryan Mehta: So back in our color picker J sx. We are going to construct state.

549
01:10:02.820 --> 01:10:04.710
Ryan Mehta: And will also get dispatch.

550
01:10:06.420 --> 01:10:08.160
Ryan Mehta: From us reducer.

551
01:10:12.000 --> 01:10:21.120
Ryan Mehta: User diesel expects us to pass it a reducer. We're going to pass it this color reducer reducer function that we have over here. So the past with do sir

552
01:10:22.140 --> 01:10:28.170
Ryan Mehta: From. Oh, it's a guess rice from our color reducer function.

553
01:10:29.370 --> 01:10:33.990
Ryan Mehta: Or from our color producer file and initial state, also from

554
01:10:35.790 --> 01:10:40.950
Ryan Mehta: Okay, I got it right the first time, second time I did it the wrong way.

555
01:10:45.900 --> 01:10:46.320
There we go.

556
01:10:50.070 --> 01:10:50.880
Ryan Mehta: Misspelled

557
01:10:52.830 --> 01:10:54.240
Ryan Mehta: Up from

558
01:11:07.980 --> 01:11:09.060
Ryan Mehta: tough tough different

559
01:11:13.710 --> 01:11:14.970
Annalise: It's probably my favorite moment.

560
01:11:18.360 --> 01:11:18.810
Ryan Mehta: Okay.

561
01:11:20.190 --> 01:11:26.730
Ryan Mehta: So we're bringing in our producer our initial state is going to start off as this thing here.

562
01:11:27.870 --> 01:11:39.780
Ryan Mehta: We can start passing some of these things to our controls and our display. So a pass BG color. It comes from state BG color. You can pass foreground color.

563
01:11:40.860 --> 01:11:41.460
And

564
01:11:47.370 --> 01:11:51.120
Ryan Mehta: Foreground color. And then same for controls.

565
01:11:52.350 --> 01:11:53.250
Ryan Mehta: The color.

566
01:11:59.820 --> 01:12:00.090
Color

567
01:12:06.510 --> 01:12:14.190
Ryan Mehta: We also need to construct a handle change function that we can pass to our controls. So I'm going to construct that right here.

568
01:12:16.980 --> 01:12:18.540
Ryan Mehta: We get a bit

569
01:12:20.910 --> 01:12:29.670
Ryan Mehta: And we will pass and they'll change to our controls. Then here we will say, if our get that name is

570
01:12:31.620 --> 01:12:38.820
Ryan Mehta: Eugene color. Then we're going to dispatch our big color change function.

571
01:12:39.870 --> 01:12:41.610
Ryan Mehta: With her desktop value.

572
01:12:43.470 --> 01:12:47.280
Ryan Mehta: If target that name is foreground color.

573
01:12:49.620 --> 01:12:56.400
Ryan Mehta: And I'm going to dispatch our foreground color change function target.

574
01:13:05.130 --> 01:13:05.550
Ryan Mehta: So,

575
01:13:06.900 --> 01:13:20.250
Ryan Mehta: It actually looks pretty similar to the set state variety except instead of using set state. We have a reducer. And we're dispatching actions to our reducer. And it's the producers job to figure out how to

576
01:13:21.510 --> 01:13:23.160
Ryan Mehta: Put these things into state.

577
01:13:24.210 --> 01:13:32.100
Ryan Mehta: Right now, we still have very simple state, so we don't get much benefit from using this user reducer. There's no interconnected state really

578
01:13:34.200 --> 01:13:46.410
Ryan Mehta: Although we could refactor in the future to have this target named stuff live in the reducer instead of in our component, but for right now this looks pretty good.

579
01:13:47.430 --> 01:14:03.300
Ryan Mehta: So whenever we change the background color we dispatch your background color change. Whenever we change the foreground color we dispatch our foreground color change the reducer then goes and changes our state or component renders and

580
01:14:04.560 --> 01:14:05.490
Everything should be

581
01:14:06.720 --> 01:14:07.200
Good.

582
01:14:08.610 --> 01:14:21.360
Ryan Mehta: Let's take a look over here. I'm going to look in our components understate so a reducer state background colors black foreground color is white. We change our background color to some red light thing.

583
01:14:22.410 --> 01:14:24.990
Get some red light thing here also.

584
01:14:26.520 --> 01:14:27.570
Ryan Mehta: Look good so far.

585
01:14:30.570 --> 01:14:35.730
Ryan Mehta: All right, let's do one more and then we'll take a break. So it's just all hooked up.

586
01:14:37.740 --> 01:14:41.340
Ryan Mehta: Let's add our text color change.

587
01:14:43.470 --> 01:14:44.220
Also

588
01:14:46.440 --> 01:14:48.660
Ryan Mehta: So it should also

589
01:14:49.980 --> 01:14:51.900
Ryan Mehta: Change the text color.

590
01:14:55.920 --> 01:15:02.700
Ryan Mehta: In this case, we're going to have some state will have our background color of

591
01:15:10.140 --> 01:15:12.420
Ryan Mehta: Foreground Color of white

592
01:15:14.760 --> 01:15:17.490
Ryan Mehta: And some texts which will start off as hello

593
01:15:19.740 --> 01:15:22.080
Ryan Mehta: And then we will construct an action.

594
01:15:23.130 --> 01:15:30.960
Ryan Mehta: In order to construct an action, we need to create an action creator. So let's create our text.

595
01:15:32.130 --> 01:15:32.970
Change.

596
01:15:35.490 --> 01:15:37.230
Ryan Mehta: And our

597
01:15:38.880 --> 01:15:41.580
Ryan Mehta: Text change action creator

598
01:15:44.550 --> 01:15:52.440
Ryan Mehta: This is going to get new text. We are going to have a type of texts change and the payload of text.

599
01:15:53.970 --> 01:16:02.460
Ryan Mehta: Okay, so here's our action creator over on the right hand side will use our text change action creator will pass it by

600
01:16:04.380 --> 01:16:15.180
Ryan Mehta: And then we'll get new skate by calling text change groups by column reducer with our state in their action.

601
01:16:19.830 --> 01:16:23.340
Ryan Mehta: And then we expect new state.

602
01:16:24.390 --> 01:16:29.580
Ryan Mehta: To equal an object with all of this stuff in it.

603
01:16:33.630 --> 01:16:36.720
Ryan Mehta: But tech should be fine. Instead,

604
01:16:37.890 --> 01:16:38.640
Ryan Mehta: Make sense

605
01:16:41.340 --> 01:16:44.760
Ryan Mehta: All right, back in our reducer. We're going to add a new case.

606
01:16:47.010 --> 01:16:51.720
Ryan Mehta: Text change we're going to return everything from state.

607
01:16:54.060 --> 01:16:58.800
Ryan Mehta: But we will update the text field to whatever is an action doc payload.

608
01:17:00.060 --> 01:17:04.320
Ryan Mehta: Will also add a new piece of initial state tech starts off as empty string.

609
01:17:14.700 --> 01:17:26.670
Ryan Mehta: Alright test passes over an hour color picker component. We will now also pass texts to our display.

610
01:17:29.070 --> 01:17:32.190
Ryan Mehta: You will pass text to our controls.

611
01:17:34.650 --> 01:17:38.790
Ryan Mehta: And we'll have another line for text.

612
01:17:40.350 --> 01:17:44.880
Ryan Mehta: And use our text change action creator to dispatch an action.

613
01:17:46.440 --> 01:17:52.050
Ryan Mehta: And then we should have a fully working color picker.

614
01:17:54.240 --> 01:17:55.470
Ryan Mehta: Classic color picker.

615
01:17:59.100 --> 01:17:59.490
All right.

616
01:18:03.930 --> 01:18:08.550
Ryan Mehta: So the left hand side, you can kind of see is very similar to what we do with you state.

617
01:18:11.250 --> 01:18:18.510
Ryan Mehta: We have this new color reducer function. That's the main change with us reducer.

618
01:18:21.930 --> 01:18:34.080
Ryan Mehta: So instead of having any of our set state stuff over on the left hand side we dispatch actions and the producer is responsible for figuring out how to change state appropriately.

619
01:18:34.710 --> 01:18:50.550
Ryan Mehta: Right now it's kind of silly because it's just like setting state sort of simply here. But if we had any calculations or wanted to always change the foreground color whenever the background color changed. It'd be very convenient to have these sort of tied together.

620
01:18:51.630 --> 01:18:53.520
Ryan Mehta: Like we could pretty easily.

621
01:18:55.290 --> 01:18:59.130
Ryan Mehta: Also change text to action dot payload.

622
01:19:00.600 --> 01:19:02.610
Ryan Mehta: Whenever background color changes.

623
01:19:04.260 --> 01:19:15.840
Ryan Mehta: And now we can still type into this thing. But if I change the background color to read the text automatically changes also. So we have like some state that's dependent on each other.

624
01:19:19.440 --> 01:19:20.670
By adding this line here.

625
01:19:22.200 --> 01:19:23.520
Don't think we really want to do that.

626
01:19:26.790 --> 01:19:27.270
Ryan Mehta: Alright.

627
01:19:29.220 --> 01:19:36.120
Ryan Mehta: So this is like kind of the basics. I think of this huge reducer thing. It's kind of hard to see why we would want it right now.

628
01:19:37.470 --> 01:19:41.100
Ryan Mehta: But we'll, we'll see like some more complicated examples soon.

629
01:19:45.690 --> 01:19:46.890
Ryan Mehta: Any questions.

630
01:19:51.300 --> 01:19:54.570
Ryan Mehta: Alright, let's take a break. Let's come back at 1105

631
01:19:55.680 --> 01:20:00.570
Ryan Mehta: Let's actually come back to the 1110 and then we will start our

632
01:20:02.070 --> 01:20:05.700
Ryan Mehta: Our game. Our kids number thing.

633
01:20:09.270 --> 01:20:09.750
Brooke Perkins (she/her): Sounds good.

634
01:20:11.190 --> 01:20:19.200
Ryan Mehta: Let's start off by just installing that library that will need the speech commands library.

635
01:20:20.340 --> 01:20:32.340
Ryan Mehta: I've already initialized a new project of everything. So we're in a blink repo right now, but also push this to GitHub. You all can fork it for your lab today when you go to add new things to it.

636
01:20:33.210 --> 01:20:42.930
Ryan Mehta: We're going to install this TensorFlow speech commands library. Well that's installing let's think about how we want this application to look

637
01:20:44.610 --> 01:20:47.430
Ryan Mehta: So I think we will have

638
01:20:48.540 --> 01:20:49.620
Ryan Mehta: A page.

639
01:20:52.380 --> 01:20:58.560
Ryan Mehta: In the center of the page or somewhere on the page will display a number

640
01:21:00.150 --> 01:21:09.450
Ryan Mehta: That we want the person to say under that number will optionally display an error message like. Oops, wrong number. Try again to maybe it's just like

641
01:21:10.590 --> 01:21:12.750
Try again.

642
01:21:16.920 --> 01:21:26.970
Ryan Mehta: And this is only there sometimes like if they said the wrong word. If they say it correctly. We'll move on to another number. We'll pick a different number randomly.

643
01:21:29.130 --> 01:21:36.090
Ryan Mehta: I think there are a few different state transformations that happened right we have like a

644
01:21:37.980 --> 01:21:38.760
Ryan Mehta: New

645
01:21:40.890 --> 01:21:41.520
Ryan Mehta: Number.

646
01:21:46.080 --> 01:21:54.600
Ryan Mehta: Right, this number can change when we go on to the next page, we want to change this number and store that new number in state.

647
01:21:55.740 --> 01:21:58.590
Ryan Mehta: We will have a new

648
01:22:00.990 --> 01:22:01.650
Ryan Mehta: Guess.

649
01:22:05.340 --> 01:22:13.650
Ryan Mehta: When a user says a number. We're going to store that number that they just said in state so we can

650
01:22:15.600 --> 01:22:18.150
Ryan Mehta: Yeah, just have their guests stored in state.

651
01:22:19.380 --> 01:22:21.870
Ryan Mehta: And do we have any other transformations

652
01:22:23.640 --> 01:22:34.410
Ryan Mehta: I don't think so. Right, we select a new number that changes this we create a new guests to check against the number that's on the page. And that is probably it for now. Right.

653
01:22:35.490 --> 01:22:37.230
Ryan Mehta: Anybody think of anything else to have

654
01:22:39.090 --> 01:22:43.530
Ryan Mehta: No. Okay, so maybe for now our state is an object.

655
01:22:45.390 --> 01:22:47.130
Ryan Mehta: With the number in it.

656
01:22:49.260 --> 01:22:51.510
Ryan Mehta: And our guests.

657
01:22:53.730 --> 01:22:55.080
Ryan Mehta: And then

658
01:22:57.600 --> 01:23:02.970
Ryan Mehta: That's it goes two things, the number and the guests. I think whenever we get a new number

659
01:23:04.110 --> 01:23:19.050
Ryan Mehta: We are going to update this number with that new number. The also zero out our guests, right, because when we select a new number we want the user to have was an entire object.

577
01:02:39.480 --> 01:02:44.730
Ryan Mehta: The memo function will no longer work. So we can actually see this, I believe.

578
01:02:47.850 --> 01:02:57.000
Ryan Mehta: refresh this, we have our app pre rendered and our header. I just rendered. And as we click this, we always get this. I just rendered now.

579
01:02:58.800 --> 01:03:14.340
Ryan Mehta: So the memo function, no longer works when we pass in a complex object. If we pass them just a number like five that will tell the memo function will totally still work. It doesn't a quality check just not a DP quality check

580
01:03:15.420 --> 01:03:22.980
Ryan Mehta: So now when we refresh it, we get the I just rendered and never again just like it was before.

581
01:03:24.720 --> 01:03:27.600
Ryan Mehta: So why we don't just put it everywhere.

582
01:03:28.890 --> 01:03:46.890
Ryan Mehta: If you have a complex object at work. Anyways, if you have global state because this component is never rendering none of its children will every render either. So one of the children do require re render whenever app changes, you have a bug.

583
01:03:47.940 --> 01:03:52.140
Ryan Mehta: Like that child will never re render and that will happen a lot if you have global state.

584
01:03:53.190 --> 01:04:02.850
Ryan Mehta: Even though header doesn't rely rely on any of the global state one of its children might because we're no longer passing props, they're asking for information. They never know to re ask

585
01:04:04.080 --> 01:04:17.370
Ron Yonker: Wait, wait, wait, wait, wait. So can you put that another way because you're making it start to sound like memo is just putting a hard stop on rendering the component

586
01:04:18.000 --> 01:04:20.940
Ryan Mehta: It is, yeah. That's exactly what it's doing so.

587
01:04:22.530 --> 01:04:23.970
Ryan Mehta: Let's say that we had

588
01:04:24.030 --> 01:04:25.800
An application structure.

589
01:04:29.340 --> 01:04:30.960
Ryan Mehta: Sort of similar to this one.

590
01:04:32.130 --> 01:04:33.240
Ryan Mehta: We have our button.

591
01:04:36.240 --> 01:04:37.380
Ryan Mehta: We have our header.

592
01:04:40.650 --> 01:04:42.180
Ryan Mehta: And we have our yes no

593
01:04:45.450 --> 01:04:47.850
Ryan Mehta: But now header also has a child.

594
01:04:55.470 --> 01:04:57.120
Ryan Mehta: If we use memo here.

595
01:05:01.020 --> 01:05:10.950
Ryan Mehta: Header will only re render when it gets new props that means list will only be render when header gets new props. So at this point.

596
01:05:12.510 --> 01:05:19.440
Ryan Mehta: This won't really render every time after renders it'll only re render whenever app sends it new props, so

597
01:05:19.710 --> 01:05:33.660
Ron Yonker: Sorry, can you clarify what you mean when you say receives new products. Do you mean the value of the props change or entirely new props, or are we, what, what exactly do you mean

598
01:05:34.140 --> 01:05:36.120
Ryan Mehta: Yeah, the value of the props change.

599
01:05:38.340 --> 01:05:42.750
Ryan Mehta: So if header gets a new value for one of its props, it will still re render

600
01:05:44.100 --> 01:05:51.330
Ron Yonker: Oh, so that's separate state, the value of the props is something that's passed down by app in this diagram.

601
01:05:52.740 --> 01:05:53.040
Okay.

602
01:05:54.210 --> 01:05:58.740
Ryan Mehta: And this sort of break things if the list is going up and asking

603
01:05:59.790 --> 01:06:12.450
Ryan Mehta: For information via like the context provider, it will know to re ask for these things because header never re render it never be rendered so it doesn't know to ask again for new information.

604
01:06:16.560 --> 01:06:30.600
Ryan Mehta: So yeah, I wouldn't put memo everywhere. I would actually only put memo in places where I saw performance hit like users are saying that it's taking forever for this page to load when they click this button. Oh, maybe we should put memo there.

605
01:06:31.770 --> 01:06:36.030
Ryan Mehta: I wouldn't like start off by putting memo everywhere and then figuring out where I need to take it away.

606
01:06:37.140 --> 01:06:38.160
go the opposite way.

607
01:06:44.430 --> 01:06:54.480
Ryan Mehta: Anyways, I think the exact use cases of memo are less important. These are things that will come up for you at a particular job for a very particular app.

608
01:06:54.870 --> 01:07:06.570
Ryan Mehta: It's so hard to talk about where to put this things like as a rule of thumb, because it's so content. It's like so dependent on the application.

609
01:07:09.030 --> 01:07:21.210
Ryan Mehta: But what I really saw I wanted to show you a little bit about the new use case like what it's doing. But I thought we could together. Think about how a such a function like memo might work.

610
01:07:24.180 --> 01:07:24.810
Ryan Mehta: So,

611
01:07:26.700 --> 01:07:28.890
Let's write a little

612
01:07:29.970 --> 01:07:31.980
Memo yes function.

613
01:07:41.280 --> 01:07:47.940
Ryan Mehta: Anybody have any intuitions about how a function like that might be actually working.

614
01:07:50.190 --> 01:07:58.290
Annalise: I was, I mean just off the top of my head. Like when you were doing a toggle between two APIs, per se.

615
01:07:59.400 --> 01:08:05.400
Annalise: Um, I guess I want to lean towards like the render data towards each API. So it's more like

616
01:08:06.660 --> 01:08:10.980
Annalise: A calls already there for all characters or something. Um,

617
01:08:12.600 --> 01:08:16.950
Annalise: That way it's not constantly rendering, or I mean I could totally be off the mark there.

618
01:08:18.600 --> 01:08:19.170
Annalise: Maybe

619
01:08:19.290 --> 01:08:20.160
Ryan Mehta: I don't know.

620
01:08:21.990 --> 01:08:24.510
Ryan Mehta: So the call is already there.

621
01:08:27.900 --> 01:08:32.940
Ryan Mehta: I think so. I think, I think you're onto something I think yes we're storing some value.

622
01:08:33.300 --> 01:08:44.520
Annalise: Is it doesn't make any sense. If you have like if you want like one page to always show like all of the characters. Then there's kind of no isn't a bit redundant to like

623
01:08:45.030 --> 01:08:56.010
Annalise: At the API, each time instead of like setting a memo to like hold it as like a default suit. Whenever I guess a user toggle between two different

624
01:08:57.060 --> 01:08:58.260
Annalise: Pages, so to say.

625
01:09:02.010 --> 01:09:02.370
Annalise: Thought

626
01:09:08.430 --> 01:09:13.770
Ryan Mehta: About this, what does this member function take as a program here.

627
01:09:14.400 --> 01:09:15.300
Ryan Mehta: A parameter

628
01:09:18.210 --> 01:09:18.720
Shawn Carpenter: Component.

629
01:09:19.890 --> 01:09:24.840
Ryan Mehta: Yeah, yeah, we'll call it a function. In our case, but yeah.

630
01:09:24.900 --> 01:09:25.950
Totally a component

631
01:09:30.270 --> 01:09:40.770
Ryan Mehta: So these are, by the way, we're going to be dealing with something called a higher order function right now. Have you all heard of higher order functions.

632
01:09:43.890 --> 01:09:46.230
Ryan Mehta: There are two types of higher order functions.

633
01:09:47.400 --> 01:09:50.310
Ryan Mehta: The first type of higher order functions are functions.

634
01:09:51.690 --> 01:09:54.210
Ryan Mehta: That take functions.

635
01:09:56.220 --> 01:09:58.650
Ryan Mehta: We've actually seen a bunch of these before.

636
01:10:00.240 --> 01:10:06.120
Ryan Mehta: For example, map, map is a function that takes a function. Right.

637
01:10:08.640 --> 01:10:12.300
Ryan Mehta: And all of the array method things pretty much

638
01:10:13.560 --> 01:10:14.520
Ryan Mehta: Also, then

639
01:10:16.260 --> 01:10:19.440
Ryan Mehta: There is a function that takes

640
01:10:21.030 --> 01:10:25.020
Ryan Mehta: A function. That's an example of a higher order function.

641
01:10:26.100 --> 01:10:46.440
Ryan Mehta: There's another type of higher order function functions that return functions. So there are functions out there functions and JavaScript. Our first class citizens, people call them. They're just regular values. So, the same as strings and numbers and bleeds.

642
01:10:47.580 --> 01:10:52.620
Ryan Mehta: Your function can take other functions as arguments, your functions can also return

643
01:10:54.000 --> 01:10:56.550
Ryan Mehta: Functions as values.

644
01:10:58.980 --> 01:11:14.640
Ryan Mehta: So these are the two types of higher order functions in our case memo is going to cover both of these. It's going to be a function that takes a function as a parameter. It's also going to be a function that returns a function

645
01:11:15.810 --> 01:11:16.410
Ryan Mehta: As a value.

646
01:11:21.270 --> 01:11:21.630
Ryan Mehta: Right.

647
01:11:22.650 --> 01:11:31.170
Ryan Mehta: It's a function that returns a function as a value because we look back at this header use case when we pass header memo.

648
01:11:32.310 --> 01:11:36.390
Ryan Mehta: We're passing a component to memo component is really just a function

649
01:11:37.710 --> 01:11:48.210
Ryan Mehta: And memo is returning a component, right, we're still exporting a component. So this memo is really returning a memo header component

650
01:11:51.090 --> 01:12:06.660
Ryan Mehta: Memo header is also a function, it can be used as a component. So our component or our memo function has to take a function header and that has to return something that behaves exactly like the thing. It takes better

651
01:12:15.420 --> 01:12:18.360
Ryan Mehta: Any other thoughts on what we need to do here.

652
01:12:25.740 --> 01:12:27.420
Shawn Carpenter: We're gonna have to check the props.

653
01:12:29.880 --> 01:12:31.680
Ryan Mehta: Totally, yeah, we're gonna have to check

654
01:12:36.330 --> 01:12:36.960
Ryan Mehta: Or

655
01:12:38.130 --> 01:12:39.120
Arguments

656
01:12:40.830 --> 01:12:41.130
Yeah.

657
01:12:45.660 --> 01:12:46.830
Ryan Mehta: That's a great intuition.

658
01:12:48.660 --> 01:13:06.930
Ryan Mehta: We're also going to need a store previous values. So we're gonna let store let previous result peaceful now to start with and let previous ARDS equal know to begin with. Also,

659
01:13:10.890 --> 01:13:12.990
Ryan Mehta: Actually, let's make it cool.

660
01:13:14.910 --> 01:13:15.960
Ryan Mehta: Alright, so we're gonna

661
01:13:16.980 --> 01:13:22.410
Ryan Mehta: We're going to store the previous result of calling our memo function and the previous arcs.

662
01:13:23.850 --> 01:13:26.250
Ryan Mehta: And then we're going to return from our function.

663
01:13:30.090 --> 01:13:30.840
Ryan Mehta: A function.

664
01:13:35.940 --> 01:13:44.130
Ryan Mehta: This function from like 10 to 12 right now needs to behave the exact same way. This function behaved.

665
01:13:45.570 --> 01:13:50.700
Ryan Mehta: The big caveat here is that we're going to check props or arguments.

666
01:13:52.350 --> 01:13:54.330
Ryan Mehta: If the arguments.

667
01:13:55.680 --> 01:13:56.880
Ryan Mehta: Are the same

668
01:13:57.900 --> 01:14:00.210
Ryan Mehta: The turn the previous result.

669
01:14:02.970 --> 01:14:03.870
Ryan Mehta: Otherwise,

670
01:14:06.000 --> 01:14:08.700
Ryan Mehta: Compute a new results.

671
01:14:10.320 --> 01:14:12.090
Ryan Mehta: And that

672
01:14:15.240 --> 01:14:18.330
Ryan Mehta: Does this like conceptually make a little bit of sense.

673
01:14:20.400 --> 01:14:26.220
Ryan Mehta: So we're returning a function that's going to behave exactly like our original function up here.

674
01:14:27.030 --> 01:14:34.590
Ryan Mehta: But when we call this function we're first going to check. Do the previous arguments match the current arguments.

675
01:14:35.010 --> 01:14:51.450
Ryan Mehta: That are functions being passed. If they do, we don't need to repeat anything we already have the previous result. So we're just going to return that previous result. But if the arguments don't match, we're going to recalculate our result and return that new result.

676
01:14:52.920 --> 01:14:56.520
Ryan Mehta: So first thing that we need to do is check our arguments.

677
01:14:58.020 --> 01:15:05.790
Ryan Mehta: What we're going to do is store our arguments in an array like structure. So when you call a function

678
01:15:06.900 --> 01:15:09.150
It's like make a little function down here.

679
01:15:13.170 --> 01:15:14.760
Ryan Mehta: We have a little add function.

680
01:15:15.810 --> 01:15:29.820
Ryan Mehta: These are our ad functions like arguments, pretty much right when we call add one in five. We have two arguments here that we pass to add. We're going to store these in an array.

681
01:15:33.120 --> 01:15:36.570
Ryan Mehta: We can do that by using the rest

682
01:15:38.070 --> 01:15:45.840
Ryan Mehta: Thing here. So when we call our function we're going to get all of the arguments that are passed to it and store them in this arcs array.

683
01:15:47.370 --> 01:15:50.850
Ryan Mehta: And then we're going to check if we have

684
01:15:53.130 --> 01:15:54.240
Ryan Mehta: prieve arcs.

685
01:15:55.980 --> 01:15:56.550
Ryan Mehta: And

686
01:15:57.720 --> 01:16:06.030
Ryan Mehta: We need a check to make sure that every item in this arcs matches our previous arcs. Anybody have any ideas on how we can do that.

687
01:16:13.440 --> 01:16:15.540
Ryan Mehta: So let's take Dr. The same length.

688
01:16:35.790 --> 01:16:41.220
Shawn Carpenter: You could map it and compare the index from one to the other.

689
01:16:42.090 --> 01:16:47.190
Ryan Mehta: Huh, yeah. So we can do pretty hard stop map.

690
01:16:49.110 --> 01:17:09.150
Ryan Mehta: We have an arg and an index. And then we check our eggs at index is equal to the are from pre barks, there's a different array method that we can use here that will return true or false. Based on this, we want every

691
01:17:09.780 --> 01:17:10.080
Every

692
01:17:11.580 --> 01:17:13.920
Shawn Carpenter: Everything to match this condition.

693
01:17:14.850 --> 01:17:22.800
Ryan Mehta: So we're going to iterate through the previous ARDS. We would expect every argument and previous arcs to equal our current argument.

694
01:17:24.120 --> 01:17:35.280
Ryan Mehta: If that's the case, so we have previous ARDS previous arm's length and arm's length are the same. And they all match each other. Then we're going to return.

695
01:17:36.810 --> 01:17:38.100
Ryan Mehta: Our previous results.

696
01:17:41.160 --> 01:17:56.460
Ryan Mehta: Otherwise, if they don't match, then we need to re compute. So our previous results will be a result of calling our original function will spread those arms into the original function.

697
01:17:57.540 --> 01:18:00.540
Ryan Mehta: And then returned the previous results.

698
01:18:02.490 --> 01:18:03.180
Should be

699
01:18:04.350 --> 01:18:07.920
Ryan Mehta: Let's there's one thing missing from down here.

700
01:18:09.300 --> 01:18:10.680
Ryan Mehta: Anybody see what's missing.

701
01:18:20.460 --> 01:18:29.730
Ryan Mehta: We also want to reset our pre barks. So we want to make sure that pre argh is now these new orgs

702
01:18:31.830 --> 01:18:34.650
Ryan Mehta: Very crazy looking abstract function.

703
01:18:37.620 --> 01:18:43.260
Ryan Mehta: Let's look at how it works really quick and then we can talk a little bit more about these details here.

704
01:18:44.820 --> 01:18:50.280
Ryan Mehta: So check out this ad function down here in this ad function. I'm going to console log

705
01:18:52.140 --> 01:18:53.550
Ryan Mehta: Are here.

706
01:18:55.560 --> 01:18:56.790
Ryan Mehta: And then we'll do some math.

707
01:18:58.740 --> 01:19:08.310
Ryan Mehta: And then we can construct a memo add by using the memo function that we just created up above and passing it or add function.

708
01:19:09.480 --> 01:19:12.990
Ryan Mehta: Memo ad is going to acAnd we'll actually have it take a Boolean. So we'll say like floating, this will be true or false.

819
01:39:12.720 --> 01:39:15.270
Ryan Mehta: So they'll tell us whether we're loading or not.

820
01:39:17.460 --> 01:39:20.760
Ryan Mehta: We will construct our set loading.

821
01:39:22.500 --> 01:39:24.660
Ryan Mehta: Will change loading to false.

822
01:39:25.980 --> 01:39:28.440
Ryan Mehta: And then we will get new state.

823
01:39:32.670 --> 01:39:38.670
Ryan Mehta: By calling our producer with our current state and our action.

824
01:39:39.720 --> 01:39:43.410
Ryan Mehta: Even expect new state to equal

825
01:39:45.180 --> 01:39:54.690
Ryan Mehta: The exact same thing as our previous states. I'm just going to copy this except loading should now be false.

826
01:39:56.310 --> 01:39:57.330
Ryan Mehta: Tested fail.

827
01:39:58.740 --> 01:40:02.490
Ryan Mehta: Back in our character reducer. We need to handle the

828
01:40:03.750 --> 01:40:05.280
Ryan Mehta: Set loading case.

829
01:40:07.050 --> 01:40:13.530
Ryan Mehta: When we get this action. We're going to keep everything in state, the same that we're going to switch loading to whatever's in the action.

830
01:40:23.700 --> 01:40:24.750
Where you so mad.

831
01:40:30.930 --> 01:40:43.230
Ryan Mehta: Okay, that was good. I should get our test to pass. So we handle this set characters with such a set this state and the set loading, which lets us change this from true to false or false, true, true.

832
01:40:45.480 --> 01:40:46.080
Ryan Mehta: With good

833
01:40:48.330 --> 01:40:48.870
Ryan Mehta: All right.

834
01:40:52.020 --> 01:41:11.340
Ryan Mehta: Now there's a big thing. Well actually let's start constructing our components and see how we can start integrating some of this with our components we have our typical list of things, so bear with me for a second. As we write our characters that character.

835
01:41:13.170 --> 01:41:13.950
Ryan Mehta: list item.

836
01:41:16.560 --> 01:41:18.360
Ryan Mehta: Our list item is going to be the same.

837
01:41:20.640 --> 01:41:27.480
Ryan Mehta: It's going to receive props. So we'll have that have a name a status and shoes.

838
01:41:29.280 --> 01:41:32.310
Ryan Mehta: Okay, let's just have, I have a name and image actually

839
01:41:34.740 --> 01:41:44.940
Ryan Mehta: We're going to receive props, because this isn't going to be connected to the state its parent, the list is going to get the list from state and pass the items down to this component, kind of like what we normally do.

840
01:41:46.560 --> 01:41:56.370
Ryan Mehta: Prop type string is required and the image is also a required string will make a figure

841
01:41:57.390 --> 01:41:58.710
Ryan Mehta: With an image.

842
01:42:05.910 --> 01:42:07.170
Ryan Mehta: The caption.

843
01:42:09.120 --> 01:42:11.070
Ryan Mehta: Okay, this is our list item.

844
01:42:12.210 --> 01:42:18.120
Ryan Mehta: Will make our character list J sx. Also, this will also be a function

845
01:42:20.670 --> 01:42:24.600
Ryan Mehta: This one won't receive any props, it's going to get it state from

846
01:42:26.250 --> 01:42:27.060
Ryan Mehta: Redux

847
01:42:29.610 --> 01:42:55.320
Ryan Mehta: Alright so import react from react and then we will get our characters by using selector that's going to give us all a state. And we really just care about the characters state, let's say, right now, what's called characters that will go and get the characters piece of state from our

848
01:42:56.550 --> 01:43:07.200
Ryan Mehta: Producer right so state characters will just give us this array. We can then construct our character elements.

849
01:43:09.360 --> 01:43:14.190
Ryan Mehta: by iterating through characters for each character in characters.

850
01:43:16.740 --> 01:43:22.680
Ryan Mehta: We will return a list item, where I see his

851
01:43:24.120 --> 01:43:31.800
Ryan Mehta: ID will use our character component and spread character into it.

852
01:43:35.850 --> 01:43:38.580
Ryan Mehta: And then down below. We will return

853
01:43:39.600 --> 01:43:43.260
Ryan Mehta: A UL chapter elements.

854
01:43:47.130 --> 01:43:49.200
Ryan Mehta: Okay look good so far.

855
01:43:51.030 --> 01:44:03.090
Ryan Mehta: So we are getting our list of character some state iterating through them and displaying them. At this point, we should see nothing on the page because we haven't actually fetched our list of characters.

856
01:44:04.290 --> 01:44:12.900
Ryan Mehta: And we're not using our component. We're still using our hello world. So let's switch that an app JS, let's make sure we are using our

857
01:44:13.950 --> 01:44:14.970
Ryan Mehta: Total list.

858
01:44:18.570 --> 01:44:20.760
Ryan Mehta: Okay, using our character list now.

859
01:44:21.960 --> 01:44:25.770
Ryan Mehta: Empty page because we don't have any characters yet. It's an empty.

860
01:44:26.940 --> 01:44:27.600
Empty thing.

861
01:44:29.550 --> 01:44:48.000
Ryan Mehta: So we want to actually fetch from an API fetch our characters from an API first step to doing that is creating a service. So let's create a Rick and more the API JS file and we're going to create our yet there.

862
01:44:50.160 --> 01:44:51.600
Ryan Mehta: Are get characters.

863
01:44:53.040 --> 01:45:09.870
Ryan Mehta: Function where we use fetch the effects from the API. And then you get a response we parse the response JSON and then we get our JSON. We're going to map through the results.

864
01:45:10.950 --> 01:45:16.950
Ryan Mehta: And for each character in the results we want the characters ID.

865
01:45:18.630 --> 01:45:19.770
Ryan Mehta: We want their name.

866
01:45:21.480 --> 01:45:28.410
Ryan Mehta: And I can't remember what an image is image your image URL in there, Rick and Morty API.

867
01:45:30.540 --> 01:45:32.070
Greg Mall: Say image. Okay, perfect.

868
01:45:34.080 --> 01:45:41.190
Ryan Mehta: Yeah so image. So back over here, we'll drop this URL there and

869
01:45:44.610 --> 01:45:45.360
Ryan Mehta: That look good.

870
01:45:46.380 --> 01:45:48.540
Ryan Mehta: Typical service like we've been making

871
01:45:49.800 --> 01:46:08.100
Ryan Mehta: So now we get a list of characters by calling this service. We have a few. We have a few options before we even think about using the sunk middle where we could actually just integrate this with Redux without even using the middle where we could have

872
01:46:09.240 --> 01:46:11.640
Ryan Mehta: A use effect here.

873
01:46:13.650 --> 01:46:19.320
Ryan Mehta: That will run when the component first mounts, we will call our get characters.

874
01:46:20.490 --> 01:46:23.580
Ryan Mehta: Service sure we import this

875
01:46:25.260 --> 01:46:27.720
Ryan Mehta: After we get our list of characters.

876
01:46:29.700 --> 01:46:34.260
Ryan Mehta: We will then dispatch. So we'll need to bring in dispatch.

877
01:46:38.520 --> 01:46:39.540
Dispatch.

878
01:46:41.280 --> 01:46:47.580
Ryan Mehta: We have an action that does this for us already right called SEC characters.

879
01:46:50.280 --> 01:46:52.650
Ryan Mehta: I need to auto import. So I will

880
01:46:56.880 --> 01:46:58.500
Ryan Mehta: Set characters with

881
01:46:59.700 --> 01:47:02.880
Ryan Mehta: Characters and finally

882
01:47:05.310 --> 01:47:09.900
Ryan Mehta: We will dispatch set loading false

883
01:47:13.890 --> 01:47:14.310
Ryan Mehta: Okay.

884
01:47:17.670 --> 01:47:30.330
Ryan Mehta: This code makes sense for the most part it's very similar to our code that we've done before accepting set of constructing state here we grab state from Redux and we grabbed this dispatch.

885
01:47:30.960 --> 01:47:42.060
Ryan Mehta: And then where we would normally use like set characters and set loading. We're now dispatching actions, right. We're dispatching are set characters action and we're dispatching a set loading action creator

886
01:47:43.560 --> 01:47:52.110
Ryan Mehta: And then that's like adding these characters to our Redux store and switching loading from true to false in a Redux store.

887
01:47:54.330 --> 01:48:01.290
Ryan Mehta: If we look back at our page refresh this, we get our list of characters now.

888
01:48:02.970 --> 01:48:09.270
Ryan Mehta: We can look at our Redux dev tools. This is the view that I wanted. Okay, so it's back to the

889
01:48:16.410 --> 01:48:17.550
Thomas Stussi: Crestron booth.

890
01:48:18.240 --> 01:48:18.900
Greg Mall: And we lose him.

891
01:48:19.350 --> 01:48:20.100
Annalise: Oh, no.

892
01:48:20.610 --> 01:48:21.450
Thomas Stussi: Yeah, we lost him.

893
01:48:22.110 --> 01:48:23.070
Ron Yonker: Yeah, he's gone.

894
01:48:25.710 --> 01:48:27.240
Annalise: Oh no, Ryan.

895
01:48:29.550 --> 01:48:31.890
Greg Mall: Was just getting good now.

896
01:48:32.190 --> 01:48:33.750
Ryan Mehta: Yeah, back

897
01:48:35.640 --> 01:48:37.380
Ryan Mehta: Who has become host

898
01:48:37.800 --> 01:48:38.400
Annalise: Be still.

899
01:48:38.670 --> 01:48:40.170
Ryan Mehta: The other media still host

900
01:48:41.820 --> 01:48:42.420
Greg Mall: Other you

901
01:48:44.250 --> 01:48:44.550
Greg Mall: Know each

902
01:48:46.050 --> 01:48:47.340
Annalise: Year, you will twit now.

903
01:48:48.750 --> 01:48:58.560
Ryan Mehta: How's this feeling so far I'm going I'm kind of blasting through a lot of it because it. I think a lot of it should be familiar, like all the service stuff, Katie. He make me host

904
01:49:00.450 --> 01:49:07.770
Ryan Mehta: There's just like a few pieces that look slightly different but there's still like a ton of overlap. It seems like between this and

905
01:49:09.540 --> 01:49:10.140
Ryan Mehta: Other

906
01:49:11.220 --> 01:49:14.640
Ron Yonker: You know, I just have to see it more to get used to the naming that's

907
01:49:16.050 --> 01:49:16.410
Ron Yonker: Cool.

908
01:49:19.380 --> 01:49:21.450
Ryan Mehta: So here is our Redux dev

909
01:49:21.450 --> 01:49:24.420
Ryan Mehta: Tools, we have all of our character listed here.

910
01:49:25.680 --> 01:49:32.970
Ryan Mehta: It's super cool, because we can jump between these screens like between these actions.

911
01:49:33.990 --> 01:49:41.310
Ryan Mehta: For example, I could skip the set characters action. What if set characters never happened. This is what the page would look like.

912
01:49:43.290 --> 01:49:49.860
Ryan Mehta: We could jump back to actions or whatever can jump back forward.

913
01:49:51.630 --> 01:49:58.950
Ryan Mehta: So you can like jump between the states of your application skipping actions or whatever and seeing what the page would have looked like had that happened.

914
01:50:00.330 --> 01:50:06.990
Ryan Mehta: It's actually super nice for debugging. Also, and like sending error messages between other developers.

915
01:50:08.250 --> 01:50:25.530
Ryan Mehta: So a bug always happens because a series of actions happened like you would say that if you ever run these series of actions this bug will always be reproduced every state that we're in is always based on a series of actions that you can see in the left hand side here.

916
01:50:26.640 --> 01:50:41.940
Ryan Mehta: You can export the series of actions into a JSON file and then hand that JSON file to another developer who could then import that same series of actions and they will be able to reproduce the exact same screen that you see.

917
01:50:43.830 --> 01:51:00.150
Ryan Mehta: So you no longer have to tell them, like, well, click that button and then click this button and then like type into the input field this thing you would just be able to send them a JSON file with the exact actions that it took to get to the bug, which is super convenient.

918
01:51:03.930 --> 01:51:05.850
Ron Yonker: Redux dev tools are these again.

919
01:51:07.050 --> 01:51:09.000
Ryan Mehta: They're, they're just the Redux dev tools.

920
01:51:09.150 --> 01:51:10.620
Ron Yonker: Just called the Redux dev tools.

921
01:51:12.630 --> 01:51:13.800
It's a Chrome extension.

922
01:51:15.660 --> 01:51:33.510
Ryan Mehta: Alright, so for go back to our code. This is what it looks like we select our list of characters we get our dispatch function and then we're using our service get characters. We then get back a list of characters we dispatch our set characters action.

923
01:51:34.950 --> 01:51:37.680
Ryan Mehta: Which is this action over here.

924
01:51:38.730 --> 01:51:51.960
Ryan Mehta: So set characters constructs an object where the type of set characters and the payload is this array of characters that we just fetched when we dispatch that action we're reducer.

925
01:51:54.330 --> 01:52:03.930
Ryan Mehta: handles the action, it seems that we just dispatch that characters and update the state adding whatever is in the actual payload to the array of characters over here.

926
01:52:05.430 --> 01:52:20.250
Ryan Mehta: So if we look back at our picture here. Our component is dispatching the set characters action the reducer is updating our list of characters storing it in the store and thus we rendering our component with the new list of characters.

927
01:52:22.650 --> 01:52:23.610
Ryan Mehta: That seem okay

928
01:52:26.070 --> 01:52:26.550
Ryan Mehta: All right.

929
01:52:28.350 --> 01:52:34.470
Ryan Mehta: So this is a total leave valid way to use React and Redux together.

930
01:52:35.670 --> 01:52:40.320
Ryan Mehta: There is an alternative way to handle these sort of asynchronous actions.

931
01:52:41.970 --> 01:52:50.010
Ryan Mehta: So this is an asynchronous action because before we can dispatch our set characters we need to wait for our get characters.

932
01:52:52.290 --> 01:53:00.360
Ryan Mehta: Service to finish we have all of this. A synchronicity inside of our component Redux is purely synchronous

933
01:53:01.530 --> 01:53:11.550
Ryan Mehta: An alternative to this is using that funk middleware. So we can export from our action creators folder. A another action call that

934
01:53:16.140 --> 01:53:27.600
Ryan Mehta: Our characters is going to be an action that takes dispatch with it. So it's going to be a function that takes dispatch and then

935
01:53:35.100 --> 01:53:45.060
Ryan Mehta: Okay, so sort of weird looking syntax. Our fetch characters is going to be a function that returns a function that takes dispatch.

936
01:53:46.080 --> 01:53:54.960
Ryan Mehta: This is super crucial because we want it to return a function, this function here is going to be what's called by the

937
01:53:57.240 --> 01:53:58.530
Ryan Mehta: By the funk middleware.

938
01:53:59.790 --> 01:54:03.840
Ryan Mehta: So over on the left hand side, we're going to replace all of this code here.

939
01:54:06.240 --> 01:54:06.720
With

940
01:54:07.860 --> 01:54:09.870
Ryan Mehta: This bad batch.

941
01:54:11.850 --> 01:54:12.510
Like this.

942
01:54:14.700 --> 01:54:22.650
Ryan Mehta: And then the action over here is going to be responsible for fetching our list of characters. So we're calling a function

943
01:54:23.250 --> 01:54:36.300
Ryan Mehta: This function call is returning this function here, a function that takes dispatch. So now we're dispatching a function that takes dispatch. If we look back at the funk middleware code.

944
01:54:39.330 --> 01:54:47.970
Ryan Mehta: The funk middleware code asks, Is the action of function. If it is, it invokes that function passing it this dispatch function.

945
01:54:50.130 --> 01:54:55.230
Ryan Mehta: So we're going to be dispatching this the funk middleware will call this function.

946
01:54:56.310 --> 01:54:58.920
Ryan Mehta: When it calls this function. We are going to

947
01:55:00.240 --> 01:55:01.680
Ryan Mehta: Get our list of characters.

948
01:55:02.820 --> 01:55:04.680
Ryan Mehta: We're then going to get characters.

949
01:55:06.090 --> 01:55:09.690
Ryan Mehta: And with those characters. Wange where those come from.

577
01:07:43.470 --> 01:07:45.330
Ryan Mehta: Let's call this one handled text change.

578
01:07:47.070 --> 01:07:48.180
ryan Diffenbaugh: So don't give send

579
01:07:49.440 --> 01:07:50.340
ryan Diffenbaugh: Up to the parent

580
01:07:51.150 --> 01:07:59.700
Ryan Mehta: They do, yeah. But the parent has to still pass these three events like the functions down to the component. So, we're also going to get handle

581
01:08:00.600 --> 01:08:09.150
Ryan Mehta: Text change and background color change or background change and handle color change from the parent as well.

582
01:08:11.160 --> 01:08:16.950
Ryan Mehta: So all of these are going to be props that get passed to us by our parent

583
01:08:19.920 --> 01:08:27.960
Ryan Mehta: Art. Yes. Linda is a little bit upset at us right now you see like all of these squiggly red lines. It's because our as lid file.

584
01:08:29.970 --> 01:08:36.270
Ryan Mehta: Requires us to use the prop types validation. So we need to import

585
01:08:39.000 --> 01:08:41.520
Ryan Mehta: Types brown properties.

586
01:08:43.500 --> 01:09:01.740
Ryan Mehta: With a class component we make a static types equal and object. And we have a bunch of props that we need to specify here we have text, which is a string that's required. We need that text in order to do anything.

587
01:09:03.000 --> 01:09:04.830
Ryan Mehta: We also have a background color.

588
01:09:06.450 --> 01:09:14.820
Ryan Mehta: Which is also a string that is required. We have a color which is also a we have a bunch of strings.

589
01:09:15.990 --> 01:09:16.980
Ryan Mehta: Three strings.

590
01:09:18.090 --> 01:09:23.130
Ryan Mehta: And then we have a handle text change. What kind of thing is handled text change.

591
01:09:29.730 --> 01:09:30.780
Thomas Stussi: This function.

592
01:09:32.790 --> 01:09:34.980
Ryan Mehta: The color funk. But yeah, it's totally

593
01:09:36.540 --> 01:09:36.990
Thomas Stussi: Got the

594
01:09:39.450 --> 01:09:40.800
Ryan Mehta: Background change.

595
01:09:46.710 --> 01:09:50.820
Ryan Mehta: Required, and we have handle color change.

596
01:09:54.000 --> 01:09:54.960
Ryan Mehta: Is required

597
01:09:56.070 --> 01:10:10.050
Ryan Mehta: We should be able to now. So now we get all of these props we render all of this stuff, we should be able to swap in our new component in place of all of this stuff.

598
01:10:11.130 --> 01:10:13.740
Ryan Mehta: So we'll use our controls component

599
01:10:15.480 --> 01:10:19.170
Ryan Mehta: Our controls component needs us to pass it text.

600
01:10:22.080 --> 01:10:23.250
Ryan Mehta: Background color.

601
01:10:25.710 --> 01:10:26.400
Ryan Mehta: Color

602
01:10:30.960 --> 01:10:32.610
Ryan Mehta: And old text change.

603
01:10:36.840 --> 01:10:39.690
Ryan Mehta: What's handled text change called in this component

604
01:10:41.760 --> 01:10:47.730
Ryan Mehta: We called it over here, we called the prop handle text change whether we call it over here and color picker.

605
01:10:56.610 --> 01:10:57.690
Ryan Mehta: Handle change. Yep.

606
01:10:59.310 --> 01:11:20.400
Ryan Mehta: So one thing to keep in mind is the left hand side of this, that equals is the key. The in the component over here and the right hand side is the value. So it's the name of the thing over here, right. So this handled text change has to match with our props.

607
01:11:21.930 --> 01:11:32.490
Ryan Mehta: And the right hand side handle change has to match with what we define in this component. It's a little bit confusing, having that though, so I am actually going to change it.

608
01:11:33.690 --> 01:11:34.800
Ryan Mehta: So they're both the same.

609
01:11:36.600 --> 01:11:37.620
Ryan Mehta: But keep that in mind.

610
01:11:38.910 --> 01:11:41.190
Ryan Mehta: And then we have our handle background change.

611
01:11:43.980 --> 01:11:45.390
Ryan Mehta: Background change and

612
01:11:46.680 --> 01:11:47.850
Ryan Mehta: Color change.

613
01:11:50.820 --> 01:11:53.730
Ryan Mehta: Okay with past all of those props.

614
01:11:55.650 --> 01:11:59.700
Ryan Mehta: We should now be using this controls component in place of

615
01:12:00.780 --> 01:12:07.950
Ryan Mehta: All of that other stuff that we had here before we go back to our front end everything should hopefully still work.

616
01:12:08.970 --> 01:12:10.020
Ryan Mehta: like it did before.

617
01:12:12.210 --> 01:12:17.970
Ryan Mehta: So we just extracted some of the visuals into its own component over here.

618
01:12:21.090 --> 01:12:22.710
Ryan Mehta: That extraction makes sense.

619
01:12:25.260 --> 01:12:25.680
Cool.

620
01:12:29.940 --> 01:12:32.670
Ryan Mehta: Yeah. Do you all have the react dev tools.

621
01:12:35.160 --> 01:12:41.400
Ryan Mehta: So we should be able to also see controls as a child of color picker now in these dev tools.

622
01:12:54.360 --> 01:12:55.830
Ryan Mehta: And our tests still pass

623
01:12:56.910 --> 01:13:04.140
Ryan Mehta: So we refactored it successfully we I guess we didn't have to manually test our test still pass. So we're pretty sure that everything still works.

624
01:13:09.870 --> 01:13:10.380
Ryan Mehta: Good.

625
01:13:13.980 --> 01:13:22.110
Ryan Mehta: Alright, yeah. This is one of the real beauties of this behavior testing is that you can do these really big refactor is like this.

626
01:13:24.600 --> 01:13:34.440
Ryan Mehta: Extracting up components and the tests will still all pass because you didn't change how things look on the page. You just changed how you implemented the page a little bit

627
01:13:35.910 --> 01:13:36.750
Which is super cool.

628
01:13:38.850 --> 01:13:46.680
Ryan Mehta: All right, let's take a break we'll after the break, we'll explore extract this display and then we'll, we'll write a couple of other applications also

629
01:13:47.850 --> 01:13:49.890
Ryan Mehta: Let's come back at 11

630
01:13:51.720 --> 01:13:52.470
Annalise Murphy: Well, thank you.

631
01:13:56.550 --> 01:14:06.690
Ryan Mehta: So we left off wanting to extract this display area into its own component also

632
01:14:07.950 --> 01:14:17.550
Ryan Mehta: We've already extracted the controls. I'm going to go and make a nother component in my color picker directory called display.

633
01:14:18.690 --> 01:14:23.670
Ryan Mehta: Got jazz sex. Let's drag this to the side.

634
01:14:25.530 --> 01:14:46.500
Ron Yonker: I'm sorry, I have a quick question. Would you say in general that we want to make state live at the top mo most relevant components. So in this case, making like a container of component to contain the controls, rather than making it live on controls.

635
01:14:49.020 --> 01:14:52.950
Ryan Mehta: You have to. You don't want it at the top most you wanted at

636
01:14:52.950 --> 01:14:54.210
Ryan Mehta: The actually

637
01:14:54.330 --> 01:14:57.990
Ryan Mehta: The opposite you want it as low as possible and the component tree.

638
01:15:00.990 --> 01:15:09.630
Ryan Mehta: But if there are two siblings that need one piece of state, they need to share a parent that owns that piece of stage. So in this case we have

639
01:15:09.660 --> 01:15:11.430
Ryan Mehta: Two components controls.

640
01:15:11.490 --> 01:15:19.290
Ryan Mehta: And display that need access to the same state. So they need to have a common ancestor.

641
01:15:21.060 --> 01:15:23.310
Ryan Mehta: And they're close to encounter ancestors comp

642
01:15:23.340 --> 01:15:24.420
Color Picker.

643
01:15:29.310 --> 01:15:34.890
Ryan Mehta: Important react from react. Let's also bring in

644
01:15:36.450 --> 01:15:39.300
Ryan Mehta: Component, and

645
01:15:42.660 --> 01:16:04.890
Ryan Mehta: Fault class display. It's going to extend our component class we're going to have a render method inside of our Render, we're going to do exactly what this thing used to do. So we're going to cut that out and we're going to drop that into our display.

646
01:16:06.540 --> 01:16:08.670
Ryan Mehta: This makes our tests fail because

647
01:16:09.720 --> 01:16:12.480
Ryan Mehta: We no longer are displaying anything

648
01:16:13.920 --> 01:16:25.470
Ryan Mehta: Sorry test is going to fail, which is fine. We'll get it to pass. Eventually, once we use this display in the appropriate place where should background color, color and text come from.

649
01:16:32.220 --> 01:16:32.790
Those from

650
01:16:38.850 --> 01:16:40.860
Jerud Moyer: Controls props.

651
01:16:41.580 --> 01:16:42.690
Ryan Mehta: Props. Exactly.

652
01:16:42.750 --> 01:16:42.990
Yeah.

653
01:16:44.400 --> 01:16:46.860
Ryan Mehta: So they're gonna be passed to us via props.

654
01:16:47.970 --> 01:16:48.480
Ryan Mehta: To get

655
01:16:49.710 --> 01:16:54.990
Ryan Mehta: Our background color, color and our text all the props.

656
01:16:57.060 --> 01:17:08.460
Ryan Mehta: These are red, because we're not specifying the prop types, we need to always specify those prop types of their developers know what to pass a component. So what's important prop types also

657
01:17:09.720 --> 01:17:12.630
Ryan Mehta: And create a static

658
01:17:14.130 --> 01:17:20.580
Ryan Mehta: Types property we have background color, which is a string.

659
01:17:21.960 --> 01:17:27.780
Ryan Mehta: That is required. We have color and text so calmer.

660
01:17:32.130 --> 01:17:48.570
Ryan Mehta: And now that red yes link air goes away. We're specifying our prop types. We're bringing in these props and then we're using those props in our display. The last thing that we need to do is back in our color picker use our new display component

661
01:17:49.920 --> 01:17:54.870
Ryan Mehta: Our new display component expects three props background color.

662
01:17:57.210 --> 01:17:58.650
Ryan Mehta: It expects color.

663
01:18:01.200 --> 01:18:02.910
Ryan Mehta: And it expects text.

664
01:18:04.890 --> 01:18:11.100
Ryan Mehta: Once we pass those three things to our display component our tests should pass

665
01:18:13.170 --> 01:18:13.560
Cool.

666
01:18:15.150 --> 01:18:27.570
Ryan Mehta: So we're able to control and display our colors. So we just extracted some of this logic or some of this display into their own components.

667
01:18:28.680 --> 01:18:29.520
Ryan Mehta: That makes sense.

668
01:18:32.550 --> 01:18:44.640
Ryan Mehta: Okay, let's do another refactor with this before moving on to another application. Let's refactor from a class based component for display into a function component for display.

669
01:18:46.860 --> 01:18:51.990
Ryan Mehta: So instead of defining a class we're going to end up defining a function

670
01:18:54.870 --> 01:18:55.410
Ryan Mehta: So,

671
01:18:57.690 --> 01:19:00.840
Ryan Mehta: And then we will export this function.

672
01:19:02.580 --> 01:19:10.080
Ryan Mehta: This in a comment out this class below right now, or we'll keep it here so we can reference it a little bit.

673
01:19:12.630 --> 01:19:33.990
Ryan Mehta: Our display is going to take three props. Right. It takes a color background color a color and text, what's the structure. Those props props are always passed to our function components as its first parameter. We're going to restructure those props and grab background color.

674
01:19:36.150 --> 01:19:37.980
Ryan Mehta: Color text.

675
01:19:40.170 --> 01:19:53.670
Ryan Mehta: And then we're going to return some J SX from our function component just steal the J SX that we had in our class, pop it over here and commented

676
01:19:55.080 --> 01:20:07.170
Ryan Mehta: And now they do about the same thing. The one last thing that we need to do to get rid of these red underlines is to do the same thing we did in our class specify prop types with a function component

677
01:20:08.430 --> 01:20:17.520
Ryan Mehta: We do that like so display dot prop types and then the same exact object that we had before.

678
01:20:22.050 --> 01:20:23.280
I'm commenters

679
01:20:26.790 --> 01:20:27.000
Okay.

680
01:20:28.230 --> 01:20:39.540
Ryan Mehta: So kind of looks the same. There's just stuff in a slightly different order. We have basically our Render function right here we have our prop types here and our exports here at the bottom.

681
01:20:41.760 --> 01:20:42.840
Ryan Mehta: Render function.

682
01:20:45.030 --> 01:20:47.220
Ryan Mehta: Prop types export.

683
01:20:51.690 --> 01:20:53.760
Ryan Mehta: It's actually in reverse order a ministry.

684
01:20:58.680 --> 01:21:12.960
Ryan Mehta: And one thing that I usually do with my function components. If I just have my return on the very next slide, like I do, here you can make this a implicit return and get rid of that return keyword

685
01:21:17.670 --> 01:21:21.360
Ryan Mehta: And our test should still pass the functionality of

686
01:21:23.520 --> 01:21:33.030
Ryan Mehta: The difference between a function component and a class component there. There are no differences between these two as far as display goes for our test pass with either implementation.

687
01:21:36.150 --> 01:21:39.810
ryan Diffenbaugh: You have a preference, like a personal preference to use one over the other.

688
01:21:40.650 --> 01:21:44.700
Ryan Mehta: Not really. We're going to use them for different things starting tomorrow, but

689
01:21:46.020 --> 01:21:47.580
ryan Diffenbaugh: Right now, I think you should be able to use

690
01:21:47.640 --> 01:21:49.680
Ryan Mehta: Whichever one feels best

691
01:21:52.980 --> 01:21:55.890
Ben Waples: performance difference between the two. Nope.

692
01:21:57.720 --> 01:21:58.380
Ben Waples: Not the same

693
01:22:03.480 --> 01:22:13.080
Ryan Mehta: All right, let's do the same for our controls component. So right now, our controls component is a class.

694
01:22:14.790 --> 01:22:21.420
Ryan Mehta: Let's refactor it so it is a function. So I'm going to cause controls.

695
01:22:22.740 --> 01:22:25.020
Ryan Mehta: We're going to create a function component

696
01:22:26.130 --> 01:22:28.620
Ryan Mehta: We're going to eventually have some prop types.

697
01:22:30.600 --> 01:22:35.430
Ryan Mehta: And then we're going to export our controls component at the bottom.

698
01:22:36.900 --> 01:22:39.570
Ryan Mehta: The prop types of the same prop types that we had before.

699
01:22:40.650 --> 01:22:46.020
Ryan Mehta: Text background color, color and our handle functions. So I'm just gonna steal

700
01:22:47.280 --> 01:22:49.680
Ryan Mehta: This object and drop it here.

701
01:22:51.660 --> 01:23:02.310
Ryan Mehta: Our controls component is going to return the same thing that our class returned before so I'm going to copy this and drop it.

702
01:23:03.390 --> 01:23:03.990
Here.

703
01:23:06.480 --> 01:23:09.870
Ryan Mehta: And now they do the exact same thing. So we have our Render

704
01:23:11.400 --> 01:23:16.440
Ryan Mehta: Our prop types and our export. We can then delete our class.

705
01:23:18.480 --> 01:23:19.320
And

706
01:23:20.520 --> 01:23:28.980
Ryan Mehta: D structure, all of our products so text. Background Color. Color handle text change.

707
01:23:30.630 --> 01:23:33.900
And old texts change which ones highlighted.

708
01:23:36.420 --> 01:23:40.590
Ryan Mehta: Change handled color change the huge line of restructuring.

709
01:23:42.450 --> 01:23:47.700
Ryan Mehta: But at this point after the structuring everything are tested still pass

710
01:23:49.470 --> 01:23:50.130
Which

711
01:23:52.020 --> 01:23:52.710
Ryan Mehta: They do.

712
01:23:54.090 --> 01:23:57.480
Ryan Mehta: If we want to we can put these on different lines so

713
01:23:58.890 --> 01:24:00.960
Ryan Mehta: It's not quite so crazy looking

714
01:24:04.590 --> 01:24:05.220
A bit better

715
01:24:06.870 --> 01:24:12.300
Ryan Mehta: On cash. It's still pass. And if we go to the browser.

716
01:24:13.500 --> 01:24:1like 811 85 dash dash person.

914
01:48:33.330 --> 01:48:33.960
Ryan Mehta: Did

915
01:48:37.200 --> 01:48:40.590
Ryan Mehta: A bunch of these sort of things. All right.

916
01:48:42.240 --> 01:48:47.100
Ryan Mehta: We have our event list presentational component

917
01:48:50.520 --> 01:48:57.600
Ryan Mehta: Surrounding the whole thing and our individual event presentational components surrounding the bullet point

918
01:48:58.950 --> 01:49:06.210
Ryan Mehta: Around the entire thing. We will have a container called this day.

919
01:49:07.920 --> 01:49:11.430
Ryan Mehta: Which will have our events piece of state.

920
01:49:12.810 --> 01:49:14.610
Ryan Mehta: Which will be a list of events.

921
01:49:16.530 --> 01:49:19.650
Ryan Mehta: We can also have it have loading state have it have that

922
01:49:20.700 --> 01:49:24.420
Ryan Mehta: So while we're waiting to get our list of events will be in some building state.

923
01:49:25.950 --> 01:49:26.580
Ryan Mehta: Team. Okay.

924
01:49:28.350 --> 01:49:28.950
Ryan Mehta: All right.

925
01:49:32.400 --> 01:49:33.120
Ryan Mehta: Let's

926
01:49:35.370 --> 01:49:44.880
Ryan Mehta: Go into our containers. I am going to make a this day digests X file. And it's also make a this

927
01:49:46.020 --> 01:49:50.760
Ryan Mehta: This day test dot txt file.

928
01:49:52.620 --> 01:50:13.860
Ryan Mehta: So we'll have our test over here on the left or implementation over here on the right. We're going to import react from react import render and screen from test. Testing library react will describe our this

929
01:50:15.180 --> 01:50:16.230
Ryan Mehta: Container

930
01:50:23.130 --> 01:50:23.580
Ryan Mehta: All right.

931
01:50:26.730 --> 01:50:30.210
Ryan Mehta: And then we will have our first test.

932
01:50:32.820 --> 01:50:56.310
Ryan Mehta: First thing that we wanted to do is display a loading screen whenever like to begin with. Since we're going to have to fetch our events from an API. When this component. First is drawing on the screen there should be some sort of loading screen. So let's say it displays a loading message.

933
01:50:57.600 --> 01:50:58.530
To begin with,

934
01:51:00.330 --> 01:51:01.860
Ryan Mehta: We're going to render

935
01:51:04.080 --> 01:51:06.270
Ryan Mehta: Our this day component

936
01:51:08.160 --> 01:51:17.970
Ryan Mehta: This will fail right at the very beginning because we have no component. We can't even import anything for this day. So let's make sure

937
01:51:19.560 --> 01:51:26.070
Ryan Mehta: That we have a component. We're going to input react from react. We are going to construct our this day.

938
01:51:27.780 --> 01:51:32.370
Ryan Mehta: Function component and we will export it.

939
01:51:37.170 --> 01:51:39.690
Ryan Mehta: And then we should be able to import it here.

940
01:51:42.780 --> 01:51:51.990
Ryan Mehta: Alright so little scaffolding right now. It's still failing because we're not returning anything from our function as of yet.

941
01:51:55.410 --> 01:52:08.220
Ryan Mehta: So let's return something from this return, we want to eventually display our list of events, but before that we want to return a loading screen.

942
01:52:09.270 --> 01:52:09.900
Ryan Mehta: So,

943
01:52:11.190 --> 01:52:12.510
Ryan Mehta: In the interest of

944
01:52:14.310 --> 01:52:18.240
Ryan Mehta: Time. This will be our loading screen, it will say loading.

945
01:52:20.970 --> 01:52:24.810
Ryan Mehta: Our tests already passes, unfortunately. But we can fill in the rest of it.

946
01:52:27.300 --> 01:52:29.250
Let's have this have a

947
01:52:37.530 --> 01:52:39.210
Ryan Mehta: Grab our load and strain.

948
01:52:40.530 --> 01:52:43.770
Ryan Mehta: From the screen will get fit test ID.

949
01:52:51.270 --> 01:52:52.980
Ryan Mehta: To have content.

950
01:52:54.240 --> 01:52:54.690
Loaded

951
01:52:56.910 --> 01:52:57.960
Ryan Mehta: Something like this.

952
01:52:58.980 --> 01:53:00.090
Ryan Mehta: Think that should pass

953
01:53:03.900 --> 01:53:11.430
Ryan Mehta: So kind of a silly test to begin with. But we're just making sure that this loading h1 is on the page to begin with.

954
01:53:13.170 --> 01:53:13.920
Ryan Mehta: That look good.

955
01:53:15.870 --> 01:53:24.150
Ryan Mehta: Next thing that we need to do is we want to make sure that at some point it displays a list of events.

956
01:53:26.880 --> 01:53:31.650
Ryan Mehta: So, same sort of thing. We're going to render our this day container.

957
01:53:34.320 --> 01:53:39.450
Ryan Mehta: This time we want to get a URL for our events list.

958
01:53:40.710 --> 01:53:47.370
Ryan Mehta: In order to get that we're going to put a data ID or test ID on this URL, our events list.

959
01:53:48.990 --> 01:53:51.450
Ryan Mehta: Well, let's call it a events.

960
01:53:52.740 --> 01:53:56.160
Ryan Mehta: So that way on the right hand side, we can get our

961
01:53:57.210 --> 01:53:57.990
Events.

962
01:53:59.880 --> 01:54:00.090
Ryan Mehta: That

963
01:54:01.650 --> 01:54:02.580
Ryan Mehta: Equal equals

964
01:54:06.240 --> 01:54:09.240
Ryan Mehta: We're going to use a sink here.

965
01:54:11.400 --> 01:54:12.960
Ryan Mehta: We will await

966
01:54:15.060 --> 01:54:17.280
Ryan Mehta: By test ideas.

967
01:54:19.380 --> 01:54:23.340
Ryan Mehta: Any idea why we would want to use fine by test ID here instead of

968
01:54:29.940 --> 01:54:34.740
Ryan Mehta: The idea of why we would want to use fine fine tier find by instead of get by.

969
01:54:38.820 --> 01:54:41.100
Ben Waples: Is it because we need a way for the

970
01:54:42.180 --> 01:54:43.350
Ben Waples: Components to render

971
01:54:44.280 --> 01:54:45.720
Ryan Mehta: Exactly. Yeah. Well,

972
01:54:46.140 --> 01:55:00.690
Ryan Mehta: Close. Yeah, it's because we want to wait in this case we're going to make a fetch request. So the we don't expect this events you well to be on the screen. To begin with we expected to be on the screen. After the fetch request finishes.

973
01:55:03.750 --> 01:55:10.800
Ryan Mehta: So we have a failing tests, we have a bunch of code that we need to right before this can even think about passing

974
01:55:11.970 --> 01:55:14.820
Ryan Mehta: The first thing that we should add is some state.

975
01:55:16.770 --> 01:55:22.140
Ryan Mehta: To begin with, I'm going to add some loading state. So we'll have loading and set loading.

976
01:55:24.750 --> 01:55:35.970
Ryan Mehta: Equals state. Initially, we are going to be in a loading state before we even get events and then we'll say, if we're in a loading state.

977
01:55:37.530 --> 01:55:41.010
Ryan Mehta: We're going to return our loading H1.

978
01:55:43.260 --> 01:55:43.710
Ryan Mehta: So,

979
01:55:44.940 --> 01:55:49.110
Ryan Mehta: If we're not in a loading state. Then we're going to return our bed.

980
01:55:50.640 --> 01:55:51.690
Right that list.

981
01:55:54.030 --> 01:55:54.840
Ryan Mehta: That look okay

982
01:55:56.460 --> 01:56:01.860
Ryan Mehta: So if we're loading returns a loading screen otherwise return our event list.

983
01:56:03.240 --> 01:56:10.500
Ryan Mehta: Our event list expects a single prop called events. Let's make our events piece of steak.

984
01:56:15.480 --> 01:56:26.910
Ryan Mehta: And events will start off as an empty array. We don't have any results back from our API yet. And we'll pass this list to have that list.

985
01:56:30.240 --> 01:56:31.980
Ryan Mehta: That look good so far. Two people

986
01:56:34.290 --> 01:56:35.460
Ryan Mehta: Tested still be failing.

987
01:56:37.080 --> 01:56:37.380
Good.

988
01:56:39.120 --> 01:56:39.630
Ryan Mehta: Alright.

989
01:56:40.890 --> 01:56:50.940
Ron Yonker: The events that's going to fire wants on the initial render because you're passing empty array in US state, is that correct

990
01:56:55.170 --> 01:57:02.580
Ryan Mehta: This isn't going to this isn't a fire. They've yet this is just constructing so it's saying that events to begin with, as an empty array.

991
01:57:03.270 --> 01:57:03.510
Ryan Mehta: We have

992
01:57:03.840 --> 01:57:05.250
Ryan Mehta: To use a factor. Yeah.

993
01:57:06.030 --> 01:57:08.970
Ron Yonker: Okay. Oh, you got it.

994
01:57:27.450 --> 01:57:29.460
Ryan Mehta: Alright my zoom crashed, but I'm back.

995
01:57:31.590 --> 01:57:35.010
Ryan Mehta: But I'm no longer host of this thing, who's the host

996
01:57:35.460 --> 01:57:36.420
Annalise Murphy: Whereas the power

997
01:57:40.320 --> 01:57:47.490
Ryan Mehta: Oh, it hasn't kicked me out yet. So somebody will become hosted. Can I still share my screen. I can't share

998
01:57:49.650 --> 01:57:53.280
Ryan Mehta: Okay, we're gonna have to wait for the other Ryan to get kicked out.

999
01:57:57.000 --> 01:57:58.320
Ryan Mehta: For me to share my screen.

1000
01:58:00.420 --> 01:58:01.230
Okay, cool.

1001
01:58:10.590 --> 01:58:10.950
Ryan Mehta: All right.

1002
01:58:14.880 --> 01:58:21.990
Ryan Mehta: So we want to do that use effect thing in order to get our list of events. We need to make an API call to muffin labs.

1003
01:58:23.640 --> 01:58:33.480
Ryan Mehta: Before we can make that API call. I think it would be nice to have a service. So I'm going to create a services directory. And let's call it

1004
01:58:35.760 --> 01:58:36.090
Is

1005
01:58:37.140 --> 01:58:49.470
Ryan Mehta: This gay API JS. This is where we'll call create our service call our API call. To this day in history API.

1006
01:58:51.030 --> 01:58:55.800
Ryan Mehta: Let's make a get this day function.

1007
01:58:58.440 --> 01:59:00.960
Ryan Mehta: Get this day will make a fetch.

1008
01:59:02.070 --> 01:59:10.110
Ryan Mehta: Request a GET request to this API muffin labs com slash date.

1009
01:59:12.090 --> 01:59:17.940
Ryan Mehta: We're then going to get back a response with parse through responses JSON.

1010
01:59:21.450 --> 01:59:29.370
Ryan Mehta: You'll see this is the JSON that we get back. It has a key called data, which is an object with events inside of it.

1011
01:59:30.570 --> 01:59:33.330
Ryan Mehta: So to get just that array of events.

1012
01:59:35.760 --> 01:59:40.650
Ryan Mehta: We're going to win another then we'll have our result.

1013
01:59:42.270 --> 01:59:43.980
Ryan Mehta: We want to get the result.

1014
01:59:45.120 --> 01:59:47.550
Ryan Mehta: God data got a belt.

1015
01:59:49.230 --> 01:59:51.480
Ryan Mehta: To get just that array of events.

1016
01:59:52.680 --> 01:59:53.610
Ryan Mehta: That makes sense.

1017
01:59:56.940 --> 02:00:02.100
Ryan Mehta: Alright, so now we're getting back these objects here.

1018
02:00:03.630 --> 02:00:05.340
From our API call.

1019
02:00:09.330 --> 02:00:10.320
export this thing.

1020
02:00:13.410 --> 02:00:25.680
Ryan Mehta: Back in our test. We don't actually want to make an API call. Every time we call this service we kind of want to fake it, if that makes sense. We want to mock this service call

1021
02:00:27.060 --> 02:00:31.650
Ryan Mehta: That way we don't run into any rate limiting issues or anything like that.

1022
02:00:32.670 --> 02:00:39.300
Ryan Mehta: So on the right hand side, I'm going to just mock our services.

1023
02:00:40.890 --> 02:00:45.540
Ryan Mehta: When we add this line. It's saying don't actually import this this day.

1024
02:00:48.450 --> 02:00:50.880
Ryan Mehta: Function in our tests.

1025
02:00:52.650 --> 02:00:54.630
Ryan Mehta: import a mock of it instead

1026
02:00:56.100 --> 02:01:03.090
Ryan Mehta: And then in our actual test, we can say get this day dot

1027
02:01:05.190 --> 02:01:05.910
Mark

1028
02:01:09.720 --> 02:01:10.470
Ryan Mehta: Value.

1029
02:01:11.760 --> 02:01:24.390
Ryan Mehta: And inside of here, we can put our like fake data. So when we try to call this day in our test. What do we actually want it to return if it's not actually going to the API.

1030
02:01:25.530 --> 02:01:26.880
Ryan Mehta: For me, I'm just going to grab

1031
02:01:27.930 --> 02:01:30.150
Ryan Mehta: A couple of these actual events.

1032
02:01:32.100 --> 02:01:32.970
Ryan Mehta: And

1033
02:01:34.350 --> 02:01:35.190
paste them here.

1034
02:01:40.860 --> 02:01:46.980
Ryan Mehta: So instead of actually hitting the API. We're going to be mocking that API call.

1035
02:01:48.390 --> 02:01:49.110
And returning

1036
02:01:50.250 --> 02:01:53.970
Ryan Mehta: Some like fake information and make this slightly smaller

1037
02:01:57.930 --> 02:02:00.150
don't actually care about those two things.

1038
02:02:02.010 --> 02:02:06.750
Ryan Mehta: All right. Does this make sense, this little mock data here.

1039
02:02:10.110 --> 02:02:10.590
ryan Diffenbaugh: So,

1040
02:02:10.800 --> 02:02:22.440
ryan Diffenbaugh: Other questions and sort about what the expect in my recipe lab. I was put an empty quote colon empty quote as my expect is that fine or should I actually have something in there.

1041
02:02:25.110 --> 02:02:26.370
Ryan Mehta: For which expect

1042
02:02:27.810 --> 02:02:30.060
ryan Diffenbaugh: The one that you were just a just on

1043
02:02:32.880 --> 02:02:35.850
Ryan Mehta: You mean like mock resolve value or the

1044
02:02:36.300 --> 02:02:49.440
ryan Diffenbaugh: Yeah, I'm sorry. At the Microsoft value. So instead of year Cohen 1185 I had quote colon, quote, comma, just to like have something in there. But actually, have you had any information. Is that okay here.

1045
02:02:50.130 --> 02:02:54.420
Ryan Mehta: Yeah, I probably just would have done like have this whole thing be an empty object.

1046
02:02:55.500 --> 02:03:02.370
Ryan Mehta: That would that's totally fine though. Because especially for that rescue lab. You have no idea what they're requesting anything

1047
02:03:04.650 --> 02:03:07.470
Ryan Mehta: Alright, so we have our little mocks set up now.

1048
02:03:10.920 --> 02:03:17.400
Ryan Mehta: Back in our actual container, we're going to want to make a request to that API.

1049
02:03:20.400 --> 02:03:25.800
Ryan Mehta: Whenever we're going to make make a request to an API. We're going to use the use effect.

1050
02:03:30.930 --> 02:03:31.470
So,

1051
02:03:34.950 --> 02:03:38.400
Ryan Mehta: Let's make sure that we import use effect from react.

1052
02:03:41.010 --> 02:03:41.250
Okay.

1053
02:03:44.520 --> 02:03:45.060
Ryan Mehta: All right.

1054
02:03:46.320 --> 02:03:54.870
Ryan Mehta: We need to also pass a second argument here if we pass. Nothing. Every time we change state, we're going to run the US effect again.

1055
02:03:55.770 --> 02:04:13.830
Ryan Mehta: If we pass it an empty array, we're only going to run the US effect when the component first mounts. So when the component first melts, we're going to want to get this day, which will give us our array of events. We're then going to get back

1056
02:04:14.910 --> 02:04:21.990
Ryan Mehta: Events run walk. This is called events will set events to events.

1057
02:04:24.030 --> 02:04:24.510
Like so.

1058
02:04:29.580 --> 02:04:30.900
Ryan Mehta: And then finally,

1059
02:04:36.090 --> 02:04:37.050
Ryan Mehta: We will

1060
02:04:39.870 --> 02:04:41.070
Ryan Mehta: Set loading.

1061
02:04:56.730 --> 02:05:01.050
Ryan Mehta: Continued to be an element a document but got string.

1062
02:05:04.230 --> 02:05:04.830
Ryan Mehta: For what

1063
02:05:06.900 --> 02:05:09.960
Ryan Mehta: Okay, well I'm going to ignore that for a second. Does this make sense so far.

1064
02:05:12.870 --> 02:05:13.770
Ryan Mehta: Right hand side

1065
02:05:19.080 --> 02:05:29.640
Ryan Mehta: So when the component first mounts. We go to this API. So this is the same as component did mount pretty much right here. When the component mounts.

1066
02:05:30.300 --> 02:05:48.840
Ryan Mehta: Get our list of events from the API we get back the liof this HTML file a script tag.

647
01:38:42.780 --> 01:38:49.440
Ryan Mehta: And that script tags source would equal the location of this bundled JavaScript file.

648
01:38:50.550 --> 01:39:07.590
Ryan Mehta: So this post web pack this HTML web pack plugin and your create react apps had to wait for the bundling to finish before can add this script tag to the bottom of the HTML file needed another location of this, ah, this JS file.

649
01:39:10.680 --> 01:39:13.560
Ryan Mehta: So it hooked into these posts bundle. Yep, good.

650
01:39:14.670 --> 01:39:24.150
Ron Yonker: Know, our plugins all happening in the post bundle phase are, where are, some of them happening at some earlier phase.

651
01:39:24.720 --> 01:39:26.880
Ryan Mehta: Yep, they can happen in any of these phases.

652
01:39:29.370 --> 01:39:41.640
Ryan Mehta: Actually another. So this next one is a good example of that. There's also this clean web pack plugin every time we bundle our JavaScript files we output a new bundle JS file.

653
01:39:42.810 --> 01:39:46.890
Ryan Mehta: So every time you run web pack, we get a new bundle JS file.

654
01:39:49.380 --> 01:40:00.720
Ryan Mehta: You can imagine this getting super annoying because our disk folder for all of these things live our build folder we get a new JS file. Every time we run in PM run build

655
01:40:01.740 --> 01:40:03.690
Ryan Mehta: This folder. It gets super large

656
01:40:05.190 --> 01:40:06.690
Ryan Mehta: There is this nice plugin.

657
01:40:10.020 --> 01:40:20.550
Ryan Mehta: Clean web pack plugin which deletes all of the old files and then re bundled some so we end up with only one JavaScript file here ever

658
01:40:21.660 --> 01:40:29.730
Ryan Mehta: So this one hooks into the pre bundle event before starting bundling it's going to delete everything in the dist folder.

659
01:40:30.750 --> 01:40:36.390
Ryan Mehta: Bundle our JavaScript file and then add it to the dist folder. So it's going to hook into pre bundle.

660
01:40:41.130 --> 01:40:48.210
Ryan Mehta: And then there's one last one dot and web pack. This one is the thing that lets us do process and

661
01:40:48.870 --> 01:40:59.760
Ryan Mehta: Dot and then the name of an environment variable, it will read that environment variable in our end file and inject it into our JavaScript. This one runs on preload.

662
01:41:00.450 --> 01:41:14.580
Ryan Mehta: So right before loading all of our JavaScript files, it will read the dot m file in our repo and inject the environment variables into our JavaScript files.

663
01:41:21.150 --> 01:41:23.640
Ryan Mehta: So, different, different plugins different

664
01:41:25.020 --> 01:41:26.370
Ryan Mehta: Things that they hook into

665
01:41:38.400 --> 01:41:52.590
Ryan Mehta: Alright, adding plugins our configuration file. This is that same configuration file that we've seen with an entry point and output our dev server and our loaders and you can also add a plugins.

666
01:41:53.820 --> 01:42:06.270
Ryan Mehta: Which is an array of plugins that you want to add to your configuration. So while plugins, what they're doing is a little bit complex adding new plugins isn't too bad.

667
01:42:09.450 --> 01:42:13.830
Ryan Mehta: So this is saying, use the HTML plugin and use the clean web pack plugin.

668
01:42:16.260 --> 01:42:18.450
Ryan Mehta: During the bundling of our application.

669
01:42:25.410 --> 01:42:25.830
Ryan Mehta: Okay.

670
01:42:27.210 --> 01:42:33.840
Ryan Mehta: Let's walk through this entire web pack config file and then we will play around with it a little bit.

671
01:42:35.160 --> 01:42:35.640
Ryan Mehta: Live

672
01:42:37.350 --> 01:42:43.740
Ryan Mehta: So first part, we have the main file in our code usually an index JS file.

673
01:42:44.790 --> 01:42:53.280
Ryan Mehta: And we give that to entry. So entry takes our main JavaScript file the entry point for our application.

674
01:42:56.460 --> 01:43:17.130
Ryan Mehta: We then tell web pack were to output the bundled file where this file should go with the bundle file should go here, we're saying output it to disk main dot a random string dot j s to the name of our file will be main ABC. Once you 234743 two.js

675
01:43:20.340 --> 01:43:26.730
Ryan Mehta: We specify dev server while developing what port, should we be able to go to to see our running code.

676
01:43:30.180 --> 01:43:42.810
Ryan Mehta: We specify an array of plugins. What things do we want to happen to our code or what things do like what what tasks. Do we want to run throughout this process.

677
01:43:44.790 --> 01:43:51.270
Ryan Mehta: So in this case, we're saying, create an HTML file and clean up our dist directory

678
01:43:54.060 --> 01:43:57.450
Ryan Mehta: And then we specify a bunch of loaders, so

679
01:43:58.680 --> 01:44:07.860
Ryan Mehta: These loaders go under module inside of rules. Rules is an array of loaders that we want to run our JavaScript files through

680
01:44:11.280 --> 01:44:20.220
Ryan Mehta: Here we have our Babel loader which transforms GFX into plain JavaScript and also transforms modern JavaScript into

681
01:44:21.510 --> 01:44:23.940
Ryan Mehta: Older versions of JavaScript.

682
01:44:25.170 --> 01:44:31.920
Ryan Mehta: So we test, make sure that we have a.js file. If it is a.js file we run it through babble loader.

683
01:44:34.380 --> 01:44:43.080
Ryan Mehta: And we also have all of our CSS loaders here. So if the files and and dot CSS run them through the CSS loaders.

684
01:44:46.140 --> 01:44:54.930
Ryan Mehta: And then we have our image loader. So if we have a JPG or png or an SVG run them through this URL loader.

685
01:44:59.820 --> 01:45:04.140
Ryan Mehta: And that is the entire web pack file.

686
01:45:09.060 --> 01:45:09.450
All right.

687
01:45:11.190 --> 01:45:14.880
Ryan Mehta: We're gonna play around with this web pack file in our code.

688
01:45:16.380 --> 01:45:23.970
Ryan Mehta: I'm just sitting there very quickly set up a React application actually not going to, um,

689
01:45:25.230 --> 01:45:35.670
Ryan Mehta: Let's take a break and then when we come back from the break, we'll play around with web pack a little bit and see this bundling process live. Let's come back at 11 o'clock.

690
01:45:44.280 --> 01:45:46.680
Ryan Mehta: So let's play around a little bit with web pack.

691
01:45:47.940 --> 01:45:52.380
Ryan Mehta: I am going to open this demo directory

692
01:45:58.410 --> 01:46:03.420
Ryan Mehta: So there's nothing here. Yeah, I'm gonna MPM in it so we can get a package face on

693
01:46:10.080 --> 01:46:18.870
Ryan Mehta: And then let's start adding some so if you have any of you use this NPR minute that's why it just gives you like an empty package JSON, pretty much.

694
01:46:24.270 --> 01:46:30.780
Ryan Mehta: OK. And then let's start installing some of our dev dependencies. We're going to use web pack.

695
01:46:32.280 --> 01:46:34.530
Ryan Mehta: And web pack COI

696
01:46:37.290 --> 01:46:45.870
Ryan Mehta: This will give us our web pack stuff we can start creating our web pack con JS file.

697
01:46:46.890 --> 01:46:48.870
Ryan Mehta: On the web pack config JS file.

698
01:46:50.670 --> 01:46:53.280
Ryan Mehta: Exports an object.

699
01:46:55.410 --> 01:47:09.450
Ryan Mehta: Done muster going to create a source directory to get us started. And inside of the source directory will put an index.js file instead of our index JS file. I'm going to console log. Hi.

700
01:47:10.650 --> 01:47:15.540
Ryan Mehta: So we have this index JS file. We have our web pack config, which is empty right now.

701
01:47:16.650 --> 01:47:21.390
Ryan Mehta: A source directory and the package JSON with the two dependencies.

702
01:47:22.560 --> 01:47:29.400
Ryan Mehta: You don't have to remember all the dependencies that we're going to install. I definitely don't remember them all. I'm going to constantly reference stuff to get them all.

703
01:47:30.750 --> 01:47:34.740
Ryan Mehta: The Bootstrap thing that we have that

704
01:47:36.000 --> 01:47:38.130
Ryan Mehta: Will have all of these dependencies pre installed.

705
01:47:39.180 --> 01:47:47.820
Ryan Mehta: For and applications have it feels like hundreds of dependencies. I'm going to add one script here for now a build script.

706
01:47:49.560 --> 01:47:51.360
Ryan Mehta: Which will use web pack.

707
01:47:53.340 --> 01:47:56.160
Ryan Mehta: To bundle our JavaScript file.

708
01:47:57.900 --> 01:48:05.430
Ryan Mehta: So whenever we MPM run builds it should read our

709
01:48:09.240 --> 01:48:16.080
Ryan Mehta: Yeah, so it should read our web pack config file and tried to output a it's not dash key.

710
01:48:17.490 --> 01:48:19.110
Ryan Mehta: I might have put the dash wrong.

711
01:48:21.300 --> 01:48:22.530
The wrong config.

712
01:48:34.050 --> 01:48:38.070
Ryan Mehta: I thought it was dash p for production, but obviously

713
01:48:39.150 --> 01:48:42.150
Ryan Mehta: I just know that it's wrong now because it says that it

714
01:48:43.380 --> 01:48:44.700
Ryan Mehta: Some unknown argument.

715
01:48:48.000 --> 01:48:53.310
Ryan Mehta: It says, Gosh, P. There could have changed it, I guess. Let's get rid of it.

716
01:48:59.670 --> 01:49:00.930
Ryan Mehta: Okay, it's happier now.

717
01:49:02.070 --> 01:49:08.370
Ryan Mehta: Alright, so it'll read our web pack config file which is empty right now. So it'll use all of the default

718
01:49:09.540 --> 01:49:27.240
Ryan Mehta: The default entries to read index JS file in a source folder and then output it to a different folder into a main.js file. So if we look at this main.js file, it has our console log in it.

719
01:49:28.470 --> 01:49:30.240
Ryan Mehta: We're not doing anything too fancy.

720
01:49:31.290 --> 01:49:31.860
Ryan Mehta: Right now.

721
01:49:33.630 --> 01:49:34.290
Ryan Mehta: seem okay

722
01:49:36.660 --> 01:49:37.380
Ryan Mehta: All right.

723
01:49:39.180 --> 01:49:48.030
Ryan Mehta: If we wanted to like let's say we didn't want to call this index JS, we wanted to call it app JS, if we tried to run the same build

724
01:49:50.250 --> 01:49:51.180
Ryan Mehta: It would fail.

725
01:49:52.200 --> 01:49:56.670
Ryan Mehta: Because there's no index file inside of our source directory

726
01:49:57.780 --> 01:50:10.410
Ryan Mehta: By default, the entry point is index JS, since we changed our entry point. We need to manually configure this entry is now source app JS.

727
01:50:11.790 --> 01:50:15.690
Ryan Mehta: So we need to tell it where that main file is when we build again.

728
01:50:16.830 --> 01:50:25.320
Ryan Mehta: It outputs to our main JS file same console log. Hi. Let's change this to Hi there, so we can see

729
01:50:26.700 --> 01:50:28.530
Ryan Mehta: That bundled file change.

730
01:50:29.700 --> 01:50:36.780
Ryan Mehta: So we have our Hi there, you can actually see it already rewriting our code a little bit web pack has chosen to use double quotes here.

731
01:50:37.890 --> 01:50:42.030
Ryan Mehta: When I've chosen to use single quotes made a slight change for us.

732
01:50:43.980 --> 01:50:49.080
Ryan Mehta: Let's say I don't want to put it in main dot j s i want to name this file something different.

733
01:50:50.190 --> 01:50:52.620
Ryan Mehta: I can do that by adding an output.

734
01:50:56.190 --> 01:50:57.840
Ryan Mehta: And changing the file name.

735
01:50:58.860 --> 01:51:03.030
Ryan Mehta: I want to call mine bundle JS.

736
01:51:04.560 --> 01:51:21.900
Ryan Mehta: Now when I run this, it should output a new file a bundle JS file so bundle JS has the same thing you'll notice the one key thing here. Also, is it didn't delete the old files and dist. It just added a new bundle JS file.

737
01:51:24.060 --> 01:51:25.680
Ryan Mehta: As I changed my code.

738
01:51:26.730 --> 01:51:27.750
Ryan Mehta: It constantly

739
01:51:30.000 --> 01:51:39.810
Ryan Mehta: Updates that bundle JS file since it has the same name. So I have this like jibberish here now bundle JS. Now has that jibberish

740
01:51:40.740 --> 01:51:50.550
Ryan Mehta: Um, but if I wanted to output a unique file. Every time I changed my code to break the browser's cash that we talked about earlier, I can add this hash thing here.

741
01:51:51.960 --> 01:51:53.760
Ryan Mehta: Now when I build

742
01:51:55.560 --> 01:52:02.400
Ryan Mehta: It will output a file called bundle with a random string and j s at the end.

743
01:52:03.480 --> 01:52:06.750
Ryan Mehta: I run this again, we get the same random string.

744
01:52:08.520 --> 01:52:12.870
Ryan Mehta: But if I change my code a little bit. Let's go back to. Hi there.

745
01:52:14.850 --> 01:52:20.700
Ryan Mehta: The string will change. So I'll have this FC eight seven and

746
01:52:21.900 --> 01:52:30.540
Ryan Mehta: And oh, I changed the bundle JS file and accident, oops, oops, go back to the change up to us.

747
01:52:34.020 --> 01:52:44.820
Ryan Mehta: We bundle. And now we'll have our F8. A be nine and FCA seven. So every time I change my code.

748
01:52:45.510 --> 01:52:47.190
Ryan Mehta: And bundle again.

749
01:52:48.000 --> 01:52:49.890
Ryan Mehta: We get a new bundle.

750
01:52:50.970 --> 01:52:51.510
Ryan Mehta: File.

751
01:52:52.560 --> 01:52:54.210
Ron Yonker: This will break your houses cash.

752
01:52:55.410 --> 01:52:58.560
Ron Yonker: The plugin so that we can see each of those bundles.

753
01:52:58.980 --> 01:53:00.510
Ryan Mehta: Yep, exactly. We're not using that

754
01:53:00.510 --> 01:53:01.530
Ron Yonker: Clean plug in. Yeah.

755
01:53:02.010 --> 01:53:08.400
Ryan Mehta: So every time we build, we get a new file and disk and this file will just continue to grow as we change our code.

756
01:53:13.260 --> 01:53:20.430
Ryan Mehta: This Random House is created because we have this square brackets hash thing right here.

757
01:53:24.300 --> 01:53:36.570
Patrick Wilson: Okay, if you change it back to a previously like like new changes sentence in the console log back to a previous one is the hash still different or does it go back to the same hash.

758
01:53:37.020 --> 01:53:38.340
Ryan Mehta: Yeah, let's experiment. So

759
01:53:38.400 --> 01:53:40.320
Ryan Mehta: This f eight be nine

760
01:53:41.100 --> 01:53:44.640
Ryan Mehta: Has hi there. So if we go back to. Hi there.

761
01:53:46.200 --> 01:53:56.880
Ryan Mehta: Do we get another one, or the same the same one. So I, I believe, how it works. It's hashtag based on the code in your JavaScript files.

762
01:53:57.240 --> 01:53:57.570
Okay.

763
01:54:00.690 --> 01:54:08.430
Ryan Mehta: Let's try something. Let's I'm going to manually delete all of these because it's going to get confusing to figure out what the new one is

764
01:54:09.750 --> 01:54:14.400
Ryan Mehta: But let's add a variable cons numbers equals

765
01:54:19.200 --> 01:54:22.320
Ryan Mehta: And console log numbers.

766
01:54:25.590 --> 01:54:29.310
Ryan Mehta: So this console log should print out the number two. All right.

767
01:54:30.600 --> 01:54:32.550
Ryan Mehta: Let's see what happens when we bundle. This

768
01:54:36.780 --> 01:54:38.370
Check out with the bundler did

769
01:54:39.930 --> 01:54:49.800
Ryan Mehta: So web pack was smart enough to realize that we don't actually use this array anywhere but the console log in this console log is just grabbing the number two.

770
01:54:50.640 --> 01:54:58.650
Ryan Mehta: So, it changed our code and got rid of the array completely and just constant logged to for us web pack actually changed our code a little bit

771
01:55:03.480 --> 01:55:13.140
Ryan Mehta: Kind of crazy, right. What if we add another console log console log numbers three any predictions on what would happen.

772
01:55:16.620 --> 01:55:21.870
Ryan Mehta: I'm going to get rid of this hash thing for a second. So we could just see them side by side lively loadin7.760
Ryan Mehta: The browser stuff should still work just like it did before.

717
01:24:23.790 --> 01:24:29.400
Ryan Mehta: So the function components and the class components act the exact same way right now.

718
01:24:30.750 --> 01:24:37.890
Ryan Mehta: The only time we really need to have a class component for now is when we have state, there's no way to do this.

719
01:24:39.120 --> 01:24:42.630
Ryan Mehta: State stuff in a function component for now.

720
01:24:47.490 --> 01:24:50.970
Ryan Mehta: All right, any questions on that refactor.

721
01:24:54.270 --> 01:24:55.320
Ryan Mehta: Class to function.

722
01:24:58.830 --> 01:25:05.310
Thomas Stussi: Will you keep both syntax is like what the commented out stuff when you upload it.

723
01:25:07.440 --> 01:25:07.620
Ryan Mehta: I

724
01:25:07.650 --> 01:25:08.340
Thomas Stussi: Don't have to

725
01:25:09.210 --> 01:25:10.650
Ryan Mehta: I already deleted it but

726
01:25:10.650 --> 01:25:12.360
Thomas Stussi: I can bring it back. It's okay.

727
01:25:19.080 --> 01:25:20.190
Ryan Mehta: Put it down here.

728
01:25:22.770 --> 01:25:23.100
Annalise Murphy: Thank you.

729
01:25:28.560 --> 01:25:30.930
Ryan Mehta: We might have lost the display up nothing

730
01:25:32.640 --> 01:25:35.550
Ryan Mehta: Okay, cool. So those will stay there.

731
01:25:48.300 --> 01:25:50.130
Ryan Mehta: Alright, so you're trying to build a different app.

732
01:25:52.470 --> 01:25:54.330
Ryan Mehta: Right. Let me close out this thing.

733
01:25:55.860 --> 01:25:56.430
And

734
01:25:57.840 --> 01:25:59.760
Ryan Mehta: Let's try to build

735
01:26:01.470 --> 01:26:03.660
Ryan Mehta: A short URL.

736
01:26:06.120 --> 01:26:20.460
Ryan Mehta: So this short URLs should be a form, it's actually drive. Actually, before I drop, let's do our in it script. So while we're waiting for it to initialize we can talk about what it's supposed to do.

737
01:26:44.400 --> 01:26:48.180
Ryan Mehta: I want this app to have a form

738
01:26:50.070 --> 01:26:52.290
Ryan Mehta: So we'll have our browser window.

739
01:26:54.570 --> 01:26:57.780
Ryan Mehta: On the browser window, there'll be a text input.

740
01:26:59.700 --> 01:27:00.990
Ryan Mehta: And a button.

741
01:27:03.690 --> 01:27:08.070
Ryan Mehta: Inside of this text input. You can put a URL like

742
01:27:11.370 --> 01:27:12.270
Ryan Mehta: Something long

743
01:27:16.080 --> 01:27:21.360
Ryan Mehta: When you press this Submit button. It should give you back a shorter version.

744
01:27:22.740 --> 01:27:30.780
Ryan Mehta: Of that URL. Have you all have some of you made this sort of app like way back, we were doing backend stuff the back end part of this.

745
01:27:33.570 --> 01:27:36.690
Ryan Mehta: But it's kind of like Bitly or one of those types of things.

746
01:27:39.090 --> 01:27:54.360
Ryan Mehta: That will just write the front end of this, there is this API called Clean UI that will do the shortening for us. So we will make a request to their API, they'll give us back a short version of our URL and will display here the bottom

747
01:27:57.060 --> 01:27:58.110
Ryan Mehta: Does that make sense.

748
01:28:01.920 --> 01:28:02.580
All right.

749
01:28:04.020 --> 01:28:05.730
Ryan Mehta: Let's open up our

750
01:28:06.750 --> 01:28:08.220
Ryan Mehta: short URL code.

751
01:28:20.400 --> 01:28:20.850
Ryan Mehta: Alright.

752
01:28:22.860 --> 01:28:37.440
Ryan Mehta: So to start off with. Let's make another directory inside of components called short URL and inside of that directory will make a short URL component short URL dot j SX

753
01:28:41.400 --> 01:28:53.220
Ryan Mehta: I'm not going to write a test for this. Let's just write the component part of this. So we can just look at react more so readiness. So I'm going to bring in React and component

754
01:28:54.300 --> 01:29:11.250
Ryan Mehta: From react and we're also going to need prop types actually want me prop Tex. I'll leave that off its export default a class called short URL, it's going to extend component

755
01:29:12.390 --> 01:29:14.490
Ryan Mehta: And we're going to have a render method probably

756
01:29:16.320 --> 01:29:28.140
Ryan Mehta: And we're going to use this component back in app JS. So it actually displays on the page. So back in app JS. Before I forget, I am going to put short URL.

757
01:29:29.550 --> 01:29:33.510
Ryan Mehta: Imported into App JS and then we'll actually create our components here.

758
01:29:34.680 --> 01:29:38.310
Ryan Mehta: And let's start our application. So we can see the front end.

759
01:29:40.230 --> 01:29:48.240
Ryan Mehta: For now we can do some silly component will return an H1 that says short URL.

760
01:29:49.380 --> 01:29:51.060
Ryan Mehta: And just make sure that

761
01:29:57.210 --> 01:29:58.800
Ryan Mehta: Make sure that

762
01:29:59.820 --> 01:30:02.100
Ryan Mehta: We see something on the page.

763
01:30:03.870 --> 01:30:07.410
Ryan Mehta: There's our short URL component seeing good so far.

764
01:30:09.510 --> 01:30:10.050
Ryan Mehta: All right.

765
01:30:11.310 --> 01:30:12.870
Ryan Mehta: We want to display a form

766
01:30:13.920 --> 01:30:17.820
Ryan Mehta: So let's create a forum inside of this component

767
01:30:19.410 --> 01:30:31.290
Ryan Mehta: The form should have an input for the type is text, the value is something and on changing the input. We want to do something.

768
01:30:34.080 --> 01:30:35.580
Ryan Mehta: Where should this value live

769
01:30:42.270 --> 01:30:42.570
Stay

770
01:30:45.870 --> 01:30:51.930
Ryan Mehta: So we'll call this long URL and state and it will default to an empty string.

771
01:30:53.430 --> 01:30:58.920
Ryan Mehta: At the top of my render of the structure long URL off of state.

772
01:31:01.140 --> 01:31:03.750
Ryan Mehta: And we'll pass it to value over here.

773
01:31:05.040 --> 01:31:13.590
Ryan Mehta: And when we type into this input box, we want to change this long URL. So I'm going to write a handle change function.

774
01:31:15.090 --> 01:31:27.450
Ryan Mehta: That will disrupt your target off of the event, it will call this stuff set state. We're gonna update long URL with whatever target value equals

775
01:31:29.400 --> 01:31:33.480
Ryan Mehta: And then we'll pass this handle change function to our on change function.

776
01:31:34.680 --> 01:31:38.160
Ryan Mehta: And since we don't have any tests to go break

777
01:31:39.270 --> 01:31:39.510
Oh,

778
01:31:41.220 --> 01:31:47.040
Ryan Mehta: Wrong spot. Since we don't have any tests. Let's just make sure that we're manually testing very

779
01:31:48.450 --> 01:32:02.040
Ryan Mehta: Very often we don't want to write a ton of code to realize that we broke everything so right now seems like a good place to go and look at our component, we should be able to type into this box when we type into this box.

780
01:32:03.300 --> 01:32:08.910
Ryan Mehta: Our react dev tools should show us our state updating, which it is.

781
01:32:11.640 --> 01:32:14.850
Ryan Mehta: So we've hooked up our input correctly.

782
01:32:16.170 --> 01:32:18.840
Ryan Mehta: We also want a button to submit this form.

783
01:32:20.430 --> 01:32:22.260
Ryan Mehta: For URL.

784
01:32:26.040 --> 01:32:35.520
Ryan Mehta: When they click the button, it's going to trigger a submit on the form. So we want to have a handle submit action.

785
01:32:37.560 --> 01:32:38.190
Or event.

786
01:32:39.450 --> 01:32:42.840
Ryan Mehta: That will attach to the forums on submit handler.

787
01:32:52.410 --> 01:32:59.880
Ryan Mehta: There's one thing that we almost always do at the top of our handle submit functions. Anybody know that thing.

788
01:33:01.350 --> 01:33:04.920
Shawn Carpenter: For breakfast preventable exactly default

789
01:33:05.850 --> 01:33:11.070
Ryan Mehta: And then for now let's just console log this dots, take that long URL.

790
01:33:12.090 --> 01:33:17.520
Ryan Mehta: And then let's test it again make sure that we can submit our forum and print out long URL.

791
01:33:18.720 --> 01:33:31.320
Ryan Mehta: So if we go back to our page, you should be able to type in here. Our state changes for go to the console and click on this button we console log what we typed into the box.

792
01:33:33.180 --> 01:33:35.610
Which seems perfect for now.

793
01:33:38.250 --> 01:33:40.050
Ryan Mehta: Any questions up until here.

794
01:33:42.210 --> 01:33:42.720
All right.

795
01:33:44.490 --> 01:33:46.350
Ryan Mehta: Let's go and look at

796
01:33:47.940 --> 01:33:50.340
Ryan Mehta: The docks for this short URL.

797
01:33:53.130 --> 01:33:54.390
Ryan Mehta: This URL shortener

798
01:33:57.660 --> 01:34:03.510
Ryan Mehta: So they tell us that we can make a POST request to API V1 shorten

799
01:34:04.920 --> 01:34:09.840
Ryan Mehta: With a parameter called URL that is a longer URL.

800
01:34:11.130 --> 01:34:12.990
Ryan Mehta: They give us some examples down here.

801
01:34:14.520 --> 01:34:22.830
Ryan Mehta: So you can post to this URL and give it URL equals some longer URL.

802
01:34:25.470 --> 01:34:27.120
Ryan Mehta: Let's try to do that in our code.

803
01:34:28.560 --> 01:34:33.510
Ryan Mehta: So on submit. We're going to fetch console log there.

804
01:34:34.890 --> 01:34:37.140
Ryan Mehta: Fetch from

805
01:34:38.250 --> 01:34:39.300
Ryan Mehta: This URL.

806
01:34:40.620 --> 01:34:44.430
Ryan Mehta: Clear you are i.com slash API V1 shorten

807
01:34:46.380 --> 01:34:51.300
Ryan Mehta: It's going to be a POST request. So our methods method will be post

808
01:34:53.820 --> 01:34:54.450
Ryan Mehta: The

809
01:34:56.130 --> 01:35:00.030
Ryan Mehta: Type that we need to send this content type

810
01:35:01.590 --> 01:35:04.080
Ryan Mehta: What's the like x HTML.

811
01:35:05.160 --> 01:35:05.550
Earlier.

812
01:35:09.990 --> 01:35:10.950
Ryan Mehta: Where did I do it.

813
01:35:12.450 --> 01:35:17.040
Ryan Mehta: I always forget the X HTML. Like, how does the X HTML thing actually look

814
01:35:21.000 --> 01:35:22.050
X form data.

815
01:35:24.930 --> 01:35:35.310
Ryan Mehta: This thing that's the type that they expect us to send it. So we'll put that here, their API doesn't accept JSON it expects it accepts this form data.

816
01:35:36.660 --> 01:35:44.160
Ryan Mehta: So we'll have this x www form URL encoded, and then a body. We go back to their documentation.

817
01:35:45.810 --> 01:35:51.000
Ryan Mehta: The body should be URL equals and then the URL that we want to shorten

818
01:35:52.290 --> 01:36:01.110
Ryan Mehta: So we'll have our body URL equals and then the URL that we want to shorten which comes from state.

819
01:36:07.080 --> 01:36:09.780
Ryan Mehta: Does this make sense the most part.

820
01:36:12.360 --> 01:36:20.160
Ryan Mehta: So we fetch from the queen era. It's a POST request. They accept form data and we passed our form data.

821
01:36:21.900 --> 01:36:23.280
We're going to get a response.

822
01:36:25.800 --> 01:36:27.840
Ryan Mehta: will parse that responses JSON.

823
01:36:29.760 --> 01:36:32.790
Ryan Mehta: And then let's just console log

824
01:36:34.020 --> 01:36:35.220
Ryan Mehta: What they give us back.

825
01:36:37.290 --> 01:36:43.860
Ryan Mehta: So we're going to make a request to them will post will parse their responses JSON and and console log that JSON.

826
01:36:46.140 --> 01:36:51.900
Ryan Mehta: And let's test this thing again. So back over here. Let's do HTTP.

827
01:36:53.430 --> 01:36:54.540
Ryan Mehta: Com actually

828
01:36:56.100 --> 01:36:56.820
Ryan Mehta: That's longer

829
01:36:58.680 --> 01:37:09.690
Ryan Mehta: Okay, so we'll use this like test library URL, let's create our short link if failed perfect because of course

830
01:37:12.810 --> 01:37:13.890
Ryan Mehta: Perfect.

831
01:37:14.910 --> 01:37:17.670
Ryan Mehta: Anybody no easy way to get around course.

832
01:37:23.250 --> 01:37:25.260
Anybody know what I know one

833
01:37:27.030 --> 01:37:28.980
Ryan Mehta: Course anywhere.

834
01:37:32.910 --> 01:37:34.380
Ryan Mehta: Have you all seen this thing before.

835
01:37:36.780 --> 01:37:37.050
Ryan Mehta: No.

836
01:37:38.190 --> 01:37:39.180
Ryan Mehta: Of course, anywhere.

837
01:37:39.390 --> 01:37:51.120
Ryan Mehta: If there is a website that doesn't support course you can drop course anywhere at the front of the request and it makes it so this thing will now like be available.

838
01:37:52.290 --> 01:37:53.700
Ryan Mehta: Without course.

839
01:37:53.970 --> 01:38:00.180
Ron Yonker: So, so why exactly are we getting blocked off through Corps begin with

840
01:38:00.990 --> 01:38:03.300
Ryan Mehta: This website doesn't support course.

841
01:38:05.040 --> 01:38:07.620
Ryan Mehta: So it's made for back ends only pretty much

842
01:38:07.770 --> 01:38:08.340
OK.

843
01:38:11.010 --> 01:38:11.370
Ryan Mehta: OK.

844
01:38:11.430 --> 01:38:13.470
Ryan Mehta: Let's try it again. It's trying to get

845
01:38:15.210 --> 01:38:16.620
Ryan Mehta: We have our long URL.

846
01:38:17.910 --> 01:38:26.070
Ryan Mehta: Oh, plop it into the our shortener will create our URL. And this is console logged result.

847
01:38:27.930 --> 01:38:33.390
Ryan Mehta: So result URL and a shorter version of the URL.

848
01:38:35.700 --> 01:38:51.510
Ryan Mehta: I think what I want to do here is start extracting some of this fetch logic into its own file. We don't want this fetch logic here because it kind of clutters up the rest of our application. So before I get too much further. I'm going to make a services directory

849
01:38:53.730 --> 01:38:57.030
Ryan Mehta: And make a URL for

850
01:38:58.050 --> 01:39:06.510
Ryan Mehta: That JS file. This time it's a JS file, not a jazz X file because we don't have GFX in this file, it's just going to be our fetch call

851
01:39:08.070 --> 01:39:12.360
Ryan Mehta: And then let's make a short tender function.

852
01:39:13.980 --> 01:39:21.780
Ryan Mehta: And I'm just going to grab all of that fetch stuff and dropped it into our shortener function.

853
01:39:24.630 --> 01:39:25.680
And let's do

854
01:39:28.920 --> 01:39:29.400
This

855
01:39:48.270 --> 01:39:59.250
Ryan Mehta: Alright, so will fetch from this URL. It's going to be a POST request will send these headers will send this body will get the JSON back and then

856
01:40:00.990 --> 01:40:07.350
Ryan Mehta: I really just want this function to return the actual like URL that we got back

857
01:40:08.700 --> 01:40:18.480
Ryan Mehta: Which is inside of this result underscore URL thing. So I'm going to return JSON dot result underscore URL.

858
01:40:20.850 --> 01:40:27.030
Ryan Mehta: So now, whoever calls dysfunction will just get the short URL, not a JSON object.

859
01:40:28.620 --> 01:40:29.370
Ryan Mehta: That seemed good

860
01:40:31.800 --> 01:40:43.920
Ben Waples: Um, why don't you have to pass this us data URL like through the parameters like when you would be calling this shortener function or is it because you're using this function and the racked up, it just grabs them.

861
01:40:45.090 --> 01:40:47.880
Ryan Mehta: While we still haven't set that state that

862
01:40:48.330 --> 01:40:49.920
Ryan Mehta: Like, how do we actually set this

863
01:40:49.980 --> 01:40:52.440
Ryan Mehta: short URL to our react state.

864
01:40:53.610 --> 01:41:00.300
Ben Waples: Um, yeah, like when we use this function when we need to pass it the long URL from state and is it

865
01:41:00.810 --> 01:41:01.530
Ben Waples: I guess.

866
01:41:02.370 --> 01:41:04.290
Ron Yonker: How are you getting it.

867
01:41:04.740 --> 01:41:09.360
Ryan Mehta: From that file. Yeah. That's a good point. We need to actually send this somehow right

868
01:41:11.250 --> 01:41:14.400
Ron Yonker: St exactly like this add function.

709
01:19:16.110 --> 01:19:18.540
Ryan Mehta: Except if you pass it the same arguments.

710
01:19:20.970 --> 01:19:21.540
Ryan Mehta: It's

711
01:19:24.030 --> 01:19:26.040
Ryan Mehta: Not going to compute the addition

712
01:19:28.200 --> 01:19:35.490
Ryan Mehta: So if I run this bit of code right here. How many times do you all think we'll see we are here.

713
01:19:38.610 --> 01:19:39.030
Twice.

714
01:19:41.790 --> 01:19:42.300
One time

715
01:19:46.020 --> 01:19:46.830
Ryan Mehta: So we have

716
01:19:46.890 --> 01:19:47.400
Greg Mall: To watch

717
01:19:47.520 --> 01:19:48.000
it twice.

718
01:19:49.260 --> 01:19:50.010
Greg Mall: Two times

719
01:19:51.420 --> 01:19:52.860
Ryan Mehta: So what's lines will cause it

720
01:19:54.240 --> 01:19:56.790
Ryan Mehta: Well, this line, print it. We are here this

721
01:19:57.120 --> 01:19:58.470
Greg Mall: One and 34

722
01:19:59.820 --> 01:20:01.830
Ryan Mehta: So do you think know print here.

723
01:20:04.290 --> 01:20:05.190
Ryan Mehta: How about this line.

724
01:20:07.260 --> 01:20:09.210
Ryan Mehta: How about this line. Okay.

725
01:20:13.680 --> 01:20:14.400
Ryan Mehta: What do you think

726
01:20:14.670 --> 01:20:16.590
Jerud Moyer: I feel like 35 over again.

727
01:20:20.490 --> 01:20:20.940
Ryan Mehta: Yeah.

728
01:20:23.220 --> 01:20:26.580
Ryan Mehta: How many people think that 35 will print

729
01:20:28.560 --> 01:20:29.160
At least one

730
01:20:30.780 --> 01:20:32.070
Ryan Mehta: How many people have no idea.

731
01:20:34.140 --> 01:20:34.560
Ryan Mehta: Yes.

732
01:20:34.950 --> 01:20:37.380
Greg Mall: I think it will actually now looking at it, so I

733
01:20:40.200 --> 01:20:41.130
Ryan Mehta: Let's see what happens.

734
01:20:42.810 --> 01:20:46.260
Ryan Mehta: So we have 123 we are here.

735
01:20:48.480 --> 01:20:51.420
Ryan Mehta: One, two, and

736
01:20:52.650 --> 01:20:54.480
Three. We are here's

737
01:20:56.430 --> 01:21:00.630
Ryan Mehta: So just like conceptually without looking at our memo code.

738
01:21:02.700 --> 01:21:23.310
Ryan Mehta: If the arguments change, then we're going to rerun the actual add function. If the arguments don't change, then we're going to return the previous result. So this case, it's our first time running the function. So the arguments changed, right, they went from no arguments to some arguments.

739
01:21:24.480 --> 01:21:34.500
Ryan Mehta: Right. We went from arcs being or do I go from ours be no two arcs being

740
01:21:36.840 --> 01:21:38.520
Ryan Mehta: One and five.

741
01:21:39.900 --> 01:21:45.240
Ryan Mehta: Okay, so that means we have to print. Here we have to actually run our ad function.

742
01:21:46.620 --> 01:21:51.690
Ryan Mehta: Of this next time we go from ours being one in five.

743
01:21:52.830 --> 01:21:57.960
Ryan Mehta: And two are still being one in five.

744
01:21:59.340 --> 01:22:01.020
Ryan Mehta: Equivalent arguments. Right.

745
01:22:02.100 --> 01:22:13.170
Ryan Mehta: So our memo add remembers that we already got past one in five. It's not going to read compete the computation. It's not going to recall this ad function, it's going to return the previous result.

746
01:22:14.220 --> 01:22:20.640
Ryan Mehta: It never actually calls this function. It remembers that's actually where the word memo comes from. It's short from memo wise.

747
01:22:21.690 --> 01:22:26.070
Ryan Mehta: Memo is like memorize it memorized is the previous result.

748
01:22:27.210 --> 01:22:33.480
Ryan Mehta: So it already remembers that the previous results was six, so it doesn't compute the ad. It remembers.

749
01:22:34.650 --> 01:22:35.970
Ryan Mehta: We then get to this line.

750
01:22:37.350 --> 01:22:54.210
Ryan Mehta: Ours, this time is went from one in five to ours being two and six our memo ad doesn't remember anything about two and six. It's a brand new thing for it. So it has to reconfigure add

751
01:22:55.950 --> 01:22:58.920
Ryan Mehta: It re computes it which means we get this line again.

752
01:23:00.090 --> 01:23:11.910
Ryan Mehta: And then down here. Our Member wise function has a very short memory. It only remembers the previous time it got called so it goes from arms of two and six to

753
01:23:13.500 --> 01:23:17.190
Ryan Mehta: Our dogs have one in five again.

754
01:23:18.330 --> 01:23:26.700
Ryan Mehta: It doesn't remember what one in five equals, so it has to read compute this ad again that's giving us this slide.

755
01:23:27.210 --> 01:23:44.490
Ryan Mehta: So the only time we don't get our print is line 33 because we called one in five memo add one in five twice in a row. If we call this a bunch of times in a row the same thing would be true. It remembers the previous arguments and doesn't compute the ad

756
01:23:45.690 --> 01:23:51.540
Ryan Mehta: So we run this again. We still only get our three we are here.

757
01:23:53.010 --> 01:23:53.610
ryan Diffenbaugh: Because we

758
01:23:53.670 --> 01:23:54.390
Remembered

759
01:23:56.550 --> 01:23:59.940
ryan Diffenbaugh: So sort of going back to your first example like keeping the header.

760
01:24:00.990 --> 01:24:14.910
ryan Diffenbaugh: In memo, I don't really know the right like phrasing for it, since it's not going to change. There's nothing like if it keeps looking back at its previous states, it's just not going to change it just stays the same, no matter what state is

761
01:24:16.050 --> 01:24:16.680
Ryan Mehta: Exactly.

762
01:24:17.010 --> 01:24:18.000
Ryan Mehta: It rerun

763
01:24:18.090 --> 01:24:21.570
Ryan Mehta: It like gives back the previous rendering because I have to render

764
01:24:23.250 --> 01:24:32.550
Thomas Stussi: So in the case of like a simple add function probably like checking the arguments takes maybe even more processing power but

765
01:24:33.810 --> 01:24:38.160
Thomas Stussi: I could see it being useful for more complex functions. Right.

766
01:24:41.070 --> 01:24:41.310
Thomas Stussi: Yeah.

767
01:24:41.340 --> 01:24:42.060
Ryan Mehta: Totally like

768
01:24:42.090 --> 01:24:52.680
Ryan Mehta: For simple add function. It seems silly to do this sort of thing, right. This takes more computation than this does, but if it was like, I don't know.

769
01:24:54.660 --> 01:24:56.340
Ryan Mehta: Like, find the end

770
01:24:57.210 --> 01:25:04.230
Ryan Mehta: Digit and pie or something, then it might be super important or find the enterprise number

771
01:25:05.610 --> 01:25:12.420
Ryan Mehta: Those types of things are very complicated and take a really long time. So having some sort of memorization would be really important

772
01:25:17.550 --> 01:25:21.090
Ryan Mehta: So looking back at our memo function. What is happening here.

773
01:25:22.830 --> 01:25:44.220
Ryan Mehta: At the top line six and seven we're restoring the previous result and the previous arcs previous result is the result of calling our ad function. So in the case of one in five previous result is set equal to six and previous ours is set equal to one in five.

774
01:25:45.720 --> 01:25:45.960
Ryan Mehta: OK.

775
01:25:47.130 --> 01:25:50.760
Ryan Mehta: So the previous results that we had in the previous arcs that we had

776
01:25:52.140 --> 01:25:57.540
Ryan Mehta: Where they're going to return a function that should behave like our original function like our add function.

777
01:25:59.640 --> 01:26:20.250
Ryan Mehta: Inside of this function we're going to check. Do we have previous arguments do our previous arguments have the same length as our current arguments in does every previous argument match our current arguments. So in the case of this. We're checking does one equal one does five equal five

778
01:26:21.570 --> 01:26:29.430
Ryan Mehta: In the case of our two and six. We're saying does one equal to and this five equals six. In that case, both are incorrect. So

779
01:26:30.930 --> 01:26:42.510
Ryan Mehta: Based on that, we either return the previous result if the arguments are the same, or we Pre compute our previous result we re compute our result based on our current arguments.

780
01:26:43.020 --> 01:26:50.580
Ryan Mehta: We set previous result to the new result we set previous arguments to our current arguments and we return the new results.

781
01:26:52.500 --> 01:26:54.360
Ryan Mehta: That's what our memo ization function.

782
01:26:55.920 --> 01:26:56.520
Is doing

783
01:27:00.540 --> 01:27:02.040
Ryan Mehta: So little code, but so powerful.

784
01:27:03.930 --> 01:27:05.550
Ryan Mehta: very dense CODE, THOUGH. Also,

785
01:27:11.970 --> 01:27:17.610
Ryan Mehta: I want to ask somebody, this question and an interview to write a memo ization function.

786
01:27:19.230 --> 01:27:19.710
Ryan Mehta: And

787
01:27:21.330 --> 01:27:23.970
Ryan Mehta: They can do it, but they still got the job. So

788
01:27:25.680 --> 01:27:26.370
Ryan Mehta: Helps

789
01:27:35.760 --> 01:27:39.480
Ryan Mehta: Such a bad interview question, I shouldn't have asked that question in an interview.

790
01:27:41.040 --> 01:27:42.990
Jerud Moyer: A bit harder than you would normally get.

791
01:27:44.760 --> 01:27:45.360
Ryan Mehta: Um,

792
01:27:46.620 --> 01:27:54.840
Ryan Mehta: Yeah, for sure. I mean, it's the type of question where the person has to have thought about memorization beforehand to have gotten it right

793
01:27:56.430 --> 01:28:06.660
Ryan Mehta: I kind of asked it, like it wasn't my plan to ask the question, but that person was talking about memorization, so I thought maybe they had thought about it, but they just hadn't

794
01:28:08.370 --> 01:28:10.830
Ryan Mehta: So it was it was a bad question to ask.

795
01:28:19.350 --> 01:28:19.980
Ryan Mehta: Alright.

796
01:28:21.450 --> 01:28:34.950
Ryan Mehta: This is like one of the big keys to react performance optimization, though, there's a few different strategies for react performance optimization that you will see inside of their docs.

797
01:28:36.180 --> 01:28:43.350
Ryan Mehta: One of them is the one that we just showed the memo thing. Another one is

798
01:28:44.790 --> 01:28:53.340
Ryan Mehta: A bunch of these other things. So this use callback cook you'll come across this at some point in your life and this use memo hook

799
01:28:53.820 --> 01:29:05.790
Ryan Mehta: They both use a memo ization to improve react performance. So everything that you're doing to improve react performance ends up coming back to memorization, a function, similar to this.

800
01:29:08.910 --> 01:29:18.510
Ryan Mehta: And they're all just slightly different flavors of that. So use callback, it returns and memorized callback for performance optimization reasons.

801
01:29:20.310 --> 01:29:25.200
Ryan Mehta: Use memo returns a memorized value for performance optimization reasons.

802
01:29:26.520 --> 01:29:37.440
Ryan Mehta: Memo returns a member wise component for performance optimization reasons everything in React is returned a memo is something for performance optimization reasons so

803
01:29:39.120 --> 01:29:46.530
Ryan Mehta: The foundational piece of that whole thing is how does memorization work and why would I use it in certain cases.

804
01:29:47.190 --> 01:29:57.000
Ryan Mehta: So I think for you all going forward until you actually need this memo ization somewhere. It's better to spend some time understanding how nimble ization is working.

805
01:29:57.450 --> 01:30:02.730
Ryan Mehta: So you can like figure out in the future when you need memorization and when you don't

806
01:30:03.240 --> 01:30:14.820
Ryan Mehta: There's gonna be lots of times, probably in your career where somebody will think that they need memorization someplace and you might be the person that says actually memorization will do nothing to solve this problem.

807
01:30:17.280 --> 01:30:24.270
Ryan Mehta: Or you'll be the person they're like, I don't know how we can fix this. It's like so slow. Like, oh, this is a great case for memorization.

808
01:30:27.870 --> 01:30:41.190
ryan Diffenbaugh: Once we sort of get a grasp on like the syntax, would it be like best practice to wrap stuff like our headers and things that we assume won't change or memorize it, just like sort of getting out of doing the

809
01:30:43.200 --> 01:30:44.040
ryan Diffenbaugh: Necessary do like

810
01:30:44.970 --> 01:30:46.140
ryan Diffenbaugh: A sprint an MVP.

811
01:30:47.550 --> 01:30:49.140
Ryan Mehta: I would almost never do.

812
01:30:49.140 --> 01:30:54.000
Ryan Mehta: It for like quick applications and I would never do it unless I had a good reason to

813
01:30:56.340 --> 01:31:06.690
Ryan Mehta: Like this header, for example, is probably easier to render than the memo ization is to check, kind of like the ad function. So you might actually be hurting yourself by wrapping it

814
01:31:08.850 --> 01:31:16.650
Ryan Mehta: So yeah, I would only throw this memo there if I noticed something was slow and thought memo could help with the slowness

815
01:31:22.200 --> 01:31:23.670
Ryan Mehta: All right, let's take a break.

816
01:31:24.810 --> 01:31:30.660
Ryan Mehta: Let's come back at 1110 and we can start this build will show you all this bill.

817
01:31:35.010 --> 01:31:36.210
Sounds good. Sounds good.

an Mehta: Let's make our

518
01:05:30.840 --> 01:05:31.320
Ryan Mehta: Repo

519
01:05:33.150 --> 01:05:36.360
Ryan Mehta: So we're going to create a new application.

520
01:05:41.010 --> 01:05:42.390
Ryan Mehta: Called this one.

521
01:05:49.140 --> 01:05:49.710
Ryan Mehta: Alright.

522
01:05:52.260 --> 01:06:04.260
Ryan Mehta: So for the first little chunk of this. I don't want to worry about the router to begin with. I just want to make sure that we can get a list of things on the page. So our first goal is to write

523
01:06:07.050 --> 01:06:07.800
Ryan Mehta: A

524
01:06:09.480 --> 01:06:11.130
Ryan Mehta: Paper make a page.

525
01:06:12.750 --> 01:06:19.350
Ryan Mehta: That can display a list of Animal Crossing villagers. So we're going to have

526
01:06:21.270 --> 01:06:27.300
Ryan Mehta: The names of our Animal Crossing villagers probably a name and an image of the

527
01:06:28.860 --> 01:06:30.240
Ryan Mehta: crosser villager

528
01:06:32.790 --> 01:06:33.630
Ryan Mehta: Image

529
01:06:35.190 --> 01:06:51.660
Ryan Mehta: When we look at this page, there's two presentational components that I can think of for this. The first one is our actual list of things will call this our bill your list.

530
01:06:53.280 --> 01:07:01.320
Ryan Mehta: And the other one is the villager item right this individual villager item will call this one villager

531
01:07:05.100 --> 01:07:05.970
That makes sense.

532
01:07:07.560 --> 01:07:24.630
Ryan Mehta: Surrounding this entire thing is going to be our container. So our container is going to be responsible for grabbing the data. These two presentational components will just know how to display a lift an array of villagers and a single villager will call this one all

533
01:07:25.800 --> 01:07:26.610
Ryan Mehta: Villagers

534
01:07:29.670 --> 01:07:46.200
Ryan Mehta: All villagers is going to have a few pieces of state that it deals with it needs to have a villagers array. An array of villagers that effect from the API. We're going to have it have two other pieces of state also loading.

535
01:07:49.200 --> 01:07:50.160
Ryan Mehta: And error.

536
01:07:52.260 --> 01:08:01.200
Ryan Mehta: So if we fail the facts from the API, we should set this errors state and display some sort of error message while we're still waiting for the API to

537
01:08:01.620 --> 01:08:14.100
Ryan Mehta: Return. Give us a result we're going to display some sort of loading message. And then once we get our way array of villagers, we will display that array of villagers here.

538
01:08:17.160 --> 01:08:31.140
Ryan Mehta: As it turns out, because we're adding these other two pieces of state, we really have two other hidden components that we didn't realize when we first looked at this, we have our villager component

539
01:08:32.520 --> 01:08:47.220
Ryan Mehta: We have our fill your list component, but we also need a component that can display our loading spinner or whatever it is. And then also one that can display an error.

540
01:08:48.780 --> 01:08:56.700
Ryan Mehta: message for us. So these are going to be our three or four presentational components that will create and our one

541
01:08:58.290 --> 01:08:59.010
Ryan Mehta: Container

542
01:09:02.430 --> 01:09:11.490
Ryan Mehta: We don't need to pass any like handle change or handle submit functions anywhere. So we're not going to have any of those types of methods on this container.

543
01:09:12.870 --> 01:09:18.030
Ryan Mehta: We are going to use one other thing, though, we're going to have a component

544
01:09:20.400 --> 01:09:21.450
Component.

545
01:09:23.100 --> 01:09:25.050
Did mount

546
01:09:26.640 --> 01:09:28.950
Ryan Mehta: You all remember the react life cycles.

547
01:09:30.270 --> 01:09:34.980
Ryan Mehta: So there's component did mount component will update and component will amount

548
01:09:35.970 --> 01:09:48.810
Ryan Mehta: Component did MT is a method or a function that gets invoked when our component first renders to Miss Green when it's first drawn when its first drama The screen that's when we're going to want to fetch our list of villagers.

549
01:09:52.470 --> 01:09:52.950
Ryan Mehta: Okay.

550
01:09:54.300 --> 01:09:59.940
Ryan Mehta: So let's start off with just this plan after we execute this will figure out how we can

551
01:10:01.050 --> 01:10:04.050
Ryan Mehta: Add the router and how we can add our detail page.

552
01:10:06.180 --> 01:10:09.480
Thomas Stussi: Are all of these presentational components siblings.

553
01:10:10.890 --> 01:10:13.350
Ryan Mehta: They're all the siblings. Yeah.

554
01:10:14.160 --> 01:10:19.920
Ryan Mehta: Well actually villager is a child of villager list. Okay.

555
01:10:21.450 --> 01:10:24.690
Ryan Mehta: And then loading an error, our siblings with villager list.

556
01:10:25.260 --> 01:10:26.190
Ryan Mehta: So we can actually

557
01:10:29.280 --> 01:10:30.510
Ryan Mehta: Draw this sort of thing.

558
01:10:32.340 --> 01:10:34.200
Ryan Mehta: Let's use this color.

559
01:10:37.620 --> 01:10:45.240
Ryan Mehta: Lectures will be at the very top of this and then it's going to have loading as a child.

560
01:10:48.960 --> 01:10:50.790
Ryan Mehta: It also have error as a child.

561
01:10:52.980 --> 01:10:53.730
Ryan Mehta: And

562
01:10:58.530 --> 01:10:59.430
Ryan Mehta: Build your list.

563
01:11:00.630 --> 01:11:04.950
Ryan Mehta: And then villager list will have villager as a child.

564
01:11:13.500 --> 01:11:21.450
Ben Waples: Is it convention to do villager listen villager or villagers and villager like plural and singular

565
01:11:21.930 --> 01:11:24.510
Ryan Mehta: I mean, I usually do villagers.

566
01:11:24.660 --> 01:11:37.560
Ryan Mehta: And villager traditionally but I stopped doing that because it can be hard to notice an asset, the end of stuff. So it gets confusing sometimes. So I've started

567
01:11:39.330 --> 01:11:42.630
Ryan Mehta: Putting list at the end because that's a much better visual indicator

568
01:11:51.390 --> 01:11:57.240
Ryan Mehta: All right, let's take a break. Let's come back at 1045 and execute this plan.

569
01:12:08.220 --> 01:12:08.970
Ryan Mehta: Let's continue.

570
01:12:20.130 --> 01:12:24.390
Ryan Mehta: We have a lot to do. I think it's a little bit too much to do in one little slice

571
01:12:25.860 --> 01:12:31.980
Ryan Mehta: So I think we should break this up into a few different slices. I'm going to start off with.

572
01:12:35.400 --> 01:12:49.200
Ryan Mehta: I'm going to start off with the loading piece. Seems like a bit of a weird place to start but it's our default state right with the component first mounts onto the page, we should see this loading spinner.

573
01:12:50.130 --> 01:13:02.850
Ryan Mehta: Because we don't have any villagers yet. So I'm going to start off with our loading presentational components and then write our container and make sure that we can see our loading spinner loading at the beginning.

574
01:13:04.920 --> 01:13:05.520
Ryan Mehta: So,

575
01:13:06.570 --> 01:13:19.470
Ryan Mehta: I'm going to under components, create a directory called loading and inside of loading. We're going to make a loading J SX file. This is where our loading spinner.

576
01:13:20.490 --> 01:13:21.150
Ryan Mehta: Will live

577
01:13:22.260 --> 01:13:30.630
Ryan Mehta: Are loading spinner has nothing to do with state. It's a purely presentational components. So we're going to import react from react.

578
01:13:32.160 --> 01:13:38.430
Ryan Mehta: I don't think we'll need any props for our loading component. It's always going to display the same thing, some sort of loading spinner.

579
01:13:39.510 --> 01:13:44.400
Ryan Mehta: If anybody has anything that does anybody have an image that we can use for loading spinner.

580
01:13:54.780 --> 01:13:55.230
ryan Diffenbaugh: No.

581
01:13:55.320 --> 01:13:55.800
Okay.

582
01:13:56.970 --> 01:14:00.480
Ryan Mehta: Let's see if we can find one, and no

583
01:14:03.540 --> 01:14:05.190
Ryan Mehta: Something with some sort of movement.

584
01:14:10.980 --> 01:14:12.630
Ryan Mehta: I don't know any of these characters.

585
01:14:14.220 --> 01:14:15.210
Ryan Mehta: Okay, this leaf.

586
01:14:17.400 --> 01:14:20.790
Ryan Mehta: That seems like the perfect loading screen.

587
01:14:24.210 --> 01:14:25.740
Ryan Mehta: Yeah, that's so perfect.

588
01:14:26.970 --> 01:14:31.230
Ryan Mehta: Alright, so we will have an image source.

589
01:14:32.820 --> 01:14:36.150
Ryan Mehta: And we will have that as our loading screen.

590
01:14:37.620 --> 01:14:41.670
Ryan Mehta: To begin with, let's just try to put it in app JS and see what it looks like.

591
01:14:43.500 --> 01:14:52.770
Ryan Mehta: So we'll have our loading presentational components. Let's start our application, go back to our browser.

592
01:14:54.180 --> 01:14:54.960
And

593
01:14:57.420 --> 01:14:59.310
Ryan Mehta: Okay, it's gigantic

594
01:15:00.870 --> 01:15:04.380
Ryan Mehta: We should probably make it smaller, with some CSS.

595
01:15:06.030 --> 01:15:28.290
Ryan Mehta: Let's do that. So we have yet to really great CSS in our react applications, how I usually approach CSS is I have a CSS file per component. And I think of that CSS file purely in terms of the component. So I'm going to add a loading dot CSS file.

596
01:15:31.020 --> 01:15:42.660
Ryan Mehta: Let's put it side by side with our actual component and then we're going to have a class, I usually made my class, the same as my components name loading in this case.

597
01:15:43.890 --> 01:15:48.750
Ryan Mehta: And then on the right hand side we're going to import styles from

598
01:15:49.920 --> 01:15:50.520
Ryan Mehta: Loading

599
01:15:53.880 --> 01:15:57.150
Ryan Mehta: And we can apply that class name to our image.

600
01:16:00.750 --> 01:16:01.440
Ryan Mehta: Like so.

601
01:16:04.440 --> 01:16:06.090
Brooke Perkins (she/her): Why is that fast.

602
01:16:07.680 --> 01:16:13.530
Brooke Perkins (she/her): What is so I see it's a different icon than what usually happens for me when I do a dot CSS file.

603
01:16:14.010 --> 01:16:17.400
Ryan Mehta: Yep. Totally. So I'm using the SAS like

604
01:16:19.770 --> 01:16:21.240
Ryan Mehta: CSS file type

605
01:16:21.360 --> 01:16:24.150
Ryan Mehta: Because I'm going to use some nesting in here.

606
01:16:25.470 --> 01:16:25.770
Ryan Mehta: Okay.

607
01:16:26.250 --> 01:16:31.320
Brooke Perkins (she/her): And do you have to do anything to make it use SAS rather than something else.

608
01:16:31.890 --> 01:16:34.410
Ryan Mehta: You do. So inside of settings.

609
01:16:37.980 --> 01:16:42.750
Ryan Mehta: So let me show you all so settings and then you click this like

610
01:16:44.520 --> 01:16:46.080
Ryan Mehta: settings to JSON.

611
01:16:47.100 --> 01:16:48.840
Ryan Mehta: Open settings and JSON button.

612
01:16:51.060 --> 01:17:00.840
Ryan Mehta: And then over here, you add this file associations star dot CSS to SPSS I'll post this in

613
01:17:06.780 --> 01:17:14.370
Ryan Mehta: And that will make it so whenever you open up a CSS file. It uses the Sass file type for it.

614
01:17:15.390 --> 01:17:19.080
Brooke Perkins (she/her): And why are you using SAS. Again, you said because you're doing nesting.

615
01:17:19.800 --> 01:17:22.140
Ryan Mehta: Yep, so eventually we're going to be doing stuff.

616
01:17:22.140 --> 01:17:22.620
Like

617
01:17:24.300 --> 01:17:25.860
Ryan Mehta: Like nested CSS.

618
01:17:27.630 --> 01:17:29.460
Ryan Mehta: Instead of doing like dot

619
01:17:29.550 --> 01:17:32.790
Ryan Mehta: Loading img you can actually mess. These

620
01:17:32.790 --> 01:17:33.360
Things.

621
01:17:34.590 --> 01:17:34.860
Brooke Perkins (she/her): Well,

622
01:17:36.720 --> 01:17:39.630
ryan Diffenbaugh: Is there any reason not to use SAS

623
01:17:42.000 --> 01:17:42.300
Ryan Mehta: Nope.

624
01:17:47.280 --> 01:17:49.440
Ryan Mehta: Alright, a few other things with this.

625
01:17:50.760 --> 01:17:57.690
Ryan Mehta: By default, our web pack is using CSS modules connects you see that in our web pack config.

626
01:17:59.730 --> 01:18:11.880
Ryan Mehta: So under our CSS loader. We're using CSS modules. What that means is that each of these classes that we associate with one of our components.

627
01:18:12.780 --> 01:18:22.740
Ryan Mehta: Get given a random value. Once it gets compiled through web pack so even though we've called this class loading we go and actually look at the browser.

628
01:18:24.120 --> 01:18:28.470
Ryan Mehta: Here's that class that we associated with our image at some random string.

629
01:18:30.120 --> 01:18:40.920
Ryan Mehta: The whole point of this is to avoid conflicting CSS. So if you have two pieces of CSS with the same class name those pieces of CSS will conflict.

630
01:18:41.310 --> 01:18:50.400
Ryan Mehta: What we want to do is start thinking about our CSS as modules. This CSS only applies to this component and nothing else on the screen.

631
01:18:51.030 --> 01:19:02.820
Ryan Mehta: So we build up our CSS as individual components, instead of thinking about our entire screen and then trying to style the entire screen restyling individual components.

632
01:19:03.300 --> 01:19:18.420
Ryan Mehta: This is what makes it us able to just drop a component anywhere on our page and it will always come with its styling. We don't have to style it for the page to the component comes pre styled with its module CSS over here.

633
01:19:20.340 --> 01:19:33.720
Ryan Mehta: So are loading here, we need to do styles dot loading because we don't actually know what web pack is going to give for the random class name. So this gives us that random class name that web pack picked for us.

634
01:19:36.300 --> 01:19:46.710
Ryan Mehta: And then we could just write our CSS pretty normally over here, let's say that our loading image has a maths with of 250 pixels.

635
01:19:48.840 --> 01:19:54.420
Ryan Mehta: Looks a bit better. Or let's make it. Let's use Rams instead like three red

636
01:19:57.210 --> 01:19:57.720
That's

637
01:19:58.830 --> 01:19:59.580
Ryan Mehta: Really small

638
01:20:01.770 --> 01:20:02.580
Ryan Mehta: 20 RAM.

639
01:20:04.710 --> 01:20:05.850
Ryan Mehta: That's so perfect.

640
01:20:08.040 --> 01:20:14.520
Ryan Mehta: I kind of want. I don't know about you, all but I kind of want this thing in the middle of the page also. So I think we're

641
01:20:15.090 --> 01:20:15.990
Annalise Murphy: In the middle

642
01:20:16.860 --> 01:20:17.850
Ryan Mehta: Margin auto

643
01:20:17.910 --> 01:20:18.420
Ryan Mehta: Right, or

644
01:20:18.450 --> 01:20:20.340
Ryan Mehta: Text align center.

645
01:20:25.320 --> 01:20:26.070
Ben Waples: Margin auto

646
01:20:27.720 --> 01:20:28.230
Ryan Mehta: That's right.

647
01:20:29.760 --> 01:20:30.330
Ryan Mehta: Do we have to

648
01:20:31.410 --> 01:20:35.820
Ryan Mehta: This way like walk display block margin auto

649
01:20:36.840 --> 01:20:37.380
Ryan Mehta: Good.

650
01:20:39.000 --> 01:20:41.550
Ryan Mehta: Let's keep display block.

651
01:20:45.780 --> 01:20:46.290
Ryan Mehta: Alright.

652
01:20:47.310 --> 01:20:52.740
Ryan Mehta: And then our loading image just hangs nicely here in the middle of the page.

653
01:20:58.890 --> 01:21:03.600
Ryan Mehta: All right. There's our little loading spinner loading screen anyways.

654
01:21:04.980 --> 01:21:13.020
Ryan Mehta: Let's add it to a container. So let's actually like do a full slice from presentational component to container.

655
01:21:16.200 --> 01:21:18.240
Ryan Mehta: I'm going to make another directory

656
01:21:19.320 --> 01:21:25.320
Ryan Mehta: Side by side with components called containers and inside of containers. I'm going to make a

657
01:21:26.760 --> 01:21:27.900
Ryan Mehta: villager
47
01:31:52.440 --> 01:31:53.640
Function component

748
01:31:55.290 --> 01:32:00.150
Ryan Mehta: And we can give it prop types we want. Let's give it a coloring book.

749
01:32:02.190 --> 01:32:10.830
Ryan Mehta: Same as our class based component. Our coloring book props are going to be an empty fail because we don't expect any crops.

750
01:32:13.320 --> 01:32:14.280
Ryan Mehta: Look good so far.

751
01:32:16.410 --> 01:32:21.090
Ryan Mehta: All right, we have three pieces of state, we have our SVG say

752
01:32:24.000 --> 01:32:28.860
Ryan Mehta: Will you state and we'll start off as an empty string.

753
01:32:36.810 --> 01:32:38.070
Ryan Mehta: We will also

754
01:32:39.090 --> 01:32:49.260
Ryan Mehta: Have an SVG URL set as well. And this will also you state and start off as an empty string and color.

755
01:32:54.510 --> 01:32:57.480
Ryan Mehta: We don't have to specify any types here.

756
01:32:59.490 --> 01:33:00.630
start this off as

757
01:33:01.980 --> 01:33:02.610
Crack

758
01:33:04.080 --> 01:33:11.400
Ryan Mehta: Because they're all handled by inference for us. So because we put strings inside of these use states.

759
01:33:12.480 --> 01:33:19.980
Ryan Mehta: TypeScript knows that SVG SVG URL and color URL strings, if we wanted to, we could be a bit explicit

760
01:33:21.030 --> 01:33:29.640
Ryan Mehta: Set state are you state is a generic function. You can tell it what type we are using as a generic here also.

761
01:33:34.350 --> 01:33:37.170
Ryan Mehta: In our case, that is all handled by imprints for us.

762
01:33:41.670 --> 01:33:45.150
Ryan Mehta: And then down below. We will return

763
01:33:48.870 --> 01:33:50.100
Ryan Mehta: Controls.

764
01:33:53.430 --> 01:33:59.100
Ryan Mehta: Our display controls needs STG URL.

765
01:34:03.630 --> 01:34:04.080
Ryan Mehta: Color

766
01:34:07.800 --> 01:34:10.050
Ryan Mehta: And display needs SVG.

767
01:34:12.000 --> 01:34:19.710
Ryan Mehta: And both of these need those change functions. So up above here we will define I can handle change function.

768
01:34:21.030 --> 01:34:25.590
Ryan Mehta: This handle change function is going to look identical to the class one, for the most part.

769
01:34:26.640 --> 01:34:35.310
Ryan Mehta: We get an event. The event is a React change event on an HTML input elements.

770
01:34:37.020 --> 01:34:40.080
Ryan Mehta: Off of this event. We can D structure current target.

771
01:34:41.370 --> 01:34:54.660
Ryan Mehta: And then in the body. We can say if current target name is STG URL, we will set SVG URL to target value.

772
01:34:56.910 --> 01:35:00.900
Ryan Mehta: And then it current target that name is Tyler

773
01:35:08.130 --> 01:35:18.600
Ryan Mehta: So very similar to the handle change function that we had before the TypeScript depart is defining what this event type is to change event on an HTML input.

774
01:35:20.370 --> 01:35:26.490
Ryan Mehta: And then now to our controls, we can pass it. Our handle change Candler

775
01:35:27.600 --> 01:35:32.520
Ryan Mehta: We also need to define a candle draw and color.

776
01:35:35.010 --> 01:35:46.290
Ryan Mehta: are handled draw also gets an event it's event, though, is a mouse event on click the HTML element that they would click on is an output element.

777
01:35:47.520 --> 01:36:07.170
Ryan Mehta: Off of this we can D structure target the actual thing that they clicked on and then we will cast target as an SVG path element you tell TypeScript that we're very sure that this is a path element, and then we'll fill it with color.

778
01:36:08.700 --> 01:36:11.490
Ryan Mehta: And then we will pass on draw

779
01:36:12.630 --> 01:36:13.290
Ryan Mehta: And draw

780
01:36:17.910 --> 01:36:27.780
Ryan Mehta: Where did I forget. Okay. Yes. So this is it for the most part, the one last thing that we need to do is our use effect, we need to affect our SVG.

781
01:36:28.830 --> 01:36:32.490
Ryan Mehta: So we will construct a use effect.

782
01:36:36.030 --> 01:36:40.950
Ryan Mehta: We want our use effective trigger whenever SVG URL changes.

783
01:36:42.630 --> 01:36:56.820
Ryan Mehta: And whenever SVG URL changes. We're going to fetch from SVG URL. We're then going to get a response or parse the responses text will get back that text and we'll set SVG.

784
01:36:58.290 --> 01:37:00.570
With that text that we get back

785
01:37:01.890 --> 01:37:08.880
Ryan Mehta: Okay, so instead of our component did update. We have a user fact that triggers whenever SVG URL updates.

786
01:37:11.190 --> 01:37:23.640
Ryan Mehta: On nothing TypeScript D like pretty much here or down here. It's only the events that are TypeScript, TypeScript it out these function components, just kind of cool.

787
01:37:24.960 --> 01:37:26.520
Ryan Mehta: I think it all still works.

788
01:37:28.200 --> 01:37:28.380
Yeah.

789
01:37:31.290 --> 01:37:31.590
Cool.

790
01:37:34.050 --> 01:37:37.260
So this is the function component way.

791
01:37:41.250 --> 01:37:41.970
Look good

792
01:37:47.430 --> 01:37:49.800
Ryan Mehta: All right. One last one last

793
01:37:51.930 --> 01:37:53.220
Ryan Mehta: One last way.

794
01:37:55.140 --> 01:38:01.620
Ryan Mehta: Custom hooks. I'm going to make a hooks directory and in hooks. I will make a coloring

795
01:38:02.730 --> 01:38:04.830
Ryan Mehta: book.ts via

796
01:38:06.090 --> 01:38:07.890
Ryan Mehta: Let's split it out to the side.

797
01:38:09.390 --> 01:38:19.500
Ryan Mehta: I'm going to copy all of this function component stuff here comment it so you all can refer to it later. Paste it up here and then delete.

798
01:38:22.500 --> 01:38:30.060
Ryan Mehta: I'm going to kind of delete all this stuff. So we're going to be migrating all of this stuff into our custom hook essentially

799
01:38:31.320 --> 01:38:36.390
Ryan Mehta: We're going to export cost us coloring

800
01:38:40.860 --> 01:38:41.430
Ryan Mehta: So,

801
01:38:43.020 --> 01:38:55.200
Ryan Mehta: Our coloring book is going to return some values, it's going to return an SVG an SVG URL, a color a handle change and to handle draw

802
01:38:56.250 --> 01:39:01.530
Ryan Mehta: So up above will say type coloring book.

803
01:39:03.180 --> 01:39:12.870
Ryan Mehta: Coloring Book returns SVG, which is a string as the URL, which is also a string, it returns color.

804
01:39:15.360 --> 01:39:19.020
Ryan Mehta: It returns a handle change function.

805
01:39:20.130 --> 01:39:27.090
Ryan Mehta: This handle change function takes an event which is a React change event.

806
01:39:28.230 --> 01:39:31.110
Ryan Mehta: On an HTML input element.

807
01:39:34.890 --> 01:39:35.670
Ryan Mehta: We make this

808
01:39:37.500 --> 01:39:41.310
Ryan Mehta: Bigger. It also returns a handle draw

809
01:39:44.970 --> 01:39:53.490
Ryan Mehta: And that also takes an event. This time the event is a mouse event on an HTML output elements.

810
01:39:56.610 --> 01:39:59.160
Ryan Mehta: So we're specifying what our hope is going to return.

811
01:40:00.330 --> 01:40:03.630
Ryan Mehta: And then we'll put this coloring book here.

812
01:40:14.100 --> 01:40:27.720
Ryan Mehta: Right, so we're specifying the stuff that are hook overturned here and then we're just going to migrate all of this code that used to live in our function component over to our custom hook

813
01:40:29.370 --> 01:40:31.440
Ryan Mehta: Make sure we can put us state.

814
01:40:35.310 --> 01:40:48.990
Ryan Mehta: And then at the bottom of this component, we're going to return an object that looks like a coloring book so SVG SVG URL color and these two functions st Jean STG

815
01:40:50.010 --> 01:40:50.820
Ryan Mehta: Color

816
01:40:52.470 --> 01:40:53.910
Ryan Mehta: Change and handle

817
01:40:57.720 --> 01:41:11.880
Ryan Mehta: And again, the, the difference between react and TypeScript here are very, very small right if we were just looking at this bottom section here, we would have very little idea that we're in TypeScript. There's a few types.

818
01:41:13.350 --> 01:41:23.550
Ryan Mehta: A few type stuff. But for the most part, there's no types, the only type that we have here is the return value of our hook specifying that our hook returns

819
01:41:25.050 --> 01:41:28.560
Ryan Mehta: The things that we would normally returned in our JavaScript custom hook anyways.

820
01:41:30.210 --> 01:41:31.560
Ryan Mehta: On the right hand side.

821
01:41:34.890 --> 01:41:37.020
Ryan Mehta: We can use our

822
01:41:38.310 --> 01:41:46.680
Ryan Mehta: Coloring Book custom hook and the structure STG STG URL color.

823
01:41:48.360 --> 01:41:49.980
Ryan Mehta: Change and candy draw

824
01:41:51.210 --> 01:41:57.570
Ryan Mehta: All from our custom hook and that is the third. The third way.

825
01:41:58.830 --> 01:42:01.230
Ryan Mehta: I think it all still works, we can double check.

826
01:42:04.440 --> 01:42:05.850
Ryan Mehta: Let's select read

827
01:42:07.860 --> 01:42:08.610
Ryan Mehta: The blue

828
01:42:10.170 --> 01:42:10.500
Okay.

829
01:42:15.570 --> 01:42:23.190
Ryan Mehta: So I think, at least in React, the big things to take away is that the types do show up.

830
01:42:25.110 --> 01:42:40.140
Ryan Mehta: But it's not like we're writing a brand in a Brand brand new language. There's so much stuff that carries over from JavaScript, which is why TypeScript is such a nice natural step from a dynamically typed language into a static Lee typed language.

831
01:42:40.950 --> 01:42:44.550
Ryan Mehta: And most of the time we're writing code, we feel like we're writing JavaScript.

832
01:42:45.210 --> 01:42:55.920
Ryan Mehta: Every once in a while we specify types which are just like little protections that we're setting up for ourselves. These are all things that we have in our mind. Anyways, as we're writing JavaScript, right.

833
01:42:56.550 --> 01:43:07.890
Ryan Mehta: Like when I'm writing this hook. I always know or like I have in the back of my head that I'm going to be returning an object that looks like this. TypeScript is just forcing me to be explicit about that.

834
01:43:11.100 --> 01:43:15.060
Ryan Mehta: The hardest part I think with the react type system are these events.

835
01:43:18.090 --> 01:43:29.910
Ryan Mehta: So you need to like be cognizant about of the event that you're going to be handling. Is it a change event. Is it a mouse event. What type of thing am I changing or clicking on

836
01:43:32.820 --> 01:43:38.520
Ryan Mehta: But besides that, the type show very few other places or event handlers.

837
01:43:39.660 --> 01:43:49.620
Ryan Mehta: I will return types from custom hooks, the props that we expect to receive and this state in a class component that we expect to define

838
01:43:55.560 --> 01:43:58.440
Ryan Mehta: The next hardest part and this is like less hard

839
01:44:02.130 --> 01:44:05.850
Ryan Mehta: Yeah, less hard and more like something to be constantly

840
01:44:07.470 --> 01:44:13.770
Ryan Mehta: On top of is making sure that you give these things good type names and don't let that degrade

841
01:44:14.790 --> 01:44:23.490
Ryan Mehta: So make sure you're being consistent like Mike props always the name of the component and props afterwards if you start degrading on these

842
01:44:24.570 --> 01:44:38.760
Ryan Mehta: It starts getting harder and harder to come up with names for these things. There's so many more names that we have to come up with in TypeScript, because we have to name our prop things we have to name our return values.

843
01:44:40.230 --> 01:44:56.550
Ryan Mehta: So if I accidentally called this thing just coloring book. Now we have two types in my application called coloring book which is very, very confusing because one has nothing in it. And one has a bunch of stuff in it which type of my dealing with that which times

844
01:44:57.840 --> 01:45:05.400
Ryan Mehta: So if you start running into those issues. It's because you need to rethink how you're naming your types.

845
01:45:08.520 --> 01:45:09.900
Ryan Mehta: One more piece to organize

846
01:45:13.050 --> 01:45:17.520
Ryan Mehta: All right, any questions about any of this TypeScript stuff.

847
01:45:19.380 --> 01:45:22.410
Easton Gorishek: Hey Ryan, I have a couple of questions real quick.

848
01:45:22.650 --> 01:45:23.370
Ryan Mehta: Yeah what's up.

849
01:45:23.640 --> 01:45:30.900
Easton Gorishek: I'm where you did I, you may have explained, I may have missed it on target as SVG.

850
01:45:33.480 --> 01:45:34.620
Easton Gorishek: Within your hook.

851
01:45:37.680 --> 01:45:44.220
Easton Gorishek: It. Are you having this on 28. Are you having to specify that due to like the method say attribute, Phil.

852
01:45:45.210 --> 01:45:46.260
Ryan Mehta: Yeah, exactly.

853
01:45:46.560 --> 01:46:06.990
Ryan Mehta: So, exactly. Yeah. Because target by itself is just an event target. It doesn't really have any properties on it just has these things on it because TypeScript has no idea what kind of element we clicked on. So yeah, we specify that it is a path element. And that gives us access to this.

854
01:46:07.380 --> 01:46:18.030
Easton Gorishek: Suite and then my other question was like on the component style with like the generics and then you were specifying like the props and state does order matter on that.

855
01:46:20.070 --> 01:46:20.850
Ryan Mehta: Down.

856
01:46:21.810 --> 01:46:26.640
Easton Gorishek: The cloud component where you said coloring book props and coloring book state like

857
01:46:28.080 --> 01:46:31.200
Easton Gorishek: Is that order does order matter not matter.

858
01:46:31.590 --> 01:46:43.170
Ryan Mehta: It does matter. So the first one is always props and the second one is always state is only state. Yeah, you can always find these things out to, if you like, look at the TypeScript definition.

859
01:46:45.720 --> 01:46:51.300
Ryan Mehta: Yeah, perfect TypeScript definition that So P is for your profit assets for the state.

860
01:46:51.720 --> 01:46:52.410
Easton Gorishek: Okay, cool.

861
01:46:53.430 --> 01:46:54.150
Easton Gorishek: Awesome. Thank you.

862
01:47:00.150 --> 01:47:10.410
jasmin: Ryan, do you have an opinion on the best place to start if you're introducing TypeScript, or converting an existing project to TypeScript.

863
01:47:11.580 --> 01:47:15.390
Ryan Mehta: Yeah, I would probably start. Do you are using prop types right now.

864
01:47:16.170 --> 01:47:17.160
Ryan Mehta: Yeah components.

865
01:47:17.220 --> 01:47:20.430
Ryan Mehta: I would probably just start by replacing all the prop types with

866
01:47:21.300 --> 01:47:25.920
Ryan Mehta: TypeScript props and then converting those component files into TS files.

867
01:47:27.720 --> 01:47:27.990
jasmin: Cool.

868
01:47:28.830 --> 01:47:33.690
Ryan Mehta: And then move on to your hooks. Is it, you're like, make your main app.

869
01:47:34.050 --> 01:47:42.210
jasmin: You're working on. I was thinking about doing it with a different app, but I would probably ultimately TRY TO DO IT WITH EVERYTHING COOL.

870
01:47:43.590 --> 01:47:46.770
Ryan Mehta: Yeah, I would just start with the components because it's such an easy target.

871
01:47:48.390 --> 01:47:49.800
jasmin: Well that makes sense. Thank you.

872
01:48:00.540 --> 01:48:02.040
Other questions or anything.

873
01:48:06.210 --> 01:48:20.220
Dan B. (TA): So I had a question about I think we'd played around with like he numbs versus I think type. Mm hmm. Is there like a best practice on that at all or is it just kind of like anything goes, or just whatever works best at the time.

874
01:48:21.210 --> 01:48:23.130
Ryan Mehta: Yeah, I mean, there's slightly different

875
01:48:25.950 --> 01:48:26.760
Ryan Mehta: So,

876
01:48:31.980 --> 01:48:32.430
Ryan Mehta: You know,

877
01:48:51.420 --> 01:48:58.950
Ryan Mehta: This is useful when you wanhis class name thing too. So depending on the dogs age if the dog is young, like under two we will make the dog like the text of the Dog Green.

724
01:10:04.590 --> 01:10:21.330
Ryan Mehta: If the dog is like between two and 10 will make the dogs text, yellow, and if the dog is between 10 and ours over 10 years old will make the dogs text read. So we'll change the classes based on the dogs age.

725
01:10:23.520 --> 01:10:24.210
Ryan Mehta: seem good

726
01:10:26.760 --> 01:10:27.420
Ryan Mehta: Alright.

727
01:10:29.760 --> 01:10:36.660
Ryan Mehta: So we have a few components. Here we have a dog form component

728
01:10:37.710 --> 01:10:38.370
Right here.

729
01:10:40.230 --> 01:10:42.330
Ryan Mehta: This will be a presentational components.

730
01:10:43.680 --> 01:10:45.360
Ryan Mehta: We have a dog list.

731
01:10:48.720 --> 01:10:51.180
Ryan Mehta: And a dog item.

732
01:10:54.150 --> 01:11:01.860
Ryan Mehta: These are all presentational components surrounding our entire application. We have our

733
01:11:03.180 --> 01:11:06.330
Ryan Mehta: Let's call it just our dogs container.

734
01:11:08.250 --> 01:11:11.010
Ryan Mehta: Our dogs container is going to have to hold

735
01:11:12.900 --> 01:11:29.070
Ryan Mehta: The state of our form over here. So the name, age and weight of the dog that we are trying to create and then it's also going to have to hold a list of all of the dogs that we've created.

736
01:11:31.230 --> 01:11:36.690
Ryan Mehta: We're going to have two interactions. We're going to have a handle change interaction.

737
01:11:38.760 --> 01:11:45.960
Ryan Mehta: When you type into the form we should change the appropriate piece of state and we'll have a handle.

738
01:11:47.100 --> 01:11:47.880
Ryan Mehta: Submit.

739
01:11:49.470 --> 01:11:53.850
Ryan Mehta: When you click on the submit button, you should add the dog into the dogs array.

740
01:11:56.970 --> 01:11:57.540
Ryan Mehta: With good

741
01:11:59.850 --> 01:12:00.570
Ryan Mehta: All right.

742
01:12:02.430 --> 01:12:09.570
Ryan Mehta: I think I'm going to start with our dog form over here.

743
01:12:12.630 --> 01:12:35.100
Ryan Mehta: So in our repo under source in component. I'm going to create a dogs directory and a dog forum dot j sx. This is going to be a presentational components. So a function component. We're going to import react from react will also need prop types.

744
01:12:38.640 --> 01:12:43.770
Ryan Mehta: Crop types will define our dog form.

745
01:12:47.550 --> 01:12:48.210
Ryan Mehta: Component.

746
01:12:49.890 --> 01:12:52.470
Ryan Mehta: We will specify some crop types.

747
01:12:54.210 --> 01:12:57.930
Ryan Mehta: And we will export our dog for

748
01:13:01.230 --> 01:13:02.220
Ryan Mehta: The good so far.

749
01:13:03.660 --> 01:13:12.900
Ryan Mehta: Our dog form is going to need a few pieces of state. It's going to need the name the current name that's typed into the input box. The age and the weight.

750
01:13:14.040 --> 01:13:15.660
Ryan Mehta: So let's have name.

751
01:13:17.790 --> 01:13:19.620
Ryan Mehta: Which is going to be a string.

752
01:13:20.640 --> 01:13:25.080
Ryan Mehta: Will have a which is going to be a number

753
01:13:27.390 --> 01:13:31.080
Ryan Mehta: And weight which is going to be a stream.

754
01:13:33.540 --> 01:13:39.300
Ryan Mehta: And let's the structure. Those to begin with, for we have name a and late

755
01:13:40.290 --> 01:13:53.550
Ryan Mehta: I will also need to get those two interactions. So you should be able to change any of these things. So we'll need to pass in the handle change function, and we should be able to click on this button and submit the form. So we'll need to have the handle submit

756
01:13:55.320 --> 01:13:58.800
Ryan Mehta: I'm going to name these props though on change.

757
01:14:03.510 --> 01:14:05.580
Ryan Mehta: Is required and

758
01:14:06.750 --> 01:14:07.530
Ryan Mehta: On submit

759
01:14:17.700 --> 01:14:20.160
Ryan Mehta: And we'll get these things also.

760
01:14:22.980 --> 01:14:31.620
Ryan Mehta: Then we can start building up our forum going to have a form when we submit this form. We're going to call the on submit function.

761
01:14:33.210 --> 01:14:40.620
Ryan Mehta: We're going to have an input type text, whose name will also will be named

762
01:14:41.880 --> 01:14:47.910
Ryan Mehta: Whose value for being named and on changing will call her on change function.

763
01:14:50.880 --> 01:15:08.730
Ryan Mehta: Will have one for age. Also, this one will be type number its name will be age its value will be age and I'm changing. We will call are on change function or have a final one.

764
01:15:10.440 --> 01:15:23.820
Ryan Mehta: Type will be text. The name will be wait the value will be weighed in on changing it will call the on change function and then we'll end with a button.

765
01:15:26.220 --> 01:15:27.510
Ryan Mehta: That says Create Dodd.

766
01:15:28.650 --> 01:15:29.940
Ryan Mehta: That'll submit the form

767
01:15:31.200 --> 01:15:40.590
Ryan Mehta: I'm also going to add labels for each of these things. So I'm going to have an ID, name for this person, this shouldn't personify the inputs.

768
01:15:42.720 --> 01:15:45.180
Ryan Mehta: Label HTML for

769
01:15:47.820 --> 01:15:51.630
Ryan Mehta: So we'll have a label for our name input.

770
01:15:52.920 --> 01:15:57.270
Ryan Mehta: Will have a label for our age input.

771
01:16:02.010 --> 01:16:07.080
Ryan Mehta: And we'll have a label for our text in our weight input.

772
01:16:18.150 --> 01:16:18.690
Alright.

773
01:16:19.860 --> 01:16:21.210
Ryan Mehta: Not look. Okay, everyone.

774
01:16:24.570 --> 01:16:35.310
Ryan Mehta: At this point I think this looks pretty good. I'm going to go and copy our apps snapshot test and snapshot test our dog component

775
01:16:36.450 --> 01:16:46.500
Ryan Mehta: So mean this over dog form dot test will rename all of these things dog form.

776
01:16:48.840 --> 01:16:56.550
Ryan Mehta: Or move our dog form to the left or the right over here, and let's run our

777
01:17:01.590 --> 01:17:02.040
Tests.

778
01:17:05.250 --> 01:17:09.690
Ryan Mehta: All right, it should give us a bunch of warnings, because we're not passing in any

779
01:17:13.710 --> 01:17:24.030
Ryan Mehta: Any of our props. So let's make sure we do that we need to pass in a name will name our spot an age five. Great.

780
01:17:25.980 --> 01:17:35.790
Ryan Mehta: 20 pounds on change, it won't actually do anything. So we'll just pass in a dummy function and same for on submit

781
01:17:37.020 --> 01:17:39.930
Ryan Mehta: So we're just making our snapshot test right now.

782
01:17:42.210 --> 01:17:54.900
Ryan Mehta: I'm running this, we should see a new snapshot get created. If we look at our snapshot can just visually inspect it and make sure that we get the desired HTML.

783
01:17:55.680 --> 01:18:07.620
Ryan Mehta: A form with a label name and an input for the name label age input for the age label wait import for the way and a Create button exactly what we expect.

784
01:18:09.720 --> 01:18:20.310
Ryan Mehta: OK, so the snapshot test is pretty simple. Overall, you just pass the appropriate props and then double check that the output of HTML looks like what you want.

785
01:18:22.770 --> 01:18:27.270
Ryan Mehta: I'm going to make one really quick refactor here that should keep our test passing

786
01:18:28.350 --> 01:18:36.990
Ryan Mehta: I'm going to extract this stuff into a component we have three things like three duplicate

787
01:18:38.310 --> 01:18:42.540
Ryan Mehta: These are like very close code wise feels very repetitive.

788
01:18:43.800 --> 01:18:49.140
Ryan Mehta: I think we can make like a little component label and

789
01:18:50.550 --> 01:18:51.690
Ryan Mehta: Input component

790
01:18:58.710 --> 01:19:01.440
Ryan Mehta: God does this basic stuff for us.

791
01:19:04.980 --> 01:19:06.540
Ryan Mehta: And then we can just like fill in.

792
01:19:08.490 --> 01:19:19.200
Ryan Mehta: All the stuff that's variable. So we'll have like the label the value. The on change and

793
01:19:20.760 --> 01:19:21.510
The name.

794
01:19:23.250 --> 01:19:25.950
Ryan Mehta: So the label or go here.

795
01:19:27.660 --> 01:19:30.330
Ryan Mehta: The name goes here.

796
01:19:31.980 --> 01:19:33.630
Ryan Mehta: Mean goes here.

797
01:19:37.320 --> 01:19:40.440
Ryan Mehta: This is our value. And that's our on change.

798
01:19:42.990 --> 01:19:46.680
Ryan Mehta: Okay, so it's just kind of a generic version of what we just wrote

799
01:19:48.900 --> 01:19:50.100
Ryan Mehta: That make sense to everyone.

800
01:19:52.230 --> 01:19:55.260
Nate Kruck: How did you just tab over seven, eight without

801
01:19:57.030 --> 01:20:03.360
Ryan Mehta: Curious, as you just did that. Like, it was like this at first and then and then you just did like

802
01:20:03.720 --> 01:20:09.120
Ryan Mehta: Yep, I have this es lint on save. Yes.

803
01:20:12.030 --> 01:20:22.050
Ryan Mehta: This code actions on Save mode sec to also whenever I manually saved my file it fixes all my ESPN dishes like if I was missing semi colons would add them.

804
01:20:33.810 --> 01:20:36.630
Ryan Mehta: So we have a bit of a generic version of this thing.

805
01:20:38.250 --> 01:20:48.180
Ryan Mehta: That type text is going to change. Also, so I'm going to have a type here that defaults to text and then use that

806
01:20:51.330 --> 01:21:03.030
Ryan Mehta: All right, then we could just replace all of our label and inputs with this like new label and input component that takes the label.

807
01:21:04.650 --> 01:21:05.310
Which is

808
01:21:07.170 --> 01:21:16.920
Ryan Mehta: The name. In this case, which is name the value his name on change is change.

809
01:21:20.820 --> 01:21:26.880
Ryan Mehta: And then we can get rid of these two lines here. We can duplicate it for age.

810
01:21:28.830 --> 01:21:32.610
Ryan Mehta: In the type of age is number

811
01:21:33.810 --> 01:21:35.430
Ryan Mehta: The value is age.

812
01:21:38.520 --> 01:21:40.860
Ryan Mehta: This looks a little bit better.

813
01:21:47.070 --> 01:21:49.050
I guess I should do that for this one too.

814
01:21:57.960 --> 01:22:02.430
Ryan Mehta: So we have those two and then let's copy this one and

815
01:22:03.900 --> 01:22:05.310
Ryan Mehta: Paste it here.

816
01:22:06.660 --> 01:22:08.610
Ryan Mehta: Get rid of these two labels.

817
01:22:09.930 --> 01:22:11.250
Ryan Mehta: This one should be

818
01:22:12.330 --> 01:22:13.110
Ryan Mehta: Wait.

819
01:22:14.340 --> 01:22:18.390
Ryan Mehta: The name is great and the value is weeks.

820
01:22:20.280 --> 01:22:32.460
Ryan Mehta: After we make all of those changes our snapshot tests should still pass because we haven't actually changed how things look we're just now using a component that does the label input stuff for us automatically

821
01:22:34.920 --> 01:22:40.710
Ryan Mehta: I don't know if that was worth it or not, but it felt right to do felt like the right thing, as I was doing it.

822
01:22:44.970 --> 01:22:46.980
Ryan Mehta: Look good this file.

823
01:22:49.020 --> 01:22:53.280
Ryan Mehta: Okay, let's go straight to the container after

824
01:22:54.630 --> 01:22:57.120
Ryan Mehta: So I'm going to make it containers.

825
01:22:58.620 --> 01:23:03.360
Ryan Mehta: Directory and let's make our dogs JS container.

826
01:23:04.470 --> 01:23:09.240
Ryan Mehta: This is going to be a component of class based component

827
01:23:10.860 --> 01:23:19.650
Ryan Mehta: Since will need state. It's our container going to export the fault class dogs extends component

828
01:23:20.880 --> 01:23:21.780
Ryan Mehta: And we will

829
01:23:22.860 --> 01:23:23.700
Ryan Mehta: Render

830
01:23:25.680 --> 01:23:26.970
Ryan Mehta: Start off like this.

831
01:23:28.020 --> 01:23:38.730
Ryan Mehta: In addition to our container. We're also going to make a container test so dodge test dot j SX and we'll split these side by side.

832
01:23:41.070 --> 01:23:50.610
Ryan Mehta: We're going to import react from react to our test Russell going to import render and screen from

833
01:23:52.650 --> 01:23:54.540
Ryan Mehta: Testing library react.

834
01:23:56.460 --> 01:24:00.000
Ryan Mehta: And then I'm going to describe our dogs.

835
01:24:08.430 --> 01:24:09.330
Ryan Mehta: Look good for now.

836
01:24:11.790 --> 01:24:12.330
Ryan Mehta: Alright.

837
01:24:13.650 --> 01:24:17.910
Ryan Mehta: So we have our presentational component over here done

838
01:24:21.180 --> 01:24:40.890
Ryan Mehta: But we have no nothing that we can really test still because the only real behavior that we want to test is that when I type press the Submit on this button we add the dog to the list. Right. So while we started this test. There's not much that we can do in here until we have

839
01:24:42.480 --> 01:24:48.480
Ryan Mehta: The display the list for our dog. We need both of these things to have something to test

840
01:24:49.530 --> 01:24:50.250
Ryan Mehta: So,

841
01:24:52.500 --> 01:24:58.890
Ryan Mehta: Let's go back into our presentational well let's go to app really quick. So we don't forget

842
01:25:00.150 --> 01:25:03.600
Ryan Mehta: Our dogs container here.

843
01:25:05.550 --> 01:25:06.360
Ryan Mehta: And

844
01:25:07.740 --> 01:25:21.000
Ryan Mehta: Let's go back to our dogs presentational components. We're going to make an individual dog dot j sx. I'm going to skip the doc individual dogs snapshot test because I think we all kind of get how to do

845
01:25:23.010 --> 01:25:28.050
Ryan Mehta: Those snapshot tests or at the very least we have enough examples of it now.

846
01:25:29.130 --> 01:25:33.240
Ryan Mehta: But we have something to look at. There's probably no point in making another one.

847
01:25:34.950 --> 01:25:35.730
Ryan Mehta: On my end.

848
01:25:37.800 --> 01:25:40.320
Ryan Mehta: So I'm going to make a dog.

849
01:25:42.930 --> 01:25:44.130
Ryan Mehta: Components.

850
01:25:46.200 --> 01:25:48.480
Ryan Mehta: Or dog will need prop types.

851
01:25:50.160 --> 01:25:59.310
Ryan Mehta: And will export our dog. This is our individual dog or list item dog, a dog has a name which is a string.

852
01:26:00.570 --> 01:26:04.050
Ryan Mehta: A dog has an age, which is a number

853
01:26:06.420 --> 01:26:10.320
Ryan Mehta: And a dog has a weight, which is a

854
01:26:16.620 --> 01:26:20.280
Ryan Mehta: Okay, and then we'll destruction his name, age, weight.

855
01:26:23.730 --> 01:26:33.660
Ryan Mehta: And we will ever know return a paragraph with the name dash the age

856
01:26:34.830 --> 01:26:39.600
Ryan Mehta: Dash weight of our dog will come back later.

857
01:26:40.650 --> 01:26:54.480
Ryan Mehta: Well, we also said that we wanted to change the text color of our dog based on their age. Right. So if the dogs age is

858
01:26:55.650 --> 01:27:02.400
Ryan Mehta: Less than or equal to two, we're going to have green text if they're greater than two.

859
01:27:03.870 --> 01:27:09.930
Ryan Mehta: But less than 10 we're going to have yellow text and if they're greater than or equal to 10

860
01:27:11.520 --> 01:27:12.990
Ryan Mehta: It'll have read text.

861
01:27:14.040 --> 01:27:19.980
Ryan Mehta: So let's make a dog dot CSS file, we will have all of these different

862
01:27:22.380 --> 01:27:23.820
Ryan Mehta: Next we're going to put this in a section.

863
01:27:26.640 --> 01:27:33.210
Ryan Mehta: We will have all these different classes. So we're going to have a dog class. The same name as our component

864
01:27:35.400 --> 01:27:45.270
Ryan Mehta: Inside of the dog class this paragraph can be one of young when it's a young dog, the color will be green.

865
01:27:46.680 --> 01:27:55.500
Ryan Mehta: When it's a medium dog, 0:44.430
Ryan Mehta: Or children instead of getting props. Now ask us ask the container for what they need. So like really flips the whole strategy, we still have a container, you still have a container, or at least container like thing.

688
01:20:45.480 --> 01:20:53.760
Ryan Mehta: Uh, but instead of passing our children props, we put our information into a bucket. And then our children can ask

689
01:20:55.200 --> 01:21:01.320
Ryan Mehta: For that information. So children ask for information instead of being given information.

690
01:21:03.870 --> 01:21:10.620
ryan Diffenbaugh: Is that what the return is doing from 24 to 27 is that just putting everything like

691
01:21:12.270 --> 01:21:14.490
ryan Diffenbaugh: In this bucket now.

692
01:21:15.690 --> 01:21:17.010
Into here. So then

693
01:21:18.510 --> 01:21:19.920
This can ask it.

694
01:21:21.870 --> 01:21:22.140
Yep.

695
01:21:32.250 --> 01:21:37.620
Ron Yonker: I don't know. There's something about how this is organized. That seems kind of messy to me.

696
01:21:39.180 --> 01:21:40.830
Well rethink sensor.

697
01:21:43.800 --> 01:21:49.890
So like the hook, you've got you've got the Color Picker hook. If you had an application that was more complicated than that.

698
01:21:51.420 --> 01:22:07.920
Would you have one context for all of your application state and then a hook for like each part like there was a login screen or you know what a detail, but they have separate hope they only got the part of the contract they needed

699
01:22:09.840 --> 01:22:13.200
Ryan Mehta: Yeah, there's not really a best practice around this sort of thing.

700
01:22:16.260 --> 01:22:22.050
Ryan Mehta: You could it could be either way it's really a decision that you'd have to make based on your app.

701
01:22:22.890 --> 01:22:31.950
Ryan Mehta: What we're going to eventually do is have one context provider for our entire app, and then a hook per like set of data that we have.

702
01:22:56.070 --> 01:23:08.010
Ryan Mehta: Yeah, I guess our thinking. It's kind of like when we're passing props to our children. It's like our children are that are like actually everyone this is silly to slowly.

703
01:23:09.210 --> 01:23:10.440
Brooke Perkins (she/her): Oh, you gotta say it now.

704
01:23:11.040 --> 01:23:11.760
Annalise: Say it.

705
01:23:12.120 --> 01:23:13.230
Ryan Mehta: I was just gonna say it's like their

706
01:23:13.230 --> 01:23:13.950
Annalise: Babies

707
01:23:14.010 --> 01:23:17.070
Ryan Mehta: Like when your kids are babies. You have to give them food.

708
01:23:17.370 --> 01:23:20.340
Ryan Mehta: And then when they're like teenagers, they asked for food.

709
01:23:23.160 --> 01:23:24.240
Ryan Mehta: So our components are

710
01:23:24.240 --> 01:23:25.350
Ryan Mehta: Like teenagers now.

711
01:23:25.890 --> 01:23:26.970
Annalise: We're like demand.

712
01:23:27.510 --> 01:23:31.800
Ryan Mehta: Too bad food. Yeah, they really are. This component really is demanding this

713
01:23:33.840 --> 01:23:37.050
Brooke Perkins (she/her): And then when you give them food. They don't like it, and they want something else.

714
01:23:37.650 --> 01:23:39.570
Annalise: Yeah, money instead

715
01:23:47.820 --> 01:23:48.300
Ryan Mehta: Alright.

716
01:23:50.940 --> 01:23:53.070
Ryan Mehta: We'll take a break again in just a second.

717
01:23:54.240 --> 01:24:01.680
Ryan Mehta: And do another example with maybe some asynchronous stuff, but it really is the same sort of thing.

718
01:24:04.440 --> 01:24:10.740
Ryan Mehta: If you just start thinking about these providers as your containers, the containers that you've been writing

719
01:24:11.400 --> 01:24:16.560
Ryan Mehta: They behave just like your other container like all of the containers that you've been reading up until now.

720
01:24:17.250 --> 01:24:30.960
Ryan Mehta: But instead of passing props, you set this value and then your presentational components asked for information instead of getting. I mean, this line in our old style code would have just been

721
01:24:32.550 --> 01:24:33.270
Right here.

722
01:24:36.030 --> 01:24:49.080
Ryan Mehta: We move that down a line said it equal to some hook and it gets that value from here, so the syntax is like a little bit different but also it's like similar enough

723
01:24:50.160 --> 01:24:55.740
Ryan Mehta: similar and different enough to be like kind of confusing because it's like, what exactly is different.

724
01:24:57.270 --> 01:25:01.530
Ryan Mehta: But yeah, I don't know, maybe this just like makes you

725
01:25:02.850 --> 01:25:05.580
Ryan Mehta: Kind of see it like it was just moved down

726
01:25:07.200 --> 01:25:14.730
Ryan Mehta: set equal to a hook. And then our provider over here is essentially our container.

727
01:25:22.620 --> 01:25:35.670
Ben Waples: So the Color Picker context online 25 is created up above. Is that right, and then color picker provider is like a big container that creates all the state and then gives it to the context.

728
01:25:37.080 --> 01:25:42.240
Ben Waples: And tells it that it is now a provider with the value equaling the bucket. We made

729
01:25:43.110 --> 01:25:43.590
Ryan Mehta: That way.

730
01:25:49.110 --> 01:25:52.830
Adrian Simental: When you talked about this becoming more common is

731
01:25:53.850 --> 01:26:05.730
Adrian Simental: Hooks got involved when you did the thing with the hooks, it didn't seem like it was necessary, just kind of cleaned it up a little bit, but is that what made it more popular just been slightly cleaner.

732
01:26:07.320 --> 01:26:09.750
Ryan Mehta: Well, even before we did

733
01:26:09.750 --> 01:26:10.560
Ryan Mehta: That little

734
01:26:10.980 --> 01:26:17.010
Ryan Mehta: Thing. This right here was the hook. So before you had hooks you couldn't say use context.

735
01:26:18.150 --> 01:26:21.210
Ryan Mehta: It was actually it was very hard to do this sort of thing.

736
01:26:23.100 --> 01:26:25.110
Ryan Mehta: So before hooks existed.

737
01:26:26.130 --> 01:26:44.190
Ryan Mehta: You wouldn't be able to get these values the hook either use context or own custom hook, what you would do instead is you would do color picker context consumer, which is the opposite of the provider and the consumer.

738
01:26:45.390 --> 01:26:47.580
Ryan Mehta: Would you pass it a child.

739
01:26:49.680 --> 01:26:54.600
Ryan Mehta: Like this and that child would be a function

740
01:26:55.980 --> 01:26:56.790
Ryan Mehta: Like so.

741
01:26:58.680 --> 01:27:03.390
Ryan Mehta: Where you would do structure text. Thank you color.

742
01:27:04.680 --> 01:27:05.640
Ryan Mehta: F G color.

743
01:27:07.380 --> 01:27:11.520
Ryan Mehta: And so we would need to make this thing function.

744
01:27:15.150 --> 01:27:18.660
Ryan Mehta: I mean, you can probably already see it's like way worse.

745
01:27:28.920 --> 01:27:31.050
Ryan Mehta: So it looks more like this epic thing.

746
01:27:34.140 --> 01:27:34.800
Ryan Mehta: Inside of

747
01:27:38.100 --> 01:27:39.960
Ryan Mehta: That's what it would look like without hooks.

748
01:27:43.620 --> 01:27:49.020
Ryan Mehta: So nobody used it because I mean some people would use it every once in a while if you really, really needed it.

749
01:27:50.100 --> 01:27:53.910
Ryan Mehta: But the barrier to entry is so much higher. What it looks like this.

750
01:28:21.630 --> 01:28:22.200
Ryan Mehta: Good.

751
01:28:24.750 --> 01:28:30.450
Ryan Mehta: For your lab today, just so you know it's it's not actually that much different than this color picker.

752
01:28:32.130 --> 01:28:44.490
Ryan Mehta: You're going to have some sort of controls, where you can toggle between light mode and dark mode. So it's like a checkbox or radio button or however you want to make a toggle between light and dark.

753
01:28:47.700 --> 01:28:55.440
Ryan Mehta: And then that theme will be stored in your bucket. So the theme will either be light or dark will be a string.

754
01:28:56.160 --> 01:29:13.050
Ryan Mehta: And then all of your components can grab that theme and then change the background color or change the text color based on the theme. So like if the theme is dark mode habit. Use a class called dark or theme is lifeboat have it. Use a class called light or whatever.

755
01:29:17.910 --> 01:29:27.420
ryan Diffenbaugh: So could the Color Picker context jazz X. Could that be homologous so like the theme picker contact, such as x

756
01:29:28.710 --> 01:29:30.840
ryan Diffenbaugh: Okay, and then we're just calling out from display. Okay.

757
01:29:31.650 --> 01:29:41.130
Ryan Mehta: But it's going to have less state. It's only going to have one piece of state because you don't have background color foreground color, you just have like current theme or whatever light or dark

758
01:29:41.520 --> 01:29:44.280
ryan Diffenbaugh: Okay, so what do we need like export.

759
01:29:46.170 --> 01:29:49.050
ryan Diffenbaugh: dark theme expert light theme or

760
01:29:50.490 --> 01:29:54.510
ryan Diffenbaugh: Could you just have a dark theme and then revert back to the initial state of like light theme.

761
01:29:55.140 --> 01:30:12.210
Ryan Mehta: Well, I think over. I'm like, in the display side or we got her in your components you would get something called theme from the hook and then with that theme. You'll conditionally change your styles or conditionally change the class that's applied.

762
01:30:13.470 --> 01:30:14.160
Down below.

763
01:30:17.670 --> 01:30:31.170
Ryan Mehta: The theme picker itself. The theme picker provider won't tell you what your color palette should be the component will still pick its own color palette, but it will change its color palette based on the string.

764
01:30:32.640 --> 01:30:42.000
Ryan Mehta: Like the string value of theme and the theme will either be light or dark and you'll have like if light, then use this color palette. If dark needs this color palette.

765
01:30:49.230 --> 01:30:49.650
Ryan Mehta: Okay.

766
01:30:52.260 --> 01:30:53.700
Ryan Mehta: Any other questions.

767
01:30:58.080 --> 01:31:06.270
Ryan Mehta: Alright, let's take a break and when we come back we'll do some other context application.

768
01:31:09.090 --> 01:31:11.430
Ryan Mehta: Let's come back at 11 o'clock.

769
01:31:12.870 --> 01:31:13.710
Annalise: All things. Fine.

770
01:31:16.650 --> 01:31:19.740
Ryan Mehta: All right, we're gonna make a little list of things application.

771
01:31:21.390 --> 01:31:24.000
Ryan Mehta: Of course list of characters.

772
01:31:24.570 --> 01:31:24.930
I'm

773
01:31:26.490 --> 01:31:26.700
Annalise: Sorry.

774
01:31:29.760 --> 01:31:32.610
Ryan Mehta: But we'll do something a little bit interesting at least

775
01:31:35.850 --> 01:31:45.150
Ryan Mehta: So we'll have our application will have our list of characters will have like an image and the name of our character.

776
01:31:50.820 --> 01:31:54.870
Ryan Mehta: Same sort of thing. As always we'll have our character item.

777
01:31:56.070 --> 01:32:00.930
Ryan Mehta: I'll just shortcut that SCI and we'll have our character list.

778
01:32:02.760 --> 01:32:03.540
Ryan Mehta: Your list.

779
01:32:05.850 --> 01:32:08.970
Ryan Mehta: We're going to use hooks or character list will be able to get

780
01:32:10.590 --> 01:32:14.730
Ryan Mehta: Our list of characters, and then we'll pass an individual character to the item.

781
01:32:15.870 --> 01:32:24.990
Ryan Mehta: The way that we're going to make this a little bit interesting is at the very top of our application, we will have radio buttons.

782
01:32:26.370 --> 01:32:28.320
Ryan Mehta: One for breaking bad

783
01:32:29.340 --> 01:32:40.860
Ryan Mehta: And one for Rick and Morty. If we select Breaking Bad, our list of characters will be breaking bad characters. If we select Rick and Morty our list of characters will be Rick and Morty characters.

784
01:32:41.550 --> 01:32:54.210
Ryan Mehta: So we'll have a toggle between the two. The cool thing that will do is we'll use the same character list character and character item components will use the same character.

785
01:32:55.050 --> 01:33:13.500
Ryan Mehta: Characters hook will store in global state whether we selected Breaking Bad or Rick and Morty, and our character list hook will decide which API defects from based on the current global value. Breaking Bad or brick and mortar that's stored

786
01:33:16.200 --> 01:33:29.520
Ryan Mehta: So let's try to do this sort of thing for my first slice. I'm just going to do a normal character list with Rick and Morty, and then we will add the toggle in afterwards.

787
01:33:30.780 --> 01:33:36.330
Ryan Mehta: That's totally something that is, I think, easy to add once we have a working list on the page.

788
01:33:38.190 --> 01:33:40.530
Ryan Mehta: So let's get started.

789
01:33:41.610 --> 01:33:46.290
Ryan Mehta: I am going to make a component called characters.

790
01:33:47.430 --> 01:33:55.980
Ryan Mehta: And a character item that sex. This will be a function component called character item.

791
01:33:57.150 --> 01:34:03.090
Ryan Mehta: Our character item is going to take to props, the name of our character.

792
01:34:06.060 --> 01:34:09.480
Ryan Mehta: And an image for character.

793
01:34:12.840 --> 01:34:16.200
Ryan Mehta: And then we will grab those things.

794
01:34:17.580 --> 01:34:20.550
Ryan Mehta: We will put them into a big year

795
01:34:22.950 --> 01:34:26.940
Ryan Mehta: And we will have our image I am she

796
01:34:40.590 --> 01:34:48.240
Ryan Mehta: Okay so character item, this should look like we've done this a few times now. I think it should begin

797
01:34:49.590 --> 01:34:53.580
Ryan Mehta: With also have our character list that J SX

798
01:34:55.530 --> 01:34:59.010
Ryan Mehta: Our character and list will also be a function component

799
01:35:02.550 --> 01:35:17.760
Ryan Mehta: Is not going to receive any props, though, we will have it. Use a hook to get its information, it will return a UL and that UL will have care for elements.

800
01:35:20.010 --> 01:35:22.950
Ryan Mehta: We will construct those character elements.

801
01:35:28.260 --> 01:35:31.110
Ryan Mehta: by iterating through a list of characters.

802
01:35:32.430 --> 01:35:45.900
Ryan Mehta: When map through for each character, we will construct an ally inside of the Li will use our character item will spread the character into it.

803
01:35:47.520 --> 01:35:50.100
Ryan Mehta: And we'll give her Li a key.

804
01:35:53.700 --> 01:36:11.580
Ryan Mehta: Something like this same sort of list thing we're going to need to get this character's though from somewhere. We're going to get ours from a hook. So I am going to go to our hooks directory and make a characters that JS file.

805
01:36:12.900 --> 01:36:17.460
Ryan Mehta: Here will export a US characters hook

806
01:36:19.020 --> 01:36:22.050
Ryan Mehta: Our youth character hook will construct

807
01:36:23.220 --> 01:36:26.340
Ryan Mehta: Some characters state.

808
01:36:32.670 --> 01:36:34.770
Ryan Mehta: Which will start off as an empty array.

809
01:36:36.090 --> 01:36:47.130
Ryan Mehta: And will return that character state from the bottom of the hook. At this point, we can actually import this hook. I lost my ability to drag these things.

810
01:36:48.420 --> 01:37:04.470
Ryan Mehta: So at the top of this, we will get our characters from us characters like so it's going to be an empty array because we haven't actually made an API call. But at this point, we can actually render this thing onto the page, it will just look like a blank page right

811
01:37:06.060 --> 01:37:13.860
Ryan Mehta: Let's do that. Before we get too far. Let's go into our app JS. I'm going to use React router here.

812
01:37:14.880 --> 01:37:16.590
Ryan Mehta: So I'm going to turn

813
01:37:18.120 --> 01:37:20.430
Ryan Mewe renamed this thing.

753
01:26:26.220 --> 01:26:28.260
Ryan Mehta: So when we set location, a

754
01:26:28.920 --> 01:26:31.230
Ryan Mehta: To return everything from state.

755
01:26:33.180 --> 01:26:37.650
Ryan Mehta: But location now becomes whatever state DOT

756
01:26:38.760 --> 01:26:40.920
Ryan Mehta: Location input is

757
01:26:48.510 --> 01:26:49.260
Ryan Mehta: Look, okay.

758
01:26:50.400 --> 01:26:54.900
Ryan Mehta: So we're just moving this location input into this location right here.

759
01:26:57.510 --> 01:26:58.950
Ryan Mehta: And then back in our header.

760
01:27:00.300 --> 01:27:01.950
Ryan Mehta: I guess we could use

761
01:27:04.260 --> 01:27:05.730
Ryan Mehta: How would we use the same

762
01:27:07.680 --> 01:27:19.770
Ryan Mehta: Handle submit. Let's just make different handles submits so I handle like handle subreddit submit and we'll have a similar one

763
01:27:21.840 --> 01:27:22.320
Ryan Mehta: Though

764
01:27:24.990 --> 01:27:33.090
Ryan Mehta: Completion a submit this one will set location A and let's not forget that this needs to be in place now.

765
01:27:35.820 --> 01:27:39.540
Ryan Mehta: This is handles subreddit summit.

766
01:27:40.620 --> 01:27:42.990
Ryan Mehta: Down here on submitting this one.

767
01:27:46.080 --> 01:27:47.700
Ryan Mehta: Location a submit

768
01:27:52.050 --> 01:27:53.040
Ryan Mehta: With good so far.

769
01:27:54.750 --> 01:27:57.870
Ryan Mehta: So now when we submit this for moving that state.

770
01:27:59.580 --> 01:28:04.560
Ryan Mehta: From location input to location for go back to our friend.

771
01:28:05.910 --> 01:28:06.810
Ryan Mehta: Those errors.

772
01:28:09.180 --> 01:28:11.550
Ryan Mehta: In a we have nothing.

773
01:28:13.830 --> 01:28:14.910
Ryan Mehta: We've we select

774
01:28:15.930 --> 01:28:16.710
Ryan Mehta: Virginia

775
01:28:18.210 --> 01:28:19.500
Ryan Mehta: It goes into location.

776
01:28:24.270 --> 01:28:26.130
Ryan Mehta: All right, that all good.

777
01:28:28.530 --> 01:28:28.860
Cool.

778
01:28:30.390 --> 01:28:32.130
Ryan Mehta: So we're able to do that now.

779
01:28:34.830 --> 01:28:45.180
Ryan Mehta: We need to do the exact same thing for location be it's actually going to look all the code is going to be it. Oh, oh, we're not done our test is still failing.

780
01:28:46.470 --> 01:28:47.820
Ryan Mehta: Tests totally still failing.

781
01:28:48.870 --> 01:28:51.240
Ryan Mehta: We never put this text selected.

782
01:28:51.270 --> 01:28:55.410
Annalise: Us, or do you have a break on on number four.

783
01:28:56.790 --> 01:28:58.170
For another

784
01:29:01.680 --> 01:29:03.870
Ryan Mehta: So under this

785
01:29:04.950 --> 01:29:05.880
Ryan Mehta: Form.

786
01:29:07.410 --> 01:29:08.460
Ryan Mehta: Some way somewhere.

787
01:29:09.660 --> 01:29:12.750
Ryan Mehta: We wanted to say something like

788
01:29:15.570 --> 01:29:17.130
Ryan Mehta: An H3 maybe

789
01:29:18.330 --> 01:29:20.640
Ryan Mehta: And what was it,

790
01:29:22.020 --> 01:29:23.040
Ryan Mehta: Selected

791
01:29:25.980 --> 01:29:27.120
Ryan Mehta: This goes inside of here.

792
01:29:32.670 --> 01:29:35.550
Ryan Mehta: I don't know selected.

793
01:29:37.110 --> 01:29:39.300
Ryan Mehta: And then the thing that we selected.

794
01:29:40.740 --> 01:29:49.860
Ryan Mehta: So the current location A to get this value, we will need to select it off of state, we're going to have another

795
01:29:50.940 --> 01:29:52.380
Ryan Mehta: Location a

796
01:29:54.030 --> 01:30:01.170
Ryan Mehta: Will use a selector that's going to get state. We can be steak dot a dot location.

797
01:30:02.610 --> 01:30:07.710
Ryan Mehta: That'll give us our location A we can drop location A into selected.

798
01:30:09.120 --> 01:30:10.860
Ryan Mehta: That should get our test to pass.

799
01:30:13.080 --> 01:30:14.310
Ryan Mehta: test passes.

800
01:30:16.950 --> 01:30:18.930
Ryan Mehta: Let's go over here and make sure

801
01:30:20.700 --> 01:30:21.720
Ryan Mehta: The stuff.

802
01:30:23.730 --> 01:30:29.220
Ryan Mehta: Alright so visually also works. I mean, it needs some styling, for sure.

803
01:30:32.130 --> 01:30:39.570
Ryan Mehta: Now that our test passes, we can also refactor this we said that these sort of selectors are reusable. So we put them in a selectors file.

804
01:30:40.770 --> 01:30:43.950
Ryan Mehta: So let's make a selectors file for

805
01:30:45.240 --> 01:30:46.800
Ryan Mehta: A selectors.

806
01:30:49.020 --> 01:30:50.520
Ryan Mehta: This over to the left.

807
01:30:52.080 --> 01:30:54.030
Ryan Mehta: Yet location, a

808
01:31:02.640 --> 01:31:05.220
Ryan Mehta: Alright, I will replace this with

809
01:31:18.450 --> 01:31:22.470
Ryan Mehta: Okay, we need to do the same thing with location, ba, then we can take a break.

810
01:31:24.660 --> 01:31:27.540
Ryan Mehta: I'm just going to copy a bunch of code because they're almost the same.

811
01:31:29.700 --> 01:31:34.980
Ryan Mehta: Let's go into our app test. Let's copy this exact test.

812
01:31:37.260 --> 01:31:40.260
Ryan Mehta: This is now location, the

813
01:31:41.370 --> 01:31:42.120
Ryan Mehta: Location.

814
01:31:44.430 --> 01:31:45.720
Ryan Mehta: Location be

815
01:31:47.340 --> 01:31:47.700
Okay.

816
01:32:00.510 --> 01:32:01.920
Ryan Mehta: There's a faster way to do that.

817
01:32:03.300 --> 01:32:05.850
Ryan Mehta: So location be our test fails.

818
01:32:07.530 --> 01:32:13.890
Ryan Mehta: Let's go back to our header J sx. I am going to copy this entire form.

819
01:32:15.810 --> 01:32:19.770
Ryan Mehta: It could probably be a component. Now at this point. Think about it.

820
01:32:21.930 --> 01:32:23.730
Adrian Simental: These A's altering to bees.

821
01:32:34.230 --> 01:32:39.870
Ryan Mehta: Okay so turned all A's to bees in the form at the top.

822
01:32:41.040 --> 01:32:41.460
Jerud Moyer: Sorry.

823
01:32:42.480 --> 01:32:43.020
Ryan Mehta: I missed one.

824
01:32:48.420 --> 01:32:49.290
Ryan Mehta: There is another one.

825
01:32:52.650 --> 01:32:53.130
That's good.

826
01:32:54.690 --> 01:32:58.200
Ryan Mehta: Copy that thing. Let's switch this to be submit

827
01:32:59.760 --> 01:33:02.850
Ryan Mehta: Lhasa need to get location be somehow

828
01:33:04.590 --> 01:33:06.630
Ryan Mehta: This will be be

829
01:33:07.650 --> 01:33:17.790
Ryan Mehta: In order to do those two things. We will need a location be reducer which I am going to get by copying our location or a reducer.

830
01:33:20.250 --> 01:33:31.560
Ryan Mehta: All of this days almost the same except now we will need action types for location be instead. So I'm going to copy our A actions.

831
01:33:38.100 --> 01:33:39.540
Ryan Mehta: Change these

832
01:33:42.240 --> 01:33:43.350
Ryan Mehta: Things to

833
01:33:46.740 --> 01:33:48.300
Ryan Mehta: Change these things.

834
01:33:51.150 --> 01:33:52.320
Ryan Mehta: Be instead

835
01:33:58.200 --> 01:34:01.620
Ryan Mehta: Okay, lots of duplicate code because these producers are so similar.

836
01:34:03.540 --> 01:34:08.880
Ryan Mehta: Now we have our two action types that we need back in our being reducer.

837
01:34:10.230 --> 01:34:12.000
Ryan Mehta: This is be input.

838
01:34:15.330 --> 01:34:17.820
Ryan Mehta: I think maybe we've chosen the wrong.

839
01:34:21.450 --> 01:34:28.740
Ryan Mehta: I think maybe we chose the wrong pattern or whatever we call it the wrong proposal, but it's okay. The wrong reducer structure.

840
01:34:29.820 --> 01:34:37.320
Ryan Mehta: I feel like that. Now, and it was hard to see that up until we got to this point because we just like straight up duplicated.

841
01:34:38.700 --> 01:34:41.970
Ryan Mehta: To producers, which feels redundant.

842
01:34:44.880 --> 01:34:55.320
Ryan Mehta: Alright, so now in our selectors file, we will also need to pretty much copy our selector also

843
01:34:56.760 --> 01:35:03.510
Ryan Mehta: This will change to be an E, and then in our reducer.

844
01:35:05.310 --> 01:35:06.930
Ryan Mehta: We could have totally done that for

845
01:35:08.700 --> 01:35:12.600
Ryan Mehta: Like by hand, instead of me copying everything but

846
01:35:14.340 --> 01:35:15.870
Ryan Mehta: It's too late. It's already done.

847
01:35:18.480 --> 01:35:22.530
Ryan Mehta: Alright so this should be get location female

848
01:35:24.060 --> 01:35:29.310
Ryan Mehta: Shirts imported and down here, this should be set location be

849
01:35:32.730 --> 01:35:34.080
Ryan Mehta: And we need

850
01:35:35.700 --> 01:35:36.660
Ryan Mehta: A location.

851
01:35:38.190 --> 01:35:45.390
Ryan Mehta: Set location to be imperfect. So basically just duplicating that whole reducer.

852
01:35:48.750 --> 01:35:50.400
Ryan Mehta: Our test still fails, which is

853
01:35:52.290 --> 01:35:53.190
Ryan Mehta: Scary.

854
01:36:01.080 --> 01:36:01.500
Ryan Mehta: Bye.

855
01:36:03.240 --> 01:36:05.190
Ryan Mehta: Let's see if it actually works on the front end.

856
01:36:07.050 --> 01:36:09.750
Ryan Mehta: So we have two pieces of state.

857
01:36:10.770 --> 01:36:11.790
Ryan Mehta: We select

858
01:36:12.810 --> 01:36:17.940
Ryan Mehta: Order submit it goes there, we see that

859
01:36:20.160 --> 01:36:29.370
Ryan Mehta: Okay, so it actually works. Our test probably just has some copying issue, we just copied a bunch of stuff. So let's make sure

860
01:36:33.270 --> 01:36:38.010
Ryan Mehta: I don't know. It looks. Does anybody see any B's and A's that we missed

861
01:36:42.330 --> 01:36:43.440
Ryan Mehta: Why is the test failing.

862
01:36:53.850 --> 01:36:56.940
Ryan Mehta: The button test ID on the button.

863
01:36:58.140 --> 01:37:01.740
Ryan Mehta: Test ID on the button location submit

864
01:37:04.080 --> 01:37:05.370
Ryan Mehta: That all looks good.

865
01:37:11.610 --> 01:37:13.830
Ben Waples: Did we change the selector and all the

866
01:37:19.020 --> 01:37:19.800
Ryan Mehta: Actor.

867
01:37:19.950 --> 01:37:21.210
Ben Waples: They use the elector

868
01:37:21.840 --> 01:37:26.310
Ben Waples: Or we copy and paste it, but I don't remember if we change the name, the question.

869
01:37:26.460 --> 01:37:30.660
Ryan Mehta: Yeah, yeah. Okay. Okay. Cindy and at the top.

870
01:37:32.700 --> 01:37:33.090
Ryan Mehta: Be

871
01:37:35.430 --> 01:37:40.590
Ryan Mehta: It actually looks like it's there, which is weird selected us. Oh, are

872
01:37:46.200 --> 01:37:49.920
Ryan Mehta: Get by text selected us or

873
01:37:56.400 --> 01:37:59.850
Ryan Mehta: So yeah, it's there. I see it. I can see it.

874
01:38:31.080 --> 01:38:33.630
Ryan Mehta: Okay, let's let's study that header.

875
01:38:35.010 --> 01:38:37.290
Ryan Mehta: For a second, more and then take a break.

876
01:38:40.680 --> 01:38:48.300
Ryan Mehta: Selected location be it's strange, because we actually see it and

877
01:38:49.920 --> 01:38:50.880
Ryan Mehta: It's right there.

878
01:38:52.320 --> 01:38:53.760
Ryan Mehta: But it says account find it.

879
01:38:59.370 --> 01:39:04.080
Ryan Mehta: Multiple elements. Ah, multiple elements.

880
01:39:05.370 --> 01:39:05.850
With it.

881
01:39:21.570 --> 01:39:24.690
Jerud Moyer: Change it and are using us aren't both the test.

882
01:39:26.730 --> 01:39:29.520
Ryan Mehta: I am, yeah. So maybe you're thinking like

883
01:39:32.100 --> 01:39:33.090
Ryan Mehta: This sort of thing.

884
01:39:33.450 --> 01:39:33.720
Yeah.

885
01:39:38.910 --> 01:39:40.230
Ryan Mehta: Nice genius.

886
01:39:40.920 --> 01:39:41.730
Yeah.

887
01:39:44.610 --> 01:39:53.250
Ryan Mehta: Okay, have we have a functioning header is doesn't quite look like our sketch our sketch was pretty bad, but our

888
01:39:54.330 --> 01:40:01.710
Ryan Mehta: Implementations were somehow stylistically, but we could just throw some CSS on that and it would fix everything.

889
01:40:03.360 --> 01:40:14.430
Ryan Mehta: The next little phase that we have are these three pages. It took us forever to do this part so feels like it's going to take us forever to do these three parts, but I have a feeling

890
01:40:15.180 --> 01:40:25.920
Ryan Mehta: That these are actually far easier and the whole header setup when we set up the header. We had to like initialize our Redux store, which takes a kind of typing but once that's initialized and like

891
01:40:27.030 --> 01:40:34.410
Ryan Mehta: Going, we have all of the producers that we need of adding each new, additional feature is going to be much faster. I think

892
01:40:36.240 --> 01:40:39.600
Ryan Mehta: So let's take a break. Let's come back at 1110

893
01:40:40.800 --> 01:40:45.540
Ryan Mehta: And 15 minutes and then we will finish up this application.

894
01:40:48.480 --> 01:40:48.720
Good.

895
01:40:52.980 --> 01:40:58.410
Ryan Mehta: I did a tiny, tiny refactor and added a tiny, tiny bit of styling.

896
01:40:59.730 --> 01:41:13.500
Ryan Mehta: Remember before we had those two location forums that we're almost identical. We're only the letters are different. I extracted those into their own components. So we have this location component that

897
01:41:14.970 --> 01:41:19.230
Ryan Mehta: Lives here. Now, that same form get state information.

898
01:41:22.800 --> 01:41:35.760
Ryan Mehta: There is a cool piece of this at the top. It decides which selector and which like input setter and location center to use based on this letter map.

899
01:41:37.140 --> 01:41:50.880
Ryan Mehta: So if it has letter A, it's going to use all of the ACE functions if it has Letter B, it's going to use all of these be functions letter map is used here we get the selector, the change action and the Submit action based on the letter.

900
01:41:53.280 --> 01:41:54.840
Ryan Mehta: And the rest of it's pretty much the same.

901
01:41:59.430 --> 01:42:08.610
Ryan Mehta: And then a little bit of styling added just so we have two sides not a ton of CSS just

902
01:42:09.990 --> 01:42:12.300
Ryan Mehta: The smallest amount needed to get

903
01:42:13.860 --> 01:42:16.260
Ryan Mehta: A little bit going for us.

904
01:42:19.560 --> 01:42:20.100
Ryan Mehta: All right. Alright.

905
01:42:21.240 --> 01:42:27.900
Ryan Mehta: So next step that we wanted to do is probably create our first page our homepage over here.

906
01:42:29.610 --> 01:42:32.190
Ryan Mehta: That homepage is going to be routed to by the router.

907
01:42:33.210 --> 01:42:39.240
Ryan Mehta: And it's going to contain to list of Article sections on it.

908
01:42:41.400 --> 01:42:46.680
Ryan Mehta: So to begin with, I'm going to create a new component called home.

909
01:42:49.230 --> 01:42:49.920
And

910
01:42:51.120 --> 01:42:53.880
Ryan Mehta: This will be a function component

911
01:42:55.020 --> 01:42:56.940
Ryan Mehta: Won't need any props. I don't think

912
01:43:00.780 --> 01:43:01.380
Like self.

913
01:43:03.030 --> 01:43:07.230
Ryan Mehta: And then it's just for now with turn an H1 that says home.

914
01:43:08.310 --> 01:43:12.630
Ryan Mehta: Back in our app JS a min and make sure that we add a route.

915
01:43:14.610 --> 01:43:16.320
Ryan Mehta: Exact past

916
01:43:17.970 --> 01:43:20.190
Ryan Mehta: The home path for the component

917
01:43:22.320 --> 01:43:23.190
Ryan Mehta: Component.

918
01:43:25.920 --> 01:43:26.430
Like so.

919
01:43:29.520 --> 01:43:31.170
Ryan Mehta: If we go back to our page.

920
01:43:32.430 --> 01:43:36.810
Ryan Mehta: The home component says home. There's a little hub component rendering

921
01:43:38.040 --> 01:43:38.580
Right here.

922
01:43:41.160 --> 01:43:41.760
Ryan Mehta: With good

923
01:43:45.120 --> 01:43:45.450
Okay.

924
01:43:50.070 --> 01:43:52.140
Ryan Mehta: Let's go take a look at our home component
Ryan Mehta: We won't know what those props are

701
01:24:52.590 --> 01:24:58.500
Ryan Mehta: And eventually we're going to return a route. So the same route that we get with

702
01:24:58.530 --> 01:24:59.700
React router done

703
01:25:01.500 --> 01:25:06.120
Ron Yonker: So this is just a container component of protecting five rounds.

704
01:25:07.770 --> 01:25:11.910
Ryan Mehta: Yep, it's going to do some checks before it returns router.

705
01:25:14.070 --> 01:25:24.030
Ryan Mehta: So it does everything that route normally does, except up here before it returns route, it's going to check that user is logged in.

706
01:25:26.280 --> 01:25:32.580
Ryan Mehta: user is logged in. So if the users logged in, we're going to do what rap normally does.

707
01:25:35.820 --> 01:25:36.360
Ryan Mehta: User

708
01:25:41.730 --> 01:25:44.430
Ryan Mehta: To login page.

709
01:25:47.820 --> 01:26:05.940
Ryan Mehta: So we're going to go down one of these two paths back in app JS instead of using the normal route. Here we're going to use private route when the user is logged in private route behaves just like route does if the user isn't logged in, we're going to redirect to the login page.

710
01:26:07.530 --> 01:26:09.810
Ryan Mehta: That's logic kind of makes sense.

711
01:26:13.020 --> 01:26:13.530
Ryan Mehta: Okay.

712
01:26:14.580 --> 01:26:22.560
Ryan Mehta: Back in or off provider. Over here we have this current user that we can check against

713
01:26:23.130 --> 01:26:43.230
Ryan Mehta: Right current user at least eventually will be set something if the user is logged in or it'll be set to nothing. If the user isn't logged in, we need to gain access to this correct user and the loading state. We're going to gain access to those things by adding hooks in our context.

714
01:26:44.520 --> 01:26:56.700
Ryan Mehta: Right here. So we have this you sign up hope that gets us our signup function are US login hook that gets us our login function we're going to create a user user hook

715
01:26:58.200 --> 01:27:00.450
Ryan Mehta: That will grab current user

716
01:27:04.320 --> 01:27:05.280
Ryan Mehta: Context.

717
01:27:07.230 --> 01:27:08.820
Ryan Mehta: And return current users.

718
01:27:11.190 --> 01:27:14.250
Ryan Mehta: Will also construct the hook called

719
01:27:16.500 --> 01:27:17.580
Ryan Mehta: offloading

720
01:27:19.500 --> 01:27:22.200
Ryan Mehta: Which will the structure loading.

721
01:27:25.650 --> 01:27:27.390
Ryan Mehta: News context.

722
01:27:32.550 --> 01:27:44.340
Ryan Mehta: So we have two hooks that get us our authentication state back in our private route we will grab those two things. So we'll grab our current user

723
01:27:49.050 --> 01:27:51.450
Ryan Mehta: And we will grab our loading state.

724
01:27:54.750 --> 01:27:55.170
Ryan Mehta: So,

725
01:27:56.430 --> 01:28:03.270
Ryan Mehta: If we're currently loading. So if we are in a loading state and we're going to return some

726
01:28:06.840 --> 01:28:21.210
Ryan Mehta: Loading component. At this point, we don't know if the users logged in or not. So we can't, we can't make the decision whether we redirect them to the login page or if we do like direct them to their normal page.

727
01:28:22.290 --> 01:28:28.410
Ryan Mehta: After we after they get past this stage we can check if we have a current user

728
01:28:30.120 --> 01:28:39.090
Ryan Mehta: If we don't have a current user. Then we went to return something else. Anybody know of a way to redirect to the login page with React router down

729
01:28:41.130 --> 01:28:41.910
Greg Mall: US history.

730
01:28:42.960 --> 01:28:44.100
Ryan Mehta: History is one of them.

731
01:28:44.430 --> 01:28:46.170
Ryan Mehta: There's actually another thing.

732
01:28:48.990 --> 01:29:02.130
Ryan Mehta: That we can use from react router DOM called redirect, but there's something sort of like US history, except that lets us return a component that does the redirect will redirect to the landing page.

733
01:29:06.900 --> 01:29:09.510
Ryan Mehta: Otherwise, we'll do the normal route thing.

734
01:29:09.990 --> 01:29:18.540
Jerud Moyer: And not be used with Redux because I was really struggling like trying to redirect essentially like on handle submit some things Redux

735
01:29:18.960 --> 01:29:22.770
Ryan Mehta: I can in handle submit. So you have to use the history that push

736
01:29:24.180 --> 01:29:30.450
Ryan Mehta: So this is only the only time you can use this sort of thing is if you want to redirect where you would normally return a component

737
01:29:34.380 --> 01:29:35.610
Ryan Mehta: There's like three

738
01:29:35.670 --> 01:29:37.080
Jerud Moyer: Kind of change.

739
01:29:37.110 --> 01:29:48.720
Ryan Mehta: Page things that react rather down gives you one is link which is in spots you pay per click right like where you'd normally play anchor tags.

740
01:29:50.040 --> 01:30:00.570
Ryan Mehta: There is history Cush which is in response to like submits

741
01:30:08.490 --> 01:30:10.020
Ryan Mehta: And then there's three

742
01:30:21.450 --> 01:30:23.310
Ryan Mehta: Response to like the page loading.

743
01:30:30.990 --> 01:30:42.540
Ryan Mehta: So in this case, there's no user interaction here that we can say like history about push on this is a response to the page loading like the page loads, the user isn't logged in. So we redirect.

744
01:30:43.200 --> 01:31:00.510
Ryan Mehta: History dot pushes in response to some user interaction they click a submit button, they typed into an input form, anything that is normally in a handle handle change and the click handle submit you would use history push and then link is like a link on a pay a tag on a page.

745
01:31:01.740 --> 01:31:02.970
These are the three things.

746
01:31:04.050 --> 01:31:04.920
We can use

747
01:31:10.740 --> 01:31:20.820
Ryan Mehta: All right, let's see what happens. Right now, if we go to the dashboard page loading forever, which kind of makes sense because

748
01:31:21.930 --> 01:31:25.500
Ryan Mehta: Back in our off provider.

749
01:31:29.070 --> 01:31:39.720
Ryan Mehta: Let's just stare at this thing for a second, we default to loading and we never take it out of a loading state is always loading right now.

750
01:31:42.870 --> 01:31:43.890
Ryan Mehta: Never not loading.

751
01:31:47.370 --> 01:31:48.210
Ryan Mehta: Make sense

752
01:31:49.800 --> 01:31:51.720
Ryan Mehta: All right. Alright, let's fix that a little bit.

753
01:31:53.610 --> 01:32:04.110
Ryan Mehta: When we sign up a user instead of just console logging. We're then going to get back the user and we're going to set our current user to that user that just signed up.

754
01:32:05.220 --> 01:32:05.880
Ryan Mehta: And

755
01:32:08.550 --> 01:32:10.620
Ryan Mehta: Set loading to false.

756
01:32:12.510 --> 01:32:17.160
Ryan Mehta: So when a user signs up we set them as the current user and we're no longer loading.

757
01:32:19.170 --> 01:32:20.100
Ryan Mehta: On login

758
01:32:21.420 --> 01:32:28.200
Ryan Mehta: We're also going to get back a user will set the current user to that user who just logged in and we will

759
01:32:33.630 --> 01:32:35.370
Ryan Mehta: Set loading to false.

760
01:32:37.920 --> 01:32:46.050
Ryan Mehta: Makes sense so either on sign up or site. Sign up or login. We set the current news that the person who just signed up or logged in.

761
01:32:49.200 --> 01:32:56.220
Ryan Mehta: Not all good so far. I'm going to do one other thing in both of these functions. I'm also

762
01:32:59.010 --> 01:33:07.650
Ryan Mehta: Going to push them to the dashboard page once they log in. They don't want to sit on the login page actually want to be moved into the dashboard.

763
01:33:09.240 --> 01:33:15.570
Ryan Mehta: So to do that, Greg. This is where you would use your suggestion of history.

764
01:33:17.940 --> 01:33:21.300
Ryan Mehta: So we'll grab history from react router.

765
01:33:30.360 --> 01:33:32.370
Ryan Mehta: And then down here, we can

766
01:33:33.630 --> 01:33:35.910
Ryan Mehta: Push to the dashboard.

767
01:33:43.920 --> 01:33:52.590
Ryan Mehta: So on. Sign up our login. We set the user to ever signed up or logged in, we push them to the dashboard and we set loading to false.

768
01:33:54.480 --> 01:33:57.750
Ryan Mehta: So we try to go to the login page.

769
01:33:59.280 --> 01:34:08.070
Ryan Mehta: And put in test that test.com and password press login. We get sent to the private dashboard route.

770
01:34:10.830 --> 01:34:11.730
Ryan Mehta: That all look good.

771
01:34:14.400 --> 01:34:27.660
Ryan Mehta: Um, there's one big problem here. Still, the last thing that we have to fix before we're done with our I know office so huge. It's so huge for so so little payoff why hate off so much

772
01:34:28.980 --> 01:34:38.280
Ryan Mehta: We have, like, it takes. There's so many moving pieces with off and then at the end of it, you have a login for which every other website has like

773
01:34:40.680 --> 01:34:55.050
Ryan Mehta: So we're currently logged in, we have our wristband attached to us. But if we refresh this page. We're stuck in loading the front end is never were like not verifying that we have the wristband attached to us.

774
01:34:56.550 --> 01:35:05.040
Ryan Mehta: If you remember way back when we did off last time we had this verify route that we said the front end would use to see if the user is currently logged in.

775
01:35:06.030 --> 01:35:15.480
Ryan Mehta: That's what we're going to need here to verify the session and switch the user like pass back the currently logged in user from the back end.

776
01:35:17.880 --> 01:35:30.180
Ryan Mehta: So on the front end. In addition to these login and signups. We also always want to check. Do I have a wt. And if I do, said whoever owns that Jake WT to the current user

777
01:35:32.400 --> 01:35:35.340
Ryan Mehta: So what we actually really want is a use effect.

778
01:35:36.810 --> 01:35:45.990
Ryan Mehta: That runs with a component first mounts that verifies the session cookie and sex.

779
01:35:48.600 --> 01:35:49.110
Ryan Mehta: User

780
01:35:50.280 --> 01:35:53.580
Ryan Mehta: What some way to verify that session cookie that we have stored

781
01:35:56.070 --> 01:35:58.860
Ryan Mehta: This is going to happen back on our back end.

782
01:36:00.600 --> 01:36:04.530
Ryan Mehta: We're going to add another routes here. It's going to be get route.

783
01:36:06.540 --> 01:36:07.530
Ryan Mehta: For verify

784
01:36:11.070 --> 01:36:23.550
Ryan Mehta: And then this verify route we want to check to see if this session cookie is currently set if that session cookie is set than the users logged in and we send them back all of that user information.

785
01:36:26.520 --> 01:36:27.840
Ryan Mehta: That makes sense so far.

786
01:36:30.030 --> 01:36:30.390
Okay.

787
01:36:32.100 --> 01:36:39.090
Ryan Mehta: To verify that the users logged in, we're going to make a nother service over here on the left hand side.

788
01:36:40.380 --> 01:36:42.150
Ryan Mehta: And we'll call this service.

789
01:36:43.530 --> 01:36:44.490
Ryan Mehta: Verify

790
01:36:46.800 --> 01:36:59.460
Ryan Mehta: Token the verify token service will take the token, the token is what we currently have stored in the cookie. If we look at the browser this value right here is our user token.

791
01:37:01.560 --> 01:37:05.580
Ryan Mehta: One really nice thing about this user token. We go to J WT IO.

792
01:37:07.470 --> 01:37:11.010
Ryan Mehta: Is it contains all of our users information it

793
01:37:13.140 --> 01:37:14.100
Can I use you.

794
01:37:16.020 --> 01:37:22.200
Ryan Mehta: So it has our users email all of our users information in the payload of this token.

795
01:37:23.400 --> 01:37:27.000
Ryan Mehta: Or we're going to do is take that token that stored in the cookie.

796
01:37:28.590 --> 01:37:32.310
Ryan Mehta: And verify it. So let me grab the payload.

797
01:37:33.510 --> 01:37:38.250
Ryan Mehta: Off of RJ WT we're going to verify the token.

798
01:37:39.570 --> 01:37:43.050
Ryan Mehta: And pass it our app secret which is and

799
01:37:44.190 --> 01:37:47.160
Ryan Mehta: Secret. So we're going to check the signature on the token.

800
01:37:48.690 --> 01:37:53.340
Ryan Mehta: If all of that is good. Then we're going to return the payload.

801
01:37:55.440 --> 01:37:58.260
Ryan Mehta: The payload is pretty much just the user

802
01:38:02.850 --> 01:38:07.650
Ryan Mehta: This thing makes sense to everyone. So we're getting that user that's inside of the token.

803
01:38:09.990 --> 01:38:10.500
Ryan Mehta: Alright.

804
01:38:13.860 --> 01:38:19.110
Ryan Mehta: One more big step, we're going to use this verify token thing in a piece of middleware.

805
01:38:20.580 --> 01:38:24.330
Ryan Mehta: So we're going to write a piece of middleware called and for off.

806
01:38:25.980 --> 01:38:30.210
Ryan Mehta: Ensure off is going to exports.

807
01:38:32.370 --> 01:38:33.180
Ryan Mehta: Next,

808
01:38:34.350 --> 01:38:35.310
Ryan Mehta: Some middleware.

809
01:38:36.360 --> 01:38:41.340
Ryan Mehta: This middleware will read the session cookie off of rec cookies.

810
01:38:45.390 --> 01:38:53.550
Ryan Mehta: That'll give us our session cookie with that session cookie. We are going to get our user using our user service.

811
01:38:58.680 --> 01:39:05.430
Ryan Mehta: Dot fair hi token, the session is our token. Right. That's the token that stored inside of the cookie.

812
01:39:07.380 --> 01:39:14.130
Ryan Mehta: And then we will attach direct user this user and call next

813
01:39:18.090 --> 01:39:30.480
Ryan Mehta: That's what this middle liberal do so we'll grab the session cookie will verify that that session cookies, a valid token will set the user to wreck that user and call next

814
01:39:31.950 --> 01:39:41.610
Ryan Mehta: Inside of our verify route and any route that we want to be behind authentication. We are going to use the ensure off middleware.

815
01:39:44.430 --> 01:39:49.770
Ryan Mehta: The ensure off middle where we'll make sure that this session cookies attached that it's a valid cookie.

816
01:39:51.600 --> 01:39:53.010
Ryan Mehta: And then return the user

817
01:39:54.150 --> 01:39:56.250
Ryan Mehta: At this point, we can just raise that said

818
01:39:58.200 --> 01:39:58.560
Sir,

819
01:40:00.060 --> 01:40:03.840
Ryan Mehta: That'll be the current user who's logged in, just sending that back.

820
01:40:06.540 --> 01:40:07.290
Ryan Mehta: This look good.

821
01:40:10.020 --> 01:40:12.300
Ryan Mehta: Or if it doesn't, it's like it's good enough.

822
01:40:14.310 --> 01:40:14.880
Ryan Mehta: Alright.

823
01:40:17.220 --> 01:40:25.650
Ryan Mehta: In order to get this to work. We need that cookie parse or thing that's a piece of middleware that will need and we will add that to app JS.

824
01:40:27.420 --> 01:40:28.470
Ryan Mehta: Added up here.

825
01:40:32.340 --> 01:40:33.120
Cookie.

826
01:40:37.080 --> 01:40:44.550
Ryan Mehta: Cookie is what allows us to do wreck cookies that session. So as we're making requests into this application.

827
01:40:46.710 --> 01:40:48.180
Ryan Mehta: We are going to be sending

828
01:40:50.070 --> 01:41:10.230
Ryan Mehta: This cookie that we have saved here. This is our red dot set cookies session is this token value. So in our middleware. We are grabbing that token value we're verifying that the tokens. Good. If it is good. We are sending back the user

829
01:41:11.700 --> 01:41:13.650
Ryan Mehta: User who owns that cookie.

830
01:41:16.050 --> 01:41:17.430
Ryan Mehta: We have our verify route.

831
01:41:19.080 --> 01:41:27.900
Ryan Mehta: A few small things left on the front end now that we have that verify route in our services. We have another service.

832
01:41:31.020 --> 01:41:32.580
Ryan Meh'm in this case are loading test some state changed afterwards because after the loading.

704
01:22:18.750 --> 01:22:29.010
Ryan Mehta: After we tested for loading the test ended, but the the character fetch finished right after our test ended and change some state. So we just combine the two tests together.

705
01:22:43.560 --> 01:22:46.920
Ryan Mehta: Okay, I kind of want to restart this application from the beginning.

706
01:22:48.030 --> 01:23:01.320
Ryan Mehta: But do it with this new architecture with custom hooks so we can see how we can build this whole thing up with custom hooks and then we'll do the detail page pagination and all of that with custom hooks that seem okay

707
01:23:03.720 --> 01:23:06.960
Ryan Mehta: All right, let me then.

708
01:23:08.340 --> 01:23:09.480
Ryan Mehta: Close this

709
01:23:13.500 --> 01:23:14.400
Ryan Mehta: Project

710
01:23:16.230 --> 01:23:16.860
All right.

711
01:23:18.000 --> 01:23:19.920
Ryan Mehta: I am going to make

712
01:23:21.540 --> 01:23:24.480
Ryan Mehta: You rename this demo directory to

713
01:23:28.170 --> 01:23:29.340
Ryan Mehta: What's a good name for this.

714
01:23:30.450 --> 01:23:31.920
Ryan Mehta: Intro demo.

715
01:23:33.210 --> 01:23:37.920
Ryan Mehta: Okay, and then we'll have another demo directory called demo.

716
01:23:39.450 --> 01:23:40.830
Ryan Mehta: So let's go to

717
01:23:54.990 --> 01:23:55.290
Ryan Mehta: Okay.

718
01:23:57.240 --> 01:23:59.940
Ryan Mehta: Well that's going, I will open it.

719
01:24:12.060 --> 01:24:22.170
Ryan Mehta: Alright, so we're going to restart this entire application. We're going to do our list of characters again. But we're going to approach it from the custom hooks direction instead

720
01:24:28.170 --> 01:24:31.770
Ryan Mehta: Make sure that all of our dependencies are there.

721
01:24:33.600 --> 01:24:34.260
Almost

722
01:24:36.600 --> 01:24:41.910
Ryan Mehta: So I'm gonna just right out of hope. I opened up the wrong.

723
01:24:43.110 --> 01:24:43.950
Ryan Mehta: The wrong project.

724
01:24:52.440 --> 01:25:03.300
Ryan Mehta: Right, here's the right one. This one should be empty. So, and so that having our components containers and services. We're going to end up with our components still

725
01:25:04.920 --> 01:25:05.910
Ryan Mehta: Pages.

726
01:25:08.370 --> 01:25:09.120
Ryan Mehta: Hooks

727
01:25:10.380 --> 01:25:11.130
Ryan Mehta: And

728
01:25:13.200 --> 01:25:13.950
Ryan Mehta: Services.

729
01:25:15.120 --> 01:25:29.100
Ryan Mehta: So components will be where our view layer is all the stuff with the J SX for the most part pages will combine our components together to create an entire page that will be routed to be the router.

730
01:25:30.570 --> 01:25:40.290
Ryan Mehta: Hooks will be where our container like all that container logic east to live it will be where our custom hooks live and services will be our API calls.

731
01:25:42.090 --> 01:25:46.410
Ryan Mehta: This is kind of since we're on the front end we have kind of a big view layer.

732
01:25:47.520 --> 01:25:53.460
Ryan Mehta: But if we were looking at this from our old NBC style stuff are layers.

733
01:25:55.320 --> 01:25:56.370
Ryan Mehta: We have

734
01:26:02.910 --> 01:26:05.310
Ryan Mehta: All the way over here on the left.

735
01:26:06.330 --> 01:26:07.920
Ryan Mehta: We have our data layer.

736
01:26:10.710 --> 01:26:11.550
The data layer.

737
01:26:15.600 --> 01:26:20.070
Ryan Mehta: We run the back end. We call this our end layer right the model there.

738
01:26:21.240 --> 01:26:23.160
Ryan Mehta: This is our services.

739
01:26:26.250 --> 01:26:33.060
Ryan Mehta: Knows how to fetch data from an API or from our backend or whatever. It's all about fetching data receiving data.

740
01:26:34.560 --> 01:26:37.590
Ryan Mehta: In front of that layer we have our

741
01:26:39.840 --> 01:26:40.830
Ryan Mehta: Logic layer.

742
01:26:42.480 --> 01:26:44.430
Ryan Mehta: Or domain.

743
01:26:46.500 --> 01:26:46.920
Where

744
01:26:47.940 --> 01:27:04.710
Ryan Mehta: This is what we call our controller on the back end. This is our business logic, our domain all the stuff that's like very important to our application how our application like manages data and constructs of view and then in front of that we have

745
01:27:06.360 --> 01:27:07.230
Ryan Mehta: The view layer.

746
01:27:12.750 --> 01:27:17.250
Ryan Mehta: So this domain there. Sorry, I forgot to put his hooks.

747
01:27:18.480 --> 01:27:21.390
Ryan Mehta: And this view layer is our components.

748
01:27:23.820 --> 01:27:24.810
Ryan Mehta: And our pages.

749
01:27:27.420 --> 01:27:33.810
Ryan Mehta: Right, this is how things look on the page. This is our business logic and this is how to get data.

750
01:27:35.040 --> 01:27:49.950
Ryan Mehta: These are three layers. The same three layers that we almost always have, like, this is just how I kind of think about applications. There's almost always these three layers some data layer some domain layer and some view layer.

751
01:27:55.980 --> 01:27:57.870
Ryan Mehta: This makes sense these layers.

752
01:28:00.570 --> 01:28:06.210
Ryan Mehta: Alright, so we're going to do our list of things again with characters.

753
01:28:07.860 --> 01:28:12.390
Ryan Mehta: So we're going to start off with our view layer or presentational components.

754
01:28:14.730 --> 01:28:17.820
Ryan Mehta: In our components directory, we're going to make our characters.

755
01:28:19.890 --> 01:28:23.430
Ryan Mehta: Folder and inside of there will have a character item.

756
01:28:24.780 --> 01:28:32.880
Ryan Mehta: That J sx. This will be a purely functional component called character item.

757
01:28:37.230 --> 01:28:50.610
Ryan Mehta: Item our character item will receive a name which is a string that is required and an image URL, which is a string that is required.

758
01:28:52.770 --> 01:28:55.200
Ryan Mehta: I'm going to kind of rush through some of this part because

759
01:28:56.280 --> 01:28:58.740
Ryan Mehta: You just saw, and I think

760
01:29:02.700 --> 01:29:10.710
Ryan Mehta: I think we kind of, for the most part, get this part. Let me stop me though. If you have any questions, as I'm writing this stuff.

761
01:29:13.230 --> 01:29:26.040
Ryan Mehta: So we'll have our alt and main Excel. So here's our character item. I'm not going to write a snapshot tests we already wrote one of those earlier, this should look fairly similar to what we did before.

762
01:29:27.600 --> 01:29:32.610
Ryan Mehta: In addition to our character item. We also have a character.

763
01:29:34.890 --> 01:29:37.650
Ryan Mehta: A character list JS X Files.

764
01:29:39.360 --> 01:29:42.420
Ryan Mehta: And this is also going to be a presentation or component

765
01:29:44.880 --> 01:29:58.770
Ryan Mehta: Right now, and received is going to receive no props. What we're going to do instead is habit received data from our custom hook sector list knows exactly what it wants to display it wants to display a list of characters.

766
01:30:00.210 --> 01:30:06.390
Ryan Mehta: We're gonna have a hook that gets that list of characters that can be utilized in our character list component

767
01:30:07.500 --> 01:30:23.910
Ryan Mehta: So let's also make a character list dot test that J SX and make sure character list can do some of these behaviors that we want it to do. Oh, my clothes that really quick.

768
01:30:25.320 --> 01:30:25.920
Ryan Mehta: Open it.

769
01:30:29.220 --> 01:30:31.500
Can I track now perfect

770
01:30:33.120 --> 01:30:40.590
Ryan Mehta: Alright, so we're going to test our character list. We're going to import react react.

771
01:30:41.820 --> 01:30:44.790
Ryan Mehta: We're also going to import render

772
01:30:49.410 --> 01:30:50.790
Ryan Mehta: Testing library.

773
01:30:52.230 --> 01:30:52.920
Ryan Mehta: React

774
01:30:53.970 --> 01:30:55.830
Ryan Mehta: We're going to describe our

775
01:30:57.150 --> 01:30:58.710
Ryan Mehta: List component

776
01:31:01.620 --> 01:31:12.150
Ryan Mehta: Alright circular list is going to change its view, depending on a few things. The real beauty about testing here at this level.

777
01:31:12.750 --> 01:31:17.460
Ryan Mehta: Is by testing our component that uses our hook will also be testing our hook

778
01:31:18.330 --> 01:31:27.600
Ryan Mehta: We don't have to test her hook independent of the view, we're in a front end react application. So we're not we're not going to test the individual data transfers.

779
01:31:28.020 --> 01:31:31.290
Ryan Mehta: We're going to test that given we're using the using this suck.

780
01:31:32.010 --> 01:31:40.950
Ryan Mehta: Does the component do the right things, does the right things show up on the screen. All we really care about on the front end is at the screen looks like what we expect it to look like.

781
01:31:41.400 --> 01:31:48.090
Ryan Mehta: We don't care how the screen. Got to this state. We just care that it gets to that state that the user sees the right stuff.

782
01:31:49.710 --> 01:31:56.520
Ryan Mehta: So it let's say displays a list of characters.

783
01:32:00.450 --> 01:32:01.710
Ryan Mehta: After a

784
01:32:03.990 --> 01:32:04.530
Ryan Mehta: Load

785
01:32:07.980 --> 01:32:11.310
Ryan Mehta: What test that it's actually brief but you get it.

786
01:32:12.600 --> 01:32:16.560
Ryan Mehta: So will will render our character list.

787
01:32:19.290 --> 01:32:19.770
Ryan Mehta: So,

788
01:32:21.390 --> 01:32:29.640
Ryan Mehta: After the character list loads or renders we expect on the screen to be able to get

789
01:32:31.680 --> 01:32:32.490
Text.

790
01:32:37.260 --> 01:32:38.430
Ryan Mehta: This test should fail.

791
01:32:43.050 --> 01:32:45.390
Ryan Mehta: Because we're not actually rendering anything yet.

792
01:32:47.040 --> 01:32:48.000
Ryan Mehta: Look good so far.

793
01:32:50.190 --> 01:32:53.910
Ryan Mehta: At this point before we can actually get this loading state and everything.

794
01:32:54.990 --> 01:33:08.190
Ryan Mehta: We need to create start creating our custom hook so in our hooks directory. I'm going to make a characters JS file, it's important. This is a JS file, it's not a j SX file.

795
01:33:09.390 --> 01:33:14.640
Ryan Mehta: It actually, it won't break anything if you make this a jazz X file, it's just kind of semantically wrong.

796
01:33:17.760 --> 01:33:24.420
Ryan Mehta: So from this file. We're going to export our US characters.

797
01:33:25.680 --> 01:33:27.720
Ryan Mehta: These characters is a function

798
01:33:30.060 --> 01:33:34.980
Ryan Mehta: Right now all we need our custom hope to do is create some loading state.

799
01:33:39.330 --> 01:33:43.650
Ryan Mehta: We'll start off that loading state as true.

800
01:33:44.760 --> 01:33:48.120
Ryan Mehta: And will return an object with that loading state.

801
01:33:53.520 --> 01:33:55.470
And let's move this over.

802
01:33:56.760 --> 01:33:57.930
Ryan Mehta: I lost it already.

803
01:34:01.410 --> 01:34:01.770
Okay.

804
01:34:04.770 --> 01:34:05.760
Ryan Mehta: That's so annoying to me.

805
01:34:08.460 --> 01:34:14.070
Ryan Mehta: Alright, so we have this custom hook that exports this loading state for us.

806
01:34:15.180 --> 01:34:34.890
Ryan Mehta: Our test should totally fail does back in our character list, we're going to grab that loading state from our US characters custom hook and then if we're in a loading state, we're going to return an H1 that says loading.

807
01:34:36.450 --> 01:34:37.770
Ryan Mehta: Kind of like what we did before.

808
01:34:39.090 --> 01:34:40.110
Ryan Mehta: test passes.

809
01:34:41.160 --> 01:34:46.980
Ryan Mehta: After we have that loading state we expect at some point in the future.

810
01:34:49.230 --> 01:34:51.810
Ryan Mehta: To be able to find

811
01:34:53.340 --> 01:34:54.900
This week, a sink.

812
01:34:56.250 --> 01:34:57.480
Ryan Mehta: On the screen.

813
01:34:59.880 --> 01:35:01.440
Ryan Mehta: Our character.

814
01:35:02.610 --> 01:35:03.990
Ryan Mehta: Or characters, lest

815
01:35:06.360 --> 01:35:07.260
Ryan Mehta: They should fail.

816
01:35:09.630 --> 01:35:17.820
Ryan Mehta: fails because we're never rendering our characters list yet. We're only rendering this loading screen right now make sense.

817
01:35:19.860 --> 01:35:33.480
Ryan Mehta: All right. And then we also let's finish this test, a little bit expect after the character list does make it onto the page. We expect the character list, not to

818
01:35:35.820 --> 01:35:40.860
Ryan Mehta: Empty DOM element. So it should have some list items in it as well.

819
01:35:42.390 --> 01:35:49.500
Ryan Mehta: All right, to get this thing to actually return a list of characters we need to go back to our custom hook

820
01:35:51.270 --> 01:35:55.950
Ryan Mehta: We need to add our characters piece of state and sick characters.

821
01:35:58.920 --> 01:36:07.800
Ryan Mehta: This is going to US state, it's going to be an empty array, and we will return our characters here.

822
01:36:10.260 --> 01:36:17.070
Ryan Mehta: We want to do a little bit more of that we don't just want to return an empty array we actually want to fetch data from an API.

823
01:36:17.580 --> 01:36:37.530
Ryan Mehta: And set that two characters to fetch data from an API, we need to go back one layer into our data layer into our services. So in services. I'm going to make a Rick and Morty API got JS file. Yeah, this is a JS file, not a j SX file. There's no gas execute

824
01:36:39.930 --> 01:36:42.930
Ryan Mehta: We're going to get characters from our API.

825
01:36:44.460 --> 01:36:46.920
Ryan Mehta: We are, let's make this a sink.

826
01:36:50.340 --> 01:36:59.010
Ryan Mehta: We are going to get a response by awaiting our fetch request. I don't remember the URL, but we'll grab that in a second.

827
01:37:00.060 --> 01:37:06.120
Ryan Mehta: We're also going to get JSON right awaiting was that JSON.

828
01:37:07.260 --> 01:37:14.670
Ryan Mehta: And then we'll say if there's dot okay if we're not okay we'll throw

829
01:37:18.810 --> 01:37:19.950
Unable to

830
01:37:21.450 --> 01:37:32.430
Ryan Mehta: Throw a little error message. Otherwise, we'll return. We'll get the results from our JSON format through it. For each character, we will construct

831
01:37:33.450 --> 01:37:36.870
Ryan Mehta: A character with an ID a name.

832
01:37:38.400 --> 01:37:40.410
Ryan Mehta: And an image URL.

833
01:37:44.490 --> 01:37:52.230
Ryan Mehta: And I just kind of remember from a second ago that we needed to convert image to image URL. I was a big thing.

834
01:37:54.120 --> 01:37:58.380
Ryan Mehta: Let's go back to our browser. So we can steal

835
01:38:01.170 --> 01:38:01.740
That thing.

836
01:38:03.630 --> 01:38:06.120
Ryan Mehta: So we have our service. Now the service in good

837
01:38:10.080 --> 01:38:10.470
Ryan Mehta: Back.

838
01:38:10.500 --> 01:38:15.540
Ryan Mehta: In our custom hook, we can utilize this service with the user effect.

839
01:38:18.270 --> 01:38:33.600
Ryan Mehta: Or use effect only wants to run with the component first mount. So we'll have an empty array here in the US effect we're going to use our newly created get character service to get some FX characters.

840
01:38:34.890 --> 01:38:38.490
Ryan Mehta: He will set our characters to those fetched characters.

841
01:38:40.950 --> 01:38:43.140
Ryan Mehta: And then after we're done fetching

842
01:38:45.120 --> 01:38:48.780
Ryan Mehta: We will set our loading state to false.

843
01:38:50.490 --> 01:38:53.370
Ryan Mehta: And I think that will get our test to pass.

844
01:38:59.160 --> 01:38:59.520
Me.

845
01:39:01.980 --> 01:39:05.070
Ryan Mehta: Or it will just totally break, everything's broken

846
01:39:06.750 --> 01:39:07.530o we want that. But yeah, how are you

869
01:41:25.200 --> 01:41:30.930
Ryan Mehta: All right, function look good. Everyone question. It's just an isolation right now.

870
01:41:30.990 --> 01:41:44.700
Ron Yonker: This function. Yeah, that looks immensely more understandable to me. Cool. So another point. Uh, what were you saying about the JSON result underscore URL.

871
01:41:45.840 --> 01:41:55.260
Ryan Mehta: This is going to make it so when whoever calls this function will get back, just the short URL here, not the entire object.

872
01:42:01.410 --> 01:42:07.770
Ron Yonker: Let's see that in just okay yeah so that's in the JSON itself. So you can say I just want that.

873
01:42:10.080 --> 01:42:10.650
Ron Yonker: Exactly.

874
01:42:14.100 --> 01:42:24.510
Ryan Mehta: All right, let's replace all of this stuff that we had over here with our shortener now. So we'll have our shortener

875
01:42:25.800 --> 01:42:33.960
Ryan Mehta: We need to pass our shortener the long URL. So this thought state that long URL, and then we'll get our short URL.

876
01:42:35.040 --> 01:42:40.170
Ryan Mehta: Right, because this just returns that result URL, which is the short version of our URL.

877
01:42:42.000 --> 01:42:45.360
Ryan Mehta: We need to do something with this shortened URL where should we put it

878
01:42:53.310 --> 01:42:54.210
Thomas Stussi: In state also

879
01:42:54.810 --> 01:42:57.480
Ryan Mehta: Yeah, let's put it in state or tomorrow.

880
01:42:58.920 --> 01:43:01.080
Ryan Mehta: We'll start off with started off as know

881
01:43:02.310 --> 01:43:03.330
Ryan Mehta: And then when we get it.

882
01:43:04.380 --> 01:43:06.570
Ryan Mehta: We will set state.

883
01:43:08.430 --> 01:43:09.330
Ryan Mehta: short URL.

884
01:43:13.260 --> 01:43:14.730
Ryan Mehta: So now we're setting state.

885
01:43:15.810 --> 01:43:20.340
Ryan Mehta: If we wanted to, we could also make this an AC function. Let's make sure it works. First, and we can

886
01:43:22.650 --> 01:43:26.070
Ryan Mehta: refactor this a little bit and use a single weight instead

887
01:43:28.560 --> 01:43:31.680
Ryan Mehta: So let's go and grab this long URL again.

888
01:43:33.030 --> 01:43:44.700
Ryan Mehta: Paste it over here this time when I press the submit button we expect our short URL state to go from no to an actual short URL. Let's try submitting

889
01:43:45.810 --> 01:43:48.540
Ryan Mehta: You see our state updates with that short URL.

890
01:43:52.260 --> 01:44:07.470
Ryan Mehta: If we wanted to. If you all are more comfortable with a sink away. This could totally be an AC function and instead of dot Denning off of shortener, you could say concepts short URL equals await shortener

891
01:44:08.550 --> 01:44:10.110
Ryan Mehta: And then on the next line.

892
01:44:11.580 --> 01:44:13.920
Ryan Mehta: Set state. They're both they're the same thing.

893
01:44:16.920 --> 01:44:21.330
Ryan Mehta: We can. I'm going to get rid of this console log now because it's not really serving a purpose anymore.

894
01:44:22.410 --> 01:44:23.970
Ryan Mehta: But we should be able to

895
01:44:27.270 --> 01:44:32.130
Ryan Mehta: run this again and it works the same way we get our short URL here.

896
01:44:35.160 --> 01:44:45.420
Ryan Mehta: One last little thing that would be nice, is to underneath this form display that short URL that we get

897
01:44:46.650 --> 01:44:50.580
Ryan Mehta: So I'm going to say if we have a short URL.

898
01:44:56.370 --> 01:45:01.740
Ryan Mehta: You all have done the conditional rendering right short URL and

899
01:45:02.820 --> 01:45:09.180
Ryan Mehta: Then we'll make a link that he graphs to the shortened URL.

900
01:45:10.710 --> 01:45:13.050
Ryan Mehta: And will also display this short URL.

901
01:45:19.980 --> 01:45:22.590
Ben Waples: Missing curly brace.

902
01:45:24.450 --> 01:45:25.920
Ryan Mehta: All right. How does that look

903
01:45:30.120 --> 01:45:44.880
Ryan Mehta: So short URL. Before we submit the form is now after we submit the form short URL fills in with the actual URL, which will make it so it's a string. So we'll go to this second half of this ampersand.

904
01:45:45.600 --> 01:45:53.550
Ryan Mehta: And will display an a tag, where the H reference that short URL and the text of the link is also that short URL.

905
01:45:54.720 --> 01:45:59.520
Ryan Mehta: So now when we go back to our form copy this link.

906
01:46:00.870 --> 01:46:06.330
Ryan Mehta: Paste in our URL create our short URL, it displays the shortened URL.

907
01:46:07.560 --> 01:46:08.310
At the bottom

908
01:46:09.780 --> 01:46:11.700
Just a moment. Nice.

909
01:46:13.020 --> 01:46:13.350
Okay.

910
01:46:14.670 --> 01:46:16.500
Ryan Mehta: It's a short and slow URL.

911
01:46:25.800 --> 01:46:27.030
That code makes sense.

912
01:46:34.530 --> 01:46:36.510
Ryan Mehta: Which parts of don't quite make sense.

913
01:46:45.600 --> 01:46:46.620
Ben Waples: Fetch function again.

914
01:46:50.250 --> 01:46:58.650
Ben Waples: I'm online nine content type is that in quotes because the hyphen. The hyphen. Yeah, it's just like, yeah.

915
01:47:05.670 --> 01:47:11.370
Ben Waples: It is fetch live in JavaScript, or do you didn't like have to end PM, is that train

916
01:47:12.060 --> 01:47:14.910
Ryan Mehta: Yeah, it's, um, it's a browser thing.

917
01:47:15.210 --> 01:47:16.140
Ryan Mehta: That lives on the browser.

918
01:47:20.580 --> 01:47:24.690
Ryan Mehta: That's the reason why I've been preferring node fetch over superagent

919
01:47:26.610 --> 01:47:31.950
Ryan Mehta: Because then on the front end, you don't need to install an extra package, you can just use Fetch

920
01:47:34.680 --> 01:47:40.500
Ryan Mehta: And there's already so many dependencies on the front end that I'm like constantly trying to not add another one.

921
01:47:49.380 --> 01:47:56.250
Sarah Rector: Hey rain. Where are you defining long URL or kind of where is that coming from, I guess.

922
01:47:56.940 --> 01:47:57.930
Ryan Mehta: Yeah, so it's right.

923
01:47:57.990 --> 01:48:03.090
Ryan Mehta: It's in state appear and then it's the structured off of stay online.

924
01:48:05.280 --> 01:48:09.570
Ryan Mehta: And then when you type into this input field.

925
01:48:10.620 --> 01:48:12.690
Ryan Mehta: It's changing the long URL.

926
01:48:15.030 --> 01:48:23.490
Ryan Mehta: And then when you submit this form, it's taking that long URL passing it to shortener over here.

927
01:48:24.540 --> 01:48:28.890
Ryan Mehta: And then shortener is passing that long URL to the API.

928
01:48:32.700 --> 01:48:33.450
Yeah, thank you.

929
01:48:39.210 --> 01:48:52.950
Ron Yonker: So Ryan, a little bit about, I think it's the destruction on line 10 of short URL, you're passing in the object our debt arm.

930
01:48:55.110 --> 01:49:03.720
Ron Yonker: What, like how, how is that working like we're otherwise you will be passing in like the synthetic event is what you call it right

931
01:49:04.290 --> 01:49:06.930
Ryan Mehta: Yep. So this is an event.

932
01:49:08.370 --> 01:49:17.490
Ryan Mehta: And normally, you would do event that target that value. I'm simply not using event anywhere else. It's just the structuring I get off of that event right

933
01:49:17.970 --> 01:49:28.620
Ron Yonker: So, so why does enclosing like the target like that property of it and the object, a lot of you to do that is I think what I'm missing.

934
01:49:29.400 --> 01:49:33.090
Ryan Mehta: Yeah, this is the restructuring syntax. So it's not an object.

935
01:49:33.150 --> 01:49:35.970
Ryan Mehta: Here, it's the district same married is over here.

936
01:49:39.870 --> 01:49:41.880
Ryan Mehta: So whenever you define a function

937
01:49:42.360 --> 01:49:46.710
Ryan Mehta: You can D structure, the things that are coming into the function right away.

938
01:49:51.840 --> 01:49:55.440
Ryan Mehta: So this is more like those curly braces are on the left hand side of an equal

939
01:49:57.210 --> 01:49:59.070
Ron Yonker: They're not on the right hand side of any

940
01:50:01.260 --> 01:50:12.480
Jerud Moyer: Of the right, the right hand side. In the case of line 22 is this state. But in the case of wine 10 it's implied because it's a argument for function. Right. Exactly. Yeah.

941
01:50:24.510 --> 01:50:26.460
Shawn Carpenter: Changing of the

942
01:50:29.250 --> 01:50:37.170
Shawn Carpenter: From the promise change to the basic wait that just a friend or is there a reason to choose one over the other.

943
01:50:39.600 --> 01:50:40.800
Ryan Mehta: Clearly preference.

944
01:50:42.240 --> 01:50:42.960
Ryan Mehta: They're the same.

945
01:50:49.980 --> 01:50:52.290
Brooke Perkins (she/her): So you said you work with promise chance mostly right

946
01:50:53.040 --> 01:50:54.150
Ryan Mehta: Yeah, I almost do

947
01:50:54.210 --> 01:51:00.570
Ryan Mehta: I default to promise chains. Usually, but I'm trying to use more a Segway nowadays.

948
01:51:01.980 --> 01:51:03.630
Brooke Perkins (she/her): You say it's like the hip new thing.

949
01:51:04.050 --> 01:51:05.850
Ryan Mehta: It is. It's totally hip and cool.

950
01:51:19.980 --> 01:51:20.160
Ryan Mehta: Good.

951
01:51:22.590 --> 01:51:24.360
Ryan Mehta: Okay. Let's make one more app.

952
01:51:28.440 --> 01:51:30.540
Ryan Mehta: And then we'll be done for the day.

953
01:51:32.610 --> 01:51:33.900
Let's stop this one.

954
01:51:36.750 --> 01:51:39.360
Ryan Mehta: Bring back this thing.

955
01:51:48.360 --> 01:51:48.990
Is called

956
01:51:54.930 --> 01:52:03.180
Ryan Mehta: This API is kind of cool. We're going to use this API to get all of the links on a page. So

957
01:52:05.010 --> 01:52:16.770
Ryan Mehta: You pass you make a GET request to this URL and pass it a target URL and it will extract like all of the clickable links on Google com, for example.

958
01:52:17.880 --> 01:52:19.530
Ryan Mehta: So if I ran this

959
01:52:20.670 --> 01:52:22.320
Ryan Mehta: In my terminal with curl.

960
01:52:26.310 --> 01:52:30.840
Ryan Mehta: It will give me back all of the clickable links on Google com

961
01:52:35.640 --> 01:52:36.690
Ryan Mehta: That kind of makes sense.

962
01:52:39.210 --> 01:52:44.220
Ryan Mehta: So like if you went to google.com there's a link for maps actually go to

963
01:52:45.390 --> 01:52:46.110
Ryan Mehta: Com.

964
01:52:48.960 --> 01:53:05.880
Ryan Mehta: There's like a link to maps. There's all these links search store about whatever. These are just all the links that I found on Google com so you could put in like some other website and just see all of the places that website. Thanks to

965
01:53:07.230 --> 01:53:09.510
Ryan Mehta: I guess it's not terribly interesting. I just think it's cool.

966
01:53:11.130 --> 01:53:13.560
Adrian Simental: Hosting just the unique domains.

967
01:53:14.700 --> 01:53:16.830
Ryan Mehta: The host names of the unique domains. Yeah.

968
01:53:19.740 --> 01:53:20.790
Ryan Mehta: And like account.

969
01:53:21.030 --> 01:53:23.130
Jerud Moyer: Sorry. How did you get all that information again.

970
01:53:23.910 --> 01:53:24.930
Ryan Mehta: This is just an API.

971
01:53:26.010 --> 01:53:27.960
Ryan Mehta: So it's an API, you

972
01:53:29.760 --> 01:53:32.160
Ryan Mehta: Go to this URL and provide a

973
01:53:32.160 --> 01:53:33.300
Jerud Moyer: Target and

974
01:53:33.360 --> 01:53:40.380
Ryan Mehta: The website that you want to get all the links to and it returns all the links that page. Cool.

975
01:53:42.690 --> 01:53:46.890
Ryan Mehta: So we're going to build a little website or little app that

976
01:53:50.100 --> 01:54:03.330
Ryan Mehta: Kind of like this will have a page on the page will have an input and a button, you'll put in a website that you want all the links to some URL.

977
01:54:04.350 --> 01:54:10.740
Ryan Mehta: And then underneath the form, it'll display a list of all of those links.

978
01:54:13.110 --> 01:54:23.340
Ryan Mehta: So very similar to what we just did, except instead of displaying a short URL, it will display all of the links on the page.

979
01:54:26.340 --> 01:54:27.210
Ryan Mehta: Soon. Good.

980
01:54:28.050 --> 01:54:31.770
Brooke Perkins (she/her): Make sense I an embarrassing question what is curl again.

981
01:54:32.910 --> 01:54:36.630
Ryan Mehta: It's just the command line version of post, man.

982
01:54:37.380 --> 01:54:40.530
Brooke Perkins (she/her): Oh, that's right. Okay, I am having

983
01:54:41.610 --> 01:54:46.380
Brooke Perkins (she/her): Some brain farts today, remembering these things. So thank you.

984
01:54:49.950 --> 01:54:50.460
Ryan Mehta: Okay.

985
01:54:53.340 --> 01:54:58.590
Ryan Mehta: That's good. So let's open up our page thinks

986
01:55:00.000 --> 01:55:01.080
Ryan Mehta: Application.

987
01:55:02.250 --> 01:55:03.000
This thing.

988
01:55:08.070 --> 01:55:08.730
Ryan Mehta: This

989
01:55:09.900 --> 01:55:10.230
Ryan Mehta: Okay.

990
01:55:12.450 --> 01:55:23.550
Ryan Mehta: So, same sort of flow inside of source inside of components. I'm going to make a new directory called page links. Oops.

991
01:55:27.330 --> 01:55:35.550
Ryan Mehta: A new directory called page links and a file called page links. Gotcha. So next

992
01:55:37.770 --> 01:55:43.590
Ryan Mehta: Let's make a class component. So we're going to import react and component

993
01:55:45.660 --> 01:55:50.340
Ryan Mehta: From react. We're going to export fault class.

994
01:56:02.550 --> 01:56:05.460
Ryan Mehta: For now, let's just return an H1.

995
01:56:06.600 --> 01:56:16.230
Ryan Mehta: That says hi to make sure we can render everything correctly. I'm going to drop page links into App JS x, so it gets rendered on the page.

996
01:56:17.640 --> 01:56:18.300
Ryan Mehta: And

997
01:56:19.320 --> 01:56:21.180
Ryan Mehta: Start our application.

998
01:56:22.560 --> 01:56:24.780
Ryan Mehta: And just make sure that it actually

999
01:56:26.550 --> 01:56:27.570
Ryan Mehta: Displays

1000
01:56:30.690 --> 01:56:32.430
Ryan Mehta: something rather than nothing.

1001
01:56:35.010 --> 01:56:37.830
Ryan Mehta: I need to fix this need to fix this. Before you all

1002
01:56:39.840 --> 01:56:40.350
Of that

1003
01:56:42.210 --> 01:56:42.630
Ryan Mehta: Okay.

1004
01:56:43.980 --> 01:57:02.430
Ryan Mehta: So there's a little high. So we started our page links application, we said we wanted to have an input at the top inside of a form. So let's create our form and inside of our forum will have an input of type text.

1005
01:57:03.660 --> 01:57:10.140
Ryan Mehta: It's going to have a value that equals something and on type against the input, it needs to change to something

1006
01:57:12.630 --> 01:57:14.670
Ryan Mehta: We're going to get this value from state.

1007
01:57:15.900 --> 01:57:32.370
Ryan Mehta: So inside of state will have a URL that will start off as an empty string. We will pass that URL to our input by D structuring it off of this dot states and then putting URL inside of these curly braces.

1008
01:57:34.350 --> 01:57:39.660
Ryan Mehta: On changing the input we will trigger a handle change function.

1009
01:57:40.770 --> 01:57:43.320
Ryan Mehta: That will be structured target off of event.

1010
01:57:44.610 --> 01:57:59.700
Ryan Mehta: When this function is invoked. We're going to set state. We're going to set the URL state to whatever the target value equals and then we'll pass this handle change function to our on change here.

1011
01:58:01.440 --> 01:58:06.750
Ryan Mehta: We can test this to make sure it actually changes in our browser, we

1012
01:58:07.920 --> 01:58:10.560
Ryan Mehta: Type into this and it's just a

1013
01:58:16.560 --> 01:58:16.980
Ryan Mehta: Okay.

1014
01:58:18.990 --> 01:58:26.070
Ryan Mehta: Next thing that we want to do i
658
01:21:30.720 --> 01:21:33.060
Ryan Mehta: And a fill all

659
01:21:34.770 --> 01:21:47.250
Ryan Mehta: The luxuries stop J sx. So we'll have an all villagers container and also an all villagers test that jazz sex.

660
01:21:49.110 --> 01:21:57.480
Ryan Mehta: So we kind of talked about it. It didn't really make it the way to our picture but we kind of talked about it at the very beginning, or, I guess, more like at the end.

661
01:21:58.800 --> 01:22:05.700
Ryan Mehta: That we want this loading screen to display until we get a list of villagers to display.

662
01:22:08.070 --> 01:22:08.760
Ryan Mehta: So,

663
01:22:10.440 --> 01:22:14.760
Ryan Mehta: Let's start off our test import stuff from

664
01:22:16.410 --> 01:22:21.570
Ryan Mehta: Testing library react, you need at least render and screen.

665
01:22:22.710 --> 01:22:24.180
Ryan Mehta: We're going to describe

666
01:22:30.270 --> 01:22:31.260
Ryan Mehta: Cleaner.

667
01:22:33.630 --> 01:22:41.820
Ryan Mehta: The first little test that we want is to make sure that it displays a loadings thing.

668
01:22:43.350 --> 01:22:51.990
Ryan Mehta: At the start. So when we first load our villagers container, we should see some sort of loading screen on the page.

669
01:22:55.140 --> 01:22:55.800
Ryan Mehta: All right.

670
01:22:57.150 --> 01:23:04.380
Ryan Mehta: We're gonna do that by rendering our all villagers. Oh well.

671
01:23:05.970 --> 01:23:10.320
Ryan Mehta: Sadly scaffold this a little bit too so I can get the auto import

672
01:23:22.140 --> 01:23:23.610
Ryan Mehta: We can run our tests.

673
01:23:25.980 --> 01:23:33.660
Ryan Mehta: Wow that's going, let's make sure that we import component from react and have our all villagers extend

674
01:23:34.890 --> 01:23:35.640
Ryan Mehta: Component.

675
01:23:37.740 --> 01:23:39.540
Ryan Mehta: We should get some sort of failure here.

676
01:23:40.680 --> 01:23:45.210
Ryan Mehta: Perfect. We don't have a render method. So let's render

677
01:23:47.670 --> 01:23:52.320
Ryan Mehta: Render method is going to return our loading eventually it's returning

678
01:23:54.030 --> 01:23:59.040
Ryan Mehta: Scott. Let's just have this, say hi. For now, and make sure our test passes.

679
01:24:04.980 --> 01:24:06.990
Ryan Mehta: Okay. All of our tests pass

680
01:24:08.070 --> 01:24:11.790
Ryan Mehta: Next we're going to want to grab something from the screen right

681
01:24:13.020 --> 01:24:22.860
Ryan Mehta: So let's say cost loading equals, we're going to take our screen. We're going to get something in the ideas of what we should get

682
01:24:24.360 --> 01:24:32.520
Ryan Mehta: So we have get by display value get by alt text get by title get by placeholder and get by role.

683
01:24:37.380 --> 01:24:55.860
Ryan Mehta: I actually think to be like accessible are loading screens should have an alt text right all images are supposed to have alt text and are all texts will be like loading screen or like leaf. That is a loading screen.

684
01:24:57.000 --> 01:24:58.530
I don't know, something like that.

685
01:24:59.940 --> 01:25:01.560
Ryan Mehta: Something that describes the image.

686
01:25:06.000 --> 01:25:13.890
Ryan Mehta: And right now, this is failing unable to find an element with the alt text leaf. That is a loading screen.

687
01:25:15.510 --> 01:25:18.570
Ryan Mehta: Two things that we need to do to get this test to pass right

688
01:25:20.610 --> 01:25:29.520
Ryan Mehta: First, we need to make sure that we actually use our loading spinner over here. Make sure I can auto import that

689
01:25:35.970 --> 01:25:47.910
Ryan Mehta: And then the second thing we need to make sure our image actually has that alt text which we should have done and thought about to begin with because we want, want to be as accessible as possible and such an easy thing to add

690
01:25:50.370 --> 01:25:54.360
Ryan Mehta: So let's add our alt text.

691
01:25:55.560 --> 01:25:56.550
Ryan Mehta: To our image.

692
01:25:57.900 --> 01:26:02.100
Ryan Mehta: And that should get our test to pass hopefully

693
01:26:04.770 --> 01:26:05.160
Okay.

694
01:26:06.930 --> 01:26:18.750
Ryan Mehta: So it's actually a super basic test we render all villagers onto the screen and we make sure that there is this loading spinner on the screen.

695
01:26:19.920 --> 01:26:21.180
Ryan Mehta: That's all it's doing right now.

696
01:26:23.610 --> 01:26:24.450
Ryan Mehta: Let's see. Good.

697
01:26:26.610 --> 01:26:30.750
Ryan Mehta: Alright, I'm also going to before I forget, add are all villagers.

698
01:26:32.130 --> 01:26:35.040
Ryan Mehta: To our homepage.

699
01:26:38.670 --> 01:26:39.030
Ryan Mehta: Okay.

700
01:26:40.470 --> 01:26:43.020
Ryan Mehta: Any questions about that loading screen same

701
01:26:44.070 --> 01:26:44.430
Okay.

702
01:26:46.710 --> 01:26:47.250
Ryan Mehta: All right.

703
01:26:48.450 --> 01:26:57.990
Ryan Mehta: Let's go into like the more fun part of this application. Now let's make our villager and our villager list presentational components.

704
01:26:59.580 --> 01:27:05.220
Ryan Mehta: So inside of components. I'm going to make another directory called villagers.

705
01:27:06.600 --> 01:27:08.340
Ryan Mehta: And then I'm going to make a village.

706
01:27:09.570 --> 01:27:16.740
Ryan Mehta: Sure J SX file. This is where we're going to have our individual villager presentational components.

707
01:27:18.120 --> 01:27:29.310
Ryan Mehta: presentational components are going to be functions for us. So import from react. We're also going to need some sort of prop types because we need to know what sort of villager

708
01:27:31.800 --> 01:27:33.270
Ryan Mehta: We are going to display.

709
01:27:34.290 --> 01:27:35.160
Prop

710
01:27:38.910 --> 01:27:41.310
Ryan Mehta: Ever been calling these prop type of prop types.

711
01:27:44.280 --> 01:27:45.930
Thomas Stussi: I think plural. Okay.

712
01:27:51.900 --> 01:27:59.160
Ryan Mehta: Create our component will export our component. And then we also want to add some prop types.

713
01:28:02.910 --> 01:28:06.420
Ryan Mehta: Here we can decide what we want our villager prop types to be

714
01:28:07.440 --> 01:28:19.020
Ryan Mehta: It looks like in our picture, we're displaying the villagers name and an image of the villager a picture of them. So I'm going to have it have to profit tax and name.

715
01:28:22.350 --> 01:28:28.380
Ryan Mehta: That is required string and an image that is also a required stream.

716
01:28:29.430 --> 01:28:35.340
Ryan Mehta: It's going to be a URL to an image. So maybe image URL slightly better

717
01:28:37.620 --> 01:28:39.720
Ryan Mehta: We can restructure these props here.

718
01:28:41.160 --> 01:28:43.170
Ryan Mehta: And then we're going to display.

719
01:28:44.280 --> 01:29:11.430
Ryan Mehta: Our villager. I'm going to put it inside of a fragment, actually. Oh, there's that fig fig your great a figure has a fig taxation, which will put our villagers name inside of and an image Src will be image URL all will be the name of our character.

720
01:29:13.050 --> 01:29:13.950
Ryan Mehta: Something like that.

721
01:29:16.410 --> 01:29:17.070
Ryan Mehta: That was good.

722
01:29:20.580 --> 01:29:33.900
Ryan Mehta: So we have an individual villager, which is a figure with the villagers image and the villagers name as a caption. Let's just go back to app JS and manually.

723
01:29:35.910 --> 01:29:49.350
Ryan Mehta: Test this if we have an individual villager they need a name and an image URL. I'm going to go to that API and just steal a villager the Admiral

724
01:29:53.220 --> 01:29:56.850
Ryan Mehta: And the Admirals image is this thing.

725
01:30:01.980 --> 01:30:04.320
Ryan Mehta: Okay, and let's see what it looks like.

726
01:30:05.700 --> 01:30:16.110
Ryan Mehta: On our page. It's beautiful. It needs a little bit of styling, for sure. It's probably be slightly smaller and this Admiral text should be centered. I think

727
01:30:18.780 --> 01:30:25.800
Ryan Mehta: So let's go back to our villager let's add villager dot CSS.

728
01:30:27.510 --> 01:30:28.320
Ryan Mehta: And

729
01:30:29.760 --> 01:30:32.160
Ryan Mehta: We're going to have the lecture.

730
01:30:33.570 --> 01:30:35.850
Ryan Mehta: Will import our styles.

731
01:30:43.410 --> 01:30:47.400
Ryan Mehta: And will apply that class name to our

732
01:30:48.720 --> 01:30:49.080
Village.

733
01:30:51.600 --> 01:31:02.910
Ryan Mehta: So we're applying the class name that we set up here to our figure. And now we can start manipulating disfigure a little bit. Let's have it have a max width of

734
01:31:04.200 --> 01:31:07.170
Ryan Mehta: five gram. What does that look like

735
01:31:10.560 --> 01:31:12.450
Ryan Mehta: It looks unchanged.

736
01:31:13.980 --> 01:31:15.900
Annalise Murphy: And my God. These are the areas

737
01:31:17.970 --> 01:31:25.410
Ryan Mehta: Because the image itself is still the figures small now, but the image itself is still gigantic

738
01:31:26.820 --> 01:31:27.450
Ryan Mehta: So,

739
01:31:28.860 --> 01:31:32.430
Ryan Mehta: Let's make sure that we also make the image.

740
01:31:34.800 --> 01:31:42.210
Ryan Mehta: Let's do this like a width of five RAM and the image max width of five.

741
01:31:43.470 --> 01:31:43.950
Ryan Mehta: Gram.

742
01:31:45.930 --> 01:31:48.510
Ryan Mehta: And it should have like no padding maybe padding.

743
01:31:50.340 --> 01:31:50.940
Ryan Mehta: Hero.

744
01:31:52.470 --> 01:31:54.120
Ryan Mehta: I don't know what does that look like

745
01:31:55.860 --> 01:32:00.780
Ryan Mehta: Looks pretty perfect to me. Let's make this figure.

746
01:32:01.980 --> 01:32:16.170
Ryan Mehta: Actually, that seems good enough. Let's just make it so the big caption is centered. Now, in the middle of the picture instead of left justified. So the big caption.

747
01:32:17.610 --> 01:32:17.970
Tech.

748
01:32:20.160 --> 01:32:20.940
Ryan Mehta: Sector

749
01:32:24.630 --> 01:32:25.800
Ryan Mehta: Looks perfect

750
01:32:29.610 --> 01:32:36.900
Ryan Mehta: Yeah, any complaints near perfect as near perfect CSS as you can get. Beautiful.

751
01:32:36.990 --> 01:32:38.640
Annalise Murphy: Yeah. Now, this is gorgeous.

752
01:32:40.230 --> 01:32:46.830
Ryan Mehta: So the real nice thing about the nesting is. I mean, you can nest your CSS. Guess that's pretty much it.

753
01:32:49.170 --> 01:32:50.430
Ryan Mehta: I just, I like it better.

754
01:32:51.570 --> 01:33:01.230
Ryan Mehta: Because it's messed up to you can use these image tags directly and not worry too much about that stuff bleeding out of your villager class.

755
01:33:04.020 --> 01:33:10.530
Ryan Mehta: Okay, so we have our individual villager. The next thing that we wanted to create is our villager list.

756
01:33:12.300 --> 01:33:15.060
Ryan Mehta: Let's make our villager list. Gotcha. So

757
01:33:16.410 --> 01:33:17.310
Ryan Mehta: Let's, uh,

758
01:33:18.810 --> 01:33:22.170
Ryan Mehta: Let's, let's snapshot test our villager just so

759
01:33:23.910 --> 01:33:34.140
Ryan Mehta: We don't accidentally break it in the future. So I'm going to steal my app snapshot test and just rename some of these things to villager

760
01:33:35.820 --> 01:33:39.540
Ryan Mehta: villager needs a few props or villager needs a name.

761
01:33:42.720 --> 01:33:44.550
Ryan Mehta: And an image URL.

762
01:33:52.950 --> 01:33:59.100
Ryan Mehta: Whatever the actual image doesn't matter because we're only going to see the HTML and not the actual

763
01:34:02.280 --> 01:34:08.670
Ryan Mehta: Not the actual image and our snapshot. Let's go look at our snapshot and make sure it looks like what we expect.

764
01:34:10.320 --> 01:34:21.660
Ryan Mehta: We have a figure with the class an image where the source is our image URL and the fig caption is our villagers name looks perfect.

765
01:34:25.560 --> 01:34:26.640
Ryan Mehta: seem good everyone

766
01:34:28.080 --> 01:34:33.180
Ryan Mehta: All right, now that we've snapshot tested. Now we can go on to our

767
01:34:34.350 --> 01:34:35.580
Ryan Mehta: Village your list.

768
01:34:37.230 --> 01:34:41.070
Ryan Mehta: So let's make a villager list that J SX file.

769
01:34:42.960 --> 01:34:45.240
Ryan Mehta: We again have a presentation I'll component

770
01:34:47.040 --> 01:34:48.750
Ryan Mehta: villager list.

771
01:34:51.210 --> 01:34:59.550
Ryan Mehta: Our prop types. We're going to get villagers prop. Anybody have any ideas, but this prop types should be

772
01:35:12.870 --> 01:35:14.520
Ben Waples: Right. Yep.

773
01:35:14.550 --> 01:35:15.390
Ben Waples: An array.

774
01:35:15.780 --> 01:35:28.170
Ryan Mehta: So there's an array of which is probably what or what. And it's required so we don't just want any old array. Right. We want an array of villagers an array of like village or objects.

775
01:35:29.010 --> 01:35:42.660
Ryan Mehta: So what you can say is that I want an array of objects, this would just mean I wanted to read any object, but you can actually get even more detailed here, you can say that I want an array of shapes.

776
01:35:43.860 --> 01:35:49.680
Ryan Mehta: So each villager in the array should take the following shape the villagers should have a name.

777
01:35:50.700 --> 01:36:10.860
Ryan Mehta: Which is a string that is required and the villagers should have an image URL, which is also a string that is required. So now we're saying that we expect villagers to be an array of objects which have a name that's a string and an image that's a string.

778
01:36:13.740 --> 01:36:14.940
Ryan Mehta: Prop types them. Okay.

779
01:36:17.520 --> 01:36:18.000
Cool.

780
01:36:19.740 --> 01:36:22.980
Ryan Mehta: Let's do structure our villagers.

781
01:36:24.120 --> 01:36:31.830
Ryan Mehta: This time we can't do the implicit return because we want to do a little bit of logic up above that whole map thing that we're used to with our

782
01:36:33.180 --> 01:36:48.960
Ryan Mehta: Lists, so I'm going to make. I'm going to use curly braces explicitly return a UL inside of this URL. We're going to put our villager elements and then we will create our villager elements.

783
01:36:51.060 --> 01:36:54.750
Ryan Mehta: Here will create them by mapping through villagers.

784
01:36:55.980 --> 01:36:57.330
Ryan Mehta: For each villager

785
01:36:59.730 --> 01:37:06.420
Ryan Mehta: We want to return a list item with our villager

786
01:37:09.000 --> 01:37:22.530
Ryan Mehta: Component will pass our village or component a name to get from villager dot name and image URL, which we will get from villager dot image URL.

787
01:37:24.900 --> 01:37:31.980
Ryan Mehta: All right, that's the basic setup. It's complaining now because we haven't provided the key for list item.

788
01:37:33.330 --> 01:37:35.520
Ryan Mehta: We want to use some sort of unique key.

789
01:37:36.600 --> 01:37:48.990
Ryan Mehta: It's probably safe to use villager dot name, but we're just guessing really right there could be multiple animal cross there's multiple villagers with the same name.

790
01:37:50.310 --> 01:37:52.110
Ryan Mehta: If we look back at the API.

791
01:37:53.310 --> 01:38:00.960
Ryan Mehta: What they give us back. They give us back an underscore ID, which is almost certainly unique for each villager

792
01:38:02.100 --> 01:38:05.610
Ryan Mehta: So let's use that underscore ID for our key instead

793
01:38:07.470 --> 01:38:09.630
Ryan Mehta: So we can put underscore ID here.

794
01:38:11.280 --> 01:38:26.730
Ryan Mehta: Since we're expecting our villagers to have an underscore ID, though. We also want to add that to our shape right. We don't want our villager our array to just hold the name and the image URL of each villager. We're also now reliant on this underscore ID.

795
01:38:27.870 --> 01:38:31.110
t to reuse these strings in other places in your application. So you can always like console log

878
01:49:00.690 --> 01:49:01.110
Or looky

879
01:49:02.190 --> 01:49:05.880
Ryan Mehta: Loos got red and that gets this red string.

880
01:49:07.140 --> 01:49:07.470
Ryan Mehta: Right.

881
01:49:08.640 --> 01:49:13.950
Ryan Mehta: It would be a little bit different with types like I type fruit.

882
01:49:15.540 --> 01:49:18.840
Ryan Mehta: That was set equal to Apple for

883
01:49:27.300 --> 01:49:37.830
Ryan Mehta: Because it doesn't have the same like dot notation to get the value that you want. It's just saying that this type fruit, wherever. Use it has to be one of these three things.

884
01:49:39.570 --> 01:49:44.880
Ryan Mehta: Okay, most of these cases like where you have something like this, you probably actually wanted to eat them.

885
01:49:45.750 --> 01:49:46.530
Dan B. (TA): That makes sense.

886
01:49:53.940 --> 01:49:57.360
Patrick Wilson: Iran, what's the difference between the single pipe and the double pipes for or

887
01:49:58.380 --> 01:49:59.910
Ryan Mehta: This is a TypeScript thing.

888
01:50:00.120 --> 01:50:17.910
Ryan Mehta: So it's, it's not like the JavaScript logical operator. It's like combining the types. So this is saying like a fruit is either this thing or this thing or this thing, but it's not turning it into a bullying. It's like a type composition thing.

889
01:50:21.450 --> 01:50:27.750
Ryan Mehta: There's also in TypeScript. The single ampersand. So that does something similar to this type composition

890
01:50:42.060 --> 01:50:48.540
Ryan Mehta: Like yeah, there's, I can show that really quick. Also, so we can have like a dog person.

891
01:50:49.590 --> 01:51:05.550
Ryan Mehta: Take that is equal to a combination of dog and person. This is combining all of the props and dog and all of the proxy in person automatically. So normally a dog and person would be like

892
01:51:09.090 --> 01:51:20.340
Ryan Mehta: Mainstream from dog a string from dog wait string from dog and then all of this stuff in person like nice was a Boolean

893
01:51:23.760 --> 01:51:35.370
Ryan Mehta: Whatever all of the other props from person. That's what this is doing automatically. So it's saying take all of the props from dog all of the proper person and construct a new combined type dog person.

894
01:51:36.960 --> 01:51:49.050
Ryan Mehta: This is slightly different than. Well, it's very different. I guess then this this is saying dog person is either a dog or a person. This is saying a dog person is

895
01:51:50.370 --> 01:51:54.690
Ryan Mehta: A dog and a person they're both types simultaneously.

896
01:51:56.040 --> 01:52:00.540
Ryan Mehta: This is saying that they are one or the other type that kind of makes sense.

897
01:52:21.600 --> 01:52:23.760
William Piro: Hey Ryan, I have a use case. Question for you.

898
01:52:25.320 --> 01:52:28.620
William Piro: If you are mapping through an array of objects.

899
01:52:29.850 --> 01:52:32.700
William Piro: And you're specifying your parameter for your map.

900
01:52:36.150 --> 01:52:49.860
William Piro: You so I know TypeScript will will indicate there's like a type of any implicitly you somehow have to define the objects that you're mapping through with specific times

901
01:52:51.240 --> 01:52:56.790
Ryan Mehta: Yeah, so it depends. Like so right now we have this people array up above.

902
01:52:59.850 --> 01:53:04.140
Ryan Mehta: If I map through each person in the people array, let me

903
01:53:05.190 --> 01:53:08.220
Ryan Mehta: Move this over towards that people are, as we can see both

904
01:53:09.240 --> 01:53:13.410
Ryan Mehta: Once this people array matches our person.

905
01:53:14.460 --> 01:53:14.970
Ryan Mehta: Type

906
01:53:16.410 --> 01:53:27.870
Ryan Mehta: Right now this person, it actually knows I that it is a person with like all of the person stuff inside of it. It's not a type any at least right now.

907
01:53:28.920 --> 01:53:37.800
Ryan Mehta: That could be the reason why you might be getting any here is if this thing here is an array of any at any array.

908
01:53:39.630 --> 01:53:40.020
Like

909
01:53:42.750 --> 01:53:51.060
Ryan Mehta: So might it might be being passed to your function or wherever you're doing the map and you're not specifying the type of this original array.

910
01:53:52.140 --> 01:53:54.420
Ryan Mehta: In that case, you could always

911
01:53:55.920 --> 01:54:01.140
Ryan Mehta: Specify this thing has a person. If you want to

912
01:54:03.240 --> 01:54:04.410
William Piro: Call that makes sense. Thanks.

913
01:54:21.660 --> 01:54:23.010
Ryan Mehta: Any other questions.

914
01:54:31.530 --> 01:54:33.900
Ryan Mehta: Cool. All right. Well, thank you all for coming.

915
01:54:35.490 --> 01:54:35.910
Easton Gorishek: Thanks, Ryan.

916
01:54:40.800 --> 01:54:41.340
Thank you, Ryan.

917
01:54:42.510 --> 01:54:42.900
Michelle Stermitz: Ryan.

e're going to use this dispatch function.

950
01:55:11.430 --> 01:55:12.990
Ryan Mehta: To set characters.

951
01:55:15.780 --> 01:55:18.030
Ryan Mehta: And finally,

952
01:55:21.000 --> 01:55:21.840
Ryan Mehta: We will

953
01:55:30.420 --> 01:55:31.170
Dispatch.

954
01:55:37.260 --> 01:55:52.770
Ryan Mehta: So really, all we've done is taken all of this code and migrated it over into our action creator. Now the action creator calls our service waits for a response dispatches are set characters and dispatches are set loading.

955
01:55:54.270 --> 01:56:12.570
Ryan Mehta: There's not really a big difference between the two sides. It's a pure preference. Do you prefer having this sort of logic in an action creator and then kind of simplifying your component or do you prefer the sort of logic in the component. Either way is totally valid.

956
01:56:13.020 --> 01:56:19.710
Jerud Moyer: There's no performance hit then sending that through a little like extra layer of

957
01:56:21.750 --> 01:56:26.700
Ryan Mehta: It's a good point. There's a slight performance hit like nanosecond performance it

958
01:56:28.920 --> 01:56:33.930
Ryan Mehta: Just because you have one more round, but it's just one extra function call.

959
01:56:35.250 --> 01:56:36.690
So nanoseconds.

960
01:56:45.240 --> 01:56:47.670
Ryan Mehta: It seems like this is the way that most people do.

961
01:56:49.350 --> 01:56:52.830
Ryan Mehta: I kind of, I kind of like this way, personally.

962
01:56:55.890 --> 01:57:04.590
Ryan Mehta: Just because it seems more like react like but it's nice to get used to this way just because this seems like a way that a lot of people do it.

963
01:57:06.180 --> 01:57:12.270
Ryan Mehta: If you look back at the front end. I think it all still behaves exactly like it did before we even get the two

964
01:57:13.830 --> 01:57:29.130
Ryan Mehta: Separate actions. So we've just moved some logic out of our components into our action creator and that's like having clear layers. This is now more about the display and all of the logic has been moved into our action creator

965
01:57:34.860 --> 01:57:37.050
Ryan Mehta: I don't know if I keep that there for reference.

966
01:57:40.740 --> 01:57:42.900
Annalise: I think referencing like one

967
01:57:44.460 --> 01:57:55.110
Annalise: Like one side with the code being like very minimal for the display and the other being more for function like really helped bring it together so nice. Thank you.

968
01:57:59.370 --> 01:58:00.840
Ryan Mehta: All right, does this all look good.

969
01:58:03.360 --> 01:58:18.450
Ryan Mehta: All right, let's do another list of things for locations. So in addition to having our character list. We can also use this Rick and Morty API to get a list of locations. Okay.

970
01:58:21.510 --> 01:58:22.200
Ryan Mehta: Like so.

971
01:58:23.850 --> 01:58:33.060
Ryan Mehta: If a location has an ID a name and the type and a dimension will probably just keep the name of the location and displayed in our list.

972
01:58:34.350 --> 01:58:39.810
Ryan Mehta: To do this, we're going to have to add one more react concept or Redux concept.

973
01:58:40.920 --> 01:58:48.510
Ryan Mehta: And it's going to break our application pretty severely we'll see why in a second. But there's a quick fix for it also

974
01:58:50.160 --> 01:58:58.770
Ryan Mehta: So we have a reducer that's whole job is to hold character state. We now want to add location state.

975
01:58:59.790 --> 01:59:10.350
Ryan Mehta: Because of that, well, we have a few choices. We could add the location state into our character reducer. But it seems like they're conflicting things. There's two separate types of objects.

976
01:59:11.220 --> 01:59:12.840
Ryan Mehta: So what we're going to do instead is

977
01:59:12.840 --> 01:59:18.270
Ryan Mehta: Create another reducer called location producer.

978
01:59:21.150 --> 01:59:24.150
Ryan Mehta: And our location reducer will be totally

979
01:59:25.410 --> 01:59:27.150
Ryan Mehta: About locations.

980
01:59:30.480 --> 01:59:35.940
Ryan Mehta: So we'll have locations here, which is an array and loading.

981
01:59:37.080 --> 01:59:40.890
Ryan Mehta: Whether our locations are loading whether location has aired

982
01:59:42.420 --> 01:59:45.870
Ryan Mehta: And who will export default

983
01:59:49.380 --> 01:59:53.250
Ryan Mehta: State starts off as initial state and action.

984
01:59:57.120 --> 01:59:58.380
Ryan Mehta: An action that type

985
01:59:59.400 --> 02:00:01.440
Ryan Mehta: Of a default and return

986
02:00:03.600 --> 02:00:06.810
Ryan Mehta: Same sort of thing that we have been doing

987
02:00:08.160 --> 02:00:18.960
Ryan Mehta: I'm not going to write tests for this one just because we have 15 minutes left. And I think the tests like they're the same every single time we already have some stuff to reference for the tests.

988
02:00:20.070 --> 02:00:25.380
Ryan Mehta: So in addition to having a reducer though, we will also have a location.

989
02:00:27.330 --> 02:00:29.070
Ryan Mehta: Options gotcha style.

990
02:00:30.240 --> 02:00:42.060
Ryan Mehta: Would basically duplicated everything right except our locations are responsible for just the location stuff. So we'll have like an export concept location.

991
02:00:49.890 --> 02:00:52.380
Ryan Mehta: And then we'll have an export concept.

992
02:01:18.630 --> 02:01:24.720
Ryan Mehta: Alright, so we'll have our action to set locations back in our location reducer.

993
02:01:25.740 --> 02:01:28.590
Ryan Mehta: Will have a case for set locations.

994
02:01:29.940 --> 02:01:34.020
Ryan Mehta: Which will return everything from state.

995
02:01:35.370 --> 02:01:37.080
Ryan Mehta: Is going to default this to false.

996
02:01:41.070 --> 02:01:42.060
Patients

997
02:01:43.740 --> 02:01:45.870
Ryan Mehta: Will be whatever is an action payload.

998
02:01:51.210 --> 02:01:55.560
Ryan Mehta: Alright, that looks good. Very similar to the characters one right

999
02:01:56.700 --> 02:01:58.950
Ryan Mehta: And then we'll have another action creator

1000
02:02:01.620 --> 02:02:02.580
Ryan Mehta: Locations

1001
02:02:04.560 --> 02:02:07.950
Ryan Mehta: Who will return a function that takes dispatch.

1002
02:02:08.970 --> 02:02:17.610
Ryan Mehta: And then inside of here. We're going to fetch from our locations API to do that, we will need a new service.

1003
02:02:19.110 --> 02:02:20.070
Ryan Mehta: Will call it

1004
02:02:22.530 --> 02:02:24.090
Ryan Mehta: Get locations.

1005
02:02:26.520 --> 02:02:32.640
Ryan Mehta: It's going to batch from some URL will have to get that in a second. We'll

1006
02:02:33.780 --> 02:02:35.190
Ryan Mehta: Post our JSON.

1007
02:02:37.530 --> 02:02:40.770
Ryan Mehta: Like, so we'll grab this URL.

1008
02:02:46.920 --> 02:02:54.360
Ryan Mehta: Then have our JSON, we will map through our JSON results for each location.

1009
02:02:55.740 --> 02:03:02.910
Ryan Mehta: Will return an object with the locations ID location locations name.

1010
02:03:07.950 --> 02:03:19.830
Ryan Mehta: Okay so service that does the same thing, but for locations back in our location action, we can use our get locations. We will then patients.

1011
02:03:21.600 --> 02:03:24.480
Ryan Mehta: Dispatch locations.

1012
02:03:27.150 --> 02:03:28.110
Locations

1013
02:03:32.130 --> 02:03:38.040
Ryan Mehta: I'm going to leave off the loading part for right now, but it's the same loading as we would have done in the characters.

1014
02:03:39.870 --> 02:03:41.820
Ryan Mehta: This action creator look okay

1015
02:03:44.280 --> 02:03:44.910
Ryan Mehta: All right.

1016
02:03:46.650 --> 02:03:47.460
Ryan Mehta: Now,

1017
02:03:48.750 --> 02:03:51.960
Ryan Mehta: We can go and make our components.

1018
02:03:53.400 --> 02:03:58.170
Ryan Mehta: We still haven't fixed the big problem that we have, but I think we can see the problem.

1019
02:04:04.050 --> 02:04:04.860
Ryan Mehta: Sex.

1020
02:04:09.000 --> 02:04:13.200
Ryan Mehta: Location has I think we said just a name right.

1021
02:04:18.540 --> 02:04:20.340
Ryan Mehta: Me, put it inside of a paragraph.

1022
02:04:23.940 --> 02:04:25.740
Ryan Mehta: And then we'll have our location list.

1023
02:04:28.830 --> 02:04:29.550
Ryan Mehta: Sex.

1024
02:04:30.720 --> 02:04:33.210
Ryan Mehta: This one won't have any prop types.

1025
02:04:36.810 --> 02:04:37.470
Ryan Mehta: These

1026
02:04:41.010 --> 02:04:43.620
Ryan Mehta: We will get our location somehow

1027
02:04:49.980 --> 02:04:52.560
Ryan Mehta: That will also get this back

1028
02:04:55.260 --> 02:04:57.540
Ryan Mehta: Dispatch will have a use effect.

1029
02:04:59.010 --> 02:05:05.130
Ryan Mehta: Run on Mount and we will dispatch our batch locations.

1030
02:05:08.100 --> 02:05:09.270
This is important.

1031
02:05:10.950 --> 02:05:19.230
Ryan Mehta: So we need to fill in this use selector. You have to remember that. And after we will get our location elements.

1032
02:05:20.880 --> 02:05:25.260
Ryan Mehta: I iterating through the locations for each location.

1033
02:05:27.540 --> 02:05:28.920
Ryan Mehta: Construct a

1034
02:05:30.570 --> 02:05:31.200
Ryan Mehta: Li

1035
02:05:58.800 --> 02:05:59.400
Ryan Mehta: So far,

1036
02:06:01.980 --> 02:06:10.530
Ryan Mehta: App JS. I am going to before we forget use our character list and our location.

1037
02:06:18.180 --> 02:06:18.570
Ryan Mehta: Okay.

1038
02:06:19.590 --> 02:06:23.400
Ryan Mehta: So the big problem here is now we have two producers.

1039
02:06:24.660 --> 02:06:27.810
Ryan Mehta: Actually everything up into this point kinda makes sense. Like that whole flow.

1040
02:06:29.400 --> 02:06:32.100
Ryan Mehta: Making the individual thing iterating through a list of

1041
02:06:32.100 --> 02:06:34.260
Annalise: Items, all that stuff.

1042
02:06:36.270 --> 02:06:37.680
Ryan Mehta: I know I did it kind of fast.

1043
02:06:39.930 --> 02:06:46.350
Ryan Mehta: So on our character list, we were able to do state characters to get to our

1044
02:06:47.970 --> 02:06:50.820
Ryan Mehta: Character producers character state.

1045
02:06:52.650 --> 02:07:02.580
Ryan Mehta: In locations that kind of feels like we should be able to stay arrows. The top locations, right, to get to our list of locations.

1046
02:07:03.600 --> 02:07:07.740
Ryan Mehta: But if we try that our front end will totally blow up.

1047
02:07:09.030 --> 02:07:10.650
Ryan Mehta: It'll tell us something like

1048
02:07:11.760 --> 02:07:16.860
Ryan Mehta: Locations isn't a thing cannot do property map of undefined because locations isn't a thing.

1049
02:07:18.840 --> 02:07:32.820
Ryan Mehta: The big problem is see our state still our state looks like this characters are a loading and error. It doesn't have any locations in it. It looks like this. Because back in our

1050
02:07:35.310 --> 02:07:36.210
Ryan Mehta: Store.

1051
02:07:37.920 --> 02:07:43.530
Ryan Mehta: We are specifying that the store is our is based on our character reducer.

1052
02:07:45.090 --> 02:07:48.720
Ryan Mehta: If we change this to our location reducer.

1053
02:07:49.980 --> 02:07:51.570
Ryan Mehta: And go back to our friend.

1054
02:07:52.980 --> 02:07:57.750
Ryan Mehta: We would then see our location state but no longer see our character state.

1055
02:07:58.830 --> 02:08:04.830
Ryan Mehta: So sort of feels like we have a choice here, we can only use one reducer. But we have two producers.

1056
02:08:06.990 --> 02:08:09.240
Ryan Mehta: And we sort of want to use use both of them.

1057
02:08:10.530 --> 02:08:22.230
Ryan Mehta: Luckily Redux comes with something called combined producers, which will allow us to combine two producers or three combine multiple producers together.

1058
02:08:24.090 --> 02:08:35.040
Ryan Mehta: Inside of my producers folder. I'm going to create an index.js file and then I'm going to use that combined producers inside of this index JS file inside of the producers folder.

1059
02:08:36.240 --> 02:08:39.450
Ryan Mehta: So we're going to import from Redux

1060
02:08:41.070 --> 02:08:49.500
Ryan Mehta: We're going to import something called combined producers and there were an export default combined producers.

1061
02:08:51.720 --> 02:09:02.790
Ryan Mehta: Combined producers takes an object of and it's an object with key value pairs. So we can say that our characters comes from our

1062
02:09:09.330 --> 02:09:11.550
Ryan Mehta: Import this character producer at the top.

1063
02:09:14.550 --> 02:09:15.360
Producer

1064
02:09:21.120 --> 02:09:23.340
Ryan Mehta: While also import our location.

1065
02:09:24.750 --> 02:09:25.200
Ryan Mehta: Sir,

1066
02:09:28.320 --> 02:09:31.980
Ryan Mehta: Sir, put another key here and locations.

1067
02:09:33.120 --> 02:09:34.230
Ryan Mehta: Location with you, sir.

1068
02:09:37.140 --> 02:09:57.990
Ryan Mehta: All right. What this is doing is combining those two producers together. Each reducer state will live either under the characters key or under the locations key, see what this looks like. Instead of using one reducer. The other back in our storage as we are going to use our index.

1069
02:09:59.460 --> 02:10:00.330
Ryan Mehta: File here.

1070
02:10:02.490 --> 02:10:06.030
Ryan Mehta: Once we do that and look back at our reducer state.

1071
02:10:07.620 --> 02:10:15.510
Ryan Mehta: You'll see we have two keys now characters with all of our character stay in it and locations with all of our location state.

1072
02:10:18.690 --> 02:10:21.030
Ryan Mehta: So let's look back at that combined reducer.

1073
02:10:22.140 --> 02:10:23.010
Side by side.

1074
02:10:24.120 --> 02:10:30.900
Ryan Mehta: So we have a characters key with all of our character state locations key with all of our location state.

1075
02:10:32.580 --> 02:10:37.170
Ryan Mehta: Back in the browser characters key with character state locations key location state.

1076
02:10:38.940 --> 02:10:43.860
Ryan Mehta: The name of this key is the name of this key over here.

1077
02:10:45.150 --> 02:10:47.940
Ryan Mehta: So if we called our keys instead

1078
02:10:49.200 --> 02:10:53.070
Ryan Mehta: I don't know, something bogus bogus and

1079
02:10:56.490 --> 02:10:57.840
Ryan Mehta: A series of L's.

1080
02:10:59.040 --> 02:11:03.540
Ryan Mehta: As the keys, then back in our Redux state.

1081
02:11:04.890 --> 02:11:10.200
Ryan Mehta: We would have bogus and a series of L's with our location state and our character state.

1082
02:11:13.050 --> 02:11:15.150
Ryan Mehta: So bogus series of emails.

1083
02:11:16.680 --> 02:11:27.180
Ryan Mehta: Back in our storage as we're importing this index reducer which is the combination of our two producers of the reason why we named this index JS, so we can conveniently leave off.

1084
02:11:28.290 --> 02:11:37.200
Ryan Mehta: We could just like look like we're importing producers. If you name a file index and put that into a folder. You don't have to specify the name of the file.

1085
02:11:41.790 --> 02:11:43.560
Ryan Mehta: Alright, so

1086
02:11:44.610 --> 02:11:46.680
Ryan Mehta: Now our state looks like.

1087
02:11:49.380 --> 02:11:50.100
Like this.

1088
02:11:53.160 --> 02:12:00.900
Ryan Mehta: Which means in order to fix our application, we go back to our locations list and our character list.

1089
02:12:02.610 --> 02:12:17.130
Ryan Mehta: We no longer have state that locations equaling an array it state locations applications. Right. So inside of that locations key. There's an array of locations and same for characters state characters care.

1090
02:12:19.980 --> 02:12:25.980
Ryan Mehta: Um, once we change our selectors like this, our application should hopefully

1091
02:12:27.030 --> 02:12:30.450
Ryan Mehta: Begin to work. So there's our characters. There's our lonever guessed on that number before they're starting fresh

660
01:23:20.760 --> 01:23:23.250
Ryan Mehta: When we select a new guess

661
01:23:24.390 --> 01:23:34.380
Ryan Mehta: We're only going to be changing this piece of state here Mexican to add one more piece of state to this thing. Let's add is correct.

662
01:23:36.180 --> 01:23:52.500
Ryan Mehta: So we'll actually store this in our reducer. And this will tell us whether the guests in the number match. So this will be a Boolean based on the guests, so that guests will actually change the guests and read compute the is correct.

663
01:23:53.820 --> 01:23:54.660
Ryan Mehta: Piece of state.

664
01:23:56.550 --> 01:23:57.210
Ryan Mehta: Look good

665
01:23:58.410 --> 01:24:00.840
Ryan Mehta: All the state stuff. Okay.

666
01:24:07.590 --> 01:24:27.600
Ryan Mehta: So let's start off by handling our state. Let's start off in the state transformation area. I'm going to create an actions directory inside of their opinion number actions JS and I will create a

667
01:24:28.620 --> 01:24:31.230
Ryan Mehta: Pieces directory and then number

668
01:24:33.660 --> 01:24:39.930
Ryan Mehta: JS file will also create our number producer adopt test that JS file.

669
01:24:41.490 --> 01:24:45.300
Ryan Mehta: Alright, so he said first action that we want is this new number action.

670
01:24:46.530 --> 01:24:48.900
Ryan Mehta: That will select a new number for us.

671
01:24:50.430 --> 01:24:54.690
Ryan Mehta: So let's create a export cost.

672
01:25:12.510 --> 01:25:13.500
Ryan Mehta: Action creator

673
01:25:15.030 --> 01:25:16.620
Ryan Mehta: We started having a few

674
01:25:17.850 --> 01:25:25.920
Ryan Mehta: A few ways to handle this. This new number action creator could take a number and then send that number to the producer as a payload.

675
01:25:27.420 --> 01:25:38.160
Ryan Mehta: But I kind of think it would be nice if the producer was responsible for figuring out what that number should be cool. So I'm going to have this action creator just had a type

676
01:25:40.560 --> 01:25:40.920
Right.

677
01:25:42.060 --> 01:25:45.990
Ryan Mehta: And then we will close this.

678
01:25:48.060 --> 01:25:54.420
Ryan Mehta: Closing it because I need to be able to. It's like an absolute necessity to be able to drag these things.

679
01:25:55.920 --> 01:25:56.400
Ryan Mehta: All right.

680
01:26:00.120 --> 01:26:02.730
Ryan Mehta: I did all that work. And if they're still not trackable

681
01:26:06.870 --> 01:26:08.100
We can figure this out.

682
01:26:21.720 --> 01:26:23.070
Ryan Mehta: All vs codes.

683
01:26:25.770 --> 01:26:26.550
Okay, there we go.

684
01:26:31.290 --> 01:26:38.790
Ryan Mehta: So we made our little action create over here we're going to write our test we're going to test our number producer.

685
01:26:40.650 --> 01:26:43.080
Ryan Mehta: First test that we want to do it.

686
01:26:44.160 --> 01:26:47.670
Ryan Mehta: picks a random number.

687
01:26:55.110 --> 01:26:55.560
Ryan Mehta: So,

688
01:26:56.580 --> 01:26:59.040
Ryan Mehta: We'll start off with some initial state.

689
01:27:00.330 --> 01:27:05.370
Ryan Mehta: State will start off as number and let's say

690
01:27:06.420 --> 01:27:07.650
Ryan Mehta: For to begin with.

691
01:27:09.660 --> 01:27:14.430
Ryan Mehta: Will construct our action by calling our new number action creator

692
01:27:15.630 --> 01:27:21.720
Ryan Mehta: We will get new state by calling our reducer which will have to define

693
01:27:22.830 --> 01:27:27.030
Ryan Mehta: So we can import it. So on the left hand side of export default

694
01:27:28.800 --> 01:27:31.680
Ryan Mehta: Producer it'll take state and an action.

695
01:27:32.970 --> 01:27:36.570
Ryan Mehta: Will have a switch on action type

696
01:27:37.710 --> 01:27:39.060
Ryan Mehta: Of a default

697
01:27:40.140 --> 01:27:45.480
Ryan Mehta: That will turn the existing state. And now we should be able to import this with the service.

698
01:27:46.620 --> 01:27:55.350
Ryan Mehta: Will pass it state and our action we expect new state to equal

699
01:27:57.690 --> 01:27:58.380
Ryan Mehta: Number.

700
01:28:02.160 --> 01:28:02.610
Number.

701
01:28:03.690 --> 01:28:05.040
Ryan Mehta: Will actually start this as know

702
01:28:06.180 --> 01:28:15.900
Ryan Mehta: So the test fails, we won't have a number after we asked for a new number we should have a number here this test makes sense.

703
01:28:24.810 --> 01:28:27.420
Ryan Mehta: Test it should hopefully fail.

704
01:28:31.980 --> 01:28:35.940
Ryan Mehta: We got no but we expected a number on the right hand side.

705
01:28:37.290 --> 01:28:39.840
Ryan Mehta: We're going to have a case for

706
01:28:41.340 --> 01:28:42.690
Ryan Mehta: You number

707
01:28:44.550 --> 01:28:49.410
Ryan Mehta: And we'll get that we're going to return everything from existing state.

708
01:28:51.000 --> 01:28:53.010
Ryan Mehta: We're going to update number

709
01:28:54.150 --> 01:29:01.110
Ryan Mehta: To be some random number between zero and nine, anybody know how we can create a random number between 09

710
01:29:04.800 --> 01:29:05.520
This trick.

711
01:29:08.580 --> 01:29:09.540
Times.

712
01:29:12.060 --> 01:29:13.170
Actually times

713
01:29:18.930 --> 01:29:23.130
Ryan Mehta: So this will give us a random number between zero and nine.

714
01:29:25.980 --> 01:29:26.100
Ryan Mehta: Good.

715
01:29:28.230 --> 01:29:29.400
Ryan Mehta: test passes.

716
01:29:29.490 --> 01:29:32.340
Ryan Mehta: And we now can create a random number.

717
01:29:32.550 --> 01:29:34.590
Ryan Mehta: With our number reducer.

718
01:29:38.820 --> 01:29:42.120
Ryan Mehta: All right. We had another state transformation that we want in

719
01:29:43.320 --> 01:29:44.400
Ryan Mehta: Our new guests.

720
01:29:46.200 --> 01:29:52.650
Ryan Mehta: Actually, we still haven't quite finished our new number thing, right. It had one other property that at wanted

721
01:29:53.550 --> 01:30:06.870
Ryan Mehta: When we select our new number for the first time, we should also erase any guests that was there, right. So in addition to number going from no to an actual number. We also want. Yes.

722
01:30:08.280 --> 01:30:11.190
Ryan Mehta: To go from a number two.

723
01:30:13.590 --> 01:30:13.890
No.

724
01:30:15.300 --> 01:30:17.610
Ryan Mehta: To nothing. Does that make sense.

725
01:30:18.660 --> 01:30:21.780
Ryan Mehta: So whenever we select a new number we no longer have guest.

726
01:30:23.430 --> 01:30:28.950
Ryan Mehta: test fails, we still have seven for guess we're going to update our

727
01:30:30.240 --> 01:30:37.500
Ryan Mehta: Producer a little bit. So in addition to adding a random number. We're also going to set guess

728
01:30:39.360 --> 01:30:41.520
Ryan Mehta: Now, now our test passes.

729
01:30:42.810 --> 01:30:43.470
Ryan Mehta: Look good

730
01:30:45.570 --> 01:30:46.320
Adrian Simental: You're doing

731
01:30:47.850 --> 01:30:51.360
Adrian Simental: Read on state. Is there anything in state besides number and guess

732
01:30:51.720 --> 01:30:53.430
Ryan Mehta: There isn't. At least not right now.

733
01:30:54.480 --> 01:31:00.000
Adrian Simental: Okay, so it would also be fun to do state numbers state not guest and right rather than the spread

734
01:31:00.960 --> 01:31:04.980
Ryan Mehta: I you could just leave this off like this right now.

735
01:31:07.260 --> 01:31:18.750
Ryan Mehta: But eventually, we'll be adding more to state. So it's usually Brett best practice to always spread this state in. So as we add new keys. We don't have to think about how we need to change our other cases.

736
01:31:25.230 --> 01:31:27.870
Ryan Mehta: All right. Let's also do our new guests.

737
01:31:33.420 --> 01:31:34.740
Ryan Mehta: So, it

738
01:31:37.050 --> 01:31:40.380
Ryan Mehta: Just is a number

739
01:31:42.750 --> 01:31:44.580
Ryan Mehta: Will construct our state.

740
01:31:45.750 --> 01:31:52.470
Ryan Mehta: Number is going to start off at eight guess will be no

741
01:31:55.890 --> 01:32:09.210
Ryan Mehta: We're going to construct an action our action before we can create it, we need to create an action creator. So let's go back over to our actions file is an export cons new guests.

742
01:32:19.050 --> 01:32:32.820
Ryan Mehta: And this time, we do need to pass in the guests that the user made our reducer and our action can check. Guess what the guests is right. So our action creator will need to be provided this guess

743
01:32:33.840 --> 01:32:35.550
Ryan Mehta: The type will be new guests.

744
01:32:36.630 --> 01:32:40.170
Ryan Mehta: And the payload will be the guests that the user made

745
01:32:42.060 --> 01:32:45.390
Ryan Mehta: A right hand side, we can import this new guess

746
01:32:46.560 --> 01:32:50.760
Ryan Mehta: Action creator and passive a guess let's say seven

747
01:32:52.320 --> 01:32:54.780
Ryan Mehta: We will construct our new state.

748
01:32:56.130 --> 01:33:01.740
Ryan Mehta: By calling our reducer with our existing state and our action.

749
01:33:02.790 --> 01:33:04.740
Ryan Mehta: Expect to get back

750
01:33:07.620 --> 01:33:17.820
Ryan Mehta: An object where number remains the same. Think it was seven, eight and our yes changes to seven.

751
01:33:20.850 --> 01:33:22.140
Ryan Mehta: This test makes sense.

752
01:33:23.640 --> 01:33:27.570
Ryan Mehta: Make a guess it fills in our guests piece of state seven

753
01:33:29.040 --> 01:33:29.610
Ryan Mehta: Look good

754
01:33:31.830 --> 01:33:39.570
Ryan Mehta: All right, back in our reducer. We are going to have another case new guess

755
01:33:41.190 --> 01:33:44.250
Ryan Mehta: That returns everything from state.

756
01:33:46.440 --> 01:33:49.860
Ryan Mehta: And yes changes to action doc payload.

757
01:33:52.410 --> 01:33:52.860
So,

758
01:33:54.030 --> 01:33:56.340
Ryan Mehta: And our test passes.

759
01:34:00.960 --> 01:34:09.960
Ryan Mehta: Right. So we've handled this guest thing. We also decided that we wanted to store is correct in our state. So whether or not we've made a correct guests.

760
01:34:11.580 --> 01:34:27.690
Ryan Mehta: So in addition to these two feet. In addition to number and guess we also want is correct, which will recalculate every time we make a guess is correct is true if guess triple equals number

761
01:34:30.180 --> 01:34:30.510
One.

762
01:34:32.520 --> 01:34:36.480
Ryan Mehta: If the actual payload. The users guests equals the number

763
01:34:37.590 --> 01:34:42.270
Ryan Mehta: In this case, the guests is false. So we expect to also get back is correct.

764
01:34:49.980 --> 01:34:50.220
Ryan Mehta: Good.

765
01:34:53.430 --> 01:35:06.030
Ryan Mehta: So whenever we select number will take everything from state will input the number, get rid of the guests. Every time we create a new guests will keep everything from state update the guests in recalculate. This is correct Boolean

766
01:35:08.190 --> 01:35:08.850
Look good

767
01:35:11.310 --> 01:35:29.100
Ryan Mehta: Okay, let's go back to our well let's go somewhere else in this application. Let's start writing a component. So in my components directory. I'm going to make a. What is this, what is this application called number game.

768
01:35:33.390 --> 01:35:35.610
Ryan Mehta: Number. Yes.

769
01:35:38.640 --> 01:35:39.930
Ryan Mehta: I have no good names.

770
01:35:41.520 --> 01:35:52.590
Ryan Mehta: Jessie J, Sx so make a guess, or J SX maybe that is one thing that you can do in your lab kitchen much better name for this component. Guess it

771
01:35:53.640 --> 01:35:55.080
Thomas Stussi: Just get rid of the last day.

772
01:35:59.220 --> 01:36:02.640
Brooke Perkins (she/her): Yeah, and doing things with Justin ours is the way to go.

773
01:36:03.180 --> 01:36:06.300
Ryan Mehta: Yeah, I'm gonna avoid that one but

774
01:36:07.650 --> 01:36:08.790
Ryan Mehta: Only because I don't want the

775
01:36:09.840 --> 01:36:14.670
Ryan Mehta: This the blue squiggly Mark saying that it's misspelled of keep thinking it's an error.

776
01:36:16.110 --> 01:36:19.950
Ryan Mehta: But it's a good idea for like a website name for sure.

777
01:36:22.290 --> 01:36:24.690
Ryan Mehta: All right, let's bring in our state.

778
01:36:27.270 --> 01:36:29.790
Ryan Mehta: State and dispatch.

779
01:36:30.840 --> 01:36:40.830
Ryan Mehta: We're going to use reducer will bring in our producer. We never created initial state. So let's go back to our reducer and

780
01:36:42.090 --> 01:36:52.320
Ryan Mehta: Create some initial state. Initially, we're going to have a number which is no a guess, which is also now and

781
01:36:53.850 --> 01:36:55.140
Ryan Mehta: Is correct

782
01:36:56.700 --> 01:36:57.570
She's also know

783
01:36:58.620 --> 01:37:00.780
Ryan Mehta: So we'll just start off with all notes here.

784
01:37:04.260 --> 01:37:07.920
Ryan Mehta: Yes, that's what we should do. And then the spring in our initial state.

785
01:37:09.600 --> 01:37:10.230
Ryan Mehta: With good

786
01:37:12.240 --> 01:37:24.270
Ryan Mehta: And then down below will return an object or a component will have like a key with the state number that they should guess

787
01:37:25.470 --> 01:37:34.410
Ryan Mehta: And then underneath it. We will optionally render if state.is correct. We will

788
01:37:35.670 --> 01:37:40.440
Ryan Mehta: Render one thing of wise will render. Another thing, let's do the opposite. If it

789
01:37:41.610 --> 01:37:42.870
Ryan Mehta: isn't correct

790
01:37:44.460 --> 01:37:47.730
Ryan Mehta: Then we will render a paragraph.

791
01:37:49.500 --> 01:37:50.040
Again,

792
01:37:53.370 --> 01:37:56.790
Ryan Mehta: That makes sense. So, which is correct is false.

793
01:37:58.170 --> 01:38:04.290
Ryan Mehta: Then we'll put try again here otherwise this paragraph won't exist on the bottom.

794
01:38:06.600 --> 01:38:07.170
Ryan Mehta: Look good

795
01:38:09.960 --> 01:38:10.320
Yeah.

796
01:38:16.020 --> 01:38:16.380
Okay.

797
01:38:17.730 --> 01:38:19.050
Have a huge effect.

798
01:38:23.250 --> 01:38:24.960
Ryan Mehta: When our component first

799
01:38:25.980 --> 01:38:31.950
Ryan Mehta: Loads. So when it first mounts. We are going to dispatch.

800
01:38:33.000 --> 01:38:35.580
Ryan Mehta: A new number

801
01:38:36.990 --> 01:38:44.940
Ryan Mehta: Two. So we get a number. And let's see if it actually renders on the page, like we should after doing this, see some random number on the page.

802
01:38:46.890 --> 01:38:53.400
Ryan Mehta: I am going to use this. I'm kind of just winging it because I've never made this application before

803
01:38:55.020 --> 01:39:00.960
Ryan Mehta: But I think this is the right approach. Let's just make sure things render on the page.

804
01:39:04.410 --> 01:39:05.460
Ryan Mehta: When you just start it.

805
01:39:15.900 --> 01:39:19.710
Ryan Mehta: Well, nothing renders on the page. Let's see what our console error is

806
01:39:21.570 --> 01:39:23.490
Ryan Mehta: Module fail to build

807
01:39:27.480 --> 01:39:32.040
Ryan Mehta: Okay, where is that line one of number reducer.

808
01:39:33.090 --> 01:39:34.290
That shouldn't be there.

809
01:39:35.580 --> 01:39:37.320
Ryan Mehta: Okay, compiled successfully.

810
01:39:40.590 --> 01:39:43.620
Ryan Mehta: Nice. Why do we have this try again here.

811
01:39:44.850 --> 01:39:47.190
Ryan Mehta: We've made a bad mistake.

812
01:39:49.350 --> 01:39:53.010
Thomas Stussi: Your initial guests correct is not equal to your payload.

813
01:39:54.960 --> 01:39:56.130
Ryan Mehta: Yeah, exactly.

814
01:39:56.190 --> 01:40:05.250
Ryan Mehta: And so maybe this is correct should start off as true for that way they like us. We assumed or equal when its initial state.

815
01:40:08.hta: will render our app.

700
01:26:17.700 --> 01:26:23.850
Ryan Mehta: And then we need to get our inputs. Let's put our create card over here.

701
01:26:25.770 --> 01:26:31.920
Ryan Mehta: We never put labels on any of these inputs, because we were being kind of lazy or at least I was being kind of lazy.

702
01:26:33.360 --> 01:26:40.920
Ryan Mehta: Our form is kind of in desperate need of them, too, because nobody has any idea what these things mean right now.

703
01:26:41.970 --> 01:26:44.340
Ryan Mehta: So let's go back and add some labels.

704
01:26:45.510 --> 01:26:46.350
Ryan Mehta: Label

705
01:26:48.330 --> 01:26:51.570
Ryan Mehta: Name and this will be for

706
01:26:56.370 --> 01:26:59.730
Ryan Mehta: Them will give this thing and ID card.

707
01:27:04.890 --> 01:27:09.210
Ryan Mehta: This will be split into multiple lines, cuz to line.

708
01:27:13.830 --> 01:27:19.830
Ryan Mehta: Three of our first label, we should be able to grab that card me encrypt

709
01:27:33.840 --> 01:27:36.330
Ryan Mehta: And then we'll also get the

710
01:27:39.090 --> 01:27:40.290
Ryan Mehta: Description

711
01:27:50.610 --> 01:27:53.700
Ryan Mehta: And then we will add our car description label.

712
01:28:02.250 --> 01:28:03.060
Ryan Mehta: This will be

713
01:28:18.960 --> 01:28:20.130
Ryan Mehta: Our

714
01:28:38.730 --> 01:28:40.260
Ryan Mehta: start copying that label.

715
01:28:47.430 --> 01:28:50.790
Ryan Mehta: This is our cost our carpet costs.

716
01:28:53.130 --> 01:28:55.050
Ryan Mehta: And this will now have an ID.

717
01:29:07.980 --> 01:29:15.420
Ryan Mehta: fast way to do this. I just thought of a way better way. I've been doing that this whole time. The one by one.

718
01:29:18.420 --> 01:29:20.610
Ryan Mehta: I think isn't it faster to do

719
01:29:24.360 --> 01:29:26.910
Ryan Mehta: Because there's only spaces in between there.

720
01:29:29.610 --> 01:29:31.560
Ryan Mehta: Are so much better. That was way better.

721
01:29:34.770 --> 01:29:36.420
Ryan Mehta: Alright, so we have

722
01:29:38.460 --> 01:29:42.480
Ryan Mehta: Our we can grab these three inputs. Now let's

723
01:29:58.080 --> 01:29:59.700
Ryan Mehta: Start typing into these things.

724
01:30:31.440 --> 01:30:33.510
Ryan Mehta: And then we'll also need the submit button.

725
01:30:38.730 --> 01:30:41.010
Ryan Mehta: This only can get by wall.

726
01:30:44.880 --> 01:30:45.570
Ryan Mehta: I believe

727
01:30:51.420 --> 01:30:53.310
Ryan Mehta: This should be card costs.

728
01:31:13.980 --> 01:31:18.810
Ryan Mehta: Things we can do our final user event. Click on our Submit button.

729
01:31:20.610 --> 01:31:24.690
Ryan Mehta: And then we will wait for

730
01:31:28.320 --> 01:31:42.090
Ryan Mehta: The same sort of thing as our last test where we expected card list to have length to but now we expected to have length to read and so will also meet our card List of above

731
01:31:45.390 --> 01:31:45.930
Goals.

732
01:31:46.980 --> 01:31:47.280
Yet

733
01:31:59.310 --> 01:32:00.330
Ryan Mehta: Let's see what happens.

734
01:32:01.950 --> 01:32:03.660
Ryan Mehta: Passes but

735
01:32:06.270 --> 01:32:06.930
Ryan Mehta: At the same

736
01:32:12.240 --> 01:32:15.570
Ryan Mehta: All right, that was a big test, but does it kind of makes sense.

737
01:32:17.190 --> 01:32:34.290
Ryan Mehta: So we mock the post thing. So when we post to our service or always returns this card we render app, we get the list of cards which should have two cards in it because when it renders it always renders of two cards because we mock the get card service.

738
01:32:38.130 --> 01:32:47.580
Ryan Mehta: And then we get the three inputs, the card name the card description and the card costs and we also get the submit button.

739
01:32:49.470 --> 01:33:07.140
Ryan Mehta: We type into the card name and put up with cart type the card description we type the card cost and then we click the submit button. After we click the submit button. We expect the cards list to go from having a length of two to having a length of three.

740
01:33:14.490 --> 01:33:15.000
Ryan Mehta: Look good

741
01:33:27.150 --> 01:33:30.030
Ryan Mehta: Now we have these beautiful labels here also.

742
01:33:56.190 --> 01:33:56.700
Greg Mall: Nice back

743
01:33:58.170 --> 01:33:59.820
Ryan Mehta: Yeah, I'm back. Okay.

744
01:34:00.960 --> 01:34:03.390
Ryan Mehta: Any questions for the section.

745
01:34:10.470 --> 01:34:10.770
No.

746
01:34:16.080 --> 01:34:16.920
Ryan Mehta: Becomes house.

747
01:34:23.580 --> 01:34:25.830
Ryan Mehta: Greg, you are house.

748
01:34:27.180 --> 01:34:28.200
Greg Mall: First time ever.

749
01:34:30.990 --> 01:34:31.950
Jerud Moyer: It's a big day for you.

750
01:34:32.220 --> 01:34:33.150
Greg Mall: I know you

751
01:34:35.580 --> 01:34:37.440
Greg Mall: Need to figure out how to make somebody else happens

752
01:34:37.920 --> 01:34:39.000
Ron Yonker: What are you gonna do with that.

753
01:34:39.390 --> 01:34:46.260
Greg Mall: I don't know so much power. All right, I relinquish power. It was fun. Well, that's

754
01:34:48.810 --> 01:34:50.820
Ryan Mehta: Okay, and I can now share my screen.

755
01:34:50.820 --> 01:34:51.270
Ryan Mehta: Again, and

756
01:34:51.750 --> 01:34:52.920
Annalise: Such a dictator.

757
01:34:53.280 --> 01:34:55.140
Ron Yonker: Oh no, I'm a host now.

758
01:34:55.710 --> 01:34:56.970
Edgar Cuellar: You give it to Ron

759
01:34:59.250 --> 01:34:59.700
Greg Mall: Failed

760
01:35:05.820 --> 01:35:08.850
Ron Yonker: To make me host. So let's

761
01:35:09.330 --> 01:35:10.410
Jerud Moyer: Wait, to go back and

762
01:35:12.960 --> 01:35:14.370
Ron Yonker: Make host

763
01:35:16.560 --> 01:35:17.190
Ron Yonker: Yes.

764
01:35:18.960 --> 01:35:20.070
Ron Yonker: Are you now host

765
01:35:20.190 --> 01:35:21.090
America.

766
01:35:26.520 --> 01:35:26.970
Ryan Mehta: Alright.

767
01:35:29.340 --> 01:35:32.580
Ryan Mehta: So is this like good or get all

768
01:35:36.120 --> 01:35:36.540
Ryan Mehta: Okay.

769
01:35:37.980 --> 01:35:49.770
Ryan Mehta: Let's do let's see how long this next crowd route takes even if we don't get all of them done. I think maybe it'll be a little bit easier kind of seen most of them.

770
01:35:50.940 --> 01:35:55.290
Ryan Mehta: Next one. I want to do is the delete one because it can add it into our page so easily.

771
01:35:56.760 --> 01:36:04.200
Ryan Mehta: What we'll do is add a little like trash can button here that will let us delete a card from our database.

772
01:36:06.450 --> 01:36:06.960
Ryan Mehta: So,

773
01:36:07.320 --> 01:36:16.590
Jerud Moyer: Sorry, Ryan, can you tell me one more time. Why on your routes. Here you can or cannot do the module exports as router.

774
01:36:18.210 --> 01:36:21.840
Jerud Moyer: Because I noticed on like on all my labs. I didn't necessarily have that all of them.

775
01:36:22.890 --> 01:36:24.420
Ryan Mehta: On this line. You mean

776
01:36:24.540 --> 01:36:25.680
Jerud Moyer: Yeah, like for you.

777
01:36:26.580 --> 01:36:28.350
Ryan Mehta: I you should have to have that everywhere.

778
01:36:28.710 --> 01:36:31.230
Ryan Mehta: Okay. Always say you just had it like

779
01:36:31.470 --> 01:36:36.180
Jerud Moyer: I swear I had it, you know, just I, I'd have to go back and look

780
01:36:36.600 --> 01:36:40.110
Jerud Moyer: Okay. But anyway, that's it. Thanks.

781
01:36:41.310 --> 01:36:42.720
Ryan Mehta: They could always do.

782
01:36:42.840 --> 01:36:48.120
Ryan Mehta: Like this sort of thing cons router equals and then at the bottom.

783
01:36:52.170 --> 01:36:53.490
Ryan Mehta: That work also

784
01:36:59.130 --> 01:36:59.850
Ryan Mehta: Alright.

785
01:37:00.270 --> 01:37:00.690
Ryan Mehta: So let's

786
01:37:00.900 --> 01:37:06.960
Ryan Mehta: Take our delete route back end card JS. We are going to make another method.

787
01:37:09.420 --> 01:37:12.090
Ryan Mehta: Delete. We're going to delete by an ID.

788
01:37:13.980 --> 01:37:15.870
Ryan Mehta: Will get back some rose

789
01:37:17.670 --> 01:37:21.510
Ryan Mehta: A way to query delete.

790
01:37:26.220 --> 01:37:31.620
Ryan Mehta: Delete brown cards, where ID equals

791
01:37:33.210 --> 01:37:34.020
Ryan Mehta: Dollar sign one

792
01:37:35.430 --> 01:37:40.560
Ryan Mehta: Pass it that ID, let's put these are multiple lines to sell it looks a little bit better.

793
01:37:43.920 --> 01:37:47.040
Ryan Mehta: And then we'll turn

794
01:37:48.690 --> 01:37:50.190
Ryan Mehta: New card.

795
01:37:52.620 --> 01:38:01.500
Ryan Mehta: Rose zero. There's also a chance that there is no roads row zero. So if there is no rose zero will return no

796
01:38:03.660 --> 01:38:05.760
Ryan Mehta: Just in case there is no card to delete.

797
01:38:09.780 --> 01:38:10.380
Ryan Mehta: Look good

798
01:38:13.230 --> 01:38:17.070
Ryan Mehta: Back in our router. We're going to add a delete route.

799
01:38:20.730 --> 01:38:25.260
Ryan Mehta: ID, they need to pass us the idea of the card that they want us to delete.

800
01:38:28.440 --> 01:38:42.990
Ryan Mehta: And then we will use that card API to delete. I rec program Star ID for then going to get back the deleted card, they will send that deleted card.

801
01:38:44.070 --> 01:38:47.220
Ryan Mehta: catching errors and pass it to the next middleware.

802
01:38:49.530 --> 01:39:05.010
Ryan Mehta: Now we've constructed an API that the front end can use the slash ID route with the delete method back on the front end, we are going to create a new service. This one is going to be called

803
01:39:06.960 --> 01:39:08.190
Ryan Mehta: Delete card.

804
01:39:15.120 --> 01:39:23.070
Ryan Mehta: We are going to get a response by a waiting. We're going to fetch from this same API. This one right here.

805
01:39:25.530 --> 01:39:38.190
Ryan Mehta: But we need to specify the ID of the card that we want to delete this function should be able to delete any card by ID. So we don't know this ID beforehand. It's something that's going to be given to us.

806
01:39:39.720 --> 01:39:42.420
Ryan Mehta: will delete that card by ID.

807
01:39:47.310 --> 01:39:50.430
Ryan Mehta: We need to make sure that our method is delete.

808
01:40:01.680 --> 01:40:06.450
Ryan Mehta: After we delete the card. Can you will get some JSON back

809
01:40:12.600 --> 01:40:14.400
Ryan Mehta: If things aren't. Okay.

810
01:40:16.710 --> 01:40:20.940
Ryan Mehta: Then we'll throw the JSON. Otherwise, we'll return the JSON.

811
01:40:25.860 --> 01:40:26.970
Ryan Mehta: Service look good.

812
01:40:28.440 --> 01:40:35.130
Ryan Mehta: So we're going to invoke the function on the back end that lives here for the delete method.

813
01:40:39.900 --> 01:40:44.010
Ryan Mehta: Right let's set up the Redux part of this.

814
01:40:46.620 --> 01:41:00.930
Ryan Mehta: So in our cards actions. So bring up there and our cards with do sir, which I'll bring up over here, we want to add a new action that lets us delete a card. I'm going to call it removed card.

815
01:41:02.550 --> 01:41:04.110
Ryan Mehta: Because we already have a delete card.

816
01:41:05.400 --> 01:41:06.180
Card.

817
01:41:08.040 --> 01:41:18.360
Ryan Mehta: The remove card will take the idea of the card that we want to remove we're going to return a function that takes dispatch the funk style middleware right here.

818
01:41:20.130 --> 01:41:29.220
Ryan Mehta: We are going to delete a card by ID. We're then going to get back the card that we just deleted.

819
01:41:30.840 --> 01:41:38.490
Ryan Mehta: With that card that we just deleted. We want to notify our reducer that we just deleted a card so it can remove it from the list of cards.

820
01:41:39.570 --> 01:41:43.050
Ryan Mehta: We're going to make another intermediate action here.

821
01:41:44.370 --> 01:41:46.080
Ryan Mehta: Delete cards.

822
01:41:52.230 --> 01:41:53.250
Ryan Mehta: Pop card.

823
01:41:55.020 --> 01:41:58.380
Ryan Mehta: Splice card. What's a good name for this.

824
01:42:19.980 --> 01:42:24.210
Ryan Mehta: Anybody have a good name for this thing. We used to remove we use delete.

825
01:42:25.620 --> 01:42:43.560
Ryan Mehta: I already don't like that we used these two. And it's very unclear which one is the action creator and which one is this service in my mind. This one makes sense as a service, because the service uses the delete method. So the word delete makes me feel like

826
01:42:44.820 --> 01:42:51.510
Ryan Mehta: It's in line with all of our other services where we use the method name at the front.

827
01:42:54.210 --> 01:42:58.830
Ryan Mehta: But another developer would have no idea that that's what was going through our minds. That's still a bad name.

828
01:43:01.470 --> 01:43:11.250
Ryan Mehta: But now, whatever we choose here seems like it's going to be an even worse name but anybody have any good ideas splice card pop card.

829
01:43:14.400 --> 01:43:15.330
Sound great

830
01:43:16.620 --> 01:43:17.550
Thomas Stussi: Example,

831
01:43:19.710 --> 01:43:21.180
Ryan Mehta: Maybe we don't give this thing a name.

832
01:43:22.230 --> 01:43:25.290
Ryan Mehta: It's only going to be used by our delete card thing. So maybe we

833
01:43:25.290 --> 01:43:25.830
Just

834
01:43:28.500 --> 01:43:29.640
Ryan Mehta: Hard coded

835
01:43:32.460 --> 01:43:41.370
Ryan Mehta: But we didn't, we didn't be part of that deleted too much will keep the action type, but we won't have the creator and then it'll just

836
01:43:42.420 --> 01:43:43.200
Ryan Mehta: Just fat.

837
01:43:45.000 --> 01:43:45.360
Thing.

838
01:43:51.420 --> 01:43:51.930
Ryan Mehta: I don't know.

839
01:43:55.080 --> 01:43:56.400
Ryan Mehta: That's the best I can come up with.

840
01:43:57.660 --> 01:43:58.350
Ryan Mehta: No name.

841
01:44:02.040 --> 01:44:04.230
Ryan Mehta: Kind of like an avoid, avoid the problem.

842
01:44:06.630 --> 01:44:12.390
Ryan Mehta: So when we get that delete card action we're going to return everything from states.

843
01:44:13.650 --> 01:44:24.210
Ryan Mehta: The list, we're going to want to remove a card from the list. The best way to remove a card from the list is to take the current list and filter it

844
01:44:25.320 --> 01:44:31.050
Ryan Mehta: For each card in the list if the card ID.

845
01:44:32.190 --> 01:44:34.020
Ryan Mehta: He doesn't equal

846
01:44:35.460 --> 01:44:37.110
Ryan Mehta: Action doc payload.

847
01:44:40.500 --> 01:44:42.420
Let's put this on multiple lines.

848
01:44:48.180 --> 01:44:50.880
Ryan Mehta: So I might. I might have this backwards, actually.

849
01:44:51.870 --> 01:45:09.690
Ryan Mehta: For each card. If the cards ID doesn't equal the actual payload. Then we keep it if it does equal the actual payload. Then we throw it away, right, when this returns true we keep it when it returns false we throw it away. So if the card ID doesn't equal x stop payload. We keep it.

850
01:45:10.710 --> 01:45:16.290
Ryan Mehta: If the card ID does equal x dot payload. Then we throw it away. So we're getting rid of the card that we just deleted.

851
01:45:19.980 --> 01:45:30.510
Ryan Mehta: We can now use this thing in our card list. So let's go back to our card list are you

852
01:45:34.890 --> 01:45:37.350
Ryan Mehta: Let's make a little click handler.

853
01:45:42.690 --> 01:45:43.620
Delete.

854
01:45:44.940 --> 01:45:58.080
Ryan Mehta: With the idea of the card that we want to delete. So on somebody's clicking a button, they're going to call this handled delete function, they're going to pass this the cards ID and we're going to dispatch our remove

855
01:46:00.420 --> 01:46:10.740
Ryan Mehta: Card with the ID, they can kind of see us up the stack continually not knowing wherever they get it from and
925
01:43:53.160 --> 01:44:06.330
Ryan Mehta: Eventually in this home component, we're going to want to display to Article lists, lists of articles. So I am going to prepare for that by creating an articles.

926
01:44:09.570 --> 01:44:11.640
Ryan Mehta: An article list J SX

927
01:44:13.230 --> 01:44:14.490
Ryan Mehta: Article list will be

928
01:44:16.110 --> 01:44:24.000
Ryan Mehta: A totally presentational components. So it's going to get a list of articles.

929
01:44:25.710 --> 01:44:28.020
Ryan Mehta: Which is going to be an array of

930
01:44:29.430 --> 01:44:34.770
Ryan Mehta: Strings just the title of the articles that we're going to display on the page.

931
01:44:36.060 --> 01:44:38.430
Ryan Mehta: We will get our articles.

932
01:44:39.840 --> 01:44:45.420
Ryan Mehta: And then we're going to do our typical articles article elements.

933
01:44:46.680 --> 01:44:49.890
Ryan Mehta: Tools are going to map to each article

934
01:44:51.540 --> 01:44:56.130
Ryan Mehta: For each article will create an Li read the key.

935
01:44:57.570 --> 01:44:58.950
Ryan Mehta: Is the article.

936
01:45:00.510 --> 01:45:02.160
Ryan Mehta: Title and then

937
01:45:05.520 --> 01:45:12.810
Ryan Mehta: We'll just put our article the title inside of the Li. And then below. We will return

938
01:45:14.430 --> 01:45:15.420
Ryan Mehta: A UL

939
01:45:16.620 --> 01:45:17.910
Ryan Mehta: With our articles in it.

940
01:45:24.060 --> 01:45:41.490
Ryan Mehta: presentational components that can display a list of articles for us. So on our homepage. We're going to use it over here and over here, passing it different articles based on its location A or location A articles or location be articles.

941
01:45:43.260 --> 01:45:45.150
Ryan Mehta: For go back to our little plan.

942
01:45:47.250 --> 01:45:53.760
Ryan Mehta: We decided that we are going to stay the articles in the A or B reducer.

943
01:45:55.260 --> 01:45:59.100
Ryan Mehta: So if we go back to our a reducer.

944
01:46:00.120 --> 01:46:03.300
Ryan Mehta: This should store a list of articles.

945
01:46:07.620 --> 01:46:12.720
Ryan Mehta: Which will just have as an empty array for now and our be reducer should also

946
01:46:15.780 --> 01:46:20.040
Ryan Mehta: Articles store an array of articles.

947
01:46:21.600 --> 01:46:31.710
Ryan Mehta: At some point we're going to want to select these articles. So in our A selectors. We're going to say get articles, a

948
01:46:35.880 --> 01:46:36.780
Ryan Mehta: And in our

949
01:46:39.510 --> 01:46:43.380
Ryan Mehta: Our be selector. We're going to do the same sort of thing. But for articles.

950
01:46:53.790 --> 01:46:57.840
Ryan Mehta: So now we can get that articles array with a selector.

951
01:47:00.750 --> 01:47:04.320
Ryan Mehta: Back in our homepage, let's say,

952
01:47:05.400 --> 01:47:14.940
Ryan Mehta: Our to close a equals you selector get articles. A and articles he

953
01:47:17.790 --> 01:47:26.160
Ryan Mehta: Get Hard to be so we're not actually figure out how we're going to fetch these things. We're just figuring out how to get them from state once that state is filled up

954
01:47:28.290 --> 01:47:31.980
Ryan Mehta: And then we will display side by side.

955
01:47:33.780 --> 01:47:36.450
Ryan Mehta: I were our tickles list.

956
01:47:38.040 --> 01:47:39.330
Ryan Mehta: With articles, a

957
01:47:40.770 --> 01:47:44.640
Ryan Mehta: And articles list articles.

958
01:47:50.670 --> 01:47:55.140
Ryan Mehta: And maybe let's put these in a section so we can eventually display grid these things.

959
01:47:56.850 --> 01:48:04.410
Ryan Mehta: All right, so we're fetching or we're getting the state for articles. A and B in our homepage. Now,

960
01:48:05.460 --> 01:48:22.500
Ryan Mehta: And actually displaying them on the page. And if we look at the page, it's going to still be empty. If we look at our component hierarchy, though, we should see our homepage and the to article. There's just nothing in state right now.

961
01:48:24.330 --> 01:48:27.930
Ryan Mehta: In order to get some stuff in state. We're going to need a service.

962
01:48:30.690 --> 01:48:40.230
Ryan Mehta: That will fetch from the reddit API for us. So under source. I'm going to create a services and Reddit API JS file.

963
01:48:42.480 --> 01:48:44.430
Ryan Mehta: If we go back to our plan.

964
01:48:45.450 --> 01:48:49.230
Ryan Mehta: We talked a little bit about what the service needed to do in here.

965
01:48:51.420 --> 01:48:55.110
Ryan Mehta: So we're going to export costs get are the coins.

966
01:49:01.710 --> 01:49:05.670
Ryan Mehta: It's going to go to this URL so

967
01:49:08.730 --> 01:49:13.800
Ryan Mehta: This URL on this part needs to change based on the location.

968
01:49:14.880 --> 01:49:15.420
Ryan Mehta: So,

969
01:49:18.450 --> 01:49:20.220
Ryan Mehta: That is whatever location.

970
01:49:21.540 --> 01:49:25.380
Ryan Mehta: We're going to need to get that location somehow into this file.

971
01:49:26.580 --> 01:49:33.900
Ryan Mehta: We have no way to get it here except by passing the argument. Whenever you do this sort of thing like you know you need this.

972
01:49:34.440 --> 01:49:46.080
Ryan Mehta: But you don't know where to get it, you'll just pass it like it's always going to be a parameter and you're just kind of pushing the work off to somebody else, like, I don't know how to get location, whoever's calling me needs to know how to get that

973
01:49:47.460 --> 01:49:50.400
Ryan Mehta: So we'll tell them that they need to know how to get that we will

974
01:49:51.900 --> 01:49:54.960
Ryan Mehta: parse the response as JSON.

975
01:49:56.340 --> 01:50:19.380
Ryan Mehta: Then we'll get back that JSON and we already kind of figured out the nesting of this so JSON has data and children. We're going to map through the children for each child. We are going to get child dot data title that will get us just the title of each article

976
01:50:23.190 --> 01:50:28.440
Ryan Mehta: Right, so we now have our service all complete

977
01:50:29.820 --> 01:50:30.450
Ryan Mehta: Look good

978
01:50:33.810 --> 01:50:39.480
Ryan Mehta: Okay, we haven't figured out where we're going to use this service yet. Anybody have any

979
01:50:40.830 --> 01:50:42.810
Ryan Mehta: Ideas, what we can do for this.

980
01:50:51.480 --> 01:50:52.320
Ryan Mehta: Maybe another

981
01:50:54.690 --> 01:50:58.410
Ryan Mehta: Sunday saying no, we say, okay, maybe another action creator

982
01:51:00.630 --> 01:51:03.120
Ryan Mehta: It's not exactly clear though.

983
01:51:04.710 --> 01:51:09.720
Ryan Mehta: Which of these two action or three actions files the action creator should go in

984
01:51:11.700 --> 01:51:17.310
Ryan Mehta: We could have an action creator that just fetches articles. A or articles be

985
01:51:18.960 --> 01:51:23.340
Ryan Mehta: But that seems kind of weird because it's all interconnected right whenever

986
01:51:24.360 --> 01:51:39.180
Ryan Mehta: The a location changes. We're going to need to re fetch whatever the location changes. We're going to need to refresh. And whenever subreddit changes. We're also going to need to refresh in any of those three cases, we need to re fetch.

987
01:51:44.010 --> 01:51:48.750
Ryan Mehta: So it's not exactly clear where to put these put this action creator

988
01:51:50.550 --> 01:51:52.680
Ryan Mehta: Or when to trigger it. Okay.

989
01:51:54.510 --> 01:51:57.300
Ryan Mehta: I don't know. Does anybody have any good ideas, what we can do.

990
01:52:03.750 --> 01:52:05.670
Ryan Mehta: Yeah, I don't have any really good ideas, either.

991
01:52:07.230 --> 01:52:10.140
Ryan Mehta: So I have a few things that are running through my mind.

992
01:52:13.980 --> 01:52:19.350
Ryan Mehta: First one is in our homepage. We can have a huge effect here.

993
01:52:23.490 --> 01:52:37.920
Ryan Mehta: And we can say that this reuse effect triggers whenever the subreddit changes so we can bring into subreddit state whenever location A changes or location be changes and whenever any of those three changes will dispatch.

994
01:52:39.330 --> 01:52:49.290
Ryan Mehta: A fetch articles action that will grab both articles. A and article be at the same time and set both pieces of state.

995
01:52:51.450 --> 01:52:53.790
Ryan Mehta: This one seems like the simplest one to

996
01:52:55.050 --> 01:52:58.830
Ryan Mehta: Approach, but it is a little bit like

997
01:52:59.940 --> 01:53:02.010
Ryan Mehta: It's a has a performance cost.

998
01:53:03.600 --> 01:53:04.530
Ryan Mehta: Because whenever we

999
01:53:05.580 --> 01:53:10.830
Ryan Mehta: Change location A, we would have to re fetch location A and location be

1000
01:53:12.120 --> 01:53:13.380
Ryan Mehta: With this style.

1001
01:53:14.610 --> 01:53:19.440
Ryan Mehta: So we'd be making an extra request every time one of the locations change.

1002
01:53:21.090 --> 01:53:27.690
Ryan Mehta: The other drawback with this one is, it's not really clear where that fetch articles action will go in our

1003
01:53:29.250 --> 01:53:34.680
Ryan Mehta: Structure over here because it's really triggering off of all three changes.

1004
01:53:36.840 --> 01:53:39.150
Ryan Mehta: The other approach is to

1005
01:53:40.980 --> 01:53:46.950
Ryan Mehta: In our header when we change when we submit our

1006
01:53:49.260 --> 01:53:58.590
Ryan Mehta: Submit our location change this submit instead of just changing the current location will also trigger a fetch.

1007
01:53:59.850 --> 01:54:01.050
Ryan Mehta: An article fetch.

1008
01:54:03.420 --> 01:54:11.070
Ryan Mehta: The big drawback with that is if we don't have a subreddit selected. We don't want to do an article fetch.

1009
01:54:12.270 --> 01:54:19.020
Ryan Mehta: We'd also have to make it so when we chain submit our subreddit. We also do a fetch of articles.

1010
01:54:20.100 --> 01:54:25.140
Ryan Mehta: So we're going to have some duplicate code in all three of our actions.

1011
01:54:26.160 --> 01:54:33.090
Ryan Mehta: Because this action creator this action creator and this action creator, when all have to

1012
01:54:36.810 --> 01:54:38.220
Ryan Mehta: I'll have to do fetches

1013
01:54:43.020 --> 01:54:48.090
Ryan Mehta: Um, you know, that's a lot to keep in your mind without maybe understanding what's going through my mind.

1014
01:54:52.620 --> 01:54:56.790
Ryan Mehta: Now that I'm speak saying this out loud, though, I want to do it that way.

1015
01:55:00.660 --> 01:55:13.500
Ryan Mehta: So what we're going to do is change our set location A action creator, a little bit instead of it directly dispatching this type and changing the

1016
01:55:16.260 --> 01:55:19.320
Ryan Mehta: Well, yeah, instead of just changing the

1017
01:55:21.060 --> 01:55:29.340
Ryan Mehta: Location in state. We want to dispatch an action that changes this location and fetches the articles for us.

1018
01:55:30.750 --> 01:55:31.980
Ryan Mehta: All at the same time.

1019
01:55:33.090 --> 01:55:36.240
Ryan Mehta: So what I think I'm going to do is

1020
01:55:37.320 --> 01:55:38.070
Ryan Mehta: Do a slight

1021
01:55:40.500 --> 01:55:45.750
Ryan Mehta: We're going to export console fetch location, a

1022
01:55:47.580 --> 01:55:56.370
Ryan Mehta: Which will be one of those funk style action creators a function that returns a function that takes dispatch.

1023
01:55:57.600 --> 01:56:03.930
Ryan Mehta: And then we'll use our Reddit API yeah articles.

1024
01:56:05.760 --> 01:56:15.570
Ryan Mehta: Get articles takes a location we know which location we should have. I think we need to, we actually need to pass the location here now.

1025
01:56:23.670 --> 01:56:33.060
Ryan Mehta: anybody noticed this yesterday that this dispatch thing the funk thing gets passed both dispatch and a function to get the current state.

1026
01:56:35.520 --> 01:56:39.690
Ryan Mehta: So I think what we could do is cause

1027
01:56:41.130 --> 01:56:42.090
Creation.

1028
01:56:46.320 --> 01:56:46.620
Ryan Mehta: Yeah.

1029
01:56:53.670 --> 01:56:55.860
Ryan Mehta: Okay, that looks like a kind of crazy line.

1030
01:56:58.170 --> 01:57:02.430
Ryan Mehta: Anybody know what's happening online 16 or 15 for that matter.

1031
01:57:16.710 --> 01:57:19.920
Ben Waples: Did we write a good location, a function

1032
01:57:20.880 --> 01:57:21.240
Ryan Mehta: Mm hmm.

1033
01:57:21.720 --> 01:57:24.150
Ryan Mehta: Yeah, yeah, we read that in our selectors.

1034
01:57:27.420 --> 01:57:30.480
Ben Waples: Oh, so just firing off that selector than

1035
01:57:30.840 --> 01:57:32.340
Ryan Mehta: That's all it's doing. Yeah.

1036
01:57:33.570 --> 01:57:43.170
Ryan Mehta: Um, so this is back to like these lectures can be useful in like random places throughout our application all this selector does. If we look back at the selectors.

1037
01:57:44.940 --> 01:57:55.410
Ryan Mehta: All this selector does is take the state that we have and returns location A from it.

1038
01:57:57.120 --> 01:58:08.130
Ryan Mehta: This get state function gets our current state we pass our current state to our debt location. A selector and it returns location A whatever the value of location A is from state.

1039
01:58:09.870 --> 01:58:20.850
Ryan Mehta: Which is super convenient for us because we need that to pass to get articles, whoever wrote this get articles function left it up to us to figure out how to get location and

1040
01:58:22.920 --> 01:58:23.430
Ryan Mehta: We've done it.

1041
01:58:27.600 --> 01:58:29.490
Ryan Mehta: So that's how we're going to get the location.

1042
01:58:30.600 --> 01:58:35.370
Ryan Mehta: I almost never use this thing. It just happened that we needed it.

1043
01:58:37.530 --> 01:58:48.240
Ryan Mehta: Most of the time you'll just see these functions like this, but the middle where does pass you a function to get the current state here also. So we get our current state.

1044
01:58:49.440 --> 01:58:58.260
Ryan Mehta: Past that current state to our get location. A selector, which gives us our location A whatever location we selected us or or whatever.

1045
01:59:01.320 --> 01:59:03.120
Ryan Mehta: After we get our current state.

1046
01:59:04.470 --> 01:59:05.250
Ryan Mehta: We're going to get our

1047
01:59:11.550 --> 01:59:20.910
Ryan Mehta: Once we get our articles. We're going to dispatch two things we're going to dispatch set location, a

1048
01:59:27.000 --> 01:59:28.710
Ryan Mehta: Oh, we're kind of in trouble.

1049
01:59:30.390 --> 01:59:44.430
Ryan Mehta: And then we're also going to dispatch another argue another action that lets us set articles. So we need a set articles action creator, that the reduced to a little pickup and set that articles piece of state.

1050
02:00:18.060 --> 02:00:21.180
Ryan Mehta: Articles action creator that we can dispatch here.

1051
02:00:24.960 --> 02:00:31.260
Ryan Mehta: And this will send these articles to the reducer for us and the reducer. We just need to start handling this action.

1052
02:00:32.460 --> 02:00:33.420
Ryan Mehta: Type right here.

1053
02:00:35.430 --> 02:00:47.370
Ryan Mehta: So back in the reducer a need a case set articles. A which will return everything from stakes.

1054
02:00:48.630 --> 02:00:53.940
Ryan Mehta: But we will update articles with whatever is an action doc payload.

1055
02:00:57.660 --> 02:00:58.740
Ryan Mehta: So we have this

1056
02:01:01.230 --> 02:01:20.280
Ryan Mehta: Set articles. A which we divine. Here we dispatch this action after we fetch the articles from Reddit. After Effects the articles from Reddit. We dispatch set articles. A. We're also dispatching this set art set location, a

1057
02:01:21.300 --> 02:01:24.150
Ryan Mehta: We have a bug here. Anybody see the bug.

1058
02:01:25.830 --> 02:01:27.600
Ryan Mehta: I didn't realize the bug untilst of events of API gives us we set our event state to that list of events API gave us and then we also set loading to false. We're no longer in a loading state. We now have our list of events.

1067
02:05:51.960 --> 02:05:58.050
Ryan Mehta: Let's go to app JS really quick and let's drop in our

1068
02:06:00.540 --> 02:06:05.160
Ryan Mehta: This day container and see what it looks like.

1069
02:06:06.660 --> 02:06:07.650
Ryan Mehta: In the browser.

1070
02:06:11.610 --> 02:06:12.900
Ryan Mehta: Back over here.

1071
02:06:14.880 --> 02:06:16.770
Ryan Mehta: It looks broken. Which is okay.

1072
02:06:19.200 --> 02:06:21.030
Ryan Mehta: Let's see what the console says

1073
02:06:26.010 --> 02:06:30.540
Ryan Mehta: Course, why does this constantly come up with all of these API's now.

1074
02:06:35.490 --> 02:06:36.990
Annalise Murphy: Like it's a story of my life, though.

1075
02:06:38.760 --> 02:06:40.500
Ryan Mehta: I was like, so sure that that

1076
02:06:40.500 --> 02:06:40.920
One.

1077
02:06:42.480 --> 02:06:44.880
Ryan Mehta: I've been using this API for like

1078
02:06:45.960 --> 02:06:52.500
Ryan Mehta: The last three or four cohorts and I feel like I wouldn't have kept kept using it. If it didn't have course but

1079
02:06:53.820 --> 02:06:56.460
Ryan Mehta: Maybe I say this every single time. And I just don't

1080
02:06:59.100 --> 02:07:00.090
Ryan Mehta: I just don't remember.

1081
02:07:02.880 --> 02:07:08.310
Greg Mall: Is it a good idea to just default to having course as you're a guy fetch.

1082
02:07:08.850 --> 02:07:09.510
Greg Mall: The thing.

1083
02:07:09.870 --> 02:07:17.460
Ryan Mehta: No, it's very bad to have this yeah I shouldn't mention it never have this if you're if this was a production site.

1084
02:07:18.840 --> 02:07:30.390
Ryan Mehta: You do not want this. You want to either call muffin labs and ask them to start supporting cores, or make your own back end calls muffin labs and your back end would have course.

1085
02:07:31.230 --> 02:07:43.500
Ryan Mehta: Because Corps anywhere is notoriously slow. First of all, and it's rate limited very harshly rate limited so you don't want this unless you're just like hacking about

1086
02:07:46.860 --> 02:07:48.060
Ryan Mehta: But here's our little app.

1087
02:07:50.040 --> 02:07:51.450
Ryan Mehta: This Day in History up

1088
02:07:52.830 --> 02:07:55.050
Ryan Mehta: So we have all of our little events.

1089
02:07:59.460 --> 02:08:00.300
Ryan Mehta: Check it out.

1090
02:08:02.010 --> 02:08:09.480
Ryan Mehta: So right now, if we refresh this will see we only call this this API once

1091
02:08:11.250 --> 02:08:12.450
Ryan Mehta: If, however,

1092
02:08:14.190 --> 02:08:14.910
Ryan Mehta: We

1093
02:08:19.170 --> 02:08:28.050
Ryan Mehta: Don't have to these okay if we go back to our component and get rid of the square brackets here.

1094
02:08:30.570 --> 02:08:33.870
Ryan Mehta: And save this check out what happens to our event tab.

1095
02:08:36.270 --> 02:08:41.010
Ryan Mehta: It's just going on endlessly. Look how many my browser froze.

1096
02:08:42.420 --> 02:08:42.810
Ah,

1097
02:08:44.670 --> 02:08:53.610
Ryan Mehta: OK, but you can see the number of requests building up extremely quickly here. I'm probably going to get rate limited. Let me hurry up and change it back.

1098
02:08:56.190 --> 02:08:59.970
Ryan Mehta: Okay, we're good. We didn't get rate limited either

1099
02:09:02.850 --> 02:09:12.390
Ryan Mehta: So this thing was super important in that case without the empty square brackets here. We're saying whenever there's a re render call this us effect again.

1100
02:09:13.860 --> 02:09:35.940
Ryan Mehta: What was happening is we ran this when the component first mounted we set our event state to the events that we got back from the API. Whenever we set state, it causes a re render renders recall us effect again set our state. Again, Re renders etc endlessly.

1101
02:09:38.820 --> 02:09:55.860
Ryan Mehta: So be very careful of this as you're working on your labs, because if you don't have this here, you'll notice that unless I have the Network tab open. I have no idea that it's just constantly fetching over and over, then

1102
02:09:57.000 --> 02:09:59.670
Ryan Mehta: It will just sit there in the background and fetch forever.

1103
02:10:01.170 --> 02:10:05.280
Ryan Mehta: Like if you're in the console, you have no idea that I'm fetching

1104
02:10:07.590 --> 02:10:09.060
Ryan Mehta: You'd only figure this out.

1105
02:10:09.060 --> 02:10:10.500
Adrian Simental: If you went to the Network tab.

1106
02:10:11.220 --> 02:10:12.690
Ryan Mehta: And thought doing this.

1107
02:10:15.150 --> 02:10:18.810
Ryan Mehta: Ok this whoever owns meth labs is going to get super mad at me.

1108
02:10:20.130 --> 02:10:22.320
Adrian Simental: To lunch break and she do you

1109
02:10:23.460 --> 02:10:23.940
Adrian Simental: Limited

1110
02:10:24.660 --> 02:10:32.940
Ryan Mehta: Yeah, they'll eventually break so you won't know that you've done this until it breaks and then you won't be able to fetch from the API for the rest of the day, potentially

1111
02:10:33.870 --> 02:10:34.320
So,

1112
02:10:35.460 --> 02:10:35.670
Greg Mall: What

1113
02:10:37.230 --> 02:10:40.350
Greg Mall: Would you want. No. Nothing there at all wait to have an

1114
02:10:41.640 --> 02:10:42.060
Greg Mall: Argument.

1115
02:10:42.660 --> 02:10:47.100
Ryan Mehta: Yeah, only if you're going to have like some of your own conditions here. Like if

1116
02:10:50.010 --> 02:11:03.090
Ryan Mehta: Almost never it's going to be so rare, there's probably some use case for it out there. If you're using effect doesn't set state would be one. But if you're using effect doesn't set state, you wouldn't need to use effect.

1117
02:11:05.400 --> 02:11:07.170
Ryan Mehta: So it's going to be very rare.

1118
02:11:09.030 --> 02:11:12.000
Adrian Simental: Just like a mistake for them, not just make it the diesel.

1119
02:11:15.870 --> 02:11:23.520
Ryan Mehta: Yeah, would have been nice if they had like just empty array is on route and then you'd have to say like

1120
02:11:23.550 --> 02:11:26.070
Adrian Simental: True or something, have a

1121
02:11:26.100 --> 02:11:27.630
Ryan Mehta: Run on every render

1122
02:11:31.710 --> 02:11:37.710
Ryan Mehta: I don't know if it's a mistake they probably thought about it hard and came up with this, but

1123
02:11:39.000 --> 02:11:41.850
Ryan Mehta: It's just a little bit inconvenient sometimes. Sure.

1124
02:11:45.930 --> 02:11:46.500
Ryan Mehta: All right.

1125
02:11:50.490 --> 02:11:54.360
Ryan Mehta: Now let's inspect this failing test because I kind of expected it to pass.

1126
02:12:12.690 --> 02:12:20.580
Ryan Mehta: So expected container to be an element a document or a document fragment but got a string.

1127
02:12:25.020 --> 02:12:25.620
Ryan Mehta: What is that

1128
02:12:28.710 --> 02:12:32.250
Charlie Smith: Resolved, you might have had a string key.

1129
02:12:32.970 --> 02:12:37.770
Greg Mall: So most keys you had in strings and some you didn't your monitors all about it.

1130
02:12:40.230 --> 02:12:40.860
Ryan Mehta: Over here.

1131
02:12:57.540 --> 02:12:58.050
Ryan Mehta: Okay.

1132
02:12:59.160 --> 02:13:03.780
Ryan Mehta: Expected container to be an element which container.

1133
02:13:06.630 --> 02:13:10.530
Ryan Mehta: A document or a document fragment but got a string. Oh.

1134
02:13:12.840 --> 02:13:13.380
Ryan Mehta: Well,

1135
02:13:15.630 --> 02:13:16.590
Ryan Mehta: Talking about this thing.

1136
02:13:35.640 --> 02:13:39.660
Ryan Mehta: What's time do we have left. Perfect. We have plenty of time to figure out

1137
02:13:40.980 --> 02:13:42.030
How to fix this.

1138
02:13:44.760 --> 02:13:48.360
Ryan Mehta: Let's go to, I'm going to get rid of this snapshot test.

1139
02:13:49.680 --> 02:13:50.520
Ryan Mehta: Card garbage.

1140
02:13:59.640 --> 02:14:02.340
Ryan Mehta: So without that passes with this.

1141
02:14:07.980 --> 02:14:09.270
Ryan Mehta: Expected container.

1142
02:14:11.490 --> 02:14:13.440
Ryan Mehta: So if we got rid of that.

1143
02:14:17.490 --> 02:14:21.540
Ryan Mehta: If we get rid of this and always return instead

1144
02:14:44.670 --> 02:14:45.630
What happens

1145
02:14:48.960 --> 02:14:55.860
Ryan Mehta: expects a container to be element. So same thing if even if we're not using this event list.

1146
02:14:58.410 --> 02:15:03.480
Annalise Murphy: Um, I don't know, this might be a stupid question, but do we need to write the expect in the test.

1147
02:15:07.530 --> 02:15:12.540
Ryan Mehta: Yeah, we told the curve. I expect this to

1148
02:15:15.510 --> 02:15:17.820
Ryan Mehta: Be the DOM element.

1149
02:15:29.370 --> 02:15:30.270
Ryan Mehta: I guess we also want to

1150
02:16:02.880 --> 02:16:03.510
Ryan Mehta: Strain

1151
02:16:08.400 --> 02:16:11.130
Ryan Mehta: It's only for this part.

1152
02:16:12.750 --> 02:16:13.590
Annalise Murphy: Is it because it

1153
02:16:14.700 --> 02:16:15.210
Annalise Murphy: Double quick

1154
02:16:26.970 --> 02:16:27.990
Ryan Mehta: Okay, let's google it.

1155
02:16:30.210 --> 02:16:32.280
Michelle Stermitz: Is it something to do with your import

1156
02:16:33.390 --> 02:16:35.880
Michelle Stermitz: Online to not being used.

1157
02:16:37.830 --> 02:16:41.760
Michelle Stermitz: For like online seven events, it looks like that's not being used either

1158
02:16:46.800 --> 02:16:51.120
Ryan Mehta: I don't think so, because I think those are just yes length things. But let's try

1159
02:17:15.240 --> 02:17:17.130
Ryan Mehta: Okay, that was kind of useless.

1160
02:17:22.560 --> 02:17:23.640
Ryan Mehta: All right. What if

1161
02:17:24.930 --> 02:17:25.620
Ryan Mehta: What if

1162
02:17:26.880 --> 02:17:33.150
Ryan Mehta: What if we move this into there and then what's news, the old tried and true.

1163
02:17:34.530 --> 02:17:35.400
Ryan Mehta: Get by

1164
02:17:48.630 --> 02:17:51.570
Ben Waples: Do not need screened by test ID.

1165
02:17:54.750 --> 02:17:55.650
Ryan Mehta: So smart.

1166
02:18:16.560 --> 02:18:17.820
Ryan Mehta: Looking a little bit better.

1167
02:18:19.980 --> 02:18:20.910
Ryan Mehta: Hundred percent better

1168
02:18:21.060 --> 02:18:21.510
Okay.

1169
02:18:23.580 --> 02:18:28.440
Ryan Mehta: Let's get rid of that. Nice. Nice catch. What were you thinking that this whole time.

1170
02:18:29.460 --> 02:18:32.670
Ben Waples: No. Yes. Definitely not just really changed it.

1171
02:18:35.850 --> 02:18:36.750
Ryan Mehta: There was

1172
02:18:37.950 --> 02:18:42.390
Ryan Mehta: My second cohort that they ever taught, there's this person. He always sat in the front row.

1173
02:18:43.650 --> 02:18:45.330
Ryan Mehta: And whenever I'd make a mistake.

1174
02:18:46.860 --> 02:18:56.460
Ryan Mehta: Like, I guess you would just sit there and like know that I made the mistake, and I would spend like 10 minutes like trying to figure it out. And after 10 minutes and be like,

1175
02:18:56.490 --> 02:18:58.620
Ryan Mehta: I noticed like 10 minutes ago. You did this.

1176
02:18:58.620 --> 02:19:05.430
Ryan Mehta: Thing that I don't think is right. Like, why don't you tell me 10 minutes ago. It's been holding on to that knowledge.

1177
02:19:06.600 --> 02:19:07.320
Ryan Mehta: All right, well,

1178
02:19:07.350 --> 02:19:09.300
Annalise Murphy: It all passes. Now, this

1179
02:19:09.330 --> 02:19:12.120
Ryan Mehta: screen.is very, very important.

1180
02:19:20.130 --> 02:19:24.810
Ryan Mehta: Cool. So that's our user fact over here.

1181
02:19:27.360 --> 02:19:33.780
Ryan Mehta: Any questions about our this day component container.

1182
02:19:48.570 --> 02:19:48.990
Cool.

1183
02:19:51.600 --> 02:19:54.570
Ryan Mehta: Seem like you can write something with these things.

1184
02:19:57.480 --> 02:19:57.990
Ryan Mehta: Maybe

1185
02:19:59.220 --> 02:20:00.360
Ryan Mehta: Okay, yeah.

1186
02:20:01.140 --> 02:20:02.190
Annalise Murphy: Me too optimistic.

1187
02:20:03.840 --> 02:20:05.520
Ryan Mehta: Guess what the lab is today.

1188
02:20:06.360 --> 02:20:10.770
Ryan Mehta: It's a list and details notorious list and details.

1189
02:20:12.900 --> 02:20:13.410
Ryan Mehta: Lab.

1190
02:20:15.000 --> 02:20:26.490
Ryan Mehta: So, you will get a list of things from an API and display them. And then, you know, also have a detail page. So you should be able to click on one of the list items and go to the detail page and do something similar.

1191
02:20:29.310 --> 02:20:45.090
Ryan Mehta: So should look almost identical to the lab that you all wrote last week, except you're going to be translating all of those containers from class based containers into function based containers using use state and use effect instead

1192
02:20:50.790 --> 02:20:52.440
Ryan Mehta: If you get through all of that.

1193
02:20:56.070 --> 02:21:00.870
Ryan Mehta: As a bonus, which is not written here try to add paging to the thing

1194
02:21:02.010 --> 02:21:03.960
Ryan Mehta: How would you go through different pages.

1195
02:21:06.540 --> 02:21:07.140
Ryan Mehta: Or

1196
02:21:10.110 --> 02:21:16.530
Ryan Mehta: Or if you want to you can write this in TypeScript or something. Also be get through it. Try getting me to get in TypeScript.

1197
02:21:18.870 --> 02:21:21.600
Ben Waples: Pack configuration look like for TypeScript.

1198
02:21:22.020 --> 02:21:27.690
Ryan Mehta: Yeah, that's a good question. You're gonna have to add a TypeScript loader.

1199
02:21:31.020 --> 02:21:31.530
Ben Waples: Oh,

1200
02:21:31.590 --> 02:21:33.270
Josh Olloqui: To get rid of the prompts.

1201
02:21:35.610 --> 02:21:37.950
Ryan Mehta: You wouldn't need prop types anymore. Yeah.

1202
02:21:38.910 --> 02:21:40.920
Josh Olloqui: When we take that away though.

1203
02:21:41.970 --> 02:21:44.670
Ryan Mehta: Where, oh that's in that package JSON.

1204
02:21:49.080 --> 02:21:49.740
Takes

1205
02:21:52.470 --> 02:21:59.370
Ryan Mehta: Somewhere in here if you want, though, you can just instead of using the alchemy bootstrap and trying to configure it to

1206
02:22:00.450 --> 02:22:03.750
Ryan Mehta: TypeScript, because that seems kind of hard easy to create React app.

1207
02:22:05.370 --> 02:22:06.000
Ryan Mehta: bootstrap

1208
02:22:07.320 --> 02:22:11.190
Ryan Mehta: They have a TypeScript thing.

1209
02:22:13.080 --> 02:22:17.520
Ryan Mehta: You can do something like this, and it'll set up type script for you and react.

1210
02:22:18.180 --> 02:22:21.390
Ron Yonker: So, I'm sorry, what were you saying about not using prop types.

1211
02:22:22.830 --> 02:22:24.780
Ryan Mehta: I will type script. You don't need prop types.

1212
02:22:38.550 --> 02:22:39.030
Ryan Mehta: Alright.

1213
02:22:40.050 --> 02:22:41.340
Ryan Mehta: This lab makes sense.

1214
02:22:44.490 --> 02:22:46.590
Ryan Mehta: So you don't have to do the TypeScript stuff for paging

1215
02:22:46.590 --> 02:22:50.370
Ryan Mehta: Stuff that's just if you have time at the end.

1216
02:22:51.540 --> 02:23:04.890
Ryan Mehta: And what to do something else. Otherwise, it's just your list of detail page your list page is probably going to look very similar to this sort of thing.

1217
02:23:07.320 --> 02:23:15.600
Ryan Mehta: Your big challenge is that you don't really have a detail page to reference the detail page will also look very similar to this sort of thing.

1218
02:23:16.890 --> 02:23:20.970
Ryan Mehta: But there's enough differences. I think that we'll have to figure some stuff out.

1219
02:23:28.860 --> 02:23:30.510
Any questions or anything.

1220
02:23:36.030 --> 02:23:47.250
Annalise Murphy: I kind of ran into an interesting issue with the snapshots and when I insthta: We're going to use our router.

814
01:37:21.960 --> 01:37:25.080
To have a switch and a route.

815
01:37:29.250 --> 01:37:38.940
Ryan Mehta: Slash have a component. And we'll use our character list as our rendered component

816
01:37:45.000 --> 01:37:48.630
Ryan Mehta: Alright, this look reasonable to everyone so far.

817
01:37:52.260 --> 01:37:57.900
Ryan Mehta: If we ran this which it is running. Oh, it's not running kidding.

818
01:38:01.530 --> 01:38:06.780
Ryan Mehta: We should see a blank page because we have no characters yet to display.

819
01:38:07.920 --> 01:38:10.920
Ryan Mehta: There's are blank page or beautiful blank page.

820
01:38:12.060 --> 01:38:16.440
Ryan Mehta: To get it to start actually working will need to fill in our hook a little bit more

821
01:38:19.320 --> 01:38:21.990
Ryan Mehta: Will need a use effect.

822
01:38:24.300 --> 01:38:43.110
Ryan Mehta: We want this use effective trigger on Mount and only on Mount. So we'll have an empty array there inside of this use effect we're going to want to fetch from our API. So we're going to make a services directory and there, Rick and Morty.

823
01:38:44.370 --> 01:38:53.700
Ryan Mehta: API JS file here. We're going to export cons to get for authors is going to

824
01:38:56.880 --> 01:39:03.060
Ryan Mehta: Return fetch from whatever the URL is and then we're going to get

825
01:39:05.640 --> 01:39:10.740
Ryan Mehta: JSON and then we are going to

826
01:39:11.760 --> 01:39:13.140
Ryan Mehta: Take that JSON.

827
01:39:15.000 --> 01:39:26.670
Ryan Mehta: I think the API gives us back results look at a map through that array of results for each it's actually called this so it's a little bit clear characters.

828
01:39:27.780 --> 01:39:35.850
Ryan Mehta: For each character and results we're going to return an object with the idea of the character.

829
01:39:37.170 --> 01:39:39.150
Ryan Mehta: With been named name of the character.

830
01:39:40.950 --> 01:39:53.160
Ryan Mehta: And an image URL of the character. And I think this API calls the image URL image so will rename image to image URL. We need to get that URL.

831
01:39:54.390 --> 01:39:55.590
Ryan Mehta: Go first here.

832
01:39:57.240 --> 01:40:05.550
Ryan Mehta: Let's double check that they call it so name ID and image instead of image URL so that rename was good.

833
01:40:07.260 --> 01:40:18.570
Ryan Mehta: All right, we have a service to get our list of characters back in our character suck. We will use our service will then get a response with our

834
01:40:20.250 --> 01:40:26.280
Ryan Mehta: Characters and we will set characters to catch characters.

835
01:40:29.190 --> 01:40:35.400
Ryan Mehta: And now when we go back to our browser window we see our list of characters.

836
01:40:37.620 --> 01:40:38.220
Ryan Mehta: Look good

837
01:40:40.680 --> 01:40:45.840
Ryan Mehta: Okay, I'm gonna just a tiny, tiny, tiny bit of CSS. So it's not quite so

838
01:40:48.720 --> 01:40:48.990
No.

839
01:40:51.420 --> 01:40:52.590
Ryan Mehta: Horrendous and

840
01:40:53.460 --> 01:41:07.410
Brooke Perkins (she/her): Um, I was having trouble adding SPSS to my lab last night because I guess something in web pack was conflicting with it or there wasn't a loader in web pack that worked.

841
01:41:08.250 --> 01:41:10.230
Brooke Perkins (she/her): I was wondering, sorry. Go ahead.

842
01:41:10.470 --> 01:41:14.130
Ryan Mehta: Oh, you just add normal CSS and it kind of behaves like a

843
01:41:14.130 --> 01:41:15.270
Ryan Mehta: CSS so

844
01:41:16.350 --> 01:41:22.050
Brooke Perkins (she/her): Oh, it made me it made me change the file ending to CSS rather than a CSS.

845
01:41:23.280 --> 01:41:25.350
Ryan Mehta: Major change it to CSS.

846
01:41:25.470 --> 01:41:26.460
Brooke Perkins (she/her): Yeah yeah

847
01:41:26.520 --> 01:41:27.390
Ryan Mehta: That, that's right.

848
01:41:28.320 --> 01:41:29.460
Ryan Mehta: Okay, so it should be.

849
01:41:30.540 --> 01:41:32.700
Ryan Mehta: Like when I added character list.

850
01:41:32.820 --> 01:41:33.990
Brooke Perkins (she/her): Dot CSS is

851
01:41:33.990 --> 01:41:34.560
Ryan Mehta: What I add

852
01:41:36.540 --> 01:41:38.220
Brooke Perkins (she/her): But it acts like a CSS.

853
01:41:38.880 --> 01:41:45.270
Brooke Perkins (she/her): Mm hmm. Okay, so you can just call it. Okay. I guess I would like to talk about that more later.

854
01:41:45.990 --> 01:41:48.120
Ryan Mehta: Okay, that sounds good. Thanks.

855
01:41:49.530 --> 01:41:50.250
Ryan Mehta: Let's

856
01:41:51.060 --> 01:41:54.630
Ryan Mehta: Import this file files from

857
01:41:58.050 --> 01:41:59.610
Ryan Mehta: Scott CSS.

858
01:42:00.750 --> 01:42:03.000
Ryan Mehta: And we're going to apply a class name.

859
01:42:08.550 --> 01:42:12.750
Ryan Mehta: In our character list CSS will have a carrot list.

860
01:42:14.610 --> 01:42:19.200
Ryan Mehta: Class will make this display grade.

861
01:42:22.230 --> 01:42:24.450
Ryan Mehta: Template columns, let's say,

862
01:42:26.970 --> 01:42:29.250
Ryan Mehta: One FR three

863
01:42:30.360 --> 01:42:31.740
Ryan Mehta: Do that, in the right order.

864
01:42:33.330 --> 01:42:33.570
No.

865
01:42:34.740 --> 01:42:35.760
Ryan Mehta: Three one Fr.

866
01:42:42.480 --> 01:42:45.660
Ryan Mehta: Okay, that's much better. And then list.

867
01:42:46.680 --> 01:42:48.180
Ryan Mehta: Style type

868
01:42:56.790 --> 01:43:01.170
Ryan Mehta: Okay, it's okay. Text align

869
01:43:03.510 --> 01:43:05.820
Ryan Mehta: It's perfect. Okay, here's our

870
01:43:07.290 --> 01:43:10.650
Ryan Mehta: Here's our list of characters, your own grid.

871
01:43:14.310 --> 01:43:16.170
Ryan Mehta: That looks all good.

872
01:43:18.450 --> 01:43:29.430
Ryan Mehta: So the next thing that we want to do is make it so we have a toggle left the top that lets us switch between Rick and Morty characters and Breaking Bad characters.

873
01:43:30.930 --> 01:43:45.840
Ryan Mehta: How I am going to do this is by first creating some context for ourselves. So I am going to make character context dot j SX

874
01:43:46.950 --> 01:43:48.450
Ryan Mehta: We are going to

875
01:43:50.040 --> 01:43:52.020
Ryan Mehta: Create some context.

876
01:44:01.050 --> 01:44:05.250
Ryan Mehta: And we are also going to create a character.

877
01:44:06.450 --> 01:44:08.040
Ryan Mehta: Actually, let's just call this

878
01:44:09.270 --> 01:44:11.940
Ryan Mehta: Yeah okay character by

879
01:44:15.900 --> 01:44:18.720
Ryan Mehta: Character provider will get some children.

880
01:44:20.850 --> 01:44:22.950
Ryan Mehta: And then we're going to return.

881
01:44:25.110 --> 01:44:28.020
Ryan Mehta: Our here for context provider.

882
01:44:29.190 --> 01:44:30.810
With children.

883
01:44:31.950 --> 01:44:35.910
Ryan Mehta: Like, so I'm going to ignore this line because I don't feel like doing prop types.

884
01:44:37.290 --> 01:44:40.020
Ryan Mehta: Okay, and then we need to provide a value here.

885
01:44:41.130 --> 01:44:43.230
Ryan Mehta: Our value instead of being

886
01:44:45.060 --> 01:44:59.790
Ryan Mehta: A list of characters or anything is just going to be a single string that tells us whether we want Rick and Morty characters or if we want Breaking Bad characters. So I am going to make a piece of state called

887
01:45:01.500 --> 01:45:03.090
Ryan Mehta: There tight maybe

888
01:45:06.720 --> 01:45:11.010
Ryan Mehta: Which will start off as Rick and Morty.

889
01:45:12.720 --> 01:45:16.950
Ryan Mehta: And then we will send this character type of the value

890
01:45:18.030 --> 01:45:22.680
Ryan Mehta: And then I'm also going to make a toggle function.

891
01:45:24.000 --> 01:45:35.760
Ryan Mehta: That will toggle between Rick and Morty and Breaking Bad, so we'll set our character type in here will get the old type

892
01:45:37.980 --> 01:45:46.770
Ryan Mehta: And then we'll say if old tape is Rick and Morty. Then we're going to return.

893
01:45:48.360 --> 01:45:52.440
Ryan Mehta: Breaking Bad. Otherwise, we'll return

894
01:45:53.580 --> 01:45:53.910
And

895
01:45:56.460 --> 01:46:10.500
Ryan Mehta: Okay, so we have a little function that will change. Rick and Morty to breaking bad if it's currently Rick and Morty are breaking bad to Rick and Morty. If it's currently Breaking Bad will also export this toggle function.

896
01:46:11.910 --> 01:46:12.360
Here.

897
01:46:15.870 --> 01:46:26.730
Ryan Mehta: SO WE WON'T WE WON'T export the the raw set character type because we don't want people to be able to set the character type to whatever they want. We only want them to be able to toggle between the two.

898
01:46:29.700 --> 01:46:45.300
Ryan Mehta: Character types. And then I'm going to make some hooks for us to use this a bit better. So back in our character hooks. I'm going to make a export con us character toggling

899
01:46:47.850 --> 01:46:54.150
Ryan Mehta: Which will bring grab that toggle function from our context.

900
01:46:57.180 --> 01:47:00.120
Ryan Mehta: Context and return that toggle function.

901
01:47:01.140 --> 01:47:06.630
Ryan Mehta: And then I'm also going to make a news character type

902
01:47:07.860 --> 01:47:10.020
Ryan Mehta: Which will get our character type

903
01:47:12.600 --> 01:47:13.860
Ryan Mehta: From context.

904
01:47:18.000 --> 01:47:19.140
Ryan Mehta: And return that

905
01:47:21.480 --> 01:47:24.570
Ryan Mehta: Actually do we call it type. We didn't call it type of call the character type

906
01:47:33.150 --> 01:47:46.710
Ryan Mehta: Okay, so two hooks to get those two bucket values that we created this split this off to the side so we can see that so one hook that will get this toggle function and one hook that will get our character type

907
01:47:51.750 --> 01:47:53.160
Ryan Mehta: See him okay so far.

908
01:47:55.470 --> 01:47:55.740
Right.

909
01:47:56.940 --> 01:48:03.510
Ryan Mehta: Now we are prepared to make a header funk or header component

910
01:48:05.160 --> 01:48:06.840
Ryan Mehta: Let's make a header.

911
01:48:11.790 --> 01:48:16.740
Ryan Mehta: This header component is going to be the thing at the top here that lets us switch between the two.

912
01:48:18.720 --> 01:48:24.300
Ryan Mehta: So we'll make this and our fun. It's called header. It doesn't need any props.

913
01:48:25.770 --> 01:48:28.200
Ryan Mehta: But it will do, though, is return

914
01:48:29.700 --> 01:48:31.020
Ryan Mehta: To inputs.

915
01:48:35.310 --> 01:48:39.120
Ryan Mehta: So and input type

916
01:48:40.230 --> 01:48:44.850
Ryan Mehta: Radio, we should probably label these things a little

917
01:48:48.240 --> 01:48:52.380
Ryan Mehta: HTML for brick and mortar.

918
01:48:54.390 --> 01:48:55.260
Ryan Mehta: And we'll call this

919
01:49:18.540 --> 01:49:23.160
Ryan Mehta: Actually, we don't really need a name here a value, the value of this one.

920
01:49:25.860 --> 01:49:27.720
Ryan Mehta: Whatever brick and mortar.

921
01:49:29.010 --> 01:49:30.450
And change.

922
01:49:32.370 --> 01:49:36.510
Ryan Mehta: Okay. Sorry, I was a bit distracted for a second catching my groove again.

923
01:49:38.820 --> 01:49:48.660
Ryan Mehta: So one radio button for our Rick and Morty toggle, and then we'll have another radio button and label for breaking bad

924
01:50:11.610 --> 01:50:12.480
Ryan Mehta: Change.

925
01:50:13.920 --> 01:50:15.570
Ryan Mehta: Okay look good so far.

926
01:50:16.830 --> 01:50:24.630
Ryan Mehta: For the most part, just gonna put little dummy functions here so I can say that and get the format and correct

927
01:50:25.860 --> 01:50:39.000
Ryan Mehta: Okay, so we have two radio buttons, one for Rick and Morty, and one for breaking bad whenever you click on one of these radio buttons, we're going to want to

928
01:50:42.090 --> 01:50:44.100
Ryan Mehta: Kind of set this up. Ron and realizing

929
01:50:46.770 --> 01:50:49.890
Ryan Mehta: I set this up totally, totally wrong.

930
01:50:51.120 --> 01:50:55.410
Ryan Mehta: Okay, can we scrap the radio buttons. Can we can get rid of these radio buttons.

931
01:50:57.000 --> 01:51:03.510
Ryan Mehta: I'm going to put a button here. Instead, you have a toggle, we can't, we can't have radio buttons were toggling so

932
01:51:04.830 --> 01:51:09.030
Ryan Mehta: On click of a radio button will say,

933
01:51:11.400 --> 01:51:13.440
Ryan Mehta: Toggle to

934
01:51:17.490 --> 01:51:33.330
Ryan Mehta: So on clicking the button will toggle between Breaking Bad, and Rick and Morty whenever we click that radio whenever we click that button, we're going to want to use our toggle function which you can get with us character toggle

935
01:51:35.970 --> 01:51:36.960
Back over here.

936
01:51:40.440 --> 01:51:47.850
Ryan Mehta: Whenever you call this toggle function, it automatically switches the state from Rick and Morty to Breaking Bad, and back.

937
01:51:48.870 --> 01:52:01.710
Ryan Mehta: Back and forth. So we'll grab that toggle function from our hook, place it into our header will use this header back in our app J SX will put it in our router.

938
01:52:03.450 --> 01:52:03.900
After

939
01:52:05.580 --> 01:52:14.340
Ryan Mehta: So, so every page will now have that header on the top, you should be able to see it. Hopefully you didn't break anything too badly.

940
01:52:17.010 --> 01:52:18.330
Ryan Mehta: Okay, that's kind of good.

941
01:52:21.390 --> 01:52:40.290
Ryan Mehta: So this all looks good so far the setup one big thing that we're missing. We aren't using our provider yet. We haven't put our provider on the page. So our header doesn't have access to the toggle because there's no provider. There's no provider putting the state into the bucket for us.

942
01:52:41.340 --> 01:52:54.540
Ryan Mehta: We're going to make this kind of like true global state by wrapping our entire application in the provider. So every single component in our application will have access to this character toggle and the character type

943
01:52:55.620 --> 01:53:05.940
Ryan Mehta: The best way to do that is to go into our index JS and wrap literally our entire application with our character provider.

944
01:53:09.510 --> 01:53:26.040
Ryan Mehta: So now our app JS is a child of our character provider and since everything else the child of app JS, the entire application has actually has access to our character provider state. This is how we're going to make our state essentially global

945
01:53:30.180 --> 01:53:34.080
Ryan Mehta: If you go to our front end now and refresh this

946
01:53:35.490 --> 01:53:38.370
Ryan Mehta: We see our little character toggle here at the top.

947
01:53:39.840 --> 01:53:47.340
Ryan Mehta: We should be able to see its current state Rick and Morty. If I click on the button, it switches to Breaking Bad. If I click it again.

948
01:53:48.600 --> 01:53:54.000
Ryan Mehta: So we have this global piece of state that will switch between Rick and Morty and breaking bad for us now.

949
01:53:55.260 --> 01:54:01.800
Ryan Mehta: And every component in our application has access to the state since are all children.

950
01:54:03.480 --> 01:54:10.050
Ryan Mehta: Of app Jess and app just as a child of our character provider, everybody has access to that same bucket.

951
01:54:13.470 --> 01:54:14.250
Ryan Mehta: seem good

952
01:54:15.270 --> 01:54:22.890
Ryan Mehta: All right, now let's make the list change between Rick and Morty and Breaking Bad. We're going to do that back in our character hook

953
01:54:24.150 --> 01:54:27.510
Ryan Mehta: So right now, we're always fetching Rick and Morty characters.

954
01:54:29.100 --> 01:54:39.810
Ryan Mehta: We're going to make it so we sometimes fetch Rick and Morty characters and sometimes fetch Breaking Bad characters to do that. I am going to slightly update our service.

9ta: Get verify, I guess.

833
01:41:34.950 --> 01:41:40.290
Ryan Mehta: Which will get API, the one off verify

834
01:41:42.300 --> 01:41:46.020
Ryan Mehta: This will return the currently logged in user if there is one.

835
01:41:48.180 --> 01:41:49.560
Ryan Mehta: Back in off provider.

836
01:41:51.990 --> 01:41:55.440
Ryan Mehta: Verify the session cookie and sets the current user

837
01:41:57.720 --> 01:42:10.290
Ryan Mehta: We can do that with our get verify will then get back the current user will set the current user to whoever owns the J WT attached the browser. And then we'll finally

838
01:42:13.620 --> 01:42:16.080
Ryan Mehta: Set loading to false.

839
01:42:19.830 --> 01:42:26.790
Ryan Mehta: So the flow of this one like to draw a little picture with the browser brought up.

840
01:42:30.240 --> 01:42:33.600
Ryan Mehta: We have this session could be stored

841
01:42:36.120 --> 01:42:36.930
Ryan Mehta: Right here.

842
01:42:39.390 --> 01:42:52.470
Ryan Mehta: What will happen is our front end is this little person they have this session cookie attached to them when they first come to our website. We're going to send this session cookie to the back end.

843
01:42:54.840 --> 01:42:56.190
Ryan Mehta: Via the verify route.

844
01:42:58.680 --> 01:43:06.870
Ryan Mehta: The brat backend will check, is this a valid cookie. Is this a valid session if it is it's going to tell them which user, they are

845
01:43:07.440 --> 01:43:19.320
Ryan Mehta: who this person is this person has like total amnesia. They have no idea who they are all of their information is stored in their bracelet, the backend then reads the bracelet and tells the user who they are.

846
01:43:24.000 --> 01:43:30.180
Ryan Mehta: That's really that whole flow. It seems like a simpler and picture, but there's a ton of code that makes it happen.

847
01:43:31.980 --> 01:43:33.210
Ryan Mehta: So if we look at the code.

848
01:43:34.500 --> 01:43:52.620
Ryan Mehta: When the component first loads we verify verify calls this verify route. We're going to send the bracelet via the GET request the back ends in a check that the bracelet is good if it is good, they're going to tell us what user. We are. We're going to set loading to false.

849
01:43:54.480 --> 01:44:05.700
Ryan Mehta: On the back end. This is the route that they're hitting the verify route first uses this ensure off middleware. The ensure off middleware grabs that bracelet off of the cookie.

850
01:44:07.290 --> 01:44:10.380
Ryan Mehta: In there verifies that J WT

851
01:44:11.460 --> 01:44:29.220
Ryan Mehta: When it verifies that J WTF returns back the user who owns the J WT the bracelet and then it sets that user to user because we set wreck that user. Over here we have access direct.us over here and we're just sending back the user who own fat J WT

852
01:44:31.170 --> 01:44:33.000
Ryan Mehta: All of this makes it so

853
01:44:34.620 --> 01:44:43.770
Ryan Mehta: When we refresh this page. We now can access this dashboard, because we have a session here.

854
01:44:45.930 --> 01:44:53.040
Ryan Mehta: If we clear this session and refresh. We get sent to the loading page.

855
01:44:57.150 --> 01:45:00.660
Ryan Mehta: Try to go there loading page login

856
01:45:04.080 --> 01:45:12.240
Ryan Mehta: Dashboard refresh dashboard clearer cookie refresh login page.

857
01:45:13.620 --> 01:45:18.030
Ryan Mehta: A ton of code to get that functionality, but we have it.

858
01:45:22.680 --> 01:45:28.590
Ryan Mehta: Alright, one time just through it and for each piece that we wrote

859
01:45:32.580 --> 01:45:41.400
Ryan Mehta: So on the back end. We have three routes that we wrote a sign up route which signs up a user

860
01:45:42.450 --> 01:45:47.220
Ryan Mehta: To check out that service really quick. Put it side by side with the route.

861
01:45:50.040 --> 01:45:53.250
Ryan Mehta: So on sign up, we

862
01:45:54.690 --> 01:46:02.520
Ryan Mehta: Hash the password that the user signed up with and then insert into our database, the user with our email and the hashed password.

863
01:46:03.930 --> 01:46:13.230
Ryan Mehta: After they sign up. We set a session cookie which attaches a cookie on session with the author token.

864
01:46:14.520 --> 01:46:19.470
Ryan Mehta: Off token here constructs a j WT token, or J WT

865
01:46:20.910 --> 01:46:29.970
Ryan Mehta: Inside of the jaded UT, there's this object called with a payload key and the actual user who just signed up.

866
01:46:32.700 --> 01:46:42.720
Ryan Mehta: This stuff here constructs. Our token that will expire in 24 hours we take that token and attach it as a cookie to the response.

867
01:46:44.460 --> 01:47:00.150
Ryan Mehta: So when a user signs up we insert them into the database. We set a j WT in the browser's cookie jar and then we send back the user. So now that browser has attached to it a cookie that identifies the user

868
01:47:01.530 --> 01:47:02.550
Ryan Mehta: per application.

869
01:47:05.370 --> 01:47:15.780
Ryan Mehta: We have this login route the login route. There's something very similar to the signup route, but instead of inserting a user, it finds a user by their email.

870
01:47:16.920 --> 01:47:26.340
Ryan Mehta: If there is no user with that email errors if there is a user with that email. We checked out their passwords match. If they don't air if they do we return the user

871
01:47:27.540 --> 01:47:34.620
Ryan Mehta: So at this point, online 30 we know that we have a user with that email and the user passed in the correct password.

872
01:47:35.880 --> 01:47:42.930
Ryan Mehta: Because they did those two things we attached that jaded et to the browser and send back the user

873
01:47:44.910 --> 01:47:52.350
Ryan Mehta: So whether the user signed up or logged in, they now have a j WT attached to the browser that identifies them.

874
01:47:55.200 --> 01:48:06.480
Ryan Mehta: When they come back to her app later they're going to go through this verify without the verify route is our way of checking that J WT checking that they have already logged in or signed up.

875
01:48:07.830 --> 01:48:12.810
Ryan Mehta: This verify route uses the ensure off middleware that we wrote

876
01:48:13.830 --> 01:48:14.580
Ryan Mehta: For CPU.

877
01:48:16.080 --> 01:48:26.910
Ryan Mehta: It grabs the session cookie. Here's session online for rec cookies session, we put session here because the cookie name that we gave it session over here.

878
01:48:27.840 --> 01:48:45.330
Ryan Mehta: So we grabbed that session cookie. The session cookies value is the token, the J WT that we created earlier we verify that that session that that token is good if it is. This is going to give us back the user who created the token.

879
01:48:46.350 --> 01:48:55.260
Ryan Mehta: We set that user who either logged in or signed up earlier to wreck user an inner verify route we send back the currently logged in user

880
01:48:57.180 --> 01:49:14.520
Ryan Mehta: So anybody at any time can go to this endpoint and check to see if they've already logged in this endpoint will either return nothing if they haven't logged in, or we will return the current user who's logged in. So this is the way for the front end to check, have I already logged in.

881
01:49:18.060 --> 01:49:28.950
Ryan Mehta: On the front end. We have three things really going on in this off provider. The first one is handling sign up. So on sign up

882
01:49:29.460 --> 01:49:40.290
Ryan Mehta: We posted a sign up and point. We then get back the current user, which we set in state and then we push the user to the dashboard page and set loading to false.

883
01:49:41.100 --> 01:49:52.530
Ryan Mehta: We do the same thing on margin we log the user in by hitting the login route we get back the current user and set that in state we push them to the dashboard and set loading to false.

884
01:49:53.580 --> 01:49:55.440
Ryan Mehta: So, these two things are very similar.

885
01:49:58.110 --> 01:50:11.340
Ryan Mehta: The third thing that we do on this page is when the component first mounts when our application first loads on the screen. We check to see if the users already logged in UK has this person already logged in, previously did they already have a session cookie.

886
01:50:12.870 --> 01:50:33.330
Ryan Mehta: If they do user will be a value will sit like the currently logged in user will set that currently logged in user to state and will set loading to false. If they're not logged in this user won't be anything. So the current user will be no there'll be will be onset.

887
01:50:36.840 --> 01:50:40.860
Ryan Mehta: This component or this provider kind of makes sense for the most part.

888
01:50:43.170 --> 01:50:47.490
Ryan Mehta: There's one other big part on the front end that we did this private route.

889
01:50:50.010 --> 01:51:02.760
Ryan Mehta: The private route gets the currently logged in user and whether or not we're loading. We need this loading here because when the components first mount. We haven't verified that the users logged in or not yet.

890
01:51:03.450 --> 01:51:19.110
Ryan Mehta: So as we're waiting to check if the users logged in, we're in a loading state. So before we get back this verify request. We're going to show the user a loading screen we actually see that really quickly when we go to dashboard.

891
01:51:20.490 --> 01:51:27.270
Ryan Mehta: can kind of see that blip loading. So before we check to see if the users logged in, we display a loading screen.

892
01:51:28.500 --> 01:51:43.470
Ryan Mehta: After this use effect. The verify finishes, we either have a user or we don't the person's either logged in, or they're not if they're not logged in, we send them to the login page if they are logged in, we send them to the normal route.

893
01:51:45.150 --> 01:51:48.450
Ryan Mehta: And this private route thing is used back in app JS.

894
01:51:49.500 --> 01:52:00.120
Ryan Mehta: So App JS, we have private route and private route is used exactly like the normal route. These things are all props. We send those props down to the normal route.

895
01:52:01.500 --> 01:52:09.390
Ryan Mehta: To private route works exactly like a normal route except before it does the normal routing a first checks if the users logged in or not.

896
01:52:15.720 --> 01:52:16.350
Ryan Mehta: Look good

897
01:52:21.210 --> 01:52:23.250
Ron Yonker: Never have to write this frequently

898
01:52:26.070 --> 01:52:30.840
Ryan Mehta: You might have to write it for your final projects, but probably never again in your life after that.

899
01:52:32.670 --> 01:52:46.560
Ron Yonker: Yeah, a lot of gut. I'm hearing what you're saying. Like, I don't see why you would ever want to write this yourself rather than use some sort of library or something proprietary something someone

900
01:52:48.570 --> 01:52:51.780
Ryan Mehta: Yeah, totally. We used to use author zero at the end of

901
01:52:54.480 --> 01:53:04.650
Ryan Mehta: career track to do this login. The problem without the zeros. It's even more complicated, even though it's like a third party that does it for you. It ends up being more complicated so

902
01:53:06.780 --> 01:53:08.220
Ryan Mehta: It's not worth it so much.

903
01:53:10.110 --> 01:53:14.130
Jerud Moyer: Can you speak a little bit to how we would integrate this with Redux app.

904
01:53:15.270 --> 01:53:33.480
Ryan Mehta: Yeah, I probably wouldn't start, I would probably just continue to use the off provider. Even when I read that SAP and then you would just use your like Redux provider around all of this also. So you'd have both Redux and you're off provider state available to all of your, your components.

905
01:53:33.690 --> 01:53:34.620
Cool, thanks.

906
01:53:46.710 --> 01:53:52.200
Ryan Mehta: Okay, we're good with off. You don't have to use off on your final project, by the way.

907
01:53:53.340 --> 01:53:54.540
Ryan Mehta: But you can if you want

908
01:53:57.390 --> 01:54:04.740
Ryan Mehta: Okay, one little thing. I know it's like we're already into 12 so feels like lunch, but just very quickly.

909
01:54:14.130 --> 01:54:22.170
Ryan Mehta: Final projects we're going to start them today will meet tomorrow morning at nine, just so we can talk about this stuff like the flow of the week.

910
01:54:23.940 --> 01:54:30.270
Ryan Mehta: This week I kind of wanted to talk about it today, but I don't want to take any more time or not too much more time.

911
01:54:31.740 --> 01:54:34.380
Ryan Mehta: Today is Monday days zero of our

912
01:54:35.820 --> 01:54:40.770
Ryan Mehta: Flow of the week today, right now we will post the teams.

913
01:54:42.390 --> 01:54:49.080
Ryan Mehta: This afternoon, you'll meet with your team discuss team agreement stuff. Talk about ideas.

914
01:54:49.590 --> 01:55:01.050
Ryan Mehta: And research any libraries and API's that you might need. So it's just a tall day discussion with your team about how you want a final project to go and any ideas that you want to work on for final project.

915
01:55:02.430 --> 01:55:11.790
Ryan Mehta: Tomorrow, you'll pick one of those ideas. So I don't think you should pick one today, you should sort of play with the ideas explore them sleep on it and then come back tomorrow and

916
01:55:13.140 --> 01:55:15.510
Ryan Mehta: Decide with your group, the idea that you want to work.

917
01:55:18.540 --> 01:55:24.420
Ryan Mehta: But yeah, so today Team agreement and discuss the ideas. There's no labs are done with labs.

918
01:55:25.590 --> 01:55:26.070
Now,

919
01:55:27.180 --> 01:55:27.480
Ryan Mehta: Yeah.

920
01:55:29.910 --> 01:55:30.240
Annalise: He

921
01:55:32.910 --> 01:55:38.700
Ryan Mehta: For final projects, you can do whatever you want. I know that makes it very hard to come up with an idea.

922
01:55:40.830 --> 01:55:52.200
Ryan Mehta: Traditionally, people have had react friends and express back ends. So probably you'll have something like that. But you're free to do whatever you like make whatever you want.

923
01:55:53.220 --> 01:55:57.600
Ryan Mehta: During the next like two weeks week and a half of actual coding

924
01:55:59.160 --> 01:56:06.540
Ryan Mehta: You can come and talk to us and pitch ideas and we'll let you know if it seems like a good idea or something that you can complete in the allotted time

925
01:56:08.370 --> 01:56:15.810
Annalise: Other specific like requirements like base requirements that the final project needs like obviously a front end and back end.

926
01:56:17.730 --> 01:56:20.070
Ryan Mehta: There, there are none. I mean, you can write a

927
01:56:20.850 --> 01:56:29.430
Ryan Mehta: Letter right and only application. If you wanted to our backend only application if you wanted to, but it would have to be compelling like

928
01:56:34.740 --> 01:56:40.860
Ryan Mehta: Yeah, I mean, it would be hard to make a front end application that maybe last. That is interesting.

929
01:56:42.990 --> 01:56:46.350
Ryan Mehta: And it'd be hard to make a back end application that users can use

930
01:56:47.940 --> 01:56:53.910
Annalise: What I'm like, have you seen, or what type of projects have you seen be really successful for the final ones in the past.

931
01:56:55.620 --> 01:56:56.970
Ryan Mehta: Yeah, that's a good question.

932
01:56:58.230 --> 01:56:59.340
Annalise: You can get back to me on that.

933
01:57:00.300 --> 01:57:07.110
Ryan Mehta: Yeah, well I'll post a list of all like a bunch of final do we already post that thing with on the final projects.

934
01:57:08.310 --> 01:57:08.820
Annalise: In it.

935
01:57:10.530 --> 01:57:20.190
Ryan Mehta: I'll post a link in Slack with a list of like final projects that people have worked on in the past and the links that you can go to to see the final project so you can explore

936
01:57:21.630 --> 01:57:23.520
Can you maybe give some ideas.

937
01:57:28.950 --> 01:57:33.570
Ryan Mehta: Okay. Any final questions to pos
Ryan Mehta: Oh, right.

847
01:39:08.610 --> 01:39:26.160
Ryan Mehta: Well, it's close the hook part is good. But let's go back to the view layer and make sure we're doing anything with that data. So our used characters, Huck. Now returns character state, if we're not in a loading state. Then we went to return our

848
01:39:27.780 --> 01:39:30.000
Ryan Mehta: List of characters. So a UL

849
01:39:31.350 --> 01:39:32.940
Ryan Mehta: UL has a

850
01:39:35.040 --> 01:39:35.940
Ryan Mehta: Test ID.

851
01:39:40.440 --> 01:39:43.320
Ryan Mehta: And then we went to iterate through that character's last

852
01:39:50.940 --> 01:39:53.430
Ryan Mehta: Map through each character.

853
01:39:54.510 --> 01:39:58.710
Ryan Mehta: Character. We're going to construct an ally with the character.

854
01:40:00.240 --> 01:40:00.990
Ryan Mehta: Item in it.

855
01:40:04.050 --> 01:40:05.310
Ryan Mehta: Which will need to grab

856
01:40:08.100 --> 01:40:10.440
Ryan Mehta: And we will spread our character here.

857
01:40:11.490 --> 01:40:15.900
Ryan Mehta: We will also set our li ke to character does

858
01:40:18.330 --> 01:40:19.290
Ryan Mehta: That all look good.

859
01:40:22.920 --> 01:40:24.510
Ryan Mehta: Why can't I auto import you

860
01:40:27.090 --> 01:40:27.330
Go.

861
01:40:28.650 --> 01:40:31.860
Ryan Mehta: And then we will place our character.

862
01:40:32.970 --> 01:40:33.690
Elements.

863
01:40:37.350 --> 01:40:38.130
Ryan Mehta: seem okay

864
01:40:40.260 --> 01:40:50.280
Ryan Mehta: So, same sort of presentational components. The big difference is, we're now using our hope to get our list of characters instead of a prop to get a list of characters.

865
01:40:51.390 --> 01:40:54.270
Ryan Mehta: And now I think our tests, hopefully.

866
01:40:55.560 --> 01:40:56.310
Ryan Mehta: Will pass

867
01:40:58.410 --> 01:41:02.400
Ryan Mehta: Close. Let's see fetches not defined. Anybody know this one.

868
01:41:04.410 --> 01:41:05.760
We forgot a big piece.

869
01:41:06.840 --> 01:41:08.550
Ben Waples: We never mocked our service.

870
01:41:08.610 --> 01:41:10.560
Ryan Mehta: We need a mock our service and our tests.

871
01:41:13.230 --> 01:41:17.340
Ryan Mehta: So services Rick and Morty API.

872
01:41:18.810 --> 01:41:31.920
Ryan Mehta: Inside of our service, we will get characters will mock a resolved value, it should return an array with the characters ID main

873
01:41:34.770 --> 01:41:35.190
Floor.

874
01:41:41.040 --> 01:41:42.900
Ryan Mehta: And now we should have a passing tests.

875
01:41:43.920 --> 01:42:04.320
Ryan Mehta: That message is kind of confusing that error message on first glance at couldn't find fetch fetch doesn't exist a note. It only exists in the browser. Our tests are running in Node JS. So when we try to use our service and our service uses fetch it will fail and just always

876
01:42:06.060 --> 01:42:07.920
Ryan Mehta: Because this is a browser. Only thing.

877
01:42:09.480 --> 01:42:18.090
Ryan Mehta: We were kind of using something like this, and no JS, but if you remember, we had to import a library called node fetch in order to use this fetch thing.

878
01:42:21.210 --> 01:42:24.870
Ryan Mehta: Alright so service data layer.

879
01:42:26.010 --> 01:42:29.400
Ryan Mehta: Hook or kind of control domain layer.

880
01:42:30.690 --> 01:42:36.540
Ryan Mehta: And our character list or view layer. How does stuff look on the screen.

881
01:42:40.200 --> 01:42:40.650
Good.

882
01:42:48.210 --> 01:42:49.830
Ryan Mehta: I kind of want to

883
01:42:51.150 --> 01:43:02.010
Ryan Mehta: Do a few other things here. Not in this component, but I want to create our page or character list page and then add it to our app jess and then we can move on to our detail page.

884
01:43:02.490 --> 01:43:12.600
Ryan Mehta: Kind of the same flow. Let's take a break. First though, let's come back at 1110 and finish off this application and try to add some pagination right at the end.

885
01:43:14.190 --> 01:43:15.300
Ryan Mehta: Of CEO and 10

886
01:43:15.300 --> 01:43:15.900
Minutes.

887
01:43:17.220 --> 01:43:17.940
Ron Yonker: Thank you, Ryan.

888
01:43:18.300 --> 01:43:19.800
Ron Yonker: Thanks. I'm good, thank you.

889
01:43:21.900 --> 01:43:22.590
Ryan Mehta: Continue.

890
01:43:24.630 --> 01:43:26.820
Ryan Mehta: So we have our character list now.

891
01:43:29.520 --> 01:43:37.410
Ryan Mehta: Next thing that we want to do is make a character page and then render that page and app JS with our router.

892
01:43:39.240 --> 01:43:47.460
Ryan Mehta: So I'm going to close all of these open others. I am going to in our pages folder, create a character.

893
01:43:49.050 --> 01:43:56.970
Ryan Mehta: Page JS x. This will also be a function component called character page.

894
01:43:58.290 --> 01:44:00.300
Ryan Mehta: You won't need any props.

895
01:44:01.980 --> 01:44:08.220
Ryan Mehta: And all it really does at least right now is render our character list.

896
01:44:10.980 --> 01:44:20.190
Ryan Mehta: Might be more in the future. Once we like add pagination and everything pagination will be another component that needs to list live on the character list page.

897
01:44:21.660 --> 01:44:23.790
Ryan Mehta: But for now, it doesn't do much of anything.

898
01:44:25.980 --> 01:44:27.750
Ryan Mehta: Back in app JS.

899
01:44:29.670 --> 01:44:32.370
Ryan Mehta: Complete that test. Will I still here.

900
01:44:34.080 --> 01:44:47.130
Ryan Mehta: We're going to render our character list here. The react router. So I am going to, and can I react router DOM.

901
01:44:48.510 --> 01:44:54.720
Ryan Mehta: And then at the top of this file. I'm going to import all of the stuff that we need for react router.

902
01:44:59.700 --> 01:45:07.560
Ryan Mehta: We're going to import browser router as router. We're going to import switch and we're going to import without

903
01:45:09.480 --> 01:45:13.050
Ryan Mehta: Our app JS itself is going to return.

904
01:45:14.490 --> 01:45:15.510
Ryan Mehta: Our router.

905
01:45:16.560 --> 01:45:25.230
Ryan Mehta: Inside of the router. We're going to have a switch and then inside of that switch, we'll have our first route at the exact

906
01:45:26.790 --> 01:45:27.900
Ryan Mehta: Home path.

907
01:45:29.580 --> 01:45:32.280
Ryan Mehta: And it's going to render our

908
01:45:34.560 --> 01:45:37.980
Ryan Mehta: Character page component

909
01:45:39.450 --> 01:45:41.640
Ryan Mehta: Auto import that if it can

910
01:45:45.690 --> 01:45:46.080
Okay.

911
01:45:47.370 --> 01:45:57.960
Ryan Mehta: So we're importing our character page as the home route for go to our browser, we should see our list of characters. Once we start the application.

912
01:46:04.470 --> 01:46:06.930
Ryan Mehta: All right. There's our list of characters.

913
01:46:10.260 --> 01:46:15.810
Ryan Mehta: So next step let's create our character detail page.

914
01:46:18.600 --> 01:46:22.020
Ryan Mehta: I'm going to put it under my actually I'm going to make a

915
01:46:24.210 --> 01:46:31.290
Ryan Mehta: I'm torn. I'm torn, should I put it under this characters folder or should I make a new folder.

916
01:46:33.210 --> 01:46:34.290
Ryan Mehta: I'm going to make a new folder.

917
01:46:35.700 --> 01:46:38.880
Ryan Mehta: Let's call it their third detail.

918
01:46:40.710 --> 01:46:45.060
Ryan Mehta: And then inside of there will have a character detail J SX

919
01:46:47.670 --> 01:46:51.000
Ryan Mehta: This is going to be a function and

920
01:46:55.890 --> 01:46:57.570
Ryan Mehta: We're not going to receive any props.

921
01:47:00.690 --> 01:47:01.740
Ryan Mehta: Just like this.

922
01:47:03.030 --> 01:47:09.630
Ryan Mehta: All right, or character details gonna need to do a few things. It's going to need to fetch.

923
01:47:10.740 --> 01:47:11.370
Ryan Mehta: Character.

924
01:47:12.960 --> 01:47:15.090
Ryan Mehta: Have loading.

925
01:47:16.260 --> 01:47:18.060
Ryan Mehta: Have air.

926
01:47:19.290 --> 01:47:20.700
Ryan Mehta: Display stuff.

927
01:47:21.840 --> 01:47:36.300
Ryan Mehta: Right, we're going to have the character detail, use a custom hook to do all of this part and its main job will be to display the actual character. So let's go and make a hook that can do all of this stuff for us.

928
01:47:37.560 --> 01:47:48.300
Ryan Mehta: In our hooks directory. Maybe I'll add it to the same characters, J. S. So we'll have our use characters and the US character hook

929
01:47:49.590 --> 01:48:00.750
Ryan Mehta: In order to get the US character hook to work will need a service. We have our get characters a monster going to make a gift care there by ID service here.

930
01:48:02.700 --> 01:48:15.570
Ryan Mehta: Before I added any of this stuff though it would be nice to have a test in place that will let me know that my code is all functioning correctly. So let's add a

931
01:48:17.250 --> 01:48:17.970
Ryan Mehta: Tail.

932
01:48:18.990 --> 01:48:21.210
Ryan Mehta: Test yes X file.

933
01:48:23.040 --> 01:48:23.700
And

934
01:48:26.100 --> 01:48:28.080
Ryan Mehta: Start writing some of that.

935
01:48:29.760 --> 01:48:30.510
Ryan Mehta: test code.

936
01:48:32.850 --> 01:48:47.970
Ryan Mehta: So in our test. We're going to input react from react roster going to import render and screen from testing library react, you're going to describe our

937
01:48:48.990 --> 01:48:51.960
Ryan Mehta: Character detail components.

938
01:48:56.460 --> 01:49:04.920
Ryan Mehta: It should display a character after a load.

939
01:49:06.690 --> 01:49:14.670
Ryan Mehta: So kind of similar to our character list. It's going to load first and then display our character detail after the load completes.

940
01:49:16.860 --> 01:49:19.800
Ryan Mehta: We actually want this one split off to the side.

941
01:49:22.020 --> 01:49:25.980
Ryan Mehta: So we will render our tear

942
01:49:28.680 --> 01:49:29.400
Ryan Mehta: Detail

943
01:49:31.260 --> 01:49:34.050
Ryan Mehta: takes no props, so we don't need to pass me props to it.

944
01:49:36.030 --> 01:49:39.780
Ryan Mehta: And then we expect screen yet.

945
01:49:41.040 --> 01:49:41.910
Ryan Mehta: Text.

946
01:49:45.690 --> 01:49:48.840
Ryan Mehta: To be on the page. This tested fail right now.

947
01:49:54.840 --> 01:49:55.440
Ryan Mehta: Hopefully,

948
01:50:00.540 --> 01:50:07.950
Ryan Mehta: Okay, here's a little failing test to get it to pass. We're going to need to start implementing our character hook

949
01:50:09.060 --> 01:50:13.920
Ryan Mehta: So back in hooks. I'm going to add a new hook here called

950
01:50:16.380 --> 01:50:20.820
Ryan Mehta: Explore, let's call it us there.

951
01:50:26.160 --> 01:50:29.220
Ryan Mehta: By ID. I'm going to add the by ID here.

952
01:50:32.970 --> 01:50:34.230
Ryan Mehta: Says, call it use character.

953
01:50:36.450 --> 01:50:37.110
Ryan Mehta: Take

954
01:50:39.870 --> 01:50:41.070
Ryan Mehta: It's gonna take an ID.

955
01:50:44.730 --> 01:50:56.460
Ryan Mehta: I think that's better. I'm I don't want to call it. Use character. I'm kind of like hesitant to call it that because then it's very easy to have accidentally imported these characters.

956
01:50:56.790 --> 01:51:08.700
Ryan Mehta: In place of these character, or the other way around. And it's a small little s that will be hard to see these terms of ID very clear difference between it and these characters.

957
01:51:10.380 --> 01:51:13.080
Ryan Mehta: So first thing we're gonna have some loading state.

958
01:51:18.210 --> 01:51:23.130
Ryan Mehta: That will start off. That's true. And we will export that loading stake

959
01:51:25.290 --> 01:51:35.790
Ryan Mehta: Back in our character detail we can grab our loading state from us character by ID.

960
01:51:37.980 --> 01:51:43.830
Ryan Mehta: And then if we are loading. We will return H1 that says

961
01:51:49.950 --> 01:51:59.790
Ryan Mehta: Next thing that we want to do is have some character state. So we'll have God's character and second character.

962
01:52:00.990 --> 01:52:05.850
Ryan Mehta: We will start this thing out as know before we have a character, there's

963
01:52:07.020 --> 01:52:08.850
Ryan Mehta: No character. It's non existent.

964
01:52:10.410 --> 01:52:18.930
Ryan Mehta: And we will export that character state here at the same time we also want to fetch this character from our API.

965
01:52:20.220 --> 01:52:31.230
Ryan Mehta: In order to fetch it from our API will need to manage our data layer, we're going to add a get served by ID service.

966
01:52:33.120 --> 01:52:37.770
Ryan Mehta: This get character by ID service will take an ID.

967
01:52:39.390 --> 01:52:52.080
Ryan Mehta: And then it will fetch a character based on that ID. So we will await we're going to fetch from this URL with an ID at the end.

968
01:52:59.100 --> 01:53:04.260
Ryan Mehta: And then we will get our JSON file awaiting whereas Dr. Jason

969
01:53:05.670 --> 01:53:21.690
Ryan Mehta: If the rez bonds isn't okay we'll throw an able to FX otherwise we'll return. Let's double check with this API gives us when we go here.

970
01:53:23.430 --> 01:53:24.960
Ryan Mehta: So slash one

971
01:53:26.190 --> 01:53:38.160
Ryan Mehta: That's something like this. Let's say that we only care about the name the status, the species and the image of the character for name status species image.

972
01:53:40.350 --> 01:53:42.540
Ryan Mehta: Let's return an object.

973
01:53:43.980 --> 01:53:48.300
Ryan Mehta: Guess ID to with the ID. The name.

974
01:53:49.980 --> 01:53:51.630
Ryan Mehta: The status.

975
01:53:54.990 --> 01:53:56.610
Ryan Mehta: The species.

976
01:54:01.230 --> 01:54:05.310
Ryan Mehta: And the image which we're going to call image URL to be consistent.

977
01:54:07.020 --> 01:54:08.040
Ryan Mehta: Of our character.

978
01:54:09.270 --> 01:54:14.370
Ryan Mehta: So manipulate the data. So it's in a structure that we like a little bit down here at the bottom.

979
01:54:15.900 --> 01:54:16.680
Ryan Mehta: This look good.

980
01:54:18.180 --> 01:54:18.570
Ryan Mehta: Okay.

981
01:54:20.550 --> 01:54:31.710
Ryan Mehta: On the right hand side, we can use effect. We only want to use this effect when the component mounts. At least, that's our theory right now.

982
01:54:33.330 --> 01:54:35.490
Ryan Mehta: We're about to run into a problem.

983
01:54:37.140 --> 01:54:38.760
Ryan Mehta: Get character by ID.

984
01:54:39.930 --> 01:54:46.920
Ryan Mehta: After that, we will get our best character, we will set our character to that.

985
01:54:48.240 --> 01:54:49.020
Ryan Mehta: Character.

986
01:54:50.520 --> 01:54:51.960
Ryan Mehta: And then finally,

987
01:54:54.450 --> 01:54:58.050
Ryan Mehta: We will set loading to false.

988
01:55:00.300 --> 01:55:00.840
Ryan Mehta: Alright.

989
01:55:02.100 --> 01:55:08.310
Ryan Mehta: So our use character by ID gets an ID. We're going to pass that to our character by ID here.

990
01:55:10.590 --> 01:55:13.410
Ryan Mehta: For one attach a character by a particular ID.

991
01:55:16.050 --> 01:55:23.040
Ryan Mehta: There's something else that we want to do here. I think we don't only want to run this use effect on Mount

992
01:55:24.000 --> 01:55:40.440
Ryan Mehta: We actually want to use read this user effect on Mount and anytime this ID changes if for some reason or hook is past a different character ID. We want effects that new character. We don't want to stay with the old character. So we actually want the ID fear also

993
01:55:41.790 --> 01:55:48.300
Ryan Mehta: We want to get the character on Mount and if for some reason the character ID changes. We want to get that new character.

994
01:55:51.300 --> 01:55:52.020
Look good

995
01:55:54.480 --> 01:55:56.820
Ryan Mehta: All right, bacthe color will be yellow and when it's a

866
01:27:58.830 --> 01:28:00.030
Ryan Mehta: What's the right word here.

867
01:28:04.290 --> 01:28:05.370
Ryan Mehta: senior dog.

868
01:28:05.460 --> 01:28:06.630
Josh Olloqui: A wise dog.

869
01:28:06.930 --> 01:28:08.940
Ryan Mehta: Wise wise God

870
01:28:10.050 --> 01:28:10.590
The red

871
01:28:14.970 --> 01:28:17.730
Ryan Mehta: Will bring in our styles.

872
01:28:21.450 --> 01:28:22.140
Dog.

873
01:28:23.370 --> 01:28:28.290
Ryan Mehta: CSS will apply the main class to the section.

874
01:28:30.870 --> 01:28:42.900
Ryan Mehta: Files thought dog and then we need to conditionally apply a class to this paragraph tag based on the age. I'm going to make a little helper function appear

875
01:28:44.490 --> 01:28:46.740
Ryan Mehta: Let's call it get class name.

876
01:28:48.420 --> 01:29:01.380
Ryan Mehta: Are get classmate helper function will take the age and then we'll say if age is less than or equal to two will return styles dot young

877
01:29:03.330 --> 01:29:10.200
Ryan Mehta: Age is greater than two and age is less than or equal to 10

878
01:29:11.640 --> 01:29:16.020
Ryan Mehta: We return styles that medium.

879
01:29:17.100 --> 01:29:22.380
Ryan Mehta: It's almost like rock, paper, scissors, if age is greater than 10

880
01:29:23.430 --> 01:29:26.550
Ryan Mehta: overturn styles wise.

881
01:29:28.830 --> 01:29:38.370
Ryan Mehta: And then we'll use this class name to apply a class name to our paragraph tag get class name.

882
01:29:40.470 --> 01:29:41.070
Ah,

883
01:29:42.450 --> 01:29:50.640
Ryan Mehta: OK, so now we're going to be selecting between one of these three classes based on the current age of the dog.

884
01:29:51.720 --> 01:30:00.210
Patrick Wilson: Do we need the age greater than two because it should hit the top one and just return it and ignore the rest right

885
01:30:01.860 --> 01:30:03.720
Ryan Mehta: Yeah, true. So you could probably get away with.

886
01:30:03.720 --> 01:30:04.110
That

887
01:30:15.930 --> 01:30:18.600
Nate Kruck: Could you explain that a little further. Why wouldn't you need that.

888
01:30:21.000 --> 01:30:21.600
Ryan Mehta: So,

889
01:30:23.040 --> 01:30:32.730
Ryan Mehta: The only things that will get to line seven are ages that are already greater than two, because if it wasn't greater than two, then it would have already returned online six

890
01:30:33.240 --> 01:30:40.680
Ryan Mehta: It's less than or equal to two. So it would have returned. So it's only possible to get to line seven if you're greater than two.

891
01:30:41.700 --> 01:30:42.750
Because of line six

892
01:30:45.450 --> 01:30:51.480
Ryan Mehta: Same with line eight. Right. That's why we only had to do like greater than 10 not like not less than 10 or whatever.

893
01:30:53.430 --> 01:30:53.880
I guess.

894
01:30:58.350 --> 01:31:09.960
Ryan Mehta: Okay so dead. I'm not going to do the snapshot tests, but we have our individual dog item. Now let's make our dog list item.

895
01:31:12.390 --> 01:31:13.110
Six.

896
01:31:15.000 --> 01:31:16.800
Ryan Mehta: Import react from react.

897
01:31:18.060 --> 01:31:18.840
And

898
01:31:20.430 --> 01:31:22.140
Ryan Mehta: Import prop types.

899
01:31:24.480 --> 01:31:33.270
Ryan Mehta: Crop types. It looks, we're probably not going to actually get to write a real legit test. It looks like, but we'll get as close as we can.

900
01:31:35.700 --> 01:31:36.900
Crop types.

901
01:31:38.400 --> 01:31:46.440
Ryan Mehta: We're gonna get a list of dogs. So an array of crop types thought shape.

902
01:31:48.180 --> 01:31:51.060
Ryan Mehta: The name is a string.

903
01:31:52.530 --> 01:31:55.500
Ryan Mehta: Each dog has an age, which is a number

904
01:32:00.720 --> 01:32:04.590
Ryan Mehta: And a weight is a string.

905
01:32:09.870 --> 01:32:11.640
Ryan Mehta: And will export our

906
01:32:14.370 --> 01:32:14.700
Ryan Mehta: Dog.

907
01:32:19.470 --> 01:32:29.400
Ryan Mehta: Our dog list now has this dogs array will make our dog elements by iterating through our dogs.

908
01:32:31.080 --> 01:32:35.910
Ryan Mehta: Array for each dog, we will create an ally.

909
01:32:36.990 --> 01:32:38.790
Ryan Mehta: With our dog component

910
01:32:41.160 --> 01:32:44.760
Ryan Mehta: will spread the dog into our dog component

911
01:32:45.840 --> 01:32:54.000
Ryan Mehta: And we'll have a key with our dog's name will assume that our dog names are all unique

912
01:32:55.200 --> 01:33:03.180
Ryan Mehta: Let's return in the well with their dog elements inside of it. And now we have a dog list that we can use.

913
01:33:04.950 --> 01:33:08.490
Ryan Mehta: In our dogs container.

914
01:33:09.660 --> 01:33:15.180
Ryan Mehta: So let's go back to our dogs container will go right at least one test, make sure that we do that.

915
01:33:18.690 --> 01:33:28.620
Ryan Mehta: So the one interaction that we want to do is we want to be able to type into this form will press Submit. We want to make sure that a new dog enters

916
01:33:30.750 --> 01:33:34.440
Ryan Mehta: The list so it

917
01:33:36.780 --> 01:33:41.010
Ryan Mehta: Creates a new dog on one

918
01:33:45.030 --> 01:33:48.720
Brooke Perkins (she/her): Ryan when you get a chance, can I see the conditional class names again.

919
01:33:49.800 --> 01:33:51.150
Ryan Mehta: I can move it over.

920
01:33:53.760 --> 01:33:55.380
I'm going to take a screenshot.

921
01:33:57.240 --> 01:33:58.620
Because I will forget that.

922
01:34:07.920 --> 01:34:08.490
Ryan Mehta: Did you get it.

923
01:34:11.130 --> 01:34:11.700
Brooke Perkins (she/her): Not yet.

924
01:34:14.040 --> 01:34:14.310
Okay.

925
01:34:17.160 --> 01:34:22.770
Ryan Mehta: So we're gonna render our dogs container.

926
01:34:25.230 --> 01:34:27.300
Ryan Mehta: After we render our dogs container.

927
01:34:28.530 --> 01:34:31.590
Ryan Mehta: It should fail can actually pull up our tests.

928
01:34:37.050 --> 01:34:38.760
Ryan Mehta: It should fail because

929
01:34:40.500 --> 01:34:51.810
Ryan Mehta: There's nothing to render right we have this render is empty, we need to make sure that we return something we're going to return both our dog.

930
01:34:53.370 --> 01:34:56.340
Ryan Mehta: What did we call it our dog form. Yeah.

931
01:34:58.170 --> 01:35:01.230
Ryan Mehta: So we're going to make sure that we have our dog warm

932
01:35:02.340 --> 01:35:05.250
Ryan Mehta: And our dog list.

933
01:35:13.740 --> 01:35:24.420
Ryan Mehta: On the page. Our dog form need some pieces of state to work need to make sure that we have a name piece of state and age piece of state.

934
01:35:28.410 --> 01:35:30.540
Ryan Mehta: And a weight piece of state.

935
01:35:33.540 --> 01:35:40.680
Ryan Mehta: And we'll pass all three of those to our dog forum will start off by the structure name, age, weight.

936
01:35:41.880 --> 01:35:43.260
Ryan Mehta: And this state.

937
01:35:44.940 --> 01:35:46.830
Ryan Mehta: And then we'll pass name.

938
01:35:51.480 --> 01:35:52.140
Wait.

939
01:35:54.240 --> 01:35:54.960
Ryan Mehta: To our dog.

940
01:35:56.370 --> 01:35:59.340
Ryan Mehta: Our dog form also needs a handle change function.

941
01:36:01.980 --> 01:36:02.850
Ryan Mehta: Which we will

942
01:36:04.530 --> 01:36:10.170
Ryan Mehta: Write a dummy one for right now, and to handle submit function.

943
01:36:12.210 --> 01:36:15.840
Ryan Mehta: Which we will also write a dummy one for

944
01:36:19.350 --> 01:36:19.770
Right now.

945
01:36:21.450 --> 01:36:23.730
Ryan Mehta: And then we can pass on change.

946
01:36:26.790 --> 01:36:31.980
Ryan Mehta: With our candles submit or handle change and are on submit will be our

947
01:36:33.510 --> 01:36:34.410
Ryan Mehta: Handle submit

948
01:36:36.090 --> 01:36:39.870
Ryan Mehta: And then the gods list needs an array of dogs that we created.

949
01:36:41.190 --> 01:36:41.880
Ryan Mehta: Dogs.

950
01:36:42.900 --> 01:36:45.960
Ryan Mehta: Will also add our array of dogs to state.

951
01:36:48.540 --> 01:36:51.570
Ryan Mehta: And we'll start off our array of dogs.

952
01:36:52.800 --> 01:36:54.270
Ryan Mehta: As an empty array.

953
01:36:55.470 --> 01:36:56.850
Ryan Mehta: And now our test.

954
01:36:58.590 --> 01:36:59.520
Ryan Mehta: Should pass

955
01:37:04.530 --> 01:37:11.280
Ryan Mehta: On the next thing that we need to do is grab those three inputs, the name the age and the weight and type into them.

956
01:37:12.870 --> 01:37:20.220
Ryan Mehta: So we'll grab our main input by doing a screen get

957
01:37:21.450 --> 01:37:24.810
Ryan Mehta: By label text coming

958
01:37:26.100 --> 01:37:31.860
Ryan Mehta: We'll do the same for other two inputs. We have a an age input.

959
01:37:32.910 --> 01:37:35.910
Ryan Mehta: With age and the weight inputs.

960
01:37:40.440 --> 01:37:45.390
Ryan Mehta: And then we're going to fire a change event on the name input.

961
01:37:46.410 --> 01:37:47.760
Ryan Mehta: It's going to have a target.

962
01:37:50.550 --> 01:37:53.820
Ryan Mehta: And that target is going to have a value of spot.

963
01:37:55.620 --> 01:37:59.220
Ryan Mehta: And then we'll do the same for the age and the weight.

964
01:38:00.750 --> 01:38:02.700
Ryan Mehta: So for our

965
01:38:04.440 --> 01:38:09.990
Ryan Mehta: Age input. We're gonna fire an event where the age is five.

966
01:38:11.160 --> 01:38:13.830
Ryan Mehta: And then we'll finally have a

967
01:38:15.780 --> 01:38:19.590
Ryan Mehta: Weight input with 20 pounds.

968
01:38:21.360 --> 01:38:23.340
Ryan Mehta: Okay test should all still

969
01:38:23.340 --> 01:38:24.120
Pass.

970
01:38:26.640 --> 01:38:35.940
Ryan Mehta: And then we're going to end by firing an event. It's going to be a click event.

971
01:38:37.020 --> 01:38:46.110
Ryan Mehta: We actually need to get that button. So I'm going to say constant Submit button will screen get

972
01:38:47.250 --> 01:38:48.510
Ryan Mehta: By role.

973
01:38:51.000 --> 01:38:52.500
Ryan Mehta: I think we'll get us our button.

974
01:38:54.000 --> 01:38:56.340
Ryan Mehta: We're going to click our Submit button.

975
01:38:58.470 --> 01:39:01.320
Ryan Mehta: And I think that will submit our form for us.

976
01:39:06.960 --> 01:39:10.740
Ryan Mehta: I misspelled submit. That's okay, we'll roll with it.

977
01:39:16.080 --> 01:39:28.620
Ryan Mehta: Okay, there's our Submit button. After we submit that we expect to be able to see the dog in our list of dogs. So we need to be able to get our dog list.

978
01:39:30.480 --> 01:39:43.560
Ryan Mehta: We're going to get our dog list by test ID will give it a test ID of dogs so back over here. We'll give this thing a test ID.

979
01:39:47.460 --> 01:39:51.420
Ryan Mehta: And then we're going to expect our dogs list.

980
01:39:52.440 --> 01:39:58.920
Ryan Mehta: Not to be what was that thing because like not to be an empty.

981
01:40:01.650 --> 01:40:02.160
Thomas Stussi: Is ever

982
01:40:02.670 --> 01:40:03.810
Ryan Mehta: Not to be

983
01:40:04.500 --> 01:40:08.220
Ryan Mehta: Yeah, that sounds right. And to dawn.

984
01:40:26.340 --> 01:40:27.570
Ryan Mehta: That seems pretty good.

985
01:40:29.400 --> 01:40:33.060
Ryan Mehta: We probably want to wait for this. So let's wait for

986
01:40:34.110 --> 01:40:42.780
Ryan Mehta: Because after we type in and click the button, we're going to need to wait for a re render before the actual element gets added to the page.

987
01:40:47.850 --> 01:40:51.510
Ryan Mehta: fails because it is an empty DOM element.

988
01:40:53.130 --> 01:41:05.190
Ryan Mehta: So we get all of our inputs we get our Submit button we get our dog list we update our inputs we submit the form and then we expect the dog list to have a dog in it now.

989
01:41:06.420 --> 01:41:22.770
Ryan Mehta: There's a bunch of code that we have to add, unfortunately, to get this to pass. The first one is handled change. We need to have a set state. We're going to set our state based on the target name, kind of like yesterday and give it the target value.

990
01:41:24.000 --> 01:41:29.910
Ryan Mehta: So when you type into that form. You're setting either name, age or weight to whatever you pegged into the form

991
01:41:32.190 --> 01:41:49.320
Ryan Mehta: Or the candle summit, we are going to want to set state, we're going to want to update this dogs array, we're going to want to push like a new item to the end of the dogs array because we're pushing an item to the end of the dogs array. It's dependent state change.

992
01:41:50.550 --> 01:41:54.120
Ryan Mehta: Right, our state depends on the previous state.

993
01:41:55.440 --> 01:42:13.710
Ryan Mehta: We're going to get the previous dog or a spread it into a new array and then add a new object where the name is our state name the age is our state age and the weight is our state's got

994
01:42:17.970 --> 01:42:19.380
Ryan Mehta: This line makes sense.

995
01:42:23.190 --> 01:42:27.510
Ben Waples: Um, why are those a square brackets online 20 and not

996
01:42:29.490 --> 01:42:31.740
Ben Waples: curly brackets miss that.

997
01:42:33.090 --> 01:42:36.270
Ryan Mehta: These ones because we're returning out

998
01:42:36.300 --> 01:42:37.800
Ryan Mehta: That's actually an excellent point.

999
01:42:39.540 --> 01:42:42.060
He should be dogs.

1000
01:42:43.320 --> 01:42:45.240
Ryan Mehta: So we're setting the dogs piece of state.

1001
01:42:45.900 --> 01:42:46.980
Ben Waples: Okay, thank you.

1002
01:42:51.150 --> 01:42:54.840
Ryan Mehta: Okay, let's go to our browser and see what happens.

1003
01:42:58.110 --> 01:43:01.380
Ryan Mehta: If that works. We will be very lucky.

1004
01:43:31.980 --> 01:43:33.960
Ryan Mehta: What if, what if we had a rover.

1005
01:43:34.980 --> 01:43:40.410
Ryan Mehta: Who is it's invisible sorta it's there because the yellow color is

1006
01:43:42.210 --> 01:43:45.240
Ryan Mehta: Kind of hard to see. There's an old dog.

1007
01:43:45.540 --> 01:43:46.320
Annalise Murphy: Bingo.

1008
01:43:47.280 --> 01:43:48.390
Ryan Mehta: Is a young dog.

1009
01:43:51.030 --> 01:43:52.050
Two pounds of something

1010
01:44:00.510 --> 01:44:07.920
Thomas Stussi: So that's like a brief thing. How would we fire a radio button in the behavioral tests.

1011
01:44:08.550 --> 01:44:09.930
Ryan Mehta: Same way on change.

1012
01:44:10.410 --> 01:44:11.550
Thomas Stussi: On change. Okay.

1013
01:44:12.630 --> 01:44:14.220
Ryan Mehta: They all have the same name.

1014
01:44:15.450 --> 01:44:28.740
Ryan Mehta: radio buttons all have to have the same name to be connected. So it's actually the same way. It's just going to look different on the screen, you're going to have three inputs or four inputs. However, many methods you have, and they'll all have the same on change function.

1015
01:44:35.760 --> 01:44:39.270
Thomas Stussi: It's the sire events and like I click here, do we give them all like different

1016
01:44:40.620 --> 01:44:41.970
Thomas Stussi: Like test IDs.

1017
01:44:44.280 --> 01:44:45.720
Ryan Mehta: Till I click on them differently.

1018
01:44:46.050 --> 01:44:51.240
Thomas Stussi: Yeah, like if we're testing. Like, if we're testing different routes.

1019
01:44:52.710 --> 01:44:53.730
Thomas Stussi: Or methods, rather

1020
01:44:54.210 --> 01:44:56.070
Ryan Mehta: You fire the change event.

1021
01:44:58.260 --> 01:45:02.070
Ryan Mehta: There's also. Okay, let's actually check something out really quick.

1022
01:45:04.680 --> 01:45:08.880
Ryan Mehta: There's this library that I've been wanting to use. And I said,

1023
01:45:10.770 --> 01:45:11.820
Ryan Mehta: It has

1024
01:45:14.910 --> 01:45:15.690
Essentially

1025
01:45:18.360 --> 01:45:19.140
What does this do

1026
01:45:34.cations.

1092
02:12:38.550 --> 02:12:40.140
Ryan Mehta: That extra dot notation.

1093
02:12:45.420 --> 02:12:46.260
Ryan Mehta: That's him. Okay.

1094
02:12:52.620 --> 02:12:56.130
Ryan Mehta: All right, any questions about those things.

1095
02:12:59.910 --> 02:13:07.530
Ryan Mehta: So the main thing that we added was this combined producers that will take to producers and stuff them together into one.

1096
02:13:09.360 --> 02:13:13.500
Ryan Mehta: Major like one producer to handle them both.

1097
02:13:15.270 --> 02:13:18.240
Ben Waples: In. Did you say if we name it index that we don't have to like

1098
02:13:19.380 --> 02:13:22.890
Ben Waples: What was that you don't have to include that. Because index is like a hook of itself.

1099
02:13:23.670 --> 02:13:26.100
Ryan Mehta: Yep, just like an index dot HTML.

1100
02:13:26.370 --> 02:13:28.110
Ryan Mehta: The same sort of principle, like

1101
02:13:28.530 --> 02:13:37.200
Ryan Mehta: We never had to stay local host 7891 slash index dot HTML, because it's assumed anytime the file is named index. You don't have to specify it

1102
02:13:42.900 --> 02:13:47.130
Adrian Simental: Will be convention and even index, would you name it like combined producers.

1103
02:13:51.240 --> 02:13:53.490
Ryan Mehta: You can name it combined producers, if you want to

1104
02:13:55.290 --> 02:13:58.200
Ryan Mehta: I just like it like this, for whatever reason, but

1105
02:13:59.850 --> 02:14:00.900
Both are totally fine.

1106
02:14:08.490 --> 02:14:13.920
Thomas Stussi: In a, in a full project, you need to pass like the loading state in here to right

1107
02:14:15.420 --> 02:14:16.470
Ryan Mehta: Inside of the right hand

1108
02:14:16.470 --> 02:14:17.640
Thomas Stussi: Side. Yeah.

1109
02:14:18.420 --> 02:14:19.290
Thomas Stussi: I you don't

1110
02:14:19.470 --> 02:14:20.160
Ryan Mehta: So,

1111
02:14:20.340 --> 02:14:27.990
Ryan Mehta: You can actually try this. We can do cause bloating, you select selector skates.

1112
02:14:31.140 --> 02:14:32.310
Stop loading.

1113
02:14:33.540 --> 02:14:35.280
Ryan Mehta: That's the only place where you would use it.

1114
02:14:37.920 --> 02:14:40.950
Thomas Stussi: Okay, but it knows even though you only said characters.

1115
02:14:44.640 --> 02:14:45.300
Ryan Mehta: Yeah, knows

1116
02:14:46.440 --> 02:14:57.270
Ryan Mehta: To take all of the State Fair. So back in this index. This is just the key. It's a under this key have all of this state that's handled by the character reducer.

1117
02:15:00.390 --> 02:15:01.320
Ryan Mehta: And that's what has like

1118
02:15:01.350 --> 02:15:02.520
Ryan Mehta: Gives us this

1119
02:15:05.280 --> 02:15:06.690
Ryan Mehta: So in Redux we have

1120
02:15:10.140 --> 02:15:13.500
Ryan Mehta: All of the state that has to do with characters here.

1121
02:15:14.670 --> 02:15:18.960
Thomas Stussi: Okay, so it's like characters characters is where the actual setting is

1122
02:15:19.980 --> 02:15:22.650
Ryan Mehta: Characters characters is where the actual array.

1123
02:15:22.650 --> 02:15:23.100
Is

1124
02:15:24.930 --> 02:15:28.170
Adrian Simental: In the top characters is no object. Yeah, yeah.

1125
02:15:28.530 --> 02:15:32.370
Ryan Mehta: This is an object with another characters with an array.

1126
02:15:34.620 --> 02:15:35.610
Ryan Mehta: We might leave even

1127
02:15:35.820 --> 02:15:39.000
Ryan Mehta: Choose now that we have that kind of ugly nesting.

1128
02:15:40.410 --> 02:15:49.110
Ryan Mehta: We might want to in our reduced. Oops, that's wrong project in our reducer. We could always change this from characters to list.

1129
02:15:50.220 --> 02:15:57.990
Ryan Mehta: So that way we don't have that. And then in our character list, it would be state characters dot list and our selector.

1130
02:15:59.280 --> 02:16:01.380
Ryan Mehta: And did all should still hopefully work.

1131
02:16:02.490 --> 02:16:03.060
Ryan Mehta: Before

1132
02:16:06.810 --> 02:16:08.310
Ryan Mehta: Oh, we'd have to change.

1133
02:16:10.140 --> 02:16:12.900
Ryan Mehta: Our reduce here slightly to this would be

1134
02:16:14.820 --> 02:16:15.120
Ryan Mehta: No.

1135
02:16:18.150 --> 02:16:24.510
Ryan Mehta: Yeah. So now it's there that's slightly nicer. Because now we don't have the characters characters.

1136
02:16:26.550 --> 02:16:30.840
Ryan Mehta: So the change was like changing everywhere. We had characters to

1137
02:16:32.550 --> 02:16:33.120
List.

1138
02:16:35.820 --> 02:16:44.430
Ryan Mehta: And we can also see being able to jump back to the loading screen. Also, so we could skip the set loading and would be able to see our loading component

1139
02:16:46.020 --> 02:16:47.640
Ryan Mehta: And style it. We wanted to

1140
02:16:54.150 --> 02:17:07.440
Ryan Mehta: Okay, well that's that's the entirety of our Redux thing we're going to change one little thing tomorrow, but for the most part, tomorrow and Thursday will be review of this stuff.

1141
02:17:08.310 --> 02:17:26.160
Ryan Mehta: Instead, in the past, I've done it, like, step by step, but this time I decided just to do it all in one day and then do a series of reviews. So we kind of have that global more of the picture of Redux and then we can like talk about little pieces of it going forward.

1142
02:17:28.560 --> 02:17:31.380
Adrian Simental: To up to the rebuilding the entire thing Redux

1143
02:17:32.070 --> 02:17:34.770
Ryan Mehta: You are building an entire thing and Redux it's true.

1144
02:17:36.180 --> 02:17:38.400
Ryan Mehta: So how we're going to structure the labs.

1145
02:17:40.920 --> 02:17:47.040
Ryan Mehta: There's only going to be two more labs one. I'll give you today when I'll give you tomorrow, they'll both be do Monday.

1146
02:17:48.090 --> 02:17:54.150
Ryan Mehta: So you'll have you could use however you want to use your time today might be stressful tomorrow eight

1147
02:17:54.420 --> 02:17:55.740
Adrian Simental: The days may be stressful.

1148
02:17:55.980 --> 02:17:58.410
Ryan Mehta: Going forward, today's lab.

1149
02:17:58.470 --> 02:17:59.100
Adrian Simental: Is a

1150
02:17:59.130 --> 02:18:00.150
Ryan Mehta: GitHub viewer.

1151
02:18:02.220 --> 02:18:08.010
Ryan Mehta: So there should be a forum where you input A somebody's GitHub username.

1152
02:18:09.210 --> 02:18:21.060
Ryan Mehta: And then press Submit when you press Submit. You'll display the users info like their username, their follower count, whatever. And then also display a list of all of their repos.

1153
02:18:22.770 --> 02:18:35.340
Ryan Mehta: You can use the GitHub API for both of these. So it's very similar to like what we just did today except instead of a list of characters. It's a list of somebody repos, pretty much.

1154
02:18:37.980 --> 02:18:42.990
Ryan Mehta: And that's the assignments due Monday. Tomorrow we'll have something similar to this also do Monday.

1155
02:18:44.760 --> 02:18:45.450
Ryan Mehta: For three months.

1156
02:18:45.510 --> 02:18:46.860
Adrian Simental: build upon today's web

1157
02:18:47.640 --> 02:18:49.920
Ryan Mehta: This tomorrow's build upon today's lab, it doesn't

1158
02:18:51.090 --> 02:18:53.010
Adrian Simental: Let me totally separate labs.

1159
02:18:55.500 --> 02:19:02.820
ryan Diffenbaugh: Do you think it's possible, given what we have learned about Redux today to finish this lab today, or is it sort of expected that it may take a couple days.

1160
02:19:03.330 --> 02:19:05.430
Ryan Mehta: It's totally possible to finish this one today.

1161
02:19:09.570 --> 02:19:22.560
Ryan Mehta: You don't even need to combine reducer. I don't think for this one. So it's just like a single reducer with a list of repos. And then like the user's username and follower count. So you might have state that looks like.

1162
02:19:24.690 --> 02:19:32.490
Ryan Mehta: repos, which is an array of that person's repos and their username username followers

1163
02:19:34.320 --> 02:19:39.000
Ryan Mehta: Yeah, this sort of thing. So, could be all stored in one single producer today's lab.

1164
02:19:41.670 --> 02:19:46.950
ryan Diffenbaugh: Okay, so it seems pretty close to what we did today, just the extension of like the form and grabbing the form data.

1165
02:19:48.480 --> 02:19:48.780
Okay.

1166
02:19:52.440 --> 02:20:00.600
Ryan Mehta: Yeah, it's a little bit of a combination of what we did to the two things that we did today because we kind of did a form thing with our JSON viewer.

1167
02:20:13.920 --> 02:20:18.420
Ryan Mehta: Alright, well good luck. Any final questions.

010 --> 01:40:10.260
Ryan Mehta: Okay 01

816
01:40:11.520 --> 01:40:12.540
Ryan Mehta: Of a kind of random

817
01:40:15.330 --> 01:40:15.750
Ryan Mehta: Yeah.

818
01:40:17.220 --> 01:40:21.960
Ryan Mehta: So we display a random number on the page between zero and 10 now.

819
01:40:23.160 --> 01:40:24.870
Ryan Mehta: That all looks amazing.

820
01:40:27.000 --> 01:40:35.850
Ryan Mehta: Let's try to integrate this without the speech recognition, but like a number like an input, where we can just type in a number

821
01:40:36.570 --> 01:40:48.360
Ryan Mehta: And check that they're correct just to make sure that we can like dispatched to the correct state without any of the speech stuff associated because putting an input box is just far easier.

822
01:40:50.700 --> 01:40:55.230
Ryan Mehta: And we'll test everything that way. So we have a number

823
01:40:56.610 --> 01:41:00.000
Ryan Mehta: Number on changing this field.

824
01:41:01.110 --> 01:41:11.760
Ryan Mehta: I'm just gonna write this in line, since we're just kind of hacking this about right now we're going to be getting rid of this input. Anyway, so I'm just going to write our little changer right here in line.

825
01:41:13.590 --> 01:41:16.110
Ryan Mehta: Will we will grab the target.

826
01:41:17.700 --> 01:41:24.120
Ryan Mehta: And when we do this, we're going to dispatch our new yes with

827
01:41:31.500 --> 01:41:36.180
Ryan Mehta: Why do you hate this. Some us too long, that's fine, but what it says. The line is too long.

828
01:41:38.760 --> 01:41:39.630
shorten it a bit.

829
01:41:43.140 --> 01:41:49.020
Ryan Mehta: Okay, so when we type into the input box. We will dispatch a new guests at that point.

830
01:41:50.580 --> 01:41:56.970
Ryan Mehta: So back over here. Let's make this much bigger. We have five if I put in eight here try again.

831
01:41:58.440 --> 01:41:59.610
Ryan Mehta: If I put them five

832
01:42:00.900 --> 01:42:01.770
Ryan Mehta: We got it right.

833
01:42:02.820 --> 01:42:08.220
Ryan Mehta: When we get a right. We also want to make sure we dispatch a new number probably right.

834
01:42:10.080 --> 01:42:10.890
Ryan Mehta: So,

835
01:42:12.690 --> 01:42:18.030
Ryan Mehta: Let's change our reducer a little bit and our reducer test, a little bit.

836
01:42:20.100 --> 01:42:24.480
Ryan Mehta: When we get when we make a new guests. We don't actually just want to

837
01:42:25.770 --> 01:42:33.660
Ryan Mehta: Change our guests piece of state we potentially want to re potentially want to get a new number also

838
01:42:34.950 --> 01:42:44.460
Ryan Mehta: Right. Maybe we can stop all of this into the new guests. So when we make a new guests. We have a wrong guests here it

839
01:42:46.020 --> 01:42:51.090
Ryan Mehta: Gets a number on correct, yes.

840
01:42:52.230 --> 01:42:56.400
Ryan Mehta: So on a correct. Guess we want to get a new number up so

841
01:42:58.530 --> 01:43:08.580
Ryan Mehta: So let's construct some state. We start off with number as nine guess is for. So is correct.

842
01:43:09.840 --> 01:43:10.770
Ryan Mehta: False.

843
01:43:13.380 --> 01:43:25.980
Ryan Mehta: We're going to create an action new Guess we'll guess the number nine. So it's a correct. Guess we will get some new state back by calling our reducer.

844
01:43:28.920 --> 01:43:39.450
Ryan Mehta: Sir, the state and the action if we guessed correctly, we expect new state to call

845
01:43:42.060 --> 01:43:43.500
Ryan Mehta: Number will be

846
01:43:46.560 --> 01:43:47.130
Ryan Mehta: Number.

847
01:43:48.330 --> 01:43:53.940
Ryan Mehta: Yes, we'll go back to know and is correct will go to true.

848
01:43:56.190 --> 01:44:00.540
Ryan Mehta: So when we guess we make a guess we expect to get back in the number

849
01:44:06.030 --> 01:44:13.500
Ryan Mehta: Okay. Does it seem okay it's kind of hard to test that we get a new number I kind of want to say like we expect a number that's not nine

850
01:44:14.550 --> 01:44:25.740
Ryan Mehta: Back, but we actually haven't written that logic over here anywhere. We're really checking the number and making sure that sort of thing. So I'm not going to do that. But there's a task kind of makes sense to me now.

851
01:44:27.300 --> 01:44:33.360
Ryan Mehta: So we'll reset the guests will Reese set is correct to true and we expect some different number.

852
01:44:34.680 --> 01:44:40.710
Ryan Mehta: So back in our new guests. We are going to say will keep everything from state, we will

853
01:44:42.420 --> 01:44:45.600
Ryan Mehta: Say if action payload.

854
01:44:47.550 --> 01:44:47.970
Action.

855
01:44:49.350 --> 01:44:53.580
Ryan Mehta: Road Trip or equal stake number

856
01:44:56.190 --> 01:44:59.490
Ryan Mehta: Then we're going to recalculate our number

857
01:45:02.550 --> 01:45:13.200
Ryan Mehta: Otherwise, we'll keep stakeout number. This is in desperate need of refactoring. It's such a long line and we've copied some code, but we refactored in a second. If we can get our test to pass.

858
01:45:17.400 --> 01:45:19.650
Ryan Mehta: So if the actual payload.

859
01:45:21.150 --> 01:45:27.840
Ryan Mehta: And the number are the same, then we need a new number if they're not the same, then we're going to keep the same number.

860
01:45:29.280 --> 01:45:35.100
Ryan Mehta: For guess if action payload is state number

861
01:45:36.780 --> 01:45:42.150
Ryan Mehta: Then we'll go back to know otherwise guests will be actual payload.

862
01:45:45.060 --> 01:45:48.990
Ryan Mehta: And then is correct if those things are equal.

863
01:45:52.170 --> 01:45:54.090
That is still the same.

864
01:45:57.150 --> 01:45:58.890
What happens is our test pass

865
01:46:02.460 --> 01:46:03.390
test passes.

866
01:46:04.410 --> 01:46:06.210
Ryan Mehta: Does this code on the right. Makes sense.

867
01:46:09.030 --> 01:46:19.020
Ryan Mehta: So if our guesses. Correct. Pick a new number. Otherwise, keep the old number if our guests is correct. Guess goes back to now, otherwise the guest is what we just guessed.

868
01:46:20.910 --> 01:46:28.260
Ryan Mehta: A few things here. Let's make a generate random number function.

869
01:46:29.370 --> 01:46:31.230
Ryan Mehta: That will do this work for us.

870
01:46:39.510 --> 01:46:40.200
Ryan Mehta: Number.

871
01:46:42.120 --> 01:46:43.290
One. These are

872
01:46:44.640 --> 01:46:49.080
Ryan Mehta: Random number. And then the other thing I want to do I think is

873
01:46:51.750 --> 01:46:54.780
Ryan Mehta: Maybe a little fun helper function like

874
01:46:58.680 --> 01:46:58.980
Ryan Mehta: A

875
01:47:02.430 --> 01:47:04.290
Ryan Mehta: Week, we need to figure out a name for this thing.

876
01:47:06.180 --> 01:47:07.230
Ryan Mehta: With the

877
01:47:22.680 --> 01:47:23.190
Ryan Mehta: This

878
01:47:24.300 --> 01:47:25.290
Ryan Mehta: Is correct

879
01:47:30.330 --> 01:47:31.200
Ryan Mehta: Correct.

880
01:47:33.630 --> 01:47:34.260
Ryan Mehta: Correct.

881
01:47:36.990 --> 01:47:39.360
Ryan Mehta: Correct. That looks a little bit better. Right.

882
01:47:48.180 --> 01:47:58.440
Ryan Mehta: Can be better. So just putting that is correct into a variable tested all still past. I don't think we changed fall cool test.

883
01:47:59.670 --> 01:48:11.580
Ryan Mehta: Should still pass hopefully do we didn't change any the functionality we just export this into a variable. So we could use it twice and then we created a function for generating random numbers.

884
01:48:13.500 --> 01:48:14.010
Ryan Mehta: Justin.

885
01:48:18.120 --> 01:48:29.610
Ryan Mehta: Alright, so I think because it's changed how our state transforms. We don't actually have to touch our component anymore dispatching new guests automatically picks the new number for us now.

886
01:48:30.420 --> 01:48:38.250
Ryan Mehta: So if we go back over here you get it wrong, get it wrong, get it correct, and we've generated a new number

887
01:48:39.540 --> 01:48:42.270
Ryan Mehta: Every time we get it correct, we generate

888
01:48:43.710 --> 01:48:44.370
Ryan Mehta: A new number

889
01:48:46.740 --> 01:48:47.250
Ryan Mehta: Seven.

890
01:48:50.820 --> 01:48:53.790
Ryan Mehta: Three. Okay so works. Cool, right.

891
01:48:56.250 --> 01:49:04.230
Ryan Mehta: Now we just need to add the speech part of this. So instead of typing into this input box. We need to do the whole speech recognition piece.

892
01:49:05.280 --> 01:49:07.170
Ryan Mehta: We look back at this library.

893
01:49:08.340 --> 01:49:18.090
Ryan Mehta: They show us kind of how to get set up, we need to import speech commands into our component. So let's do that in a close all this other stuff.

894
01:49:19.170 --> 01:49:21.870
Ryan Mehta: At the top here, we have one, two,

895
01:49:24.210 --> 01:49:27.270
Ryan Mehta: And four star as

896
01:49:28.680 --> 01:49:29.790
Ryan Mehta: Commands.

897
01:49:30.840 --> 01:49:31.650
Ryan Mehta: From

898
01:49:36.780 --> 01:49:39.060
Ryan Mehta: Okay, so we're going to import that library.

899
01:49:40.560 --> 01:49:42.180
Thomas Stussi: You have a typo and Ellen.

900
01:49:44.490 --> 01:49:45.030
Were

901
01:49:46.110 --> 01:49:48.870
Thomas Stussi: First speech commands you have a sort of a

902
01:49:49.410 --> 01:49:49.860
Ryan Mehta: Thank you.

903
01:49:53.700 --> 01:49:58.800
Ryan Mehta: So speech commands we need to create this recognizer

904
01:50:00.840 --> 01:50:07.890
Ryan Mehta: Let me send a copy that will drop that into our use effect. So when the component first mounts will create the speech recognizer

905
01:50:09.120 --> 01:50:15.000
Ryan Mehta: We need to wait for the model to load the model is the thing that will actually do the recognition.

906
01:50:16.230 --> 01:50:20.760
Ryan Mehta: That will read our speech pattern. So make this a sink.

907
01:50:22.350 --> 01:50:24.360
Ryan Mehta: We will wait for the model to load.

908
01:50:26.910 --> 01:50:28.620
Ryan Mehta: We get some words.

909
01:50:30.780 --> 01:50:38.640
Ryan Mehta: And then we can start listening here. Let's copy that. Let's drop this into our code.

910
01:50:40.110 --> 01:50:41.730
Ryan Mehta: Let's get rid of these comments.

911
01:50:43.500 --> 01:50:46.020
Ryan Mehta: And for now let's just console log result.

912
01:50:47.400 --> 01:50:58.500
Ryan Mehta: Okay, let's see what sort of thing we get back from this Recognizer. So the setup, create a recognizer load the model and then start listening for words.

913
01:51:00.780 --> 01:51:02.310
Ryan Mehta: Back in our browser.

914
01:51:06.600 --> 01:51:09.600
Ryan Mehta: Actually, I think it might have failed to compile

915
01:51:10.710 --> 01:51:14.760
Ryan Mehta: Remember this, okay, we get this huge error message.

916
01:51:16.710 --> 01:51:18.090
Ryan Mehta: That's not the one that I want.

917
01:51:20.460 --> 01:51:21.780
Ryan Mehta: During the compilation

918
01:51:27.930 --> 01:51:28.320
Ryan Mehta: This thing.

919
01:51:30.420 --> 01:51:32.100
Ryan Mehta: No good. No good.

920
01:51:33.690 --> 01:51:52.440
Ryan Mehta: I've investigated this like right before today. I was very confused by this one also. And it's incredibly hacky the way that we have to fix this, you all will have to fix this independently. Also, when you fork this because we actually have to change something, and one of the node modules.

921
01:51:53.790 --> 01:52:09.450
Ryan Mehta: I couldn't find a better way to do this. So in the node modules in the TensorFlow models package in this package JSON here. We need to copy. I think I saved it somewhere.

922
01:52:18.930 --> 01:52:20.340
Yeah, look at this one.

923
01:52:26.520 --> 01:52:30.600
Ryan Mehta: So we need to add this line.

924
01:52:31.710 --> 01:52:32.520
Ryan Mehta: Of code.

925
01:52:33.930 --> 01:52:45.450
Ryan Mehta: To node modules TensorFlow modules speech commands package JSON back over here, this package JSON just anywhere.

926
01:52:47.520 --> 01:52:48.450
Ryan Mehta: Needs this added

927
01:52:49.830 --> 01:52:54.900
Ryan Mehta: And then I think all of a sudden, it will start to compile

928
01:53:03.810 --> 01:53:05.700
Ryan Mehta: That is such a shame.

929
01:53:08.040 --> 01:53:09.480
Ryan Mehta: Because that's what I did earlier.

930
01:53:22.680 --> 01:53:24.720
Ryan Mehta: This line, this line of code now.

931
01:53:26.850 --> 01:53:30.870
Ryan Mehta: I'll share this with you all, because you will need it.

932
01:53:35.880 --> 01:53:44.760
Ryan Mehta: Okay, incredibly hockey. I agree, there is a current issue that's telling people that this is super hacky, can we please fix it and it hasn't been resolved yet so

933
01:53:46.110 --> 01:53:50.790
Ryan Mehta: We're stuck with this this thing compiles now to go back to our browser.

934
01:53:51.840 --> 01:53:54.060
Ryan Mehta: We should be able to reload this

935
01:53:57.450 --> 01:53:58.080
Ryan Mehta: One.

936
01:54:00.660 --> 01:54:17.400
Ryan Mehta: This is when I said one it's going to keep printing out these as it hears me say words will see this course thing I said one. It gives us an array. And these are the percentage of chance that I said a word.

937
01:54:20.490 --> 01:54:21.630
Ryan Mehta: It's hard to say.

938
01:54:22.890 --> 01:54:25.650
Ryan Mehta: What each of these like array positions means

939
01:54:26.700 --> 01:54:38.880
Ryan Mehta: Position 10 is point nine not so it's 99% sure that I said word 10. It doesn't mean I said the word 10. It's like the 10th word that this library knows about.

940
01:54:40.020 --> 01:54:44.190
Ryan Mehta: So this isn't terribly helpful just how it's written

941
01:54:45.240 --> 01:54:49.950
Ryan Mehta: To figure out what word 10 means we also need to print out

942
01:54:53.910 --> 01:55:04.440
Ryan Mehta: recognizer for labels. This will give us a list of all of the words that the recognizer knows about and their positions and that scores away.

943
01:55:06.240 --> 01:55:08.430
Ryan Mehta: Let me refresh this

944
01:55:11.970 --> 01:55:13.140
Ryan Mehta: These are the positions.

945
01:55:16.080 --> 01:55:38.850
Ryan Mehta: One. Okay, this is the one where I said one. Here's our scores array. If we look for one in this list, I should have said a different word one so index 01 234-567-8910 so I position 10 we should have a high likelihood

946
01:55:42.210 --> 01:55:44.310
Ryan Mehta: Let's say a different word

947
01:55:47.520 --> 01:55:49.440
Ryan Mehta: I'm going to continually mute myself.

948
01:55:55.230 --> 01:55:55.710
Ryan Mehta: Down.

949
01:55:57.930 --> 01:56:04.170
Ryan Mehta: Okay, this is the one where I said down so we should see a high likelihood that position 012

950
01:56:06.060 --> 01:56:08.190
Ryan Mehta: So a position to

951
01:56:09.450 --> 01:56:12.570
Ryan Mehta: 90 point 91% sure that I said down

952
01:56:14.130 --> 01:56:18.480
Ryan Mehta: So we need to somehow associate these two arrays together.

953
01:56:19.500 --> 01:56:21.210
Ryan Mehta: To figure out what word was said.

954
01:56:22.350 --> 01:56:26.940
Ryan Mehta: There's also background noise and unknown, which we don't care about

955
01:56:29.730 --> 01:56:30.930
Ryan Mehta: Okay, so

956
01:56:33.960 --> 01:56:40.770
Ryan Mehta: Have this let's say cost words equals these word labels.

957
01:56:43.020 --> 01:56:45.720
Ryan Mehta: And then we want to find

958
01:56:47.400 --> 01:56:52.440
Ryan Mehta: So constant word that was said we're going to iterate through results.

959
01:56:53.670 --> 01:57:00.120
Ryan Mehta: Scores scores. Is this array of percentages here.

960
01:57:02.160 --> 01:57:03.780
Ryan Mehta: We're gonna find one.

961
01:57:05.280 --> 01:57:05.880
Ryan Mehta: Where

962
01:57:07.860 --> 01:57:09.120
Ryan Mehta: We'll take the index.

963
01:57:11.310 --> 01:57:12.030
Actually

964
01:57:14.340 --> 01:57:27. continually passing like

856
01:46:11.520 --> 01:46:19.800
Ryan Mehta: Back when we originally made our service, we decided that we have no idea how we're going to get this ID. So somebody needs to give it to us.

857
01:46:20.610 --> 01:46:32.970
Ryan Mehta: We made the action. We have no idea what card would want to delete somebody is going to need to give it to us on this handled delete. We have no idea what card. We want to delete some of these going to have to give it to us.

858
01:46:34.050 --> 01:46:42.480
Ryan Mehta: We're just continually passing like asking somebody else to give us this information with the hopes that at some point somebody will know how to get this ID.

859
01:46:43.590 --> 01:46:44.550
Ryan Mehta: Hopefully, that's true.

860
01:46:46.320 --> 01:46:56.370
Ryan Mehta: So I'm calling this function. They need to tell us the idea of the card that they want to get delete will dispatch the remove card which will delete the card and all that kind of stuff.

861
01:46:57.600 --> 01:46:58.590
Ryan Mehta: But good so far.

862
01:47:01.470 --> 01:47:05.250
Ryan Mehta: I think down in this Li will add a button.

863
01:47:07.170 --> 01:47:08.580
Ryan Mehta: On clicking the button.

864
01:47:11.610 --> 01:47:12.510
Ryan Mehta: We will

865
01:47:15.570 --> 01:47:17.760
Ryan Mehta: Invoke are handled delete function.

866
01:47:18.990 --> 01:47:20.790
Ryan Mehta: Like put a little arrow function.

867
01:47:22.050 --> 01:47:26.580
Ryan Mehta: Call handle delete and pass it the card ID.

868
01:47:27.600 --> 01:47:30.660
Ryan Mehta: You finally have the idea of the card that we want to delete.

869
01:47:35.250 --> 01:47:47.220
Ryan Mehta: We could do this a different way. Actually, now that I look at this, we could do, the more traditional way where we just pass the handle delete here and then what if we made the buttons value.

870
01:47:48.600 --> 01:47:50.730
Ryan Mehta: The ID of the card.

871
01:47:52.170 --> 01:48:06.900
Ryan Mehta: That we want to delete and then now this instead of the ID is the target and then we can use the target value to remove the appropriate card. It's also a good way to do it.

872
01:48:13.020 --> 01:48:15.060
Ryan Mehta: All right, let's find the trash can icon.

873
01:48:19.230 --> 01:48:19.830
And

874
01:48:22.710 --> 01:48:23.070
Yeah.

875
01:48:24.720 --> 01:48:27.150
Ryan Mehta: And mogi mogi trashcan.

876
01:48:28.440 --> 01:48:29.670
Ryan Mehta: wastebasket

877
01:48:32.910 --> 01:48:36.840
Annalise: Got a bullet points. So sometimes you'll find it.

878
01:48:38.460 --> 01:48:38.730
Well,

879
01:48:43.710 --> 01:48:48.210
Ryan Mehta: Alright, let's see what our friend looks like. And if this thing works at all.

880
01:48:49.410 --> 01:48:52.050
Ryan Mehta: Yeah, we have these buttons with trash cans in it.

881
01:48:55.230 --> 01:48:57.180
Ryan Mehta: Did nothing out didn't delete it.

882
01:48:57.240 --> 01:48:58.500
Ryan Mehta: It deleted, we find a

883
01:48:58.500 --> 01:49:00.090
Ron Yonker: dumpster fire budget.

884
01:49:02.100 --> 01:49:02.880
Ryan Mehta: We could try

885
01:49:05.160 --> 01:49:12.750
Ryan Mehta: So when we clicked it deleted it. But it didn't show us like the filter broke or something, right, because we should

886
01:49:15.390 --> 01:49:18.330
Ryan Mehta: Lightning Bolt, we have a console error.

887
01:49:19.350 --> 01:49:22.620
Ryan Mehta: Unexpected end up JSON input, blah, blah, blah.

888
01:49:27.420 --> 01:49:30.720
Ryan Mehta: The delete is not sending us anything back

889
01:49:31.920 --> 01:49:33.300
Ryan Mehta: To a mess up the back end.

890
01:49:37.500 --> 01:49:38.130
Let's check

891
01:49:42.030 --> 01:49:46.560
Ryan Mehta: My dad. Okay, anybody have the intuition, where

892
01:49:49.140 --> 01:49:51.870
Ryan Mehta: I always forget this returning

893
01:49:53.430 --> 01:49:54.540
Ryan Mehta: Returning star.

894
01:49:57.450 --> 01:50:01.710
Ryan Mehta: I just kind of came to that conclusion because the Network tab showed nothing

895
01:50:03.000 --> 01:50:08.010
Ryan Mehta: So that means the back end is giving us back nothing so we checked the back end code.

896
01:50:09.570 --> 01:50:24.960
Ryan Mehta: On the back end where residents sending card. That means this card is nothing if card is nothing. That means, this thing is returning nothing to go back to the card has to be somewhere here, we have all of our returns. Let's see the query.

897
01:50:26.550 --> 01:50:28.620
Ryan Mehta: Okay, let's try this again.

898
01:50:31.170 --> 01:50:32.310
Ryan Mehta: Here's their list.

899
01:50:34.320 --> 01:50:35.400
Ryan Mehta: Delete that

900
01:50:36.810 --> 01:50:38.280
Ryan Mehta: Oh it deleted. That's what we wanted.

901
01:50:39.660 --> 01:50:42.510
Ryan Mehta: Click that refresh the page. They're gone.

902
01:50:50.190 --> 01:50:51.270
Ryan Mehta: Everything's working

903
01:51:06.330 --> 01:51:07.860
Ryan Mehta: Any questions.

904
01:51:19.980 --> 01:51:32.250
Ryan Mehta: To do something similar. You don't have to use Redux if you don't want to, but you totally can. And there's two other methods that you have to create the by ID and the update methods.

905
01:51:34.200 --> 01:51:37.440
Ryan Mehta: Besides that, it's pretty similar to what we just did.

906
01:51:46.530 --> 01:51:47.430
Ryan Mehta: All right, let me

907
01:51:48.570 --> 01:51:51.060
Ryan Mehta: Our tests are failing. Let's try to fix them.

908
01:51:54.660 --> 01:52:04.950
Ryan Mehta: Right. Right now we have a bunch of buttons on the page. So we can't get it by rolling button or by roll yeah button anymore in our test.

909
01:52:07.410 --> 01:52:11.970
Ryan Mehta: On this create one it's failing because there's a bunch of buttons on the page, not just one.

910
01:52:15.240 --> 01:52:17.160
ryan Diffenbaugh: Did you like get my test ID and do like

911
01:52:21.330 --> 01:52:24.420
Ryan Mehta: Told they could get it by test ID. Yeah, what

912
01:52:24.630 --> 01:52:25.440
Ryan Mehta: Can we also get it.

913
01:52:25.470 --> 01:52:28.560
Ryan Mehta: Get by text content.

914
01:52:31.980 --> 01:52:33.120
Ryan Mehta: Like get by.

915
01:52:37.200 --> 01:52:44.310
Ryan Mehta: Text and the text of the button has something in it right that we always expect to be their

916
01:52:48.570 --> 01:52:48.960
Greg Mall: Image

917
01:52:50.250 --> 01:52:52.050
Ryan Mehta: For the button we told the could give it an alt

918
01:52:52.050 --> 01:52:52.650
Greg Mall: Also

919
01:52:53.070 --> 01:52:55.770
Ryan Mehta: The buttons usually have alt. How does that work.

920
01:52:57.630 --> 01:52:58.590
Ryan Mehta: What do you do

921
01:53:00.180 --> 01:53:02.400
Ryan Mehta: Or they haven't are yet thing, right.

922
01:53:16.740 --> 01:53:17.970
Ryan Mehta: No idea how that works.

923
01:53:19.080 --> 01:53:25.410
Ryan Mehta: Well, I think we can totally get it by text because it has create card and we always expect it to have

924
01:53:27.000 --> 01:53:27.810
Ryan Mehta: The card.

925
01:53:29.940 --> 01:53:31.320
Ryan Mehta: Text to get the button.

926
01:53:33.720 --> 01:53:35.250
Ryan Mehta: And now pass again.

927
01:53:37.380 --> 01:53:51.300
Ryan Mehta: So you don't have to always use the same things to get these items. By the way, it's not like a rule that you always have to get buttons with get by roll or get by test I be noise can use any of the things to get these items.

928
01:53:57.450 --> 01:54:00.000
Ryan Mehta: All right. Any questions before we

929
01:54:01.680 --> 01:54:04.200
Ryan Mehta: Go go off and do stuff.

930
01:54:09.420 --> 01:54:09.840
Ryan Mehta: Cool.

931
01:54:10.950 --> 01:54:26.490
Ryan Mehta: If you get a chance, today, play around with Redux a little bit more just so you're prepared for tomorrow's Baalbek stuff, which will be really be cool. I think to compare the two things. They're both really popular state management libraries for react.

932
01:54:28.350 --> 01:54:32.520
Ryan Mehta: That sort of do the same thing, but with wildly different syntax.

933
01:54:33.960 --> 01:54:43.710
Ryan Mehta: So it'd be nice to have like a really firm grounding with React, so you can like start making some associations. If you already feel very strong with React. It might even be cool to just

934
01:54:45.180 --> 01:54:47.790
Ryan Mehta: Like, prepare yourself for the mob back stuff by

935
01:54:49.410 --> 01:54:55.710
Ryan Mehta: Just like looking through their docs really quick. So you have some like head start on it.

936
01:54:58.470 --> 01:55:02.220
Ryan Mehta: They have actions. Look at that. Look at what their actions look like it's so crazy.

937
01:55:06.150 --> 01:55:06.570
Okay.

938
01:55:08.070 --> 01:55:09.510
Ryan Mehta: Anyways, it might be cool to

939
01:55:11.070 --> 01:55:16.290
Ryan Mehta: To look through some of these things, just say you have some understanding of MMA backs tomorrow.

940
01:55:24.420 --> 01:55:27.090
Ryan Mehta: Alright, well, have a good lunch, everyone.

941
01:55:28.800 --> 01:55:31.980
Ryan Mehta: see you all tomorrow or this afternoon.

942
01:55:34.890 --> 01:55:35.670
Annalise: Oh, thank you.

943
01:55:35.790 --> 01:55:36.300
Greg Mall: That's right.

944
01:55:36.570 --> 01:55:38.310
Ryan Mehta: Zoom chat change right

945
01:55:41.370 --> 01:55:42.030
Brooke Perkins (she/her): What do you mean

946
01:55:42.720 --> 01:55:44.580
Ryan Mehta: Like my zoom chat has everybody's

947
01:55:46.440 --> 01:55:48.720
Ryan Mehta: icon next to their name now has

948
01:55:49.890 --> 01:55:50.640
Brooke Perkins (she/her): It yet.

949
01:55:51.150 --> 01:55:51.900
Annalise: I haven't either.

950
01:55:52.890 --> 01:55:53.220
No.

951
01:55:55.710 --> 01:55:59.580
Ryan Mehta: I mean it's it's like such a minor change. I can't believe they took the time to

952
01:56:02.220 --> 01:56:03.780
Ryan Mehta: That's how my zoom chat looks now.

953
01:56:05.760 --> 01:56:07.260
Everybody's icon next to them.

954
01:56:13.800 --> 01:56:16.050
Ryan Mehta: Sorry, see you all later.

955
01:56:19.320 --> 01:56:19.830
Michelle Stermitz: Thanks, Ryan.

956
01:56:21.180 --> 01:56:21.630
Edgar Cuellar: Excellent.

957
01:56:23.160 --> 01:56:23.640
Katie Perry: Thank you.

ead of updating. I was like, I deleted one

1221
02:23:48.300 --> 02:23:49.860
Annalise Murphy: And that seemed to work just fine.

1222
02:23:51.030 --> 02:23:57.360
Annalise Murphy: Until I did that on a branch and not from the main or master.

1223
02:23:58.440 --> 02:23:58.920
Annalise Murphy: Um,

1224
02:24:00.390 --> 02:24:02.820
Annalise Murphy: Is that like something you've run into before, Ryan.

1225
02:24:03.630 --> 02:24:05.040
Ryan Mehta: What was the era that you saw

1226
02:24:05.580 --> 02:24:14.550
Annalise Murphy: Um, it basically wouldn't just naturally propagate a snapshot for my app JS x. So I had to like

1227
02:24:15.780 --> 02:24:21.720
Annalise Murphy: Do this crazy installation and yeah like go back to the main

1228
02:24:23.880 --> 02:24:43.710
Annalise Murphy: Branch and then like MTN it in just to like re propagated and then merge both of them. And then, like, make sure that it was, I don't know, like, even just cop like recreating it wasn't rendering or loading. So it just was such an odd thing. I just didn't know if you'd run into it before.

1229
02:24:44.790 --> 02:24:46.890
Ryan Mehta: I've never seen something like that before.

1230
02:24:48.510 --> 02:24:49.530
Annalise Murphy: Fun. Okay.

1231
02:24:50.640 --> 02:24:55.350
Annalise Murphy: Well it works now, but that was a headache. Thanks. Oh, thanks.

1232
02:25:03.750 --> 02:25:09.750
Ryan Mehta: All right, well, if there's no other questions. Have a good lunch. Good luck on the slab.

1233
02:25:11.130 --> 02:25:14.820
Ryan Mehta: Tomorrow we'll do some custom hook stuff, which will be fun.

1234
02:25:16.350 --> 02:25:23.040
Ryan Mehta: And then by the end of the week, we'll all know how to do global state like stuff with React, which will also be cool.

1235
02:25:26.310 --> 02:25:26.670
Alright.

1236
02:25:27.930 --> 02:25:30.990
Ryan Mehta: See you all this afternoon. Thanks. Right.

1237
02:25:31.320 --> 02:25:32.010
Ron Yonker: Thanks, Ryan.

1238
02:25:32.280 --> 02:25:33.420
Michelle Stermitz: Yeah, thanks.

55
01:54:40.860 --> 01:54:51.990
Ryan Mehta: We're going to have to get characters function. So, does it really make sense to call this get characters, it's going to get confusing. So I'm going to call this get Rick and Morty characters.

956
01:54:55.980 --> 01:55:01.080
Ryan Mehta: And then back over here. Actually, am I going to do this.

957
01:55:03.240 --> 01:55:21.120
Ryan Mehta: Yeah, I am going to do like that. We're going to get Rick and Morty characters, everything should behave the same as it did before. I just renamed the function. I'm going to double check that at all behave still the same, just so I know that that refactored was good everything still works.

958
01:55:22.380 --> 01:55:37.770
Ryan Mehta: Now we can make another service. Let's call it our Breaking Bad epi JS. And here we're going to export cons get Breaking Bad. This

959
01:55:40.470 --> 01:55:48.810
Ryan Mehta: Year. We're going to fetch from the Breaking Bad API, the thing going to get a response will parse the responses JSON.

960
01:55:49.920 --> 01:56:00.810
Ryan Mehta: Then going to get back our characters. We're going to map through our characters and reformat the data in a way that's useful for our app.

961
01:56:02.220 --> 01:56:04.350
Ryan Mehta: Let's look at the Breaking Bad API.

962
01:56:09.690 --> 01:56:12.540
Ryan Mehta: So it gives us an array, the ideas called

963
01:56:12.780 --> 01:56:13.800
Ryan Mehta: Care ID.

964
01:56:14.760 --> 01:56:21.810
Ryan Mehta: The name is good and the images img instead of image URL. So we'll need to rename those things.

965
01:56:24.570 --> 01:56:26.280
Ryan Mehta: So we want an ID.

966
01:56:27.420 --> 01:56:30.960
Ryan Mehta: Their API gives us care ID.

967
01:56:31.980 --> 01:56:39.630
Ryan Mehta: We want to name their API gives us name. That one's good and image URL their API gives us

968
01:56:41.310 --> 01:56:47.580
Ryan Mehta: Energy. So just renaming the field. So is accessible to our application. The way that we expect it.

969
01:56:49.830 --> 01:57:07.650
Ryan Mehta: In our characters hook. If we flip this to get Breaking Bad characters. Instead, we should see our Breaking Bad characters on our front end. Instead, which we do the images are gigantic so we need some more CSS to fix that.

970
01:57:08.730 --> 01:57:21.450
Ryan Mehta: But we're able to toggle manually like in our code. So I switched to that here we get Breaking Bad. If I switch back to our Rick and Morty characters. We have our Rick and Morty characters.

971
01:57:22.770 --> 01:57:24.840
Ryan Mehta: Now we just need you that programmatically.

972
01:57:26.220 --> 01:57:27.180
Ryan Mehta: We have

973
01:57:28.620 --> 01:57:29.430
Ryan Mehta: Our

974
01:57:31.740 --> 01:57:35.850
Ryan Mehta: Character type which we can get from our US

975
01:57:37.320 --> 01:57:42.870
Ryan Mehta: Character are type which will give us the current value of our character type

976
01:57:44.580 --> 01:57:49.920
Ryan Mehta: We're going to want to read fetch from the API anytime the character type changes.

977
01:57:51.930 --> 01:58:03.510
Ryan Mehta: And then I'm going to do a little trickier. Kind of like that factory method. If you all remember that from a few days ago, maybe we're going to have a service map.

978
01:58:05.220 --> 01:58:07.290
Ryan Mehta: Where we have Rick and

979
01:58:07.500 --> 01:58:08.160
Morty.

980
01:58:09.180 --> 01:58:15.690
Ryan Mehta: And we associate that with our get Rick and Morty function will have Breaking Bad, which will

981
01:58:17.850 --> 01:58:29.250
Ryan Mehta: Associate with our get Breaking Bad function. So now we have an object where the keys are character types and the values are service function that we want to call

982
01:58:30.270 --> 01:58:31.800
Ryan Mehta: We'll use that here.

983
01:58:32.940 --> 01:58:36.750
Ryan Mehta: So we'll have our service map will look up into our service map.

984
01:58:36.840 --> 01:58:37.950
Annalise: That character type

985
01:58:38.190 --> 01:58:52.230
Ryan Mehta: Which will return either are getting Morty get Rick and Morty characters function or get Breaking Bad characters function will invoke that function get our list of characters and display them.

986
01:58:59.370 --> 01:59:06.360
Ryan Mehta: If we go back to the front end. We didn't break anything too bad we have a Rick and Morty characters we can toggle

987
01:59:08.190 --> 01:59:09.060
Between the two

988
01:59:16.170 --> 01:59:26.550
Ryan Mehta: This is super similar to your theme toggle except instead of changing your character list, you would change your background colors, whatever.

989
01:59:31.620 --> 01:59:34.590
Ryan Mehta: You did have to be. I also didn't have to be this fancy with it.

990
01:59:35.880 --> 01:59:38.220
Ryan Mehta: You could totally do something like if

991
01:59:39.900 --> 01:59:40.860
Ryan Mehta: Character type

992
01:59:44.100 --> 01:59:44.880
Ryan Mehta: Rick and Morty.

993
01:59:47.190 --> 01:59:49.410
Ryan Mehta: Do one thing else do another thing.

994
01:59:50.550 --> 01:59:50.880
Right.

995
01:59:53.040 --> 01:59:54.060
Ryan Mehta: There, there's

996
01:59:58.920 --> 02:00:02.700
Ron Yonker: My little confused about what's going on with the service map.

997
02:00:05.940 --> 02:00:10.080
Ryan Mehta: So it's doing essentially what this thing is doing so good.

998
02:00:18.300 --> 02:00:23.040
Ryan Mehta: And we would use our get Breaking Bad characters. Yes.

999
02:00:23.100 --> 02:00:26.130
Ron Yonker: It's just a good value pair mapping

1000
02:00:27.000 --> 02:00:29.820
Ryan Mehta: Yep. So you'll notice in our

1001
02:00:29.850 --> 02:00:33.150
Ryan Mehta: ifs. We're texting, the character type against

1002
02:00:33.210 --> 02:00:39.930
Ryan Mehta: Rick and Morty of Breaking Bad, these two words are the same words that are used in our service map appear

1003
02:00:41.070 --> 02:00:50.730
Ryan Mehta: So, and then in our service map. We're trying to grab the value of either Rick and Morty or breaking bad that value is going to be either

1004
02:00:51.090 --> 02:01:03.330
Ryan Mehta: Get Rick and Morty characters or get Breaking Bad characters, you'll notice in the body of our ifs. The only thing that changes is whether we're using Rick and Morty characters or Breaking Bad characters.

1005
02:01:04.590 --> 02:01:17.490
Ryan Mehta: So here we're looking up into that service map and we're returning either debt Rick and Morty characters or get Breaking Bad characters and then we're invoking that function that we get back

1006
02:01:18.630 --> 02:01:19.800
Ryan Mehta: And the rest of it's the same

1007
02:01:20.250 --> 02:01:28.350
Ryan Mehta: Like after you invoke the function then set your list of characters. It's just a shortcut for doing this if stuff here.

1008
02:01:32.250 --> 02:01:32.580
Ron Yonker: We have

1009
02:01:33.690 --> 02:01:42.930
Adrian Simental: commented out code doesn't send things the gifts. Is there. I don't know best practices, whether we should do the ifs or clean it up and do the service, man.

1010
02:01:44.220 --> 02:01:46.500
Ryan Mehta: I don't think there's a breath, best practices.

1011
02:01:46.560 --> 02:01:47.310
Adrian Simental: Around that

1012
02:01:47.460 --> 02:01:58.080
Ryan Mehta: I mean, I strongly prefer the service map way because it's way easier and way less typing. Also, if we chose to add a third

1013
02:01:59.040 --> 02:02:11.040
Ryan Mehta: Character type we just add one line here to add a third character type, but we'd have to duplicate all of this code here for third character type of prayer using the gifts.

1014
02:02:12.270 --> 02:02:15.090
Ryan Mehta: So I strongly prefer this personally

1015
02:02:16.530 --> 02:02:18.120
Ryan Mehta: Fact, I'm going to delete all of this.

1016
02:02:20.850 --> 02:02:21.180
That

1017
02:02:23.910 --> 02:02:34.590
Ben Waples: So online eight we're using a custom hook and we're inside of a custom hook and is that custom book that we're using is that in the same file that we're in right now.

1018
02:02:35.370 --> 02:02:36.990
Ryan Mehta: It is, yeah. It's down here.

1019
02:02:58.170 --> 02:02:59.880
Greatest service map comes from

1020
02:03:02.070 --> 02:03:03.330
Ryan Mehta: That is right here.

1021
02:03:04.380 --> 02:03:11.850
Brooke Perkins (she/her): I know, but is it something that's included like is that just something we can have or do we need to do anything to get that

1022
02:03:12.060 --> 02:03:13.380
Ron Yonker: It's just an object.

1023
02:03:13.650 --> 02:03:14.940
Ryan Mehta: It's just a very bonding.

1024
02:03:15.450 --> 02:03:16.230
Brooke Perkins (she/her): Oh,

1025
02:03:16.320 --> 02:03:24.840
Ryan Mehta: OK, so this could be like I just use the word map because it's like a mapping between character names and the service of like our service mapper.

1026
02:03:28.380 --> 02:03:30.660
Jerud Moyer: Or is he just went hate more you so much.

1027
02:03:31.950 --> 02:03:36.000
Ryan Mehta: Yeah, I think it's a VS code actually thinks it's Miss misspelled.

1028
02:03:39.300 --> 02:03:40.950
Ryan Mehta: Morty to use a dictionary.

1029
02:03:42.570 --> 02:03:43.560
Ryan Mehta: All fixed

1030
02:03:43.620 --> 02:03:44.400
Nice.

1031
02:03:50.190 --> 02:03:52.230
Ron Yonker: I don't know. I'm still not seeing like

1032
02:03:53.250 --> 02:03:54.900
Ron Yonker: I'll be user fact is

1033
02:03:57.150 --> 02:03:58.380
Ron Yonker: Executing that

1034
02:03:59.910 --> 02:04:01.260
Ryan Mehta: Executing which part

1035
02:04:01.260 --> 02:04:06.570
Ron Yonker: Well, I mean, the anonymous function, maybe, I don't know, this is, this is too much.

1036
02:04:08.310 --> 02:04:10.230
Ryan Mehta: How it's executing the service.

1037
02:04:15.690 --> 02:04:17.310
Ron Yonker: How exactly it switching

1038
02:04:18.510 --> 02:04:19.950
Ron Yonker: My guy. I see.

1039
02:04:23.730 --> 02:04:25.980
Ryan Mehta: So the user factors and switching

1040
02:04:27.060 --> 02:04:28.560
Ryan Mehta: When you click on the header.

1041
02:04:30.330 --> 02:04:33.150
Ron Yonker: Header over on the other side.

1042
02:04:34.980 --> 02:04:45.900
Ryan Mehta: When you click on the header, it calls this toggle function which changes the character type, but whenever the character type changes, we really run this news effect.

1043
02:04:47.010 --> 02:04:49.290
Ryan Mehta: But it's the header over here that's toggling

1044
02:04:50.910 --> 02:04:51.510
The

1045
02:04:53.220 --> 02:04:54.240
Ryan Mehta: The character type

1046
02:04:55.260 --> 02:05:00.480
Ryan Mehta: So whenever you click on that button. We call this toggle function, the toggle function.

1047
02:05:01.620 --> 02:05:04.290
Ryan Mehta: Is in our context provider.

1048
02:05:06.720 --> 02:05:13.620
Ryan Mehta: For here this toggle function. Every time we click on it calls toggle function, the toggle function.

1049
02:05:14.160 --> 02:05:20.970
Ryan Mehta: If the pre if the current type is Rick and Morty, it switches it to Breaking Bad. Otherwise, it switches it to Rick and Morty.

1050
02:05:21.420 --> 02:05:38.580
Ryan Mehta: So every time you click on it. This character type changes, whenever the character type changes it triggers this use effect this use effect looks up the current character type and gets our service based on that fetches from that service and sets our character list appropriately.

1051
02:05:41.250 --> 02:05:43.080
Ron Yonker: Just don't ask me to build this tomorrow.

1052
02:05:43.920 --> 02:05:44.910
Ryan Mehta: You're building it today.

1053
02:05:50.400 --> 02:05:51.960
Greg Mall: You didn't ask for tomorrow so

1054
02:05:54.930 --> 02:05:56.310
Ron Yonker: Not doing that, either.

1055
02:05:59.280 --> 02:06:00.570
Ron Yonker: We'll see. I'll go

1056
02:06:01.110 --> 02:06:02.370
Ron Yonker: After it maybe

1057
02:06:04.110 --> 02:06:05.310
Greg Mall: Things better after lunch.

1058
02:06:06.960 --> 02:06:07.350
Ryan Mehta: Yeah.

1059
02:06:09.780 --> 02:06:15.330
Ryan Mehta: So let's look at all the connections accidents draw this thing first.

1060
02:06:17.040 --> 02:06:21.030
Ryan Mehta: Let's draw the component architecture right now.

1061
02:06:22.200 --> 02:06:27.840
Ryan Mehta: At the very, very root of our application. Now we have our

1062
02:06:29.100 --> 02:06:30.390
Ryan Mehta: Character provider.

1063
02:06:37.530 --> 02:06:42.180
Ryan Mehta: Our character provider has a signal child app.

1064
02:06:45.960 --> 02:06:55.980
Ryan Mehta: And app has a few children. It has like the whole router thing going on. I'm going to skip a bunch of the router stuff because that'll just make our drawing really long.

1065
02:06:57.090 --> 02:07:02.250
Ryan Mehta: But it has a header as a child. This is a way we probably think about it anyways.

1066
02:07:03.750 --> 02:07:07.560
Ryan Mehta: And it also has a character list as a child.

1067
02:07:12.900 --> 02:07:16.710
Ryan Mehta: And then character list has our character item. Right.

1068
02:07:21.690 --> 02:07:26.250
Ryan Mehta: This is how our component hierarchy looks right now.

1069
02:07:30.120 --> 02:07:45.960
Ryan Mehta: Our header component wants to be able to toggle the character type. So over here, this is where we're doing the toggling of the character type and the character list wants to know the current character type

1070
02:07:51.630 --> 02:07:58.380
Ryan Mehta: Both of these are provided by the character provider up here. So the toggle function is defined

1071
02:08:00.480 --> 02:08:05.730
Ryan Mehta: Appear and the character type value.

1072
02:08:07.650 --> 02:08:10.200
Ryan Mehta: Is defined appear as well.

1073
02:08:11.250 --> 02:08:12.420
And misspelled character.

1074
02:08:13.890 --> 02:08:17.670
Ryan Mehta: In both of these cases, the header is asking

1075
02:08:19.350 --> 02:08:26.730
Ryan Mehta: For that type using context and the character list is also asking for the tight using context.

1076
02:08:28.800 --> 02:08:33.450
Ryan Mehta: We can see both of these things in our header component

1077
02:08:34.770 --> 02:08:38.850
Ryan Mehta: So the header component is asking for the toggle function.

1078
02:08:40.230 --> 02:08:45.240
Ryan Mehta: And our character list is asking for the character type

1079
02:08:51.990 --> 02:08:57.210
Ryan Mehta: And they can both do this because character provider is a parent of both of them.

1080
02:08:59.430 --> 02:09:11.280
Ryan Mehta: And whenever the header take toggles the character type, the character provider changes character type internally and causes everything to re render some state changed.

1081
02:09:12.210 --> 02:09:21.210
Ryan Mehta: After the re render characterless asked for the character type again. And it's changed. It's a different value. So fetches from an API.

1082
02:09:22.740 --> 02:09:26.550
Ryan Mehta: So after it gets that new value after the re render

1083
02:09:27.750 --> 02:09:33.300
Ryan Mehta: It notices that value changed and so reflections from our API.

1084
02:09:39.990 --> 02:09:41.070
This is what's happening.

1085
02:09:43.740 --> 02:09:54.450
Ryan Mehta: I mean, there's a lot of like intermediate pieces because we also have our custom hooks that are giving us these values, but all the customer hooks are doing. If we look down at

1086
02:09:55.470 --> 02:10:04.260
Ryan Mehta: The US character toggle custom hook. It's just asking for the toggle value from our bucket and returning that toggle value.

1087
02:10:06.090 --> 02:10:08.310
Ryan Mehta: And same with our use character type it's asking

1088
02:10:09.600 --> 02:10:10.290
For that value.

1089
02:10:15.810 --> 02:10:18.750
Ryan Mehta: So this is our current application draw now.

1090
02:10:20.310 --> 02:10:31.830
Ryan Mehta: Feels like a lot of moving parts, as we're writing it, but we've really only added this to like our not these killings.

938
01:57:34.020 --> 01:57:43.530
Brooke Perkins (she/her): I have a question about labs. I'm wondering if we're gonna have a chance to resubmit anything that we worked on over the weekend.

939
01:57:45.120 --> 01:57:47.460
Ryan Mehta: Yeah, you could submit was up until Friday.

940
01:57:47.760 --> 01:57:55.260
Brooke Perkins (she/her): Oh, up until Friday, we can. Okay. Oh, thanks. For some reason I thought we were like starting coding this week, but

941
01:57:56.100 --> 01:57:59.220
Ryan Mehta: We are. We're starting like Wednesday ish coding

942
01:58:00.570 --> 01:58:02.280
Ryan Mehta: Officially, we're starting Monday.

943
01:58:02.910 --> 01:58:04.200
Brooke Perkins (she/her): Okay, so, yeah.

944
01:58:09.300 --> 01:58:11.070
Ryan Mehta: All right, any other questions.

945
01:58:14.910 --> 01:58:17.940
Ryan Mehta: OK, I will post in our Slack channel.

946
01:58:19.380 --> 01:58:27.690
Ryan Mehta: The teams and we can just head to lunch right now where you can meet with your team. If you want to probably get lunch and then me around one everyone

947
01:58:30.060 --> 01:58:31.830
Ryan Mehta: Alright, see you all after lunch.

948
01:58:33.150 --> 01:58:33.390
Annalise: Thanks.

949
01:58:35.730 --> 01:58:37.530
Thanks. Thanks.

k in our detail page.

996
01:55:58.350 --> 01:56:00.600
Ryan Mehta: It's actually see what the test is telling us

997
01:56:03.060 --> 01:56:06.060
Ryan Mehta: Oh, I guess we never actually added the

998
01:56:09.060 --> 01:56:16.800
Ryan Mehta: The further tests. So before we start implementing the character stuff let's make sure we have some other things here.

999
01:56:18.000 --> 01:56:30.480
Ryan Mehta: After the loading phase we we expect to be able to see the character's name the character species status and an image of a character on the page.

1000
01:56:32.340 --> 01:56:38.490
Ryan Mehta: Before we can do any of that we're going to need to mock our service.

1001
01:56:42.570 --> 01:56:54.390
Ryan Mehta: Good morning service for this test. We're going to be getting a character by ID. We're going to make a mock dissolve value.

1002
01:56:55.680 --> 01:57:06.840
Ryan Mehta: Or get character by ID returns the idea of a character, the name of a character, the status of a character, the species.

1003
01:57:08.280 --> 01:57:09.270
Ryan Mehta: Of a character.

1004
01:57:10.950 --> 01:57:16.380
Ryan Mehta: And the image URL of a character.

1005
01:57:18.180 --> 01:57:21.390
This should be cluttered up

1006
01:57:24.840 --> 01:57:30.840
Ryan Mehta: Okay, given all of those things at some point after re render

1007
01:57:33.900 --> 01:57:41.940
Ryan Mehta: So we'll wait for something we expect on the screen to be able to get five texts.

1008
01:57:43.110 --> 01:57:46.890
Ryan Mehta: So we expect there to be an element with the name Rick inside of it.

1009
01:57:48.060 --> 01:57:52.530
Ryan Mehta: We expect there to be an element with alive on it.

1010
01:57:53.610 --> 01:57:56.400
Ryan Mehta: We expect there to be an element.

1011
01:57:58.200 --> 01:57:59.700
Ryan Mehta: With human in it.

1012
01:58:01.020 --> 01:58:04.470
Ryan Mehta: And we expect there to be an element.

1013
01:58:06.180 --> 01:58:07.980
Ryan Mehta: With an alt tag.

1014
01:58:09.660 --> 01:58:10.530
Click

1015
01:58:13.170 --> 01:58:22.890
Ryan Mehta: Make sense so we're just going to get a bunch of elements we expect all three of these things to be on the page. Rick alive, human and an image with an alt of Rick

1016
01:58:25.950 --> 01:58:27.060
Ryan Mehta: This should totally fail.

1017
01:58:31.650 --> 01:58:33.210
Ryan Mehta: Cool totally breaks

1018
01:58:35.760 --> 01:58:37.440
Ryan Mehta: Is it for good reason. Yes.

1019
01:58:38.490 --> 01:58:44.580
Ryan Mehta: Alright. So back in our detail page. In addition to getting loading. We also expect to get killed after

1020
01:58:46.170 --> 01:58:50.160
Ryan Mehta: After the loading finishes, we're going to return.

1021
01:58:53.280 --> 01:58:54.450
Ryan Mehta: A fragment.

1022
01:58:55.710 --> 01:58:59.970
Ryan Mehta: Let's say we have a paragraph with their name.

1023
01:59:03.990 --> 01:59:06.450
Ryan Mehta: One for status.

1024
01:59:10.560 --> 01:59:13.200
Ryan Mehta: This isn't like that previous looking component for sure.

1025
01:59:20.670 --> 01:59:23.850
Ryan Mehta: Okay, so just all of these things on the screen.

1026
01:59:25.980 --> 01:59:29.610
ryan Diffenbaugh: There. Thank you. Yes, total fault.

1027
01:59:33.690 --> 01:59:34.200
Ryan Mehta: All right.

1028
01:59:35.370 --> 01:59:41.070
Ryan Mehta: There's one big huge bug in this component

1029
01:59:46.290 --> 01:59:48.990
Ryan Mehta: That our test totally hides. Perfect.

1030
01:59:50.130 --> 01:59:53.400
Ryan Mehta: Anybody see that big, huge bug in this component

1031
01:59:56.160 --> 01:59:57.210
Ryan Mehta: We put

1032
02:00:00.180 --> 02:00:02.970
Ryan Mehta: Your typical look at the hook.

1033
02:00:05.700 --> 02:00:07.920
Ryan Mehta: What does the hook. Expect to

1034
02:00:08.970 --> 02:00:11.130
Ryan Mehta: Get as a program

1035
02:00:12.690 --> 02:00:22.980
Ryan Mehta: We need to get that user. The character ID that we need to fetch. Right now, we're not passing that character ID to our character detail page. So it has no idea which character to fetch.

1036
02:00:24.390 --> 02:00:30.930
Ryan Mehta: Eventually this character detail is going to be rendered by the router by react router.

1037
02:00:31.980 --> 02:00:34.500
Ryan Mehta: React router gives us some a match.

1038
02:00:36.480 --> 02:00:41.970
Ryan Mehta: Property on match. We have programs. And then on the programs or should be able to get the character ID.

1039
02:00:43.380 --> 02:00:46.380
Ryan Mehta: With hooks, you can actually use

1040
02:00:48.420 --> 02:01:06.690
Ryan Mehta: A HOOK called us programs. This will get the programs from react router. So this will be that object that match dot programs usually is we're going to D structure ID off of it and pass that ID to our character.

1041
02:01:07.920 --> 02:01:08.310
So,

1042
02:01:09.570 --> 02:01:14.040
Ryan Mehta: So this is, this gives us match dot programs for us just did hook on that.

1043
02:01:16.980 --> 02:01:19.530
Ryan Mehta: I think this will make our test totally blow up.

1044
02:01:24.570 --> 02:01:26.700
Ryan Mehta: Cannot read property match of undefined.

1045
02:01:28.860 --> 02:01:36.750
Ryan Mehta: Anybody have any ideas I saw some of you run into something similar to this yesterday.

1046
02:01:38.640 --> 02:01:42.630
Ryan Mehta: Anybody know what that might be something to do with our test.

1047
02:01:46.950 --> 02:01:48.270
ryan Diffenbaugh: A single ways your region.

1048
02:01:49.320 --> 02:01:49.530
Ryan Mehta: Not

1049
02:01:49.650 --> 02:01:50.790
ryan Diffenbaugh: A single wait thing.

1050
02:01:52.080 --> 02:02:03.090
Ryan Mehta: It has to do with this requiring us to be in a router. But over here. We don't have any router or not inside of a router right now.

1051
02:02:06.060 --> 02:02:22.440
Ryan Mehta: What we can do, though, is fake a router react router DOM comes with this memory router thing which lets us like fake that we're inside of a React router. If we look at the react router documentation.

1052
02:02:27.150 --> 02:02:30.930
Ryan Mehta: Testing. So under the testing guide and react router done

1053
02:02:32.100 --> 02:02:42.270
Ryan Mehta: It tells us a little bit about the react router. We can give it this initial entries and the page that we want to be on including right

1054
02:02:44.160 --> 02:02:45.360
Potentially the ID.

1055
02:02:52.440 --> 02:02:53.790
Ryan Mehta: So bunch of stuff.

1056
02:03:01.350 --> 02:03:16.170
Ryan Mehta: Ultimately, I think we want to have the memory router around it and then some way to pass the the ID through the memory router into our app. We're going to do that by using this route thing also

1057
02:03:17.310 --> 02:03:27.600
Ryan Mehta: So we'll have our memory router around character detail character detail is routed via router with a path. Let's say you're you're

1058
02:03:28.740 --> 02:03:29.610
Ryan Mehta: An ID.

1059
02:03:31.200 --> 02:03:36.960
Brooke Perkins (she/her): Right. Yep. Hey, what was the error you are getting again when you didn't have the router.

1060
02:03:38.040 --> 02:03:40.770
Ryan Mehta: It was saying that it didn't know what match was

1061
02:03:40.800 --> 02:03:48.000
Ryan Mehta: Match dot. Perfect. Oh, okay. Because we only get that if we're in a route. Yep. Thank you.

1062
02:03:48.810 --> 02:03:50.670
Ryan Mehta: So we're gonna put our component

1063
02:03:50.700 --> 02:03:59.460
Ryan Mehta: Into a route like this and then for memory router. We can give it the current page that we're on with this initial entries

1064
02:04:00.690 --> 02:04:04.500
Ryan Mehta: So we'll say this journal entries is

1065
02:04:06.450 --> 02:04:07.050
Ryan Mehta: Clear

1066
02:04:09.060 --> 02:04:10.380
Ryan Mehta: Slash quad.

1067
02:04:12.720 --> 02:04:28.140
Ryan Mehta: Alright, so we're saying we want to load character detail through a route and we're on the character one page. At this point, I think you go back to a passing test because now programs over here.

1068
02:04:31.320 --> 02:04:33.720
Ryan Mehta: The ID and programs will be one.

1069
02:04:42.840 --> 02:04:43.650
Ryan Mehta: That makes sense.

1070
02:04:46.830 --> 02:04:49.830
Ryan Mehta: So we're putting our component into a router basically

1071
02:04:53.070 --> 02:04:54.990
Ryan Mehta: Right, we have a character detail.

1072
02:04:56.040 --> 02:05:00.960
Ryan Mehta: Let's make a character detail page next and then put that into App JS.

1073
02:05:02.010 --> 02:05:02.520
And

1074
02:05:03.840 --> 02:05:08.580
Ryan Mehta: Submit close everything. Any questions about that before I do that, but this detail page.

1075
02:05:09.720 --> 02:05:10.470
Ryan Mehta: Or the hook.

1076
02:05:14.550 --> 02:05:17.040
Detail. That's the hook.

1077
02:05:22.260 --> 02:05:23.250
All right, let's take a

1078
02:05:24.390 --> 02:05:27.900
Ryan Mehta: Character detail page sex.

1079
02:05:30.360 --> 02:05:32.100
Ryan Mehta: Article detail page.

1080
02:05:36.960 --> 02:05:39.120
Ryan Mehta: Is going to be silly. Maybe forever.

1081
02:05:42.390 --> 02:05:47.910
Ryan Mehta: Because all it does is load that character detail compelled it

1082
02:05:51.450 --> 02:05:51.960
This thing.

1083
02:05:55.350 --> 02:05:59.040
Ryan Mehta: All it does is import that and put it onto the page.

1084
02:06:01.980 --> 02:06:19.260
Ryan Mehta: They'll probably never do anything else. There were some reasons to put our character, listen to this page because I'm anticipating us having pagination, eventually. So we'll need to combine the pagination of the character list components together, they could composition of those

1085
02:06:20.820 --> 02:06:29.190
Ryan Mehta: It seems like will never need to make a composition of the character detail component with anything else. It is the character detail component

1086
02:06:31.320 --> 02:06:40.380
Ryan Mehta: I'm going to leave it like this for now, but you could make a decision in your own application to call this entire thing.

1087
02:06:42.660 --> 02:06:49.740
Ryan Mehta: The character detail page because it is the character detail page essentially

1088
02:06:53.910 --> 02:06:56.370
Adrian Simental: pagination. Would there be any reason to

1089
02:06:57.870 --> 02:07:01.110
Adrian Simental: Do it like that, or to change it.

1090
02:07:02.970 --> 02:07:04.680
Ryan Mehta: If there wasn't pagination

1091
02:07:05.130 --> 02:07:05.370
Yeah.

1092
02:07:06.660 --> 02:07:06.990
Adrian Simental: Yeah.

1093
02:07:08.940 --> 02:07:13.140
Ryan Mehta: If we weren't doing pagination, then we could do the same thing with the character list.

1094
02:07:14.040 --> 02:07:15.060
Adrian Simental: Just drop it all here.

1095
02:07:19.290 --> 02:07:24.840
Ryan Mehta: Alright app JS. Let's make another route to character.

1096
02:07:26.730 --> 02:07:27.360
Ad

1097
02:07:28.800 --> 02:07:35.580
Ryan Mehta: Hoc characters ID. And this is going to load our character detail page.

1098
02:07:38.190 --> 02:07:38.760
Look good

1099
02:07:47.700 --> 02:07:48.540
Ryan Mehta: Let's test it.

1100
02:07:49.590 --> 02:07:50.310
Ryan Mehta: Manually

1101
02:07:52.530 --> 02:07:54.180
Ryan Mehta: So back in our app.

1102
02:07:56.280 --> 02:08:02.400
Ryan Mehta: Homepage receive that if I go to characters slash one

1103
02:08:03.720 --> 02:08:05.820
Ryan Mehta: It breaks. Perfect. Let's see.

1104
02:08:06.840 --> 02:08:10.380
Ryan Mehta: What kind of air. We have name of no

1105
02:08:12.000 --> 02:08:12.390
Okay.

1106
02:08:13.860 --> 02:08:15.900
Ryan Mehta: Let's go back to our character detail.

1107
02:08:17.760 --> 02:08:25.830
Ryan Mehta: So we're having name. That means this character is no right so the console log

1108
02:08:29.730 --> 02:08:30.570
Character.

1109
02:08:32.790 --> 02:08:33.870
Ryan Mehta: And load this

1110
02:08:34.950 --> 02:08:37.890
Ryan Mehta: Little know so for some reason.

1111
02:08:41.790 --> 02:08:47.910
Ryan Mehta: We're getting down to line nine we're no longer in a loading state, but we still don't have a character.

1112
02:08:50.490 --> 02:08:52.260
Ryan Mehta: To look at our character hook

1113
02:08:53.880 --> 02:08:54.450
Ryan Mehta: I mean,

1114
02:08:56.970 --> 02:08:58.080
Ryan Mehta: We should right

1115
02:08:59.310 --> 02:09:06.690
Ryan Mehta: So we're always loading until we finish affecting our character. Once we finished fetching our character.

1116
02:09:07.800 --> 02:09:11.640
Ryan Mehta: We set our character and then set load into false

1117
02:09:15.870 --> 02:09:18.030
Ryan Mehta: So let's check our service.

1118
02:09:19.980 --> 02:09:21.690
Ryan Mehta: Back over in our service.

1119
02:09:22.800 --> 02:09:26.160
Ryan Mehta: There's this error live right above

1120
02:09:27.420 --> 02:09:30.540
Ryan Mehta: That kind of shows me what we did wrong. Anybody see it.

1121
02:09:30.900 --> 02:09:33.690
Thomas Stussi: You missing a slash missing a slash. Yeah.

1122
02:09:33.690 --> 02:09:36.540
Ryan Mehta: So character one instead of character slash one

1123
02:09:38.280 --> 02:09:42.270
Ryan Mehta: So let's put our slash here and

1124
02:09:43.350 --> 02:09:48.210
Ryan Mehta: There is our character detail page. It's so beautiful, forget to two

1125
02:09:49.620 --> 02:09:51.720
Ryan Mehta: Three. It all works.

1126
02:09:52.950 --> 02:10:01.320
Ryan Mehta: One little last step that we need to do is make these things clickable. So I can click on one of these character list items and go to the detail page.

1127
02:10:03.660 --> 02:10:10.140
Ryan Mehta: That we can do I go back to our character list, wherever that is

1128
02:10:11.670 --> 02:10:13.200
To list.

1129
02:10:15.270 --> 02:10:25.170
Ryan Mehta: And making these all links. So we're going to have a bunch of allies with some links from react router on

1130
02:10:28.350 --> 02:10:30.540
Ryan Mehta: The link is going to link.

1131
02:10:31.590 --> 02:10:32.460
Ryan Mehta: To

1132
02:10:33.720 --> 02:10:36.060
Ryan Mehta: The characters.

1133
02:10:37.230 --> 02:10:39.390
Ryan Mehta: Character ID page.

1134
02:10:40.980 --> 02:10:43.830
Ryan Mehta: I think if we do this, our tests are going to blow up.

1135
02:10:45.510 --> 02:10:48.600
Ryan Mehta: If we go to the top of this error message.

1136
02:10:49.830 --> 02:10:55.860
Ryan Mehta: It's going to say you should not use link outside of a router. Anybody know where this one is coming from.

1137
02:10:58.050 --> 02:11:00.750
Ryan Mehta: Where should I go to fix this.

1138
02:11:01.590 --> 02:11:05.580
Jerud Moyer: It's coming from the test itself right use that memory router. Do it again.

1139
02:11:06.150 --> 02:11:16.200
Ryan Mehta: Exactly. Yeah. So we're rendering our character of list outside of a router here but character list uses a link so we can bring in memory router.

1140
02:11:17.250 --> 02:11:20.250
Ryan Mehta: And pop our character list into that memory router.

1141
02:11:21.840 --> 02:11:23.640
Ryan Mehta: And then we're

1142
02:11:24.960 --> 02:11:25.620
Ryan Mehta: Test.

1143
02:11:26.640 --> 02:11:32.490
Ryan Mehta: Should be good again character list has to be a child of some sort of router, since it uses link.

1144
02:11:34.920 --> 02:11:40.680
Ryan Mehta: Back in our app. We can click on these things. Now we go to the appropriate page.

1145
02:11:44.580 --> 02:11:45.000
Oops.

1146
02:11:48.420 --> 02:11:51.600
Ryan Mehta: That the list item goes all the way across the page.

1147
02:11:52.920 --> 02:11:54.000
Ryan Mehta: Which is a bit annoying.

1148
02:11:58.950 --> 02:12:08.370
Ryan Mehta: Yeah, it goes through the entire page. So if you click over here, it still goes at the page, which is wrong. But it's OK.

1149
02:12:08.880 --> 02:12:10.500
We can fix up the CSS.

1150
02:12:13.890 --> 02:12:15.990230 --> 01:45:35.850
Ryan Mehta: It doesn't have anything useful.

1027
01:45:37.980 --> 01:45:53.970
Ryan Mehta: You can give them all test IDs and click the one for the test ID, but they're also probably going to also have labels so you can do the get by label because you need to know which radio button is associated with which method for the labels next them also.

1028
01:46:00.630 --> 01:46:03.060
Ryan Mehta: Alright, this look good. This thing.

1029
01:46:05.400 --> 01:46:17.760
Ryan Mehta: All right, let's look at the build that you all are going to work on with will take a 10 minute break. After I explained the build. And then you can all have an hour after we explain it.

1030
01:46:20.880 --> 01:46:22.830
Ryan Mehta: And then that's it for the day.

1031
01:46:23.460 --> 01:46:29.460
Brooke Perkins (she/her): So we're building a name tag just all together at the same time in the same room.

1032
01:46:30.660 --> 01:46:33.420
Ryan Mehta: Well all individually in the same room.

1033
01:46:34.050 --> 01:46:40.080
Ryan Mehta: Right. Yep. Okay. So yeah, one thing to think about for this thing.

1034
01:46:41.790 --> 01:46:51.600
Ryan Mehta: You should try to work on this by yourself like don't ask other people for help. I know we asked for help and like get help a lot on the labs, but this is really your chance to see what you can do.

1035
01:46:52.800 --> 01:46:54.240
Ryan Mehta: Like by yourself.

1036
01:46:57.570 --> 01:47:02.760
Ryan Mehta: So yeah, try to do that. It's not really just for us to evaluate, but it's also for some self evaluation.

1037
01:47:03.720 --> 01:47:12.330
Ryan Mehta: These things are set up a little bit like how you an interview might be set up like I would totally ask this question interview for somebody who said that the new React

1038
01:47:12.780 --> 01:47:21.900
Ryan Mehta: And interviews usually ask simple questions and then see how somebody works through it. So it's a bit of a simulation but interview.

1039
01:47:22.650 --> 01:47:34.590
Ryan Mehta: At least the type of problem that you might see in an interview. So try to approach it that way. Don't get too hard on yourself. If you can accomplish it. It just means that you have some stuff to work on in the next few weeks.

1040
01:47:36.750 --> 01:47:45.960
Ryan Mehta: So we're going to be building a name tag app. There is a GitHub classroom link I will post in Slack.

1041
01:47:50.340 --> 01:48:02.550
Ryan Mehta: The goal of this is to create a name tag that displays a greeting and a name. So a grieving and the name inside of a box, for example. Hello, I'm Ryan.

1042
01:48:04.380 --> 01:48:14.670
Ryan Mehta: There are going to be two presentational components controls which have two inputs one input for the greeting and one input for the name

1043
01:48:15.840 --> 01:48:20.640
Ryan Mehta: And then a display that combines the greeting and the name together.

1044
01:48:23.310 --> 01:48:37.890
Ryan Mehta: And then you're going to have a single container component which is the name tag itself. The name tag is going to hold state for the greeting and the name and will use both the controls component and the display component

1045
01:48:43.440 --> 01:49:02.970
Ryan Mehta: And then you're going to have to test that you need to have mixture that when you change the greeting input, it changes the greeting on the page. And when you change the name input, it changes the name on the page. If you want something to reference for this type of thing.

1046
01:49:05.130 --> 01:49:10.830
Ryan Mehta: You can reference the Color Picker. It's almost the same, except with colors, instead of two inputs.

1047
01:49:16.260 --> 01:49:17.610
Ryan Mehta: Cuz this thing makes sense.

1048
01:49:23.100 --> 01:49:29.190
Brooke Perkins (she/her): It's kind of like what we did at the beginning of foundations, but just with React. Yeah.

1049
01:49:30.000 --> 01:49:33.060
Patrick Wilson: And it's just one page just one page. Yeah.

1050
01:49:40.950 --> 01:49:48.960
Ryan Mehta: All right, let's take a break. Let's come back at 1115 and then we can get started on this, this thing.

1051
01:49:51.810 --> 01:49:52.350
Sounds good.



1059
02:01:29.220 --> 02:01:32.250
Ryan Mehta: A few minutes after writing line 25

1060
02:01:34.890 --> 02:01:35.910
Ryan Mehta: We're in a weird

1061
02:01:37.290 --> 02:01:38.610
Ryan Mehta: Race conditioning.

1062
02:01:39.810 --> 02:01:40.290
Ryan Mehta: Thing.

1063
02:01:48.120 --> 02:02:01.020
Ryan Mehta: We are setting our location A down here online 25 and we're getting that location here on my, I think we're getting the location before we're ever setting.

1064
02:02:02.040 --> 02:02:02.850
Ryan Mehta: The location.

1065
02:02:08.130 --> 02:02:16.920
Ryan Mehta: So we don't actually want the current location that's here we fetch articles location A we actually want the location that's inside of the

1066
02:02:18.750 --> 02:02:22.050
Ryan Mehta: Input, which I don't think we have a selector for doing

1067
02:02:27.210 --> 02:02:30.120
Ryan Mehta: We do not, so we'll need to make a

1068
02:02:31.320 --> 02:02:32.730
Ryan Mehta: Input selector.

1069
02:02:35.340 --> 02:02:36.690
And put selector.

1070
02:02:40.680 --> 02:02:43.770
Ryan Mehta: Input selector. I see you right here.

1071
02:02:59.940 --> 02:03:13.860
Ryan Mehta: So we're going to get what's currently in the input box instead of what has already been selected. And then we're going to use this this action creator back in our header instead of using this action creator back in our header.

1072
02:03:17.250 --> 02:03:17.910
Online.

1073
02:03:18.990 --> 02:03:21.120
Ryan Mehta: It's not this pretty complicated technical

1074
02:03:24.930 --> 02:03:26.580
Ryan Mehta: Okay, so back in this header.

1075
02:03:28.980 --> 02:03:31.170
Ryan Mehta: Instead of setting location, a

1076
02:03:33.090 --> 02:03:45.210
Ryan Mehta: This one, when we press the submit button. We are going to fetch location A which will both fetch our list of articles and set location A for us at the same time.

1077
02:03:46.980 --> 02:03:50.010
So we're going to that location. A

1078
02:03:54.000 --> 02:03:54.480
Instead,

1079
02:03:56.430 --> 02:04:01.320
Ryan Mehta: Is the difference between those two makes sense like very similar except

1080
02:04:02.580 --> 02:04:09.510
Ryan Mehta: Fetch location A both gets our articles and sets our location A in state.

1081
02:04:15.780 --> 02:04:18.540
Ryan Mehta: Let's see if it actually works that might actually just

1082
02:04:28.230 --> 02:04:28.950
Ryan Mehta: Does something

1083
02:04:34.020 --> 02:04:34.470
Ryan Mehta: Cool.

1084
02:04:38.130 --> 02:04:38.760
Did something

1085
02:04:40.260 --> 02:04:40.920
Ryan Mehta: Works.

1086
02:04:43.140 --> 02:04:51.660
Ryan Mehta: So we need to do the same thing for be our be articles. So let's take a look at that action.

1087
02:04:54.930 --> 02:05:04.980
Ryan Mehta: So, same sort of thing. We're going to make another action creator called that location that we call it x location. Yep, that's location be

1088
02:05:06.360 --> 02:05:13.080
Ryan Mehta: Which is going to be a function that returns dispatch and gets another function.

1089
02:05:14.430 --> 02:05:16.590
Ryan Mehta: We're going to get our location.

1090
02:05:21.000 --> 02:05:37.350
Ryan Mehta: By using a get location be input selector. So when they open up our be selectors. We don't have one yet. We'll add one get location be in perfect

1091
02:05:50.070 --> 02:05:52.110
Ryan Mehta: And we'll pass it the current state.

1092
02:05:55.590 --> 02:05:58.080
Ryan Mehta: And I really want to auto import this thing.

1093
02:06:04.530 --> 02:06:08.280
Ben Waples: Where does get sick again is that on the floor or

1094
02:06:10.290 --> 02:06:11.730
Ryan Mehta: On the middleware. Yeah.

1095
02:06:12.390 --> 02:06:14.070
Ryan Mehta: Let's actually look at that real quick.

1096
02:06:24.780 --> 02:06:33.870
Ryan Mehta: So on this dunk middle where they pass us dispatch get state and extra arguments, whatever extra arguments means

1097
02:06:35.340 --> 02:06:45.600
Ryan Mehta: And get state comes from the store. Remember yesterday, you could do store get state. This is that same get state function that the store has so just give me the current state from the store.

1098
02:06:50.580 --> 02:06:52.920
Ryan Mehta: So we get our location be input.

1099
02:06:54.480 --> 02:07:04.080
Ryan Mehta: Then we're going to get read it the articles for passive the location. We're then going to get articles.

1100
02:07:07.110 --> 02:07:10.410
Ryan Mehta: We're then going to dispatch set location.

1101
02:07:12.090 --> 02:07:12.660
Ryan Mehta: Be

1102
02:07:14.610 --> 02:07:18.420
Ryan Mehta: And we're going to dispatch set

1103
02:07:19.710 --> 02:07:24.600
Ryan Mehta: Articles be with articles.

1104
02:07:27.960 --> 02:07:34.440
Ryan Mehta: Will need to create this action creator, just like we did for location A to create a

1105
02:07:35.670 --> 02:07:38.130
Ryan Mehta: Set are to

1106
02:07:39.720 --> 02:07:40.200
Ryan Mehta: Be

1107
02:07:45.240 --> 02:07:45.840
Ryan Mehta: A

1108
02:08:07.980 --> 02:08:08.250
Ryan Mehta: Things.

1109
02:08:12.720 --> 02:08:35.430
Ryan Mehta: Okay, so we have these this is now dispatching are set location be and they're set articles be so we should be able to add our location, just like we did before. We also need to make sure that our producer handles the SEC articles he action type

1110
02:08:36.660 --> 02:08:40.380
Ryan Mehta: When it gets that action is going to take everything from state, keep it the same

1111
02:08:41.460 --> 02:08:45.810
Ryan Mehta: Articles will update to whatever is in action to load.

1112
02:08:48.660 --> 02:08:52.620
Ryan Mehta: Then we'll split this on multiple lines because it's a long line.

1113
02:08:56.820 --> 02:08:57.270
Ryan Mehta: OK.

1114
02:08:59.970 --> 02:09:03.240
Ryan Mehta: So now we have this FX location be thing also

1115
02:09:04.620 --> 02:09:11.760
Ryan Mehta: Back in our header instead of set location beef. We're going to use Fetch location be

1116
02:09:15.510 --> 02:09:19.650
Ryan Mehta: And now we should on our front end.

1117
02:09:21.690 --> 02:09:24.420
Ryan Mehta: Be able to select this one.

1118
02:09:25.440 --> 02:09:26.730
And select this one.

1119
02:09:29.730 --> 02:09:31.080
Ryan Mehta: This is be right here.

1120
02:09:35.250 --> 02:09:38.220
Ryan Mehta: Alright, so we're able to select from both locations.

1121
02:09:40.560 --> 02:09:41.730
Ryan Mehta: Which is perfect.

1122
02:09:43.800 --> 02:09:47.430
Ryan Mehta: I just discovered another huge bug in our thing.

1123
02:09:49.230 --> 02:09:54.330
Ryan Mehta: If we go back to our service. We're always fetching from the news subreddit

1124
02:09:55.530 --> 02:10:01.680
Ryan Mehta: We don't always want to fetch from the news subreddit. So we're going to take the same strategy in this

1125
02:10:03.360 --> 02:10:10.590
Ryan Mehta: In this service. We don't know what the subreddit is so we'll make somebody else. Give us the sub reddit

1126
02:10:13.320 --> 02:10:15.030
Ryan Mehta: And we'll put the subreddit fear.

1127
02:10:18.330 --> 02:10:24.960
Ryan Mehta: Since we changed how get articles works. We're going to need to change both of our action creators.

1128
02:10:28.320 --> 02:10:35.430
Ryan Mehta: Both of these action creators. They both on the past location. Now we're going to take the same strategy that we did to get that location, though.

1129
02:10:36.660 --> 02:10:38.370
Ryan Mehta: We will construct state.

1130
02:10:40.410 --> 02:10:44.130
Ryan Mehta: With get state will pass that state to location.

1131
02:10:45.270 --> 02:10:48.660
Ryan Mehta: Will also pass that state to get our subreddit

1132
02:10:53.880 --> 02:10:54.630
subreddit

1133
02:10:56.640 --> 02:10:59.940
Ryan Mehta: We, for sure, have that selector. No way.

1134
02:11:01.530 --> 02:11:02.970
Don't have that selector.

1135
02:11:11.250 --> 02:11:15.180
Ryan Mehta: So we're getting the location and the subreddit now and then we can pass

1136
02:11:16.350 --> 02:11:21.420
Ryan Mehta: subreddit and location to get articles will do the same thing.

1137
02:11:23.160 --> 02:11:24.630
Ryan Mehta: Over on this side.

1138
02:11:43.980 --> 02:12:01.230
Ben Waples: If we were to use like instead of where we use these fetch locations and we dispatch this action if we took the logic or two, but we're, what we're doing side of the action and put it directly inside of the component would we still need the sunk middle where

1139
02:12:01.980 --> 02:12:03.570
Ryan Mehta: You wouldn't need the thug federal where then

1140
02:12:09.720 --> 02:12:12.480
Ryan Mehta: Okay, so we're getting our to

1141
02:12:14.490 --> 02:12:16.320
Ryan Mehta: Now we're passing the subreddit along

1142
02:12:18.300 --> 02:12:18.960
Ryan Mehta: With good

1143
02:12:21.630 --> 02:12:26.310
Ryan Mehta: Alright, so now if we put what's another subreddit

1144
02:12:30.780 --> 02:12:33.240
Thomas Stussi: dank memes bank means

1145
02:12:33.270 --> 02:12:33.720
Okay.

1146
02:12:34.860 --> 02:12:35.730
Brooke Perkins (she/her): Bank. No.

1147
02:12:36.870 --> 02:12:37.740
Ryan Mehta: dank.

1148
02:12:40.170 --> 02:12:41.670
Thomas Stussi: It might be an appropriate

1149
02:12:43.560 --> 02:12:45.090
Annalise: They're all adults here.

1150
02:12:45.180 --> 02:12:45.930
It's fine.

1151
02:12:47.610 --> 02:12:49.140
Brooke Perkins (she/her): I would like to see those

1152
02:12:49.680 --> 02:12:52.500
Thomas Stussi: Same maybe programming humor.

1153
02:12:56.520 --> 02:12:57.360
Ryan Mehta: Is that like that.

1154
02:12:57.870 --> 02:12:59.160
Thomas Stussi: Annalise we could be good.

1155
02:12:59.520 --> 02:13:02.010
Thomas Stussi: I'm not positive. I think so.

1156
02:13:02.280 --> 02:13:02.550
I

1157
02:13:04.680 --> 02:13:05.700
Ryan Mehta: DC

1158
02:13:06.060 --> 02:13:08.100
Ryan Mehta: Compared to Hawaii.

1159
02:13:09.300 --> 02:13:11.820
Ryan Mehta: Okay, it doesn't know. Is it underscore between

1160
02:13:12.270 --> 02:13:13.260
Hannah (TA): It's programmer.

1161
02:13:16.830 --> 02:13:18.810
Ryan Mehta: One end to end.

1162
02:13:19.320 --> 02:13:19.950
Hannah (TA): To end

1163
02:13:21.480 --> 02:13:23.280
Ryan Mehta: Programmer humor. Thank you.

1164
02:13:27.870 --> 02:13:29.250
Ryan Mehta: Okay, cool.

1165
02:13:32.130 --> 02:13:34.440
Ryan Mehta: Oh yeah, this one comes down below. Right.

1166
02:13:36.360 --> 02:13:39.600
Ryan Mehta: Can do it. We need a loading screen clearly

1167
02:13:41.370 --> 02:13:44.640
Annalise: What's my BF the hacker. That's interesting.

1168
02:13:47.280 --> 02:13:48.540
Annalise: Is great.

1169
02:13:50.820 --> 02:13:51.540
Ryan Mehta: Sub

1170
02:13:52.020 --> 02:13:52.950
Location.

1171
02:13:55.380 --> 02:13:58.320
Ryan Mehta: Location sub location, whose sub location.

1172
02:14:03.570 --> 02:14:07.350
Ryan Mehta: Let's go back here actions be like 27

1173
02:14:12.120 --> 02:14:13.230
Ryan Mehta: Seven we've compiled

1174
02:14:17.670 --> 02:14:18.840
Ryan Mehta: Let's try this. All again.

1175
02:14:20.490 --> 02:14:21.810
Ryan Mehta: Programmer humor.

1176
02:14:30.120 --> 02:14:35.190
Ryan Mehta: Submit our UI is not user friendly. I can really use it.

1177
02:14:37.050 --> 02:14:37.530
Ryan Mehta: Okay.

1178
02:14:39.750 --> 02:14:54.030
Ryan Mehta: That's fine. So there's our second list. They work our big problem now is if I change the subreddit and press submit it doesn't really fetch the two articles until I change the two locations.

1179
02:14:55.410 --> 02:15:02.970
Ryan Mehta: Right, this only changes the subreddit and state. So I think we're going to need to do the exact same thing with the subreddit also

1180
02:15:04.830 --> 02:15:07.890
Ryan Mehta: So we will need to

1181
02:15:09.570 --> 02:15:11.550
Ryan Mehta: Create a new subreddit action.

1182
02:15:12.840 --> 02:15:16.350
Ryan Mehta: We have this set subreddit thing right here.

1183
02:15:18.150 --> 02:15:22.860
Ryan Mehta: How should we do this, how should we do this.

1184
02:15:24.900 --> 02:15:25.950
Should we

1185
02:15:27.840 --> 02:15:29.190
Do this.

1186
02:15:43.980 --> 02:15:45.450
Ryan Mehta: How should we do this.

1187
02:15:49.110 --> 02:15:51.330
Ryan Mehta: Kind of one so

1188
02:15:52.860 --> 02:15:53.970
Ryan Mehta: I kind of want

1189
02:15:55.980 --> 02:16:01.320
Ryan Mehta: These to fetch location things so we could totally make another action.

1190
02:16:02.340 --> 02:16:06.150
Ryan Mehta: This one that dispatch change it into a funk style thing.

1191
02:16:08.370 --> 02:16:12.510
Ryan Mehta: And then dispatch our fetch location be

1192
02:16:14.040 --> 02:16:17.370
Ryan Mehta: Dispatched our location.

1193
02:16:30.120 --> 02:16:30.570
Ryan Mehta: Order.

1194
02:16:34.200 --> 02:16:34.920
Ryan Mehta: But

1195
02:16:36.120 --> 02:16:41.970
Ryan Mehta: If we do that, this will happen before we've actually set the current subreddit

1196
02:16:48.570 --> 02:16:49.800
Ryan Mehta: Dispatch.

1197
02:16:54.570 --> 02:16:55.860
Ryan Mehta: I don't know if this will work.

1198
02:16:56.880 --> 02:17:06.930
Ryan Mehta: I'm not quite sure. So we'll try to dispatch the set subreddit thing first, which should change the current subreddit, and then will dispatch these two

1199
02:17:07.920 --> 02:17:21.150
Ryan Mehta: Actions afterwards, since they're dispatched after a set subreddit when they go and get the current subreddit, it should be after we changed the current subreddit to whatever we typed into the input field.

1200
02:17:23.250 --> 02:17:25.050
Ryan Mehta: We will have to see if that works. So

1201
02:17:26.550 --> 02:17:29.910
Ryan Mehta: So programmer humor, you will submit it.

1202
02:17:33.510 --> 02:17:38.010
Ryan Mehta: Okay, so, and then what if we switch it to news.

1203
02:17:42.180 --> 02:17:44.640
Ryan Mehta: It did. It worked. We're so good.

1204
02:17:49.020 --> 02:17:50.730
Ryan Mehta: I just worked okay

1205
02:17:54.390 --> 02:18:08.850
Ryan Mehta: So that's that action creator, we just use the two other action creators that we just made. So when you change location A only fetches location A when you change location be only affects your location be

1206
02:18:09.930 --> 02:18:20.910
Ryan Mehta: But when you change the subreddit it fetches location A and location be file reusing the action creators that we made earlier. So that's all like internal linking

1207
02:18:23.160 --> 02:18:41.340
Ryan Mehta: This kind of shows. I think the power of Redux but also the it's like you could see like exactly what Redux says it's over complicated and a lot of ways, but when it gets rolling it lets you like really reuse a lot of your other stuff like this was almost free

1208
02:18:42.870 --> 02:18:54.840
Ryan Mehta: Because we did the work and other files, but it's really hard at the time of writing this to see that it was free, like you didn't have to do much work for it.

1209
02:18:56.910 --> 02:19:09.150
Ryan Mehta: So it's like over complicated. There's so many files at this point that are all doing crazy amounts of things. It's hard to keep all of those files in mind. But if you're able to you get like

1210
02:19:10.260 --> 02:19:13.830
Ryan Mehta: The things start connecting really nicely together.

1211
02:19:17.400 --> 02:19:19.020
Ryan Mehta: Okay, well, we have like

1212
02:19:20.370 --> 02:19:21.900
Ryan Mehta: Only a few more minutes.

1213
02:19:24.900 --> 02:19:28.740
Ryan Mehta: Let's just super quickly add some CSS to the homepage.

1214
02:19:31.980 --> 02:19:32.790
Ryan Mehta: Want to

1215
02:19:36.810 --> 02:19:44.790
Ryan Mehta: Put the side by side. We're going to have a section. So we'll have it. The display grid.

1216
02:19:46.710 --> 02:19:49.710
Ryan Mehta: Grid template columns.

1217
02:19:54.000
Ryan Mehta: Can score. So look at all the scores will only care about ones where the score is greater than 90% so it's 90% sure that we said the word

965
01:57:30.390 --> 01:57:44.160
Ryan Mehta: That look good Maxine a reverse this. I'm going to go over words are array of words. This is the word that was said. And then we'll get the score by looking into results.

966
01:57:45.990 --> 01:57:46.530
So,

967
01:57:49.620 --> 01:57:51.660
Ryan Mehta: Let's force.

968
01:57:52.980 --> 01:57:53.400
Ryan Mehta: Hi.

969
01:57:55.980 --> 01:58:11.130
Ryan Mehta: Find the word where result that scores is greater than 90% and they should return a word make sense, since we're iterating through the array of words. Here we're going through all of those words and then checking

970
01:58:12.180 --> 01:58:17.970
Ryan Mehta: Is the score for that word greater than 90% which case we'll get back the word

971
01:58:19.410 --> 01:58:21.150
Ryan Mehta: And then let's console log the word

972
01:58:22.710 --> 01:58:24.360
For word

973
01:58:26.340 --> 01:58:28.410
Ryan Mehta: Right and go back over here.

974
01:58:30.300 --> 01:58:33.720
Ryan Mehta: 123

975
01:58:35.040 --> 01:58:35.640
Ryan Mehta: High

976
01:58:37.230 --> 01:58:39.840
Ryan Mehta: Five. Okay, six.

977
01:58:41.970 --> 01:58:42.510
Ryan Mehta: Hello.

978
01:58:44.160 --> 01:58:46.710
Ryan Mehta: So they'll return undefined. If it doesn't know.

979
01:58:47.910 --> 01:58:48.510
Ryan Mehta: Go.

980
01:58:49.950 --> 01:58:57.000
Ryan Mehta: Down, Left, Right, okay. It's kind of working 123456 whatever kind of works.

981
01:59:00.060 --> 01:59:02.010
Ryan Mehta: So we're getting back a word now.

982
01:59:03.300 --> 01:59:07.530
Ryan Mehta: One big problem with this whole thing. I'm not going to include this spectrograph

983
01:59:09.120 --> 01:59:15.420
Ryan Mehta: We have these words which are the string interpretations of the word, but in our state.

984
01:59:16.740 --> 01:59:20.700
Ryan Mehta: If we look back at our reducer or somewhere.

985
01:59:21.990 --> 01:59:23.190
Ryan Mehta: Yeah, I guess.

986
01:59:25.500 --> 01:59:30.120
Ryan Mehta: Maybe or a test. These are actual numbers here, they're not

987
01:59:32.040 --> 01:59:55.860
Ryan Mehta: They're not strings. We have a choice here we can keep these as actual numbers like they are or we can use the string representations of the number I think for ease. It'll be nice to just be able to right here dispatch new guess word right the number that they that they chose

988
01:59:57.990 --> 01:59:59.190
So like if

989
02:00:00.690 --> 02:00:02.850
Ryan Mehta: Word, if we were able to find a word.

990
02:00:04.230 --> 02:00:16.800
Ryan Mehta: That would be really nice. So I'm going to do the other. I'm going to do that route, we're going to switch all of our number representations in destroying representations of our numbers that seem okay to everyone.

991
02:00:18.030 --> 02:00:27.930
Ryan Mehta: So back in our number test and our number reducer. We're going to want to switch all of these two strings. So this will become seven

992
02:00:30.210 --> 02:00:44.760
Ryan Mehta: That will go to know our number will no longer be a string will pick a random number. It's going to be a art will no longer be a number. It's going to be a string right one of either 120123456789

993
02:00:47.850 --> 02:00:49.650
Ryan Mehta: Let's say that this is a string. Now,

994
02:00:51.570 --> 02:00:52.860
Ryan Mehta: number over here will be

995
02:00:54.750 --> 02:00:57.420
Ryan Mehta: When we get a new number, like seven

996
02:00:59.490 --> 02:01:06.180
Ryan Mehta: Then we expect number to still be eight and this one to now be seven.

997
02:01:07.590 --> 02:01:12.840
Ryan Mehta: Just changing all of our tests to use a string representation. This is nine.

998
02:01:14.490 --> 02:01:15.630
Ryan Mehta: This is for one

999
02:01:20.160 --> 02:01:21.630
Ryan Mehta: And we get back a string.

1000
02:01:24.540 --> 02:01:27.570
Ryan Mehta: All of those tests fail pretty miserably now.

1001
02:01:31.020 --> 02:01:32.430
Ryan Mehta: I'm going to get rid of our

1002
02:01:33.510 --> 02:01:34.620
Ryan Mehta: App snapshot

1003
02:01:37.020 --> 02:01:38.130
Ryan Mehta: And this tests.

1004
02:01:39.180 --> 02:01:42.330
Ryan Mehta: Okay, so now we need to go through all of this and

1005
02:01:43.470 --> 02:01:48.660
Ryan Mehta: Expect numbers are like this string representations of numbers instead of

1006
02:01:49.740 --> 02:02:00.150
Ryan Mehta: Like actual numbers, we can actually do this pretty conveniently. The only place where we're constructing a number is in this generate random number function.

1007
02:02:01.620 --> 02:02:22.170
Ryan Mehta: And what we're going to do is construct an array of numbers, but that arrays going to be the string representation of the numbers were zero index. So when we select zero we grabbed zero index from our numbers right and get 012 it's a bit cumbersome.

1008
02:02:24.450 --> 02:02:27.360
Ryan Mehta: But I think it's a nice way to be this for

1009
02:02:32.760 --> 02:02:33.690
Ryan Mehta: It's not too many.

1010
02:02:38.310 --> 02:02:51.390
Ryan Mehta: Okay, so we have this array of the string representations are generate random number right now gets us either zero through nine in number form instead of getting that we're going to

1011
02:02:53.040 --> 02:02:54.660
Ryan Mehta: Use our numbers array.

1012
02:02:56.340 --> 02:03:00.840
Ryan Mehta: And look up into it to get the string representation of that number.

1013
02:03:01.920 --> 02:03:05.460
Ryan Mehta: Let's think our tests will maybe pass, they do.

1014
02:03:07.290 --> 02:03:09.600
Ryan Mehta: This little thing makes sense.

1015
02:03:13.530 --> 02:03:15.180
Ryan Mehta: And back over here.

1016
02:03:20.640 --> 02:03:32.010
Ryan Mehta: Five 710 9132

1017
02:03:33.360 --> 02:03:33.870
Ryan Mehta: To

1018
02:03:34.890 --> 02:03:46.890
Ryan Mehta: 5337 okay kind of works. I mean, the speech recognition isn't the best but six

1019
02:03:48.330 --> 02:03:51.930
Ryan Mehta: Kind of works, we have like our little name guessing game going

1020
02:03:54.540 --> 02:04:00.270
Ryan Mehta: Alright, let's get rid of the input at the top. Now, we don't need that anymore.

1021
02:04:01.410 --> 02:04:07.200
Ryan Mehta: And yeah, I think that's 160

1022
02:04:08.520 --> 02:04:10.230
Ryan Mehta: Down, Left one

1023
02:04:11.670 --> 02:04:14.400
Ryan Mehta: It's like picking up my background noise for sure for

1024
02:04:15.720 --> 02:04:21.840
Ryan Mehta: Eight. So there's some bugs to fix. Definitely. But you all can fix some of these bugs and

1025
02:04:23.040 --> 02:04:29.040
Ryan Mehta: Everything during your lab, but we have like the framework of a little number guessing game.

1026
02:04:31.470 --> 02:04:33.390
Ryan Mehta: Any questions about this code here.

1027
02:04:34.530 --> 02:04:37.170
Ryan Mehta: Is a seem like something that could be fun to work with.

1028
02:04:41.970 --> 02:04:43.020
Ron Yonker: It's a bad question.

1029
02:04:45.210 --> 02:04:56.790
Thomas Stussi: Ryan, Can you go over you made that little array of numbers where you wrote the strings of the numbers. Can you like just review what that refactor was sort of about

1030
02:04:57.780 --> 02:04:58.710
Ryan Mehta: Yeah, so

1031
02:05:00.180 --> 02:05:02.010
Ryan Mehta: Back over here in our component

1032
02:05:03.060 --> 02:05:10.560
Ryan Mehta: Our word recognizer returns the string version of the word not like the numerical version of the word.

1033
02:05:12.270 --> 02:05:23.490
Ryan Mehta: So I thought it would be nicer to just add our guests as the string version of the words were only storing that strings and state, which meant that we needed when we created our random number.

1034
02:05:24.570 --> 02:05:41.040
Ryan Mehta: We were creating a we're generating a random actual number and this is converting that number into the string person. If that number. So if we generate the number zero we look up into the array at position zero and get 012 etc.

1035
02:05:42.540 --> 02:05:43.980
Thomas Stussi: Okay, that makes sense.

1036
02:05:57.540 --> 02:05:57.960
Ryan Mehta: So,

1037
02:05:58.260 --> 02:06:01.590
Ryan Mehta: For this lab, you are free to add whatever feature you want

1038
02:06:01.590 --> 02:06:03.750
Ryan Mehta: To to this thing.

1039
02:06:04.860 --> 02:06:15.600
Ryan Mehta: The features could be like actually style it a little bit. That is a feature you can fix any bugs that you want. Like, right now there is a bug that if I say

1040
02:06:16.620 --> 02:06:17.250
Ryan Mehta: Down.

1041
02:06:18.570 --> 02:06:27.420
Ryan Mehta: It thinks that I said a number. Maybe we don't want that. Right. Like, maybe it only picks up when I say a number we skip all the words that are numbers.

1042
02:06:29.010 --> 02:06:32.910
Ryan Mehta: That would be a good other fee or that's like a good fix for it.

1043
02:06:33.930 --> 02:06:40.260
Ryan Mehta: There's some other features. I think it would be really cool. Instead of displaying the word six year

1044
02:06:41.730 --> 02:06:42.540
Ryan Mehta: To

1045
02:06:44.160 --> 02:06:50.160
Ryan Mehta: Maybe display like six as a number really large. That's a cool feature to add

1046
02:06:51.870 --> 02:06:58.680
Ryan Mehta: Another cool feature might be to display triangles are circles are squares as SVG images.

1047
02:07:00.360 --> 02:07:03.030
Ryan Mehta: Instead, you can actually let me

1048
02:07:04.680 --> 02:07:07.650
Ryan Mehta: Show you something. So with SAP, geez.

1049
02:07:08.790 --> 02:07:12.540
Ryan Mehta: You can create an SVG element with a

1050
02:07:13.650 --> 02:07:14.550
Ryan Mehta: What is it like

1051
02:07:16.680 --> 02:07:20.010
Ryan Mehta: Actually okay I don't know off the top of my head STG

1052
02:07:21.330 --> 02:07:21.750
Ryan Mehta: Goal.

1053
02:07:27.180 --> 02:07:28.410
Ryan Mehta: So kind of like this.

1054
02:07:30.390 --> 02:07:31.080
Ryan Mehta: So,

1055
02:07:45.660 --> 02:08:03.930
Ryan Mehta: And I think on our page, we should see a rectangle now so you can write some code that picks them like checks the number that you've currently selected and displays that many rectangles on the page, you know, like how many red rectangles are there and they have to say to

1056
02:08:05.730 --> 02:08:07.830
Ryan Mehta: You can also use other shapes like circle.

1057
02:08:10.590 --> 02:08:13.890
Ryan Mehta: Is one with the radius, I believe.

1058
02:08:16.950 --> 02:08:17.730
Yes.

1059
02:08:26.730 --> 02:08:27.600
Ryan Mehta: Where's our circle.

1060
02:08:29.070 --> 02:08:31.380
Thomas Stussi: It's a freaking out because of height and width.

1061
02:08:32.340 --> 02:08:33.240
Ryan Mehta: Totally could be

1062
02:08:37.410 --> 02:08:56.760
Ryan Mehta: It's zero. Is this supposed to be are perhaps there it is. So there's our circle. It's half because it's like up way up in this corner would need to be centered it's drawn at 00 so that's another cool feature that you could do instead of displaying the number display a number of shapes.

1063
02:08:57.900 --> 02:08:59.100
Ryan Mehta: That you'd have to guess.

1064
02:09:02.340 --> 02:09:10.320
Ryan Mehta: And whatever other feature you want. I think the only requirement for this lab is try to come up with at least

1065
02:09:11.400 --> 02:09:15.750
Ryan Mehta: Two features or fixes. So make at least two changes to this.

1066
02:09:17.700 --> 02:09:18.330
In some way

1067
02:09:21.300 --> 02:09:28.200
Ben Waples: What is recognizer dot listen doing, is that just like listening to everything that's coming through the word recognizer

1068
02:09:29.070 --> 02:09:29.940
Ryan Mehta: Yeah, so

1069
02:09:31.020 --> 02:09:32.160
Ryan Mehta: The recognizer

1070
02:09:32.250 --> 02:09:48.090
Ryan Mehta: Is like the model the dot listen is turning on my microphone and I'm starting to actually listen to my my speech and then every time it recognizes a word. It will invoke this callback function.

1071
02:09:51.570 --> 02:09:52.890
Ryan Mehta: Yeah, that's, that's what

1072
02:09:58.320 --> 02:10:00.870
Ben Waples: Only want to recommend is a word that callback function gets

1073
02:10:02.190 --> 02:10:02.550
Ben Waples: Called

1074
02:10:03.090 --> 02:10:07.410
Ryan Mehta: Yep. Only when it thinks it recognizes a word, but it's so

1075
02:10:08.430 --> 02:10:11.580
Ryan Mehta: As I'm talking XM I still console logging.

1076
02:10:19.500 --> 02:10:23.100
Ryan Mehta: So yeah, it thinks it recognizes a word. The problem is

1077
02:10:25.680 --> 02:10:32.310
Ryan Mehta: Even if it thinks it recognizes a word like with point 0000 5% chance

1078
02:10:33.420 --> 02:10:40.470
Ryan Mehta: It triggers. So you'll notice all of these are like very, very, very small numbers. This is like five

1079
02:10:41.970 --> 02:10:47.370
Ryan Mehta: Like scientific notation minus eight. So it's like a very, very low percentage

1080
02:10:54.810 --> 02:10:56.160
Adrian Simental: Does it only work in English.

1081
02:10:57.540 --> 02:11:04.680
Ryan Mehta: It only recognizes English words. Yeah, it has. It only recognizes these words right here.

1082
02:11:11.070 --> 02:11:16.560
Ryan Mehta: Other features that you might want to add they'd be cool to have like maybe some sort of scoring system.

1083
02:11:17.490 --> 02:11:33.060
Ryan Mehta: It's like every time you get a wrong you lose a point. Every time you get a right, you get a point maybe also listen to some of these other words like go and stop. So when you say go, it starts playing the game and you say, Stop it, and the game and gives you your results or something.

1084
02:11:34.410 --> 02:11:36.420
Ryan Mehta: There's tons of features. I think that you can add

1085
02:11:38.580 --> 02:11:44.880
Ben Waples: If we add to stage show us the same reducer I'm that we have built out right now.

1086
02:11:45.720 --> 02:11:47.070
Ryan Mehta: Yeah, use that same reducer.

1087
02:11:49.290 --> 02:11:59.520
Ryan Mehta: You can also make it into a math game. It could be like you could show four and five, four plus five on the screen and then the person has to say nine or something.

1088
02:12:01.050 --> 02:12:06.120
Ryan Mehta: I mean, it'd be very limited because they can only say numbers up to nine. So it'd be

1089
02:12:07.170 --> 02:12:13.290
Ryan Mehta: Very basic math like you can do five plus seven that would break the game.

1090
02:12:16.920 --> 02:12:20.760
Thomas Stussi: You can have very complex equations that produce a single digit answer.

1091
02:12:21.180 --> 02:12:22.230
Ryan Mehta: That's true, yeah.

1092
02:12:22.770 --> 02:12:27.030
Ryan Mehta: That's true. So you could make a very complicated math, do you just can't have very big numbers as a

1093
02:12:27.150 --> 02:12:27.750
Result.

1094
02:12:31.380 --> 02:12:38.280
Ryan Mehta: So yeah, I mean, you could probably think of your own features. If you want to just make sure that you add or fix at least two things.

1095
02:12:39.750 --> 02:12:40.740
This application.

1096
02:12:42.930 --> 02:12:44.370
Ryan Mehta: Let me give you all the

1097
02:12:45.390 --> 02:12:46.920
Ryan Mehta: Mixture I push this

1098
02:12:48.390 --> 02:12:49.500
Ryan Mehta: Basic

1099
02:13:10.140 --> 02:13:13.020
Ryan Mehta: Here's the post that in Slack.

1100
02:13:22.920 --> 02:13:27.000
Ryan Mehta: Alright, any questions about the lab or worries about it.

1101
02:13:28.230 --> 02:13:31.680
Ryan Mehta: Anybody hate this lab we despise it

1102
02:13:34.110 --> 02:13:34.680
Brooke Perkins (she/her): Think business.

1103
02:13:35.970 --> 02:13:38.340
Brooke Perkins (she/her): That finally impresses my partner.

1104
02:13:39.390 --> 02:13:40.080
Ryan Mehta: Nice.

1105
02:13:40.140 --> 02:13:43.800
rmal character list that we've been writing, he added this component here.

1091
02:10:33.330 --> 02:10:50.370
Ryan Mehta: And then instead of passing props everywhere. They're asking for values. That's the big change. It feels like a lot it when that when we do this switch it really feels like there's so much more going on, but it's just this really this one new piece.

1092
02:10:51.990 --> 02:11:00.060
Ryan Mehta: Here at the top and then having to flip our minds around from getting past information to asking for information.

1093
02:11:03.210 --> 02:11:16.230
Ryan Mehta: All the rest of this, like, if you look at our character hook it looks exactly like our old character hooks, with a little bit of wonkiness because we're switching between our service but besides that, it's very similar.

1094
02:11:19.290 --> 02:11:24.450
Ryan Mehta: And our character list looks exactly the same as it did before.

1095
02:11:25.530 --> 02:11:29.010
Ryan Mehta: We use our US characters hook to get our list of characters.

1096
02:11:33.240 --> 02:11:33.870
And their header.

1097
02:11:35.160 --> 02:11:36.510
Asking for information.

1098
02:11:44.910 --> 02:11:45.960
Ryan Mehta: Any questions.

1099
02:11:49.530 --> 02:11:58.020
Adrian Simental: Hello there. We modifying yesterday and just adding a toggle view light versus dark motoring wants to start all over. And

1100
02:11:59.190 --> 02:12:00.750
Adrian Simental: Just did the light mode dark mode.

1101
02:12:04.920 --> 02:12:06.660
Ryan Mehta: I kind of want you all to start all over.

1102
02:12:12.540 --> 02:12:13.890
Ryan Mehta: It'll be easier. I think

1103
02:12:22.890 --> 02:12:23.490
Alright.

1104
02:12:27.090 --> 02:12:29.220
Ryan Mehta: So any other questions about

1105
02:12:30.750 --> 02:12:33.450
Ryan Mehta: This thing to talk about the lab.

1106
02:12:38.610 --> 02:12:39.540
Talk about the lab.

1107
02:12:59.490 --> 02:13:00.180
Ryan Mehta: I'm going to push it.

1108
02:13:06.090 --> 02:13:13.980
Ryan Mehta: Was today 3233 32

1109
02:13:18.930 --> 02:13:26.490
Ryan Mehta: So lab today female list, same sort of list of things that we've been making except female bowl. Now,

1110
02:13:27.600 --> 02:13:29.790
Ryan Mehta: So you have a list component

1111
02:13:32.400 --> 02:13:35.970
Ryan Mehta: You don't have to do paging if you don't want to, but you can if you want

1112
02:13:37.410 --> 02:13:43.740
Ryan Mehta: And you have a header component that lets you toggle between light and dark things

1113
02:13:46.080 --> 02:13:49.680
Ryan Mehta: So there's not even a detail page today. You just need the list page.

1114
02:13:50.820 --> 02:13:53.010
Ryan Mehta: If you want, you can make a detail page also

1115
02:13:58.830 --> 02:13:59.730
Ryan Mehta: Yeah, that's it.

1116
02:14:03.390 --> 02:14:14.550
ryan Diffenbaugh: So besides grabbing the detail page, it seems pretty similar to what we did yesterday, but we just, we need a header component and as well as the

1117
02:14:15.960 --> 02:14:16.290
ryan Diffenbaugh: Sort of

1118
02:14:17.850 --> 02:14:18.990
ryan Diffenbaugh: Context.

1119
02:14:21.570 --> 02:14:23.370
ryan Diffenbaugh: Producer situation.

1120
02:14:25.020 --> 02:14:26.400
ryan Diffenbaugh: It wasn't at all.

1121
02:14:28.050 --> 02:14:28.380
ryan Diffenbaugh: Yeah.

1122
02:14:28.440 --> 02:14:42.690
Ryan Mehta: But, exactly. So you need a header that let you toggle between the two themes and then the producer that stores that state. And then you're probably going to want to grab that state and both your list component and your list item component

1123
02:14:43.890 --> 02:14:49.380
Ryan Mehta: Because both of those people, both of those components care about the theme like your list.

1124
02:14:50.520 --> 02:15:03.150
Ryan Mehta: Your list component needs to change the styling of the like global list and the list item component probably needs to change its own styling like it's text color needs to change. For example,

1125
02:15:04.320 --> 02:15:17.730
Ryan Mehta: So both of your components, the list and the list item will grab the current theme using some hook and then change it over class or change their style somehow based on that theme I would probably suggest using a class.

1126
02:15:19.860 --> 02:15:24.720
Ryan Mehta: So in your CSS file. You'll have to class names like

1127
02:15:25.800 --> 02:15:32.820
Ryan Mehta: Dark mode and light mode class names and then you'll switch between those classes based on the current theme.

1128
02:15:35.190 --> 02:15:36.060
That makes sense.

1129
02:15:51.420 --> 02:15:52.500
Any questions.

1130
02:15:55.170 --> 02:15:58.230
Ben Waples: As far as the file structure goes, do we just need to add

1131
02:15:59.700 --> 02:16:01.830
Ben Waples: Like the context folder with our new

1132
02:16:03.030 --> 02:16:05.670
Ben Waples: Like app context provider.

1133
02:16:07.200 --> 02:16:10.260
Ryan Mehta: Yep, that's the one new folder that context folder.

1134
02:16:16.290 --> 02:16:20.910
Ben Waples: And we should probably wrap the entire app just like, for example, right.

1135
02:16:38.340 --> 02:16:41.670
Ryan Mehta: Alright, well, should we begin or go to lunch one or the other.

1136
02:16:45.300 --> 02:16:46.950
Greg Mall: ones first. Yeah.

1137
02:16:48.690 --> 02:16:49.410
Ryan Mehta: Afternoon.

1138
02:16:50.820 --> 02:16:57.270
Ryan Mehta: Or tomorrow. Good luck on this lab don't don't overcomplicate it. Okay.

1139
02:16:58.590 --> 02:16:59.010
Annalise: Thank you.

1140
02:17:02.790 --> 02:17:03.630
Alright, see ya.

1141
02:17:05.520 --> 02:17:06.420
Greg Mall: Last words.


Ryan Mehta: All right, look good, everyone so far.

1151
02:12:18.300 --> 02:12:19.890
Ryan Mehta: Should we try some pagination

1152
02:12:24.480 --> 02:12:25.080
Alright.

1153
02:12:28.500 --> 02:12:32.760
Ryan Mehta: So let's look at our let's look at our character list.

1154
02:12:35.190 --> 02:12:40.920
Ryan Mehta: Our character list gets a list of characters from this us character hook

1155
02:12:42.420 --> 02:12:49.230
Ryan Mehta: The US character hook grabs our characters from get characters.

1156
02:12:50.280 --> 02:12:53.460
Ryan Mehta: Or service and our service.

1157
02:12:56.040 --> 02:12:57.990
Ryan Mehta: fetches from this URL.

1158
02:12:59.340 --> 02:13:05.850
Ryan Mehta: It turns out that you can also fetch. Actually, we go here. I'll show us

1159
02:13:07.410 --> 02:13:16.110
Ryan Mehta: So you can fetch from page to by adding question mark page equals two. You can fetch from page three question our page equals three, etc.

1160
02:13:17.130 --> 02:13:25.020
Ryan Mehta: So if we want to make it so we can use this same API call the fetch from a particular page, we need to add

1161
02:13:26.070 --> 02:13:27.090
Ryan Mehta: To the URL.

1162
02:13:28.440 --> 02:13:32.580
Ryan Mehta: Question mark cage equals and then send page number

1163
02:13:34.230 --> 02:13:38.130
Ryan Mehta: We're going to pass this page in through the service.

1164
02:13:40.230 --> 02:13:47.190
Ryan Mehta: Right now, if we just did this, this would break our entire application because we're not passing this page thing anywhere.

1165
02:13:48.210 --> 02:13:51.720
Ryan Mehta: Right, if we go back to our hook or hook doesn't pass page here.

1166
02:13:52.860 --> 02:14:05.730
Ryan Mehta: So this is a bit of a dangerous change. We have an existing app that works, we want to add a new parameter here, but nobody is passing it to us yet because you're really convenient thing that we can do in JavaScript.

1167
02:14:06.780 --> 02:14:20.850
Ryan Mehta: This sort of thing. If they don't pass us the page default to one by doing this, the rest of the application will will still work right. Instead of passing undefined here. They're always passing page one.

1168
02:14:22.140 --> 02:14:26.220
Ryan Mehta: So like if we go back to our application, it still works.

1169
02:14:27.360 --> 02:14:31.170
Ryan Mehta: We could also default. But what if we default to the page to

1170
02:14:32.430 --> 02:14:47.370
Ryan Mehta: Then, by default, they would be loading page to write when they don't pass anything so adding this little defaulting is a safe way to refactor this because if they forget to pass us the page will still guess that they just want page one.

1171
02:14:50.100 --> 02:14:50.640
Look good

1172
02:14:53.280 --> 02:14:56.310
Ryan Mehta: Alright. So back in our character hook

1173
02:14:59.220 --> 02:15:14.970
Ryan Mehta: We actually want to pass a page here to get characters, the US characters hook should be able to be used to affect any page that the user of the hook once. So we're going to have our hook also expect the page.

1174
02:15:17.160 --> 02:15:24.090
Ryan Mehta: We don't need a default because a service already defaults. If they don't pass us the page, the services are already doing the defaulting for us.

1175
02:15:25.380 --> 02:15:45.600
Ryan Mehta: So the user of the hook is expected to pass a page to the hook and the hook will pass that page to our get characters component anytime the page changes. We want to read fetch from this API. So we're going to make sure that the page is in this list here.

1176
02:15:49.830 --> 02:15:52.380
Ryan Mehta: That's the change to this hook this real quick. Okay.

1177
02:15:56.970 --> 02:16:11.400
Ryan Mehta: Alright, um, let's go back to our character list. Now our character list is expected to pass us characters a page. If it doesn't, it's going to default the page one, because of the service. So it all still works here.

1178
02:16:12.240 --> 02:16:20.400
Ryan Mehta: But if we pass, let's say, page five to the hook is hard coded. Now we're loading Page five

1179
02:16:21.450 --> 02:16:29.220
Ryan Mehta: From the API we can kind of see the paging is it's hooked up. We just need to make it so this numbers changeable.

1180
02:16:31.200 --> 02:16:44.160
Ryan Mehta: I'm all in this paging stuff though has nothing to do with the character list component. So I'm going to offload it to somebody else. I'm going to make it so our character list expects a page number

1181
02:16:49.980 --> 02:16:54.240
Ryan Mehta: Actually, it's not required. It just default to page one. If they don't pass it to us.

1182
02:16:56.040 --> 02:16:58.290
Ryan Mehta: So will receive a page.

1183
02:16:59.520 --> 02:17:00.120
Prop

1184
02:17:01.230 --> 02:17:03.630
Ryan Mehta: will drop that page here.

1185
02:17:06.150 --> 02:17:18.930
Ryan Mehta: So one level up now in character page character page has the option to pass character List of page prop. If it doesn't, will default the page one.

1186
02:17:20.100 --> 02:17:28.170
Ryan Mehta: But character page can always pass, let's say, Pay a page, page three, when it does pass it a page.

1187
02:17:29.310 --> 02:17:32.130
Ryan Mehta: will load the third page from the API.

1188
02:17:34.410 --> 02:17:35.640
Ryan Mehta: Or the second page.

1189
02:17:36.750 --> 02:17:43.410
Ryan Mehta: Or whatever. So we're able to pass a page to character list now and actually page through the API.

1190
02:17:45.030 --> 02:17:49.290
Ryan Mehta: And the goal now is to make some to create some way to

1191
02:17:51.030 --> 02:17:55.950
Ryan Mehta: Do this paging let's try a really simple way first and then

1192
02:17:58.050 --> 02:18:00.570
Ryan Mehta: Like a little bit better way afterwards.

1193
02:18:02.490 --> 02:18:08.280
Ryan Mehta: So I'm going to make this a multi line function from here. Let's return

1194
02:18:10.200 --> 02:18:13.230
Ryan Mehta: Fragment with our character list in it.

1195
02:18:14.910 --> 02:18:17.280
Ryan Mehta: We went to pass our character List of page.

1196
02:18:18.990 --> 02:18:26.070
Ryan Mehta: To figure out how to do. Anybody have any idea how we can create the page that we're going to pass to this character list.

1197
02:18:31.050 --> 02:18:31.740
Ryan Mehta: That state.

1198
02:18:34.230 --> 02:18:35.550
Ryan Mehta: You can create some state.

1199
02:18:38.130 --> 02:18:43.800
Ryan Mehta: We'll start our state off as one will pass this page to character list.

1200
02:18:45.000 --> 02:18:47.460
Ryan Mehta: And then like a really simple pagination component

1201
02:18:48.630 --> 02:18:49.410
Ryan Mehta: Will have a button.

1202
02:18:50.490 --> 02:18:53.730
Ryan Mehta: With a ampersand Lt.

1203
02:18:54.900 --> 02:18:57.810
Ryan Mehta: And ampersand GT

1204
02:18:58.980 --> 02:19:06.780
Ryan Mehta: When you click everybody know what these things are less than sign greater than sign. So we should end up with

1205
02:19:08.280 --> 02:19:10.230
Ryan Mehta: It's just like for error backward arrow.

1206
02:19:13.230 --> 02:19:14.400
In a little bit. Oops.

1207
02:19:17.520 --> 02:19:28.170
Ryan Mehta: We can actually use the less than sign and greater than sign because it'll mistake it for the opening or closing of an HTML tag. So you have these like special things here.

1208
02:19:30.030 --> 02:19:32.130
Ryan Mehta: All right on clicking.

1209
02:19:33.960 --> 02:19:34.710
Ryan Mehta: The

1210
02:19:36.030 --> 02:19:37.140
Ryan Mehta: Less than arrow.

1211
02:19:38.160 --> 02:19:41.820
Ryan Mehta: We want to set page to

1212
02:19:42.870 --> 02:19:44.700
Ryan Mehta: Page minus one.

1213
02:19:46.590 --> 02:19:53.460
Ryan Mehta: On clicking the greater than arrow. We're going to set page to page plus

1214
02:19:55.140 --> 02:20:09.180
Ryan Mehta: We're either going to increment the page or decorate the page pagination is really just an incremental. It's a page incremental. It's like the classic for my first React app just passing that state to the appropriate place.

1215
02:20:10.770 --> 02:20:12.690
Ryan Mehta: So quick

1216
02:20:14.820 --> 02:20:15.960
Ryan Mehta: We have pagination

1217
02:20:20.250 --> 02:20:21.000
Ryan Mehta: Some incremental

1218
02:20:23.010 --> 02:20:28.950
Ryan Mehta: I mean, there's some bugs with this like we could detriment into negative pages.

1219
02:20:30.210 --> 02:20:37.230
Ryan Mehta: Want to disable the button. We could also increment into a page greater than the last page.

1220
02:20:39.750 --> 02:20:54.570
Ryan Mehta: Whenever that is my take. Yeah. So now incrementally past the last page. So we need some constraints to make sure that we don't detriment past like less than the first page or increment past last page.

1221
02:20:56.910 --> 02:20:57.660
Ryan Mehta: Make sense

1222
02:20:58.890 --> 02:21:10.950
Ryan Mehta: I hope, like realizing that pagination, though. At its most basic level is just a button that increments a number and a button that detriments and number makes it a little bit more manageable as you're writing pagination

1223
02:21:13.650 --> 02:21:18.090
Ryan Mehta: Okay, so this is our little a really basic pagination stuff.

1224
02:21:19.830 --> 02:21:22.230
Ryan Mehta: Like, let's make it a little bit more

1225
02:21:24.180 --> 02:21:33.030
Ryan Mehta: Well, let's not make it too much more complicated. Actually, let's just say that this button, the less than button should be disabled.

1226
02:21:34.470 --> 02:21:39.240
Ryan Mehta: If page is less than or equal to one.

1227
02:21:42.450 --> 02:21:47.790
Ryan Mehta: So if we're on a page, less than or equal to one. We're going to disable

1228
02:21:48.810 --> 02:21:49.470
Ryan Mehta: Our button.

1229
02:21:52.650 --> 02:21:57.090
Ryan Mehta: Now back over here, we're on page one. I can no longer click on our

1230
02:21:58.560 --> 02:22:08.640
Adrian Simental: Bad thing it Ron does the page get reset to one in state anytime you like change pages. So if you go to the detail page when you're on to

1231
02:22:09.600 --> 02:22:10.650
Adrian Simental: And then go back

1232
02:22:11.460 --> 02:22:12.630
Ryan Mehta: It'll always go back to one.

1233
02:22:14.700 --> 02:22:21.330
Ryan Mehta: Yeah, you can avoid that if you use React router. So you can store the page and the URL.

1234
02:22:23.520 --> 02:22:24.540
Ryan Mehta: In a query for him.

1235
02:22:28.170 --> 02:22:30.060
Ron Yonker: Was that we're going to use history.

1236
02:22:30.690 --> 02:22:31.410
Ryan Mehta: That's where you

1237
02:22:31.470 --> 02:22:40.140
Ryan Mehta: Would use history. Yeah, we probably won't do that today because we only have 10 more minutes. So I think it's fine. Just having this like super basic pagination

1238
02:22:41.460 --> 02:22:46.050
Ryan Mehta: We can explore more pagination stuff tomorrow if you all want.

1239
02:22:47.700 --> 02:22:56.670
Ryan Mehta: pagination is kind of one of those things that's necessary but like so. So boring because it's like a totally solve problem every website has pagination

1240
02:22:59.130 --> 02:23:00.930
Ryan Mehta: But we could explore tomorrow if you all want.

1241
02:23:03.300 --> 02:23:06.390
Ryan Mehta: Yeah, I guess it's our basic pagination stuff.

1242
02:23:12.210 --> 02:23:15.000
Ryan Mehta: Any questions about this pageant later.

1243
02:23:21.660 --> 02:23:32.550
Ryan Mehta: Cool to totally do something like this for your lab today. If you want you can explore the query parameter to yourself, how would you history dot push a new query.

1244
02:23:33.750 --> 02:23:36.810
Ryan Mehta: But this seems like a good little simple pagination

1245
02:23:37.830 --> 02:23:39.120
Thing for now.

1246
02:23:40.770 --> 02:23:47.010
Adrian Simental: Is there a way to figure out the max page if you didn't already know that like another Rick and Morty tells you how many pages. There are

1247
02:23:49.050 --> 02:23:53.970
Adrian Simental: But yeah, would there be any way to just figure it out easily, without it like

1248
02:23:55.260 --> 02:23:56.550
Adrian Simental: If the same page with

1249
02:23:57.630 --> 02:23:59.100
Adrian Simental: Something disable the button.

1250
02:23:59.820 --> 02:24:09.540
Ryan Mehta: Yeah, so you could totally figure out if the API tells you you can when you get the first page, you can set a piece of state called max page or something. Total pages.

1251
02:24:10.260 --> 02:24:21.690
Ryan Mehta: There's, there's another little trick. If the API doesn't tell you the max page, you won't be able to say, like, what the backs page. Is that what you normally do. If the API supports it.

1252
02:24:22.980 --> 02:24:28.380
Ryan Mehta: Usually select like the page that you want to effect from and the per page count.

1253
02:24:31.560 --> 02:24:32.280
Ryan Mehta: Like this.

1254
02:24:33.660 --> 02:24:36.720
Ryan Mehta: What you can always do is grab one extra

1255
02:24:37.800 --> 02:24:38.820
Ryan Mehta: per page.

1256
02:24:40.530 --> 02:24:42.270
Ryan Mehta: But only display 10

1257
02:24:43.440 --> 02:24:53.400
Ryan Mehta: So if you only get back 10 or less from the API call. You know that you're on the last page. If you get back all 11 you know that there's one more page after you

1258
02:25:13.980 --> 02:25:17.910
Ryan Mehta: So the lab today. Let's talk about that before we run out of time.

1259
02:25:19.770 --> 02:25:21.780
Ryan Mehta: lab today is

1260
02:25:24.240 --> 02:25:26.520
Ryan Mehta: To make a list of things again.

1261
02:25:29.670 --> 02:25:35.970
Ryan Mehta: This time, you should start from scratch, maybe pick a different API than you've used before.

1262
02:25:38.190 --> 02:25:48.360
Ryan Mehta: And this time use custom hooks, as you're doing this. So, same sort of list and detail page thing with custom hooks and paging

1263
02:25:51.510 --> 02:25:52.050
And the header.

1264
02:26:07.230 --> 02:26:09.630
Ryan Mehta: So some stretches that you can do on this and

1265
02:26:10.860 --> 02:26:17.790
Ryan Mehta: You've made this app like a million times, it probably feels like it's only been like three times, but it feels like a million times.

1266
02:26:18.900 --> 02:26:27.840
Ryan Mehta: stretch yourself on the paging. There are lots of ways to handle paging lots of cool ways like putting the page in the URL bar. Think about how you would do that.

1267
02:26:33.480 --> 02:26:43.740
Ryan Mehta: That's all I can think about for this particular out. That would be like super stretching. Again, you can write it in TypeScript. If you want to if you want to try this type of thing with TypeScript.

1268
02:26:48.270 --> 02:26:50.400
Ryan Mehta: So that could be a nice little stretch

1269
02:26:51.540 --> 02:26:52.800
Ryan Mehta: That he can do.

1270
02:26:56.940 --> 02:26:58.020
Ryan Mehta: That's all I can think of.

1271
02:27:05.040 --> 02:27:12.030
Ryan Mehta: You can also make it searchable. So a lot of these API's like this. Rick and Morty API lets you search through it as well.

1272
02:27:15.240 --> 02:27:16.710
Ryan Mehta: So there are queries.

1273
02:27:18.810 --> 02:27:21.120
Ryan Mehta: That you can give. Most of these things.

1274
02:27:23.280 --> 02:27:34.710
Ryan Mehta: Filter character. So, like this one, you can do like characters, where the name is Rick and the status alive for like where the status is alive. So at the top, kind of like the pokey X right like

1275
02:27:35.220 --> 02:27:44.040
Ryan Mehta: Can you make it so you can get only Pokemon that are fire Pokemon or get only characters who are alive or dead or

1276
02:27:45.210 --> 02:27:46.830
Ryan Mehta: Only characters that are human.

1277
02:27:49.560 --> 02:27:54.360
Ryan Mehta: So add some of that sort of stuff to your list of things would also be a nice challenge.

1278
02:28:00.600 --> 02:28:04.290
Ryan Mehta: Just so you all know we're doing another lists of thing420 --> 02:19:55.560
Ryan Mehta: That looks good.

1218
02:20:02.940 --> 02:20:04.590
And apply the class name here.

1219
02:20:08.370 --> 02:20:10.590
Ryan Mehta: Now, we should have like side by side.

1220
02:20:14.550 --> 02:20:15.300
To us

1221
02:20:17.280 --> 02:20:18.840
Ryan Mehta: So side by side things we can

1222
02:20:20.280 --> 02:20:24.000
Ryan Mehta: Change this to DC and this to North Carolina.

1223
02:20:26.550 --> 02:20:27.570
Ryan Mehta: They look

1224
02:20:29.640 --> 02:20:30.510
Ryan Mehta: Identical.

1225
02:20:35.040 --> 02:20:37.530
Ryan Mehta: Yeah, they look identical to my eyes.

1226
02:20:39.240 --> 02:20:44.760
Ryan Mehta: They have to because the last article is the same. So that means every article before is probably to say

1227
02:20:46.500 --> 02:20:59.580
Ryan Mehta: Which is really disappointing that this whole application is totally useless because every single read it doesn't matter the location. They're all it's all the same.

1228
02:20:59.940 --> 02:21:00.570
Annalise: Oh, no.

1229
02:21:01.350 --> 02:21:01.680
Ryan Mehta: I know

1230
02:21:03.420 --> 02:21:04.650
Thomas Stussi: Something about write it

1231
02:21:06.060 --> 02:21:07.260
As a thought experiment.

1232
02:21:10.830 --> 02:21:12.780
Adrian Simental: Try bigger subreddit, just do all

1233
02:21:15.510 --> 02:21:15.960
Oh,

1234
02:21:21.180 --> 02:21:21.690
Annalise: Fail.

1235
02:21:23.310 --> 02:21:25.710
Okada dimensionally. Okay.

1236
02:21:27.630 --> 02:21:28.080
Ryan Mehta: Yeah.

1237
02:21:28.740 --> 02:21:29.460
Thomas Stussi: There we go.

1238
02:21:30.690 --> 02:21:32.040
Ryan Mehta: For all the still the same, right.

1239
02:21:34.050 --> 02:21:36.390
Ryan Mehta: Garbage. This is the garbage application.

1240
02:21:45.150 --> 02:21:46.200
Ryan Mehta: Well, we tried it.

1241
02:21:47.460 --> 02:21:50.250
Ryan Mehta: I guess there's no point in making these other pages now.

1242
02:21:52.620 --> 02:21:58.110
Thomas Stussi: In theory, what a potential like international version, then maybe different

1243
02:21:59.280 --> 02:22:00.210
Ryan Mehta: Yeah, we could definitely

1244
02:22:00.690 --> 02:22:01.590
Thomas Stussi: Not but

1245
02:22:03.330 --> 02:22:10.890
Ryan Mehta: Let's try it. So let's get these international ones and replace it with our states and maybe

1246
02:22:11.220 --> 02:22:15.090
Patrick Wilson: What if you search for something really specific, like the state name.

1247
02:22:15.660 --> 02:22:17.640
Ryan Mehta: Yeah, like like Portland or something.

1248
02:22:17.730 --> 02:22:18.390
Yeah.

1249
02:22:19.800 --> 02:22:21.690
Thomas Stussi: There is our Portland.

1250
02:22:23.430 --> 02:22:28.560
Ryan Mehta: And we did, like, what if we check it out in

1251
02:22:31.020 --> 02:22:32.520
Ryan Mehta: The sun alphabetical order.

1252
02:22:36.960 --> 02:22:37.770
Ryan Mehta: So painful.

1253
02:22:37.800 --> 02:22:40.020
Patrick Wilson: So Oregon was like second from the bottom.

1254
02:22:41.130 --> 02:22:42.690
Patrick Wilson: Would be a good one to compare it to.

1255
02:22:50.280 --> 02:22:53.580
Thomas Stussi: Be the same. I think maybe not.

1256
02:22:53.970 --> 02:22:58.740
Ryan Mehta: Yep. Oh, there's, there's one difference. The some different somewhere.

1257
02:22:58.980 --> 02:23:00.210
Ryan Mehta: Okay, it works.

1258
02:23:00.450 --> 02:23:01.170
Ryan Mehta: It works.

1259
02:23:02.670 --> 02:23:04.200
Ryan Mehta: There is some difference.

1260
02:23:04.440 --> 02:23:05.250
Annalise: Are you sure

1261
02:23:06.360 --> 02:23:09.330
Ryan Mehta: Just because the last one is different. So there must be

1262
02:23:13.110 --> 02:23:14.010
Ryan Mehta: But where

1263
02:23:14.070 --> 02:23:17.640
Annalise: Does it not just like pull one extra article

1264
02:23:19.440 --> 02:23:21.540
Ryan Mehta: Oh, is that what it is I am

1265
02:23:22.650 --> 02:23:23.280
Annalise: No, I'm

1266
02:23:24.990 --> 02:23:25.560
Ryan Mehta: Could be.

1267
02:23:26.430 --> 02:23:29.190
Patrick Wilson: Yep, I already voted on the left.

1268
02:23:33.450 --> 02:23:34.320
Patrick Wilson: scroll back up.

1269
02:23:35.430 --> 02:23:36.540
Ryan Mehta: Already

1270
02:23:37.800 --> 02:23:38.910
Patrick Wilson: Oh, no, no, man.

1271
02:23:40.650 --> 02:23:42.390
Ryan Mehta: What is different.

1272
02:23:43.980 --> 02:23:47.310
Annalise: Last one. The protesters Tracy kill my granddaughter.

1273
02:23:50.820 --> 02:23:54.810
Ryan Mehta: Yeah, so we don't care about that one, but and flow.

1274
02:23:55.410 --> 02:23:55.920
Ryan Mehta: About that.

1275
02:23:58.290 --> 02:24:00.150
Ryan Mehta: Okay, so if it's a single difference

1276
02:24:00.210 --> 02:24:03.330
Annalise: It's not like the latest article or

1277
02:24:04.830 --> 02:24:05.880
Annalise: I don't understand.

1278
02:24:08.340 --> 02:24:09.210
Annalise: Pennsylvania.

1279
02:24:18.960 --> 02:24:23.520
Ryan Mehta: See who also started day drinking tomorrow. Oh, tonight, that's

1280
02:24:24.600 --> 02:24:28.470
Ryan Mehta: But this one doesn't have the grandson arson one but back in Florida.

1281
02:24:29.670 --> 02:24:32.880
Ryan Mehta: They have the grandson Arsenal one right

1282
02:24:34.740 --> 02:24:35.820
Ryan Mehta: Oh, he disappeared.

1283
02:24:35.970 --> 02:24:36.960
Ryan Mehta: It's no longer there.

1284
02:24:37.650 --> 02:24:43.770
Ben Waples: There was one that said, Don't let your kids something and it looked like that was the lesson but

1285
02:24:47.670 --> 02:24:49.920
Ryan Mehta: I guess they have different priorities.

1286
02:24:51.570 --> 02:24:55.680
Ryan Mehta: So I guess if they if we ranked them slightly different ranks.

1287
02:24:57.990 --> 02:24:59.340
Annalise: Or is it based off of, like,

1288
02:24:59.430 --> 02:25:11.280
Annalise: The editors ranking system like how many uploads it got but it's still the same content. So is it like an oppo based off of like that location or something.

1289
02:25:12.150 --> 02:25:22.230
Ryan Mehta: Totally can be, I mean it's getting the top 100 from both locations. So I guess it's possible that they're different, but they seem so similar.

1290
02:25:22.590 --> 02:25:30.900
Annalise: Well, it's not that unheard of to read it floating around all the have voted articles, because that's just going to continually be

1291
02:25:32.490 --> 02:25:34.350
Advertising, no matter where you're at.

1292
02:25:36.990 --> 02:25:39.690
Ryan Mehta: All right, let's try to make this international really quick.

1293
02:25:40.260 --> 02:25:42.540
Ryan Mehta: And see if that gets us any

1294
02:25:46.740 --> 02:25:47.910
Ryan Mehta: Different stuff.

1295
02:25:51.810 --> 02:25:52.770
Space.

1296
02:25:54.240 --> 02:25:56.730
Ryan Mehta: And we're going to replace that with quotes

1297
02:26:08.490 --> 02:26:08.880
Ryan Mehta: Oh,

1298
02:26:10.440 --> 02:26:10.740
Ryan Mehta: Equal

1299
02:26:17.760 --> 02:26:18.300
Ryan Mehta: We don't want

1300
02:26:20.220 --> 02:26:20.730
Ryan Mehta: Quietly

1301
02:26:22.380 --> 02:26:25.110
Ryan Mehta: Can you just find a replace on a single line.

1302
02:26:37.410 --> 02:26:37.800
Ryan Mehta: Here.

1303
02:26:55.110 --> 02:26:57.210
Ryan Mehta: Replace it with a comma.

1304
02:27:04.170 --> 02:27:04.560
Ryan Mehta: OK.

1305
02:27:07.920 --> 02:27:13.980
Ryan Mehta: OK, let's try this. Now we have international version by replacing our state logic.

1306
02:27:20.280 --> 02:27:22.020
Ryan Mehta: Us versus

1307
02:27:30.060 --> 02:27:34.320
Ryan Mehta: They are exactly the same. That's, yeah. This is garbage.

1308
02:27:35.010 --> 02:27:36.060
Ryan Mehta: It's total garbage.

1309
02:27:38.580 --> 02:27:39.840
Ryan Mehta: It's okay. We all have fun.

1310
02:27:43.920 --> 02:27:45.450
Annalise: I'm talking about your app that way.

1311
02:27:50.250 --> 02:27:54.450
Annalise: I feel like it just heard like the first time you like builds an app, and then it just like

1312
02:27:57.420 --> 02:27:58.860
Annalise: The younger you know

1313
02:28:01.830 --> 02:28:02.970
Ryan Mehta: Yeah, if I could go back

1314
02:28:07.410 --> 02:28:07.800
And

1315
02:28:12.240 --> 02:28:12.750
Ryan Mehta: Yeah.

1316
02:28:14.250 --> 02:28:15.450
Ryan Mehta: Okay, well,

1317
02:28:17.760 --> 02:28:19.140
Ryan Mehta: Well, any questions.

1318
02:28:33.600 --> 02:28:35.010
Annalise: Just deeply relatable.

1319
02:28:40.830 --> 02:28:41.910
Annalise: Story of my life.

1320
02:28:44.610 --> 02:28:46.830
Ryan Mehta: Why would they put this in their API docs.

1321
02:28:47.130 --> 02:28:49.290
Annalise: I don't know. But were you channeling me

1322
02:28:52.350 --> 02:28:53.790
Annalise: Toby, what would have happened to me.

1323
02:28:58.380 --> 02:29:00.810
Greg Mall: It's like is an elaborate prank to get you to make it

1324
02:29:05.850 --> 02:29:08.400
Ryan Mehta: Alright, so, yeah. The lab today.

1325
02:29:09.420 --> 02:29:10.650
Ryan Mehta: Let's take a look at that.

1326
02:29:11.400 --> 02:29:12.450
Annalise: The garbage lab.

1327
02:29:14.130 --> 02:29:14.850
Ryan Mehta: It was nothing.

1328
02:29:15.600 --> 02:29:18.960
Ryan Mehta: Not much. Well, there's not much writing to it.

1329
02:29:19.260 --> 02:29:22.530
Ryan Mehta: It's a full stack application with at least one model.

1330
02:29:23.100 --> 02:29:38.790
Ryan Mehta: So same thing that you did before tomorrow will actually write a full stack up together. So you can see that. Do you want to you can get started on it today or wait for tomorrow. It's not due until Monday, same as the GitHub viewer that you started on yesterday.

1331
02:29:40.290 --> 02:29:42.300
Ryan Mehta: So continue working on the GitHub viewer.

1332
02:29:42.420 --> 02:29:43.710
Ryan Mehta: If you haven't finished it.

1333
02:29:46.830 --> 02:29:47.160
Yeah.

1334
02:29:49.620 --> 02:29:53.010
Ryan Mehta: It's gonna probably be super hard to focus on lab time

1335
02:29:54.060 --> 02:29:54.840
Ryan Mehta: I'm guessing.

1336
02:29:57.780 --> 02:30:00.420
Ron Yonker: Let's see. Yeah, entirely

1337
02:30:03.120 --> 02:30:05.910
Ryan Mehta: But that's why we only have these two labs.

1338
02:30:08.040 --> 02:30:15.240
Ryan Mehta: And they're not due to Monday. So hopefully you can find some time to do them. Or if you want a distraction. You have some distraction.

1339
02:30:18.120 --> 02:30:19.110
Greg Mall: I need a distraction.

1340
02:30:21.690 --> 02:30:24.030
Annalise: I mean, that was the funniest distraction.

1341
02:30:27.060 --> 02:30:27.660
Greg Mall: Pretty awesome.

1342
02:30:27.840 --> 02:30:28.680
Annalise: I needed that.

1343
02:30:33.240 --> 02:30:34.410
Sarah Rector: Was a really good idea.

1344
02:30:37.080 --> 02:30:37.620
Greg Mall: To me.

1345
02:30:39.000 --> 02:30:40.980
Annalise: And I don't think it's garbage, but

1346
02:30:44.010 --> 02:30:56.040
Ryan Mehta: It's okay. I mean, I've thrown away more code than I like kept in my life. So I'm totally fine with it. That's a written more bugs and like working features in my life. So that would be fine with that. Also,

1347
02:30:57.810 --> 02:30:59.940
Annalise: Well, good to know.

1348
02:31:01.080 --> 02:31:03.810
Ryan Mehta: Like that. It's like the nature of this sort of job.

1349
02:31:03.930 --> 02:31:07.590
Ryan Mehta: You just right way more bugs than actual good things.

1350
02:31:12.720 --> 02:31:16.380
Ryan Mehta: But it's not too bad because that's like exactly what keeps you with the job.

1351
02:31:19.440 --> 02:31:21.600
Ryan Mehta: They don't fire me for writing bugs.

1352
02:31:23.220 --> 02:31:27.330
Annalise: So so self fulfilling prophecy there. Yeah, yeah.

1353
02:31:27.510 --> 02:31:28.830
Greg Mall: That's good. Yeah.

1354
02:31:29.130 --> 02:31:31.860
Annalise: Cool. At least they can't say it and do my job.

1355
02:31:34.980 --> 02:31:38.430
Michelle Stermitz: Ryan is the lab using redux or is it open ended again.

1356
02:31:38.610 --> 02:31:40.230
Ryan Mehta: Like open ended. Yeah.

1357
02:31:45.420 --> 02:31:50.700
Ryan Mehta: Alright, cool. Well, have a good lunch, see you all tomorrow or in the afternoon.

1358
02:31:55.860 --> 02:31:56.700
Brooke Perkins (she/her): Hi everybody.

1359
02:31:57.000 --> 02:31:58.110
Greg Mall: Have a good lunch.

g.

773
01:55:24.450 --> 01:55:26.190
So we'll just have this single bundle.

774
01:55:30.870 --> 01:55:33.510
Ryan Mehta: Check it out now totally unexpected.

775
01:55:34.590 --> 01:55:35.160
Ryan Mehta: What happened.

776
01:55:36.990 --> 01:55:45.300
Ryan Mehta: So we have our one line of code are simple console log, we add another console log and web pack went a bit crazy.

777
01:55:50.250 --> 01:55:58.050
Ryan Mehta: So it did a few things it wrapped our entire application in a function. This is called an iffy. By the way,

778
01:56:06.870 --> 01:56:07.350
Let's see.

779
01:56:12.150 --> 01:56:12.630
If

780
01:56:15.210 --> 01:56:19.710
Ryan Mehta: You see, yeah. Immediately invoked function expression.

781
01:56:21.390 --> 01:56:25.290
Ryan Mehta: So it's just a function that you define that gets immediately invoked.

782
01:56:26.430 --> 01:56:31.830
Ryan Mehta: You can see that here we defined this function and then immediately invoke it

783
01:56:33.180 --> 01:56:47.310
Ryan Mehta: This is just a way to make it so we don't have global variables. So right now this numbers is global. This this numbers here is now only accessible within this arrow function, not in the entire

784
01:56:48.450 --> 01:56:56.640
Ryan Mehta: Got the entire window. Also, you'll notice that it renamed numbers to. Oh, so it's trying to be as efficient as possible.

785
01:56:57.690 --> 01:57:06.150
Ryan Mehta: It does that by saving space on characters that changes variable names to single letter variable names when possible.

786
01:57:07.680 --> 01:57:30.180
Ryan Mehta: Um, it doesn't save a ton of space, but each character here is like a little bit less that the browser has to download when we send this file, so it has to download. I don't know 123456 times 318 less characters, plus all the spaces and everything that I would have had to without web pack.

787
01:57:31.650 --> 01:57:32.820
Ryan Mehta: So, oh, is our

788
01:57:32.850 --> 01:57:33.960
array of numbers.

789
01:57:35.280 --> 01:57:36.630
Ryan Mehta: The console logs.

790
01:57:37.710 --> 01:57:38.490
So here

791
01:57:42.630 --> 01:57:46.500
Ben Waples: Is it using the if he because when it is like

792
01:57:48.120 --> 01:58:00.750
Ben Waples: bringing all of the JavaScript function JavaScript files into this one bundle file that way, like the numbers on the left side, wanting to get mixed up with the numbers and another file and it would have a compiler.

793
01:58:01.680 --> 01:58:11.790
Ryan Mehta: Totally. Also, it doesn't know if there's another numbers from like a different JavaScript file that are importing into our HTML page, it only knows about itself.

794
01:58:12.270 --> 01:58:12.570
Ben Waples: Right.

795
01:58:12.660 --> 01:58:14.490
Ryan Mehta: So we could have to script tags. Right.

796
01:58:14.490 --> 01:58:19.050
Ryan Mehta: One that defines numbers and then this one would also define numbers and they would conflict with each other.

797
01:58:20.070 --> 01:58:24.750
Ryan Mehta: So yeah, that's why it's wrapping this up to prevent that sort of thing. Sweet. All right.

798
01:58:29.340 --> 01:58:32.370
Ryan Mehta: All right, what do you any thoughts on what will happen if we do

799
01:58:48.450 --> 01:58:48.930
Ryan Mehta: This out

800
01:58:50.250 --> 01:58:51.090
Thomas Stussi: It's just gonna be

801
01:58:53.550 --> 01:58:53.850
Ryan Mehta: Terrible.

802
01:58:55.560 --> 01:58:56.580
Ryan Mehta: What if we did

803
01:58:56.610 --> 01:58:57.330
That

804
01:59:04.740 --> 01:59:06.870
Ryan Mehta: So now we have a Lion King. Yeah.

805
01:59:09.450 --> 01:59:11.220
Ryan Mehta: So it didn't do console I 11

806
01:59:11.220 --> 01:59:11.850
Ron Yonker: Twice.

807
01:59:11.970 --> 01:59:14.790
Ryan Mehta: I've noticed that we use this function twice. So it just

808
01:59:15.240 --> 01:59:21.900
Ryan Mehta: rewrote our code a little bit. We're back inside of these fees it renamed or add function. Oh.

809
01:59:23.910 --> 01:59:25.350
Ryan Mehta: And then it uses. Oh.

810
01:59:26.820 --> 01:59:27.750
And uses. Oh.

811
01:59:28.950 --> 01:59:30.780
Ron Yonker: It's from the looks of it.

812
01:59:33.660 --> 01:59:34.020
Ryan Mehta: Well,

813
01:59:34.050 --> 01:59:34.770
Ron Yonker: This is

814
01:59:35.100 --> 01:59:36.870
Ryan Mehta: The function ends race here.

815
01:59:39.840 --> 01:59:41.430
And then the console log start

816
01:59:44.010 --> 01:59:45.750
Thomas Stussi: Is Oh, just like

817
01:59:46.800 --> 01:59:50.850
Thomas Stussi: Whatever, it can name it, that's the smallest number of characters.

818
01:59:51.720 --> 01:59:54.030
Ryan Mehta: Yep. So if we added another function like

819
01:59:54.180 --> 01:59:55.020
Function.

820
01:59:57.660 --> 01:59:58.320
Ryan Mehta: Fact,

821
02:00:00.600 --> 02:00:02.460
Ryan Mehta: It pick another single digit

822
02:00:06.450 --> 02:00:06.870
Letter.

823
02:00:15.360 --> 02:00:19.440
Ryan Mehta: See what its second favorite clearly. Oh, is what packs favorite letter.

824
02:00:20.490 --> 02:00:22.740
Ryan Mehta: web pack second favorite letter is an

825
02:00:24.450 --> 02:00:26.190
Ryan Mehta: Oh yeah, we kind of knew that from these

826
02:00:31.560 --> 02:00:37.380
Ryan Mehta: Yeah, you can see how crazy it would get. I mean, it's already impossible to read or nearly impossible to read

827
02:00:38.850 --> 02:00:39.120
With

828
02:00:40.350 --> 02:00:42.150
Ryan Mehta: Such a small amount of code.

829
02:00:42.900 --> 02:00:48.180
Patrick Wilson: Why wouldn't it just compile it is console log 11 console log 11

830
02:00:50.460 --> 02:00:51.030
Ryan Mehta: My house.

831
02:00:51.930 --> 02:00:53.280
Ryan Mehta: It just wasn't smart enough

832
02:00:54.660 --> 02:01:02.400
Ryan Mehta: That would totally be a better thing to do. It just saw that we use the function twice. So to assume that it needed to actually define the function

833
02:01:04.590 --> 02:01:10.200
Thomas Stussi: So we're back. It's like a conditional that's like, hey, if they're if they use the function more than once.

834
02:01:11.310 --> 02:01:12.240
Thomas Stussi: Just do the whole thing.

835
02:01:13.350 --> 02:01:13.620
Ryan Mehta: Yeah.

836
02:01:14.820 --> 02:01:15.330
Thomas Stussi: Exactly.

837
02:01:22.410 --> 02:01:22.740
Cool.

838
02:01:24.390 --> 02:01:32.070
Ryan Mehta: All right, let's add a couple of plugins to this. I'm going to go back to our hash version.

839
02:01:34.050 --> 02:01:35.850
Ryan Mehta: Because we don't need to do side by side.

840
02:01:37.230 --> 02:01:45.270
Ryan Mehta: When we have this hash version. Every time we run our build, we get a new bundle file here.

841
02:01:46.470 --> 02:01:52.830
Ryan Mehta: To prevent that we can use that clean web pack plugin, which I'm going to install

842
02:02:03.840 --> 02:02:07.560
Ryan Mehta: So you can add a plugins array.

843
02:02:10.590 --> 02:02:15.690
Ryan Mehta: To this plugins array we can add our clean web pack plugin.

844
02:02:18.750 --> 02:02:27.300
Ryan Mehta: That should be important. Up here at the top. Now, when we bundle our code. It's going to first delete all of the

845
02:02:28.770 --> 02:02:36.690
Ryan Mehta: Everything inside of this disk directory before ribbons. So let's change our code slightly forget a new bundle.

846
02:02:37.920 --> 02:02:39.690
Ryan Mehta: That by MTM build

847
02:02:41.010 --> 02:02:43.980
Ryan Mehta: It first deletes everything. Hey,

848
02:02:46.980 --> 02:02:49.260
Ryan Mehta: Hey, where did that, where did our plugin go

849
02:02:53.130 --> 02:02:58.350
Our plugin disabled. Okay. I think this actually takes the configuration.

850
02:03:05.340 --> 02:03:07.410
Ryan Mehta: Let's just, let's just read the documentation.

851
02:03:10.740 --> 02:03:13.050
Ryan Mehta: Used to not take any configuration, but

852
02:03:15.480 --> 02:03:16.020
It's fine.

853
02:03:19.980 --> 02:03:24.270
Ryan Mehta: I love it that these things just change. Yeah, what the heck.

854
02:03:25.560 --> 02:03:26.310
Ryan Mehta: To be t

855
02:03:29.790 --> 02:03:32.310
Ryan Mehta: What was the error message. Again, it's

856
02:03:34.500 --> 02:03:36.780
Ryan Mehta: Options output path.

857
02:03:38.130 --> 02:03:40.380
Ryan Mehta: Not defined plugin disabled.

858
02:03:47.610 --> 02:03:48.060
Path.

859
02:04:09.450 --> 02:04:17.790
Ryan Mehta: Relative to web packs output that path directory if outside of what packs output path directory useful path path join

860
02:04:20.460 --> 02:04:25.440
Ryan Mehta: Note for blue options. They are unsafe test initially with dry true

861
02:04:31.470 --> 02:04:33.270
Ryan Mehta: How come they don't have it in their example.

862
02:04:48.660 --> 02:04:50.580
Ryan Mehta: Options past not defined.

863
02:04:52.980 --> 02:04:54.090
Ryan Mehta: Auctions out

864
02:05:04.020 --> 02:05:05.580
Ryan Mehta: They do have it this one.

865
02:05:08.280 --> 02:05:11.490
Ryan Mehta: Okay, I get it, I get it.

866
02:05:12.720 --> 02:05:14.700
Ryan Mehta: We need that at our path here.

867
02:05:19.830 --> 02:05:24.030
Ryan Mehta: And I think because of that will need to import this

868
02:05:35.910 --> 02:05:37.380
Ryan Mehta: Okay, let's try it.

869
02:05:41.940 --> 02:05:46.020
Ryan Mehta: Works now. So to use this plugin. Now you have to have this path.

870
02:05:47.310 --> 02:05:49.740
Ryan Mehta: The path part is telling you which directory

871
02:05:49.770 --> 02:05:50.100
Yep.

872
02:05:51.870 --> 02:05:52.770
Ron Yonker: I'm sorry, finish.

873
02:05:53.730 --> 02:05:56.280
Ryan Mehta: This past thing is telling it which directory

874
02:05:57.330 --> 02:06:07.590
Ryan Mehta: To put these things in. So if we didn't want it to be disk, like we wanted to be build this is what create React app uses build it all now.

875
02:06:07.650 --> 02:06:08.670
Ryan Mehta: Output into a

876
02:06:08.820 --> 02:06:10.860
Build directory

877
02:06:12.420 --> 02:06:17.520
Ryan Mehta: So path. Let's change the directory from this to whatever we want.

878
02:06:19.980 --> 02:06:27.210
Ron Yonker: So my question was what the double under her score on parameter name is doing here.

879
02:06:27.990 --> 02:06:31.290
Ryan Mehta: Yeah, this is a thing built into node.

880
02:06:33.120 --> 02:06:40.800
Ryan Mehta: So whenever you're in a node program, you can always get the directory that you're in with this.

881
02:06:42.000 --> 02:06:42.330
Ryan Mehta: Thing.

882
02:06:47.730 --> 02:06:49.500
Ryan Mehta: So like if we did

883
02:07:02.550 --> 02:07:05.970
Ryan Mehta: It just gives us like your path where you currently are.

884
02:07:07.740 --> 02:07:09.300
Ryan Mehta: A global variable and node.

885
02:07:13.980 --> 02:07:30.750
Ryan Mehta: So, underscore, underscore dirt name is like the directory of our web pack config as the location of it and then append to that just saying put all of the bundled files into this disk folder relative to where

886
02:07:30.780 --> 02:07:32.640
Ron Yonker: Our web pack config geniuses.

887
02:07:38.400 --> 02:07:48.270
Ryan Mehta: Okay. So anyways, without this thing here, we would build up bundles. We add different code bundle again.

888
02:07:49.980 --> 02:07:51.000
Ryan Mehta: We get a new

889
02:07:55.590 --> 02:07:56.400
I don't want that.

890
02:07:59.820 --> 02:08:01.410
Ryan Mehta: We get a new bundled file.

891
02:08:03.360 --> 02:08:08.820
Ryan Mehta: And then change the code. Again, we get a new bundled file.

892
02:08:10.920 --> 02:08:22.380
Ryan Mehta: But once I add this clean web pack plugin and run build it will first clear out all of the old bundled files and leave us only with our latest bundle.

893
02:08:24.240 --> 02:08:26.010
Ryan Mehta: So that's the whole point of that plugin.

894
02:08:27.900 --> 02:08:28.590
Ryan Mehta: See you. Okay.

895
02:08:31.170 --> 02:08:32.910
Ryan Mehta: All right, there's another plugin.

896
02:08:35.010 --> 02:08:36.330
Ryan Mehta: HTML.

897
02:08:38.970 --> 02:08:41.160
Ryan Mehta: HTML web pack plugin.

898
02:08:46.230 --> 02:08:54.330
Ryan Mehta: This one will take a template HTML file. So we'll put our template HTML file and source will call it index.

899
02:08:55.710 --> 02:08:57.660
Ryan Mehta: dot HTML and

900
02:08:59.430 --> 02:09:01.320
Ryan Mehta: Will create an HTML file.

901
02:09:06.360 --> 02:09:06.960
Looking at

902
02:09:13.020 --> 02:09:15.810
Ryan Mehta: So have our little template HTML file here.

903
02:09:17.220 --> 02:09:34.830
Ryan Mehta: I'm back in our web pack config can can add our HTML web pack plugin. We give it a template, the location of a template index dot html file. Ours is inside of source index dot HTML.

904
02:09:36.240 --> 02:09:52.530
Ryan Mehta: And we're telling web pack here to use this index dot html file as a source or as a template, when we go and build afterwards inside of our disk folder. It'll now include our index dot html file.

905
02:09:53.670 --> 02:10:16.500
Ryan Mehta: So this one is our template. If we open up the bundled one you'll see it does kind of the same thing that happened to our JavaScript. But for HTML, it puts these all in a single line, they call it ugly. If I ugly fit our HTML, but at the end it inserted district tab for us.

906
02:10:17.730 --> 02:10:20.160
Ryan Mehta: With our bundled j s in here.

907
02:10:21.360 --> 02:10:25.380
Ryan Mehta: So we should be able to run this like using live server, for example.

908
02:10:26.490 --> 02:10:27.150
Let's try it.

909
02:10:29.070 --> 02:10:30.120
Live server.

910
02:10:32.340 --> 02:10:33.240
Why server.

911
02:10:37.560 --> 02:10:40.110
Ryan Mehta: Know, bring up down here.

912
02:10:42.090 --> 02:10:51.960
Ryan Mehta: Here's our, our web pack application, we should also have all those console logs from all of our fancy addition functions in the console.

913
02:10:57.690 --> 02:11:09.930
Ryan Mehta: So we successfully bundled our HTML and injected our JavaScript file here, this sort of plugin is super handy because as we change our JavaScript.

914
02:11:11.160 --> 02:11:12.120
Ryan Mehta: Another line.

915
02:11:13.140 --> 02:11:14.790
Ryan Mehta: And bundle again.

916
02:11:16.350 --> 02:11:27.540
Ryan Mehta: The bundled file at the end is going to have to change every time we change our JavaScript. It's really nice to have something automatically changed this script tag for us.

917
02:11:28.980 --> 02:11:30.060
Every time we build

918
02:11:33.540 --> 02:11:36.750
Ryan Mehta: So that's what this plugin is doing for us.

919
02:11:40.020 --> 02:11:40.500
Ryan Mehta: Okay.

920
02:11:42.750 --> 02:11:43.290
Ryan Mehta: All right.

921
02:11:46.680 --> 02:11:59.640
Ryan Mehta: There's a bunch of other plugins or, let's see, I guess there's a bunch of other plugins that you can use. These are the two ones that I mainly use assays. The dot and plugin, but I'm not going to cover that this second

922
02:12:00.720 --> 02:12:04.530
Ryan Mehta: Let's go on to these loaders. So we have module.

923
02:12:06.930 --> 02:12:07.350
Ron Yonker: Ryan.

924
02:12:09.570 --> 02:12:16.710
Ron Yonker: How does the he know web pack plugin. How does that relate to generating the hash.

925
02:12:17.880 --> 02:12:30.900
Ryan Mehta: It doesn't generate the hash, but it waits for this bundled file to get created. And then uses the index dot HTML template moves it over here and then

926
02:12:31.020 --> 02:12:36.210
Ryan Mehta: adds this script tag based on the output and JavaScript bundle.

927
02:12:37.620 --> 02:12:38.400
Ron Yonker: Got it. Thank you.

928
02:12:42.870 --> 02:12:46.590
Ryan Mehta: Okay, so we have some rules. Let's use our Babel.

929
02:12:48.420 --> 02:12:55.920
Ryan Mehta: Babel loader. The Babylonian is the hardest one to add because it's jus make sure that we can submit the form, so we're able to. Can everyone hear my daughter screaming your head off. Yeah.

1015
01:58:26.970 --> 01:58:27.150
Yeah.

1016
01:58:29.070 --> 01:58:30.630
ryan Diffenbaugh: Hard time. It's a

1017
01:58:30.750 --> 01:58:31.080
Door.

1018
01:58:33.930 --> 01:58:34.260
Ryan Mehta: Yeah.

1019
01:58:38.280 --> 01:58:46.020
Ryan Mehta: Alright, so, yeah, we were able to change the state. Now we want to be able to submit this form, have a button get links.

1020
01:58:47.550 --> 01:58:51.660
Ryan Mehta: On clicking the button, it's going to trigger our form submit

1021
01:58:52.770 --> 01:58:58.440
Ryan Mehta: On submitting. We're going to trigger a candle submit function.

1022
01:59:02.850 --> 01:59:11.490
Ryan Mehta: And the first thing that will do is prevent the faults and then console log our URL.

1023
01:59:12.540 --> 01:59:15.720
Ryan Mehta: Just to make sure that everything's sort of hooked up correctly.

1024
01:59:22.830 --> 01:59:24.570
Ryan Mehta: All right, let's go back to our form.

1025
01:59:26.160 --> 01:59:37.410
Ryan Mehta: We can type into this box the URL changes when we click on our get links button. We want to make sure that it prints out what we have in the box, which is good.

1026
01:59:38.820 --> 01:59:43.680
Ryan Mehta: So all sort of the wiring of our component is done.

1027
01:59:44.700 --> 01:59:50.940
Ryan Mehta: The next thing that we want to do is when we handle this summit, we want to make a factual request.

1028
01:59:51.960 --> 01:59:55.080
Ryan Mehta: To that URL that we were just looking at.

1029
01:59:56.340 --> 01:59:58.410
Ryan Mehta: So let me write the curl.

1030
02:00:01.050 --> 02:00:19.320
Ryan Mehta: Here in a comment. So we can convert the curl to a fetch being able to convert these curls to a fetch is something that you should learn because so many APIs will give you the curl line and then you're going to have to translate the Caroline into JavaScript code.

1031
02:00:20.490 --> 02:00:30.540
Ryan Mehta: So we'll do that. Our fetch is going to make a request to this URL over here URL intelligence rapid API com

1032
02:00:31.590 --> 02:00:36.120
Ryan Mehta: Stuff. So I'm just going to copy that and drop it into our fetch.

1033
02:00:38.220 --> 02:00:49.050
Ryan Mehta: This part here after the target equals is where we want to insert the URL that the user typed into our form. So I'm going to put back tix here.

1034
02:00:50.370 --> 02:00:59.160
Ryan Mehta: And change this to this stop State DOT URL, the URL that we want to get the links for

1035
02:01:01.950 --> 02:01:18.180
Ryan Mehta: We also want to make sure that we add a header. So dash HS for headers, the header name is X rapid API key so add headers, you want to add a header called X rapid

1036
02:01:19.650 --> 02:01:20.610
API.

1037
02:01:21.990 --> 02:01:24.270
Ryan Mehta: And the value is this thing here.

1038
02:01:30.840 --> 02:01:32.310
Ryan Mehta: And then

1039
02:01:33.270 --> 02:01:34.170
Adrian Simental: A response.

1040
02:01:35.070 --> 02:01:37.200
Adrian Simental: Look up you misspelled rabbit only

1041
02:01:39.750 --> 02:01:40.230
Adrian Simental: Thank you.

1042
02:01:41.430 --> 02:01:43.980
Ryan Mehta: And then we'll console log

1043
02:01:46.920 --> 02:01:47.910
What we get back

1044
02:01:49.980 --> 02:02:02.040
Ryan Mehta: So we'll make our fetch request to this URL will include our API key and our header will parse their responses JSON and then we'll console log that response, make sure everything's hooked up.

1045
02:02:04.290 --> 02:02:08.280
Ryan Mehta: Let's grab something other than Google. Let's grab this thing.

1046
02:02:10.200 --> 02:02:20.610
Ryan Mehta: And paste it into our get links, click on the button and it has 166 likes

1047
02:02:23.430 --> 02:02:26.760
Ryan Mehta: Cool. So I found all the links on that Doc page.

1048
02:02:35.910 --> 02:02:36.300
Brooke Perkins (she/her): Right.

1049
02:02:37.740 --> 02:02:43.440
Brooke Perkins (she/her): Where are you getting that curl dash h x rapid API key line that you've commented out

1050
02:02:44.160 --> 02:02:48.090
Ryan Mehta: This one. This one's just in their documentation that's just in their documentation.

1051
02:02:48.120 --> 02:02:50.010
Brooke Perkins (she/her): Okay, so that's just

1052
02:02:50.190 --> 02:02:55.140
Brooke Perkins (she/her): Basically they're telling you how to hit that API to get that stuff.

1053
02:02:56.190 --> 02:03:02.010
Brooke Perkins (she/her): Yeah, how to fetch, but it's just that you as a developer will have to translate into the batch.

1054
02:03:04.530 --> 02:03:06.720
Adrian Simental: Your personal rapid API key.

1055
02:03:07.260 --> 02:03:07.860
Ryan Mehta: It is

1056
02:03:08.130 --> 02:03:08.400
I know

1057
02:03:10.050 --> 02:03:14.970
Ryan Mehta: It doesn't have a credit card attached to it, though. So feel free to use it as much as you want.

1058
02:03:20.430 --> 02:03:37.890
Ryan Mehta: Okay, so we were able to get back this list of links here before we get too far though, just like we did last time, I think it would be nice to extract this into a service to kind of clean up this component. So I am going to make a services directory

1059
02:03:38.970 --> 02:03:45.240
Ryan Mehta: And let's call it a links API JS file.

1060
02:03:46.620 --> 02:03:51.480
Ryan Mehta: Inside of this file, we're going to create a get links service.

1061
02:03:52.800 --> 02:03:57.450
Ryan Mehta: And we'll grab the code that we wrote over here.

1062
02:03:59.670 --> 02:04:02.670
Ryan Mehta: And drop it over here.

1063
02:04:04.620 --> 02:04:08.100
Ryan Mehta: Do the same sort of thing. Well, let's keep up that

1064
02:04:09.600 --> 02:04:11.100
Ryan Mehta: This line is too long.

1065
02:04:13.980 --> 02:04:21.030
Ryan Mehta: Don't know how you feel about this right now. I added to be yes. Lynch file this max line length. And it's kind of annoying me right now but

1066
02:04:23.220 --> 02:04:25.860
Ryan Mehta: It's all allows them. The 80 characters for the line.

1067
02:04:27.240 --> 02:04:31.020
Ryan Mehta: Okay, well, whatever. So we have this code over here.

1068
02:04:32.130 --> 02:04:43.230
Ryan Mehta: Let's make sure we export this function. So, this function hits this API, we need to replace this state URL with something that gets passed to the function

1069
02:04:44.250 --> 02:04:50.160
Ryan Mehta: So the past this getting links to the URL. It makes effect request, where the target is that URL.

1070
02:04:51.630 --> 02:04:55.830
Ryan Mehta: We should probably put this in our end file, but we'll do that later maybe

1071
02:04:58.050 --> 02:05:08.700
Ryan Mehta: will parse the JSON and for this application. We only really care about these links this list of links that we get back. So on the next slide.

1072
02:05:10.170 --> 02:05:14.850
Ryan Mehta: I'm then going to get that JSON and I'm going to return, just the links.

1073
02:05:15.930 --> 02:05:19.350
Ryan Mehta: That we get back so that array of links.

1074
02:05:20.970 --> 02:05:22.470
This function makes sense.

1075
02:05:27.510 --> 02:05:30.120
Ryan Mehta: On the right hand side or the left hand side.

1076
02:05:31.620 --> 02:05:35.610
Ryan Mehta: Here I'm going to leave this curl over here.

1077
02:05:38.220 --> 02:05:39.870
That's where it belongs.

1078
02:05:41.280 --> 02:05:51.210
Ryan Mehta: And then I'm going to replace this fetch with our new get links function and pass it the URL that we have in state.

1079
02:05:52.380 --> 02:05:56.460
Ryan Mehta: We then get back a list of links.

1080
02:05:58.590 --> 02:06:04.350
Ryan Mehta: Since this list of links changes after we make this request. It's going to be a staple thing.

1081
02:06:05.520 --> 02:06:12.240
Ryan Mehta: We'll start off our list of links as an empty array. After we get back that list of links will set state.

1082
02:06:13.590 --> 02:06:18.600
Ryan Mehta: Two links the links that we got back from the API.

1083
02:06:20.010 --> 02:06:25.110
Ryan Mehta: At this point, when we submit the form we should see our state update

1084
02:06:26.310 --> 02:06:31.500
Ryan Mehta: So if we go back to our form grab this thing again. Oops.

1085
02:06:33.690 --> 02:06:44.310
Ryan Mehta: Our link starts off as an empty array paste in the URL, the URL changes when I click on Get links this array of links updates.

1086
02:06:45.990 --> 02:06:47.760
Ryan Mehta: To what we got back from the API.

1087
02:06:50.610 --> 02:07:02.370
Ryan Mehta: Last little phase here. We now can take that list of links and display them on the page. So I'm going to grab our links from state.

1088
02:07:04.500 --> 02:07:15.450
Ryan Mehta: I'm going to do. I want to iterate through these links and for each link create a list item, right. So I'm going to create a link elements variable.

1089
02:07:16.560 --> 02:07:18.000
Ryan Mehta: I'm going to

1090
02:07:19.500 --> 02:07:23.220
Ryan Mehta: Map through our links for each link in

1091
02:07:24.510 --> 02:07:25.350
Ryan Mehta: The array.

1092
02:07:26.430 --> 02:07:28.560
Ryan Mehta: We're going to create an ally.

1093
02:07:30.120 --> 02:07:33.000
Ryan Mehta: Inside of the Li will have an a tag.

1094
02:07:34.710 --> 02:07:39.480
Ryan Mehta: The H ref of the A will be doing link.

1095
02:07:40.650 --> 02:07:44.190
Ryan Mehta: And we'll also display the link inside of the tag.

1096
02:07:45.300 --> 02:07:55.020
Ryan Mehta: This you all have done this like same pattern like millions of times probably right list of things. And then underneath our form.

1097
02:07:57.090 --> 02:08:00.390
Ryan Mehta: We will display our elements.

1098
02:08:02.970 --> 02:08:03.420
Ryan Mehta: Okay.

1099
02:08:03.840 --> 02:08:04.290
Adrian Simental: Do not

1100
02:08:04.890 --> 02:08:06.450
Ryan Mehta: Read stuff in a second. Sorry. Good.

1101
02:08:07.020 --> 02:08:10.020
Adrian Simental: Would you not put the link elements in it, you will or no.

1102
02:08:11.460 --> 02:08:12.450
Ryan Mehta: I totally

1103
02:08:13.230 --> 02:08:15.810
Ryan Mehta: wrap this with a well

1104
02:08:20.190 --> 02:08:20.610
Ryan Mehta: All right.

1105
02:08:22.350 --> 02:08:29.640
Ryan Mehta: We'll fix this red stuff in a second. But at the very least we should see something on the page now. So let's go back.

1106
02:08:30.690 --> 02:08:31.890
Ryan Mehta: Over the year

1107
02:08:34.110 --> 02:08:42.840
Ryan Mehta: We paste in our URL, we click on Get links and we see all of our beautiful links to page not found.

1108
02:08:44.010 --> 02:08:44.580
Ryan Mehta: Cool.

1109
02:08:47.220 --> 02:08:48.630
Ryan Mehta: Are any of these pages found

1110
02:08:49.800 --> 02:08:50.910
Ryan Mehta: Is this us or then

1111
02:08:51.930 --> 02:08:54.150
Thomas Stussi: This because they're all like internal links.

1112
02:08:55.260 --> 02:08:57.570
Thomas Stussi: To locations on the same page.

1113
02:08:58.950 --> 02:09:00.870
Ryan Mehta: Yeah, I mean, probably

1114
02:09:02.370 --> 02:09:07.350
Ryan Mehta: Where's this link to DOM testing library API queries.

1115
02:09:10.170 --> 02:09:10.650
Like oh

1116
02:09:15.540 --> 02:09:16.230
Ryan Mehta: I have no idea.

1117
02:09:17.850 --> 02:09:22.620
Ryan Mehta: It's okay though that's not really our job to figure out somebody else's

1118
02:09:24.150 --> 02:09:25.500
Ryan Mehta: We've got all these links.

1119
02:09:30.030 --> 02:09:31.710
Ryan Mehta: Okay, this is look good, everyone.

1120
02:09:33.180 --> 02:09:38.850
Ryan Mehta: I kind of see what's happening right it's like repeating stuff. Is that what you're talking about.

1121
02:09:41.400 --> 02:09:41.910
Thomas Stussi: Maybe

1122
02:09:44.610 --> 02:09:45.360
Ryan Mehta: Anyways,

1123
02:09:46.170 --> 02:09:46.920
Thomas Stussi: It works.

1124
02:09:47.400 --> 02:09:48.810
Ryan Mehta: Are part of the code works.

1125
02:09:50.490 --> 02:09:51.630
Ryan Mehta: This read stuff.

1126
02:09:51.690 --> 02:09:55.410
Ryan Mehta: Anybody know what it might be indicating off the top of your head.

1127
02:09:55.860 --> 02:09:57.270
Brooke Perkins (she/her): I have a question about

1128
02:09:59.040 --> 02:10:01.080
Brooke Perkins (she/her): The previous thing, um,

1129
02:10:02.190 --> 02:10:14.520
Brooke Perkins (she/her): Is there a situation where it would be like showing the text of the URL, but it would actually be a broken link like that, would there ever be a time when it could be an error on our side.

1130
02:10:16.830 --> 02:10:19.560
Ryan Mehta: Totally just wouldn't render it

1131
02:10:21.000 --> 02:10:21.660
Ryan Mehta: Totally could

1132
02:10:23.100 --> 02:10:32.100
Ryan Mehta: It totally could be an error on our side. But in this case, because we're getting the URLs from this API. I think it's like

1133
02:10:33.270 --> 02:10:33.720
I'm

1134
02:10:35.010 --> 02:10:37.170
Ryan Mehta: Better just like giving us those things.

1135
02:10:37.350 --> 02:10:43.020
Brooke Perkins (she/her): Because I guess I'm confused as to how it would even show them up there but have a broken link.

1136
02:10:44.820 --> 02:10:57.600
Brooke Perkins (she/her): Like cuz, is that not just showing what we got from the API, like, Would it ever show like just the text without having a correct link associated with the text. You know what I mean.

1137
02:10:58.230 --> 02:10:58.620
Mm hmm.

1138
02:11:00.540 --> 02:11:03.570
Ryan Mehta: Whatever. So that actually okay

1139
02:11:04.890 --> 02:11:10.140
Brooke Perkins (she/her): I'm curious where it would be broken. If the link wasn't working, but we got the text.

1140
02:11:12.840 --> 02:11:22.380
Ryan Mehta: Yeah, like so. How come are. You say, How come we have this text here, but the link doesn't work like we click on it does. I think that's

1141
02:11:24.150 --> 02:11:29.970
Brooke Perkins (she/her): That's coming that's broken because of what we're grabbing from the API. It seems broken on their end. I think you said

1142
02:11:31.020 --> 02:11:34.230
Ryan Mehta: Seems like it but it also. Yeah.

1143
02:11:35.400 --> 02:11:41.730
Brooke Perkins (she/her): Okay, I'm curious, then if there's ever a scenario where we would see

1144
02:11:43.050 --> 02:11:46.140
Brooke Perkins (she/her): I don't know, maybe I'm overthinking it

1145
02:11:47.310 --> 02:11:59.760
Ryan Mehta: Yeah, I think so. This text could totally be here, even if the link is broken, the browser doesn't check to make sure that these like a tags, because these are all just a tags. Yeah, that the links in the tag work.

1146
02:12:00.840 --> 02:12:06.030
Ryan Mehta: We don't really know if they work until you click on it. Right. Yeah.

1147
02:12:08.190 --> 02:12:19.500
Ryan Mehta: But I think the API call worked. Otherwise you wouldn't have gotten this list of things. Yeah, but we don't know if like the API calls scraped this website correctly or anything.

1148
02:12:24.270 --> 02:12:31.290
Ryan Mehta: We could totally like look into it, we can like compare what we get here to what's actually on their page that would probably be

1149
02:12:31.440 --> 02:12:33.810
Ryan Mehta: Our debugging strategy, but

1150
02:12:34.650 --> 02:12:36.420
Adrian Simental: GPUs try with a different page.

1151
02:12:38.400 --> 02:12:39.660
Ryan Mehta: Yeah, like a different website.

1152
02:12:40.050 --> 02:12:40.350
Yeah.

1153
02:12:41.430 --> 02:12:41.880
Adrian Simental: Totally

1154
02:12:44.460 --> 02:12:45.300
There's a website.

1155
02:12:55.410 --> 02:12:56.970
So seems to work.

1156
02:12:59.670 --> 02:13:04.020
Ryan Mehta: At least sorta Falco's or sign in page. What's another website.

1157
02:13:08.040 --> 02:13:08.460
Thomas Stussi: Read it.

1158
02:13:25.740 --> 02:13:26.430
Ryan Mehta: Looks pretty good.

1159
02:13:39.690 --> 02:13:40.110
Alright.

Ryan Mehta: Which is also a required prop.

796
01:38:33.990 --> 01:38:34.680
Ryan Mehta: That would good

797
01:38:35.370 --> 01:38:36.810
Ron Yonker: Why underscore ID.

798
01:38:39.240 --> 01:38:41.130
Ryan Mehta: Because that's what the API gives us

799
01:38:43.200 --> 01:38:45.390
Ryan Mehta: It's because probably a Mongo DB

800
01:38:45.390 --> 01:38:46.170
Ron Yonker: Database

801
01:38:46.230 --> 01:38:50.250
Ryan Mehta: In Mongo DB is underscores for another IDs.

802
01:38:56.850 --> 01:39:09.990
Ryan Mehta: All right, let's check to see if this actually works. Let's go to app JS. Let's replace are hard coded individual villager with our villagers village and list.

803
01:39:11.010 --> 01:39:16.440
Ryan Mehta: Our villager list expects us to pass it a an array of villagers.

804
01:39:17.790 --> 01:39:25.200
Ryan Mehta: We don't actually want to hit the API to get this array of villagers. What I'm going to do is just copy. Oops.

805
01:39:28.890 --> 01:39:44.940
Ryan Mehta: Let's copy this array of villagers and hard coded in our app for now. So I'm going to say constant villagers equals that array that I just copied, which is tremendously long, so I'm going to collapse it and then we can pass

806
01:39:46.770 --> 01:39:48.060
Ryan Mehta: Our array.

807
01:39:49.530 --> 01:40:05.040
Ryan Mehta: Like so. So I just copied what the API returns set a constant to it, just so we can like see if we actually fetch from this API. What would our villagers list look like it would look like a bunch of broken images. Perfect.

808
01:40:08.160 --> 01:40:09.690
Edgar Cuellar: Zoom in Charles

809
01:40:12.210 --> 01:40:13.800
Edgar Cuellar: It is totally because of that.

810
01:40:16.560 --> 01:40:17.100
Okay.

811
01:40:25.200 --> 01:40:28.050
Ryan Mehta: Let's just rename that really quick for ourselves.

812
01:40:32.520 --> 01:40:35.610
Ryan Mehta: Unexplained that and here's our little list of villagers.

813
01:40:36.990 --> 01:40:40.200
Ryan Mehta: Is horrendously ugly.

814
01:40:41.430 --> 01:40:47.640
Ryan Mehta: Maybe we should have either flex our grid to display our villagers.

815
01:40:48.750 --> 01:40:51.720
Ryan Mehta: And get rid of these bullet points, I think.

816
01:40:53.520 --> 01:40:55.740
Ryan Mehta: Let's go back to our villager list.

817
01:40:56.790 --> 01:41:03.120
Ryan Mehta: I am going to add a villager list dot CSS style.

818
01:41:07.980 --> 01:41:12.600
Ryan Mehta: And let's put these side by side will import our

819
01:41:15.900 --> 01:41:21.000
Ryan Mehta: villager this stuff, CSS, and let's apply these styles to the UL

820
01:41:27.390 --> 01:41:27.780
Okay.

821
01:41:29.190 --> 01:41:39.990
Ryan Mehta: The URL, I think, to be display grid would be nice. And then we want grid template columns. Let's have

822
01:41:41.370 --> 01:41:48.090
Ryan Mehta: I always forget is the repeat the number first and then the fractional unit second

823
01:41:49.560 --> 01:41:49.860
Ryan Mehta: Yep.

824
01:41:51.570 --> 01:41:54.390
Ryan Mehta: Okay, so that gives us that a little bit better.

825
01:41:58.590 --> 01:42:05.970
Ryan Mehta: And then let's get rid of the bullet points so list style type none.

826
01:42:09.090 --> 01:42:09.540
Okay.

827
01:42:13.710 --> 01:42:21.600
Ryan Mehta: It'd be nice if they all lined up at the bottom, anybody know how you make it so the grid items start at the bottom.

828
01:42:42.300 --> 01:42:43.110
Ryan Mehta: Grid and

829
01:42:44.250 --> 01:42:44.850
Annalise Murphy: Remember,

830
01:42:51.240 --> 01:42:52.380
Ryan Mehta: Grid column and

831
01:42:52.740 --> 01:42:55.080
Ryan Mehta: And maybe auto flow.

832
01:42:55.920 --> 01:42:57.630
Annalise Murphy: No, I'm the template.

833
01:43:01.440 --> 01:43:02.910
Ryan Mehta: CSS created

834
01:43:06.900 --> 01:43:08.160
Ryan Mehta: At bottom

835
01:43:09.270 --> 01:43:11.220
Ryan Mehta: Line bottom line items. Okay.

836
01:43:12.870 --> 01:43:15.690
Ryan Mehta: line items baseline.

837
01:43:21.330 --> 01:43:23.250
Ryan Mehta: That seems like they're all at the bottom.

838
01:43:24.630 --> 01:43:26.370
Ryan Mehta: Is that, is that straight

839
01:43:28.680 --> 01:43:30.030
Ryan Mehta: At least a little bit more straight

840
01:43:31.980 --> 01:43:32.310
Ryan Mehta: Okay.

841
01:43:32.820 --> 01:43:33.150
Ryan Mehta: So,

842
01:43:33.180 --> 01:43:34.890
A line items baseline.

843
01:43:36.780 --> 01:43:42.750
Ryan Mehta: What are the other options besides baseline, you could do display grid.

844
01:43:46.500 --> 01:43:48.300
Brooke Perkins (she/her): Oh god, I can't remember.

845
01:43:49.500 --> 01:43:50.640
Ryan Mehta: There's so many. Yeah.

846
01:43:51.870 --> 01:43:54.630
Ryan Mehta: And and is probably better than baseline.

847
01:43:55.980 --> 01:43:56.430
Okay.

848
01:43:58.230 --> 01:43:59.730
Ryan Mehta: Alright so this looks

849
01:43:59.760 --> 01:44:01.740
ryan Diffenbaugh: Amazing. Now it's perfect.

850
01:44:06.600 --> 01:44:17.220
Ryan Mehta: Alright, so there's our villagers list one little refactor. Well, let's snapshot test this thing and then refactor it ever so slightly.

851
01:44:20.880 --> 01:44:29.460
Ryan Mehta: Six. I'm going to steal one of our other tests plop it over here snapshot cast

852
01:44:37.140 --> 01:44:47.970
Ryan Mehta: Our villager list expects us to pass it an array of villagers for the purpose of this test, I'm going to just pass it a single villager

853
01:44:48.990 --> 01:44:50.070
Ryan Mehta: That I will make up

854
01:45:08.640 --> 01:45:14.070
Ryan Mehta: Okay, so just a made up villager for the purpose of our snapshot test.

855
01:45:15.870 --> 01:45:16.080
Ryan Mehta: We

856
01:45:17.910 --> 01:45:19.710
Ryan Mehta: Have passing tests now.

857
01:45:21.450 --> 01:45:32.340
Ryan Mehta: If we look at our villagers list, we have a UL with a single Li in it, which makes sense because we have a single villager in our props.

858
01:45:34.680 --> 01:45:35.370
Ryan Mehta: seem good

859
01:45:39.210 --> 01:45:46.080
Ryan Mehta: Alright, one little refactor that I wanted to do. I saw some of you doing this yesterday.

860
01:45:48.120 --> 01:45:56.100
Ryan Mehta: Instead of passing our villager name and image URL, one at a time like this, you can actually spread

861
01:45:57.450 --> 01:45:59.040
Ryan Mehta: Your villager

862
01:46:00.330 --> 01:46:03.090
Ryan Mehta: Like this. It does the same thing.

863
01:46:04.170 --> 01:46:16.200
Ryan Mehta: As the like name equals villager dot name image URL equals villager dot URL. We're just spreading all of the properties from our villager as props to our villager component

864
01:46:18.420 --> 01:46:23.880
Ryan Mehta: You all have done this. I've seen it in your I saw some of you doing this with your router stuff yesterday.

865
01:46:29.730 --> 01:46:30.720
Ryan Mehta: This makes sense.

866
01:46:32.160 --> 01:46:38.970
Ryan Mehta: Are tested still past two and the visual should look the same doesn't change anything. It's just a little bit more convenient.

867
01:46:43.680 --> 01:46:45.870
Ryan Mehta: Look good questions here.

868
01:46:47.280 --> 01:46:50.670
Annalise Murphy: Yep, it's been good. Okay, cool.

869
01:46:52.110 --> 01:47:03.270
Ryan Mehta: All right, now we have our presentational components done. I'm going to go back to our app JS, get rid of this hard coded villager list clip back our all villagers container.

870
01:47:07.020 --> 01:47:07.890
Ryan Mehta: And

871
01:47:11.100 --> 01:47:13.860
Ryan Mehta: Go to our all villagers container.

872
01:47:26.370 --> 01:47:40.020
Ryan Mehta: And let's put this thing, side by side. So now, in addition to having the loading screen. We also want to at some point, see a list of villagers on the page.

873
01:47:41.760 --> 01:47:49.530
Ryan Mehta: So let's say that it displays a list of villagers.

874
01:47:53.070 --> 01:47:53.310
Ryan Mehta: Yeah.

875
01:47:54.810 --> 01:48:06.360
Ryan Mehta: So upon loading our container. At some point, we should be able to display a list of villagers let's render our all villagers container.

876
01:48:09.720 --> 01:48:15.300
Ryan Mehta: At some point, we should be able to get a list of villagers on the page.

877
01:48:17.820 --> 01:48:18.540
Ryan Mehta: So,

878
01:48:19.590 --> 01:48:21.630
Ryan Mehta: Let's say that cost.

879
01:48:23.730 --> 01:48:32.220
Ryan Mehta: Villagers villagers list equals, we're going to look at the screen. We're going to get

880
01:48:33.570 --> 01:48:43.980
Ryan Mehta: There's some we have to figure out how we're going to get our URL, because we want to make sure that that you will end up on the page and that that URL has some list items inside of it.

881
01:48:45.120 --> 01:48:51.510
Ryan Mehta: Anybody have any ideas of what one of these things we can use to get our list of villagers.

882
01:48:58.680 --> 01:49:03.990
Ryan Mehta: I think this is another good case for our test ID, because there's not like a clear thing in the UL

883
01:49:04.200 --> 01:49:05.610
Ryan Mehta: Visually, that we can grab

884
01:49:06.420 --> 01:49:09.210
Ryan Mehta: But we could have grabbed our villager

885
01:49:10.800 --> 01:49:18.870
Ryan Mehta: Scholar. A villagers test ID and add that test ID to our villager list component

886
01:49:20.130 --> 01:49:27.450
Ryan Mehta: So put it here. Data test ID equals villagers.

887
01:49:29.580 --> 01:49:33.570
Ryan Mehta: And so now we can grab this URL by its test ID here.

888
01:49:35.490 --> 01:49:38.430
Ryan Mehta: This should totally fail, I think.

889
01:49:41.130 --> 01:49:46.020
Ryan Mehta: Because it can't find that element on the screen ever

890
01:49:48.090 --> 01:49:52.260
Ryan Mehta: So we need to start adding some stuff. So we can actually get this element on the screen.

891
01:49:53.850 --> 01:49:58.470
Ryan Mehta: First thing that we need to do is probably have some sort of loading state.

892
01:50:01.140 --> 01:50:19.140
Ryan Mehta: Are loading state and we'll start off as true. And then we're going to conditionally render if the loading is true will load will have our loading screen there otherwise we'll have our villagers this I'm going to destruction loading off of this state.

893
01:50:20.940 --> 01:50:26.850
Ryan Mehta: And then I'm just going to do kind of a trick I'm going to say, if we're loading.

894
01:50:28.680 --> 01:50:32.250
Ryan Mehta: Then we're going to return our loading component

895
01:50:33.690 --> 01:50:40.080
Ryan Mehta: If we're not loading them. We're going to return our villager list component

896
01:50:42.420 --> 01:50:51.450
Ryan Mehta: So if we're loading loading, otherwise our villager list are tested still fail because we're never not in a loading state.

897
01:50:53.970 --> 01:50:57.780
Ryan Mehta: Let's say, just for the sake of this test well

898
01:50:58.860 --> 01:50:59.940
Let's keep it like this.

899
01:51:02.700 --> 01:51:06.150
Ryan Mehta: This wicked everyone just like kind of conditional rendering thing.

900
01:51:08.610 --> 01:51:09.060
Okay.

901
01:51:11.130 --> 01:51:32.340
Ryan Mehta: Let's add a component did mount upon mounting our component. Let's just hard code set state will change loading from true to false, which is what we want to do in the component did now, but we want to wait eventually to set this from loading true to false until after our

902
01:51:33.480 --> 01:51:35.340
Ryan Mehta: App we fetch our list of

903
01:51:36.570 --> 01:51:39.390
Characters. Let's see what we get.

904
01:51:40.860 --> 01:51:42.840
Okay, this makes sense to me.

905
01:51:47.310 --> 01:51:48.240
Doesn't make sense to me.

906
01:51:49.560 --> 01:51:53.640
Ryan Mehta: So it's complaining that the villager component

907
01:51:54.660 --> 01:52:07.050
Ryan Mehta: isn't being passed an array of villagers right expects that villagers array prop type. So let's add another piece of state called villagers, which will be an array.

908
01:52:08.070 --> 01:52:17.130
Ryan Mehta: Will do structure that villagers array off of state and we'll pass villagers to our component

909
01:52:19.200 --> 01:52:21.390
Ryan Mehta: And let's see what we get. Next.

910
01:52:26.880 --> 01:52:27.360
Ryan Mehta: Okay.

911
01:52:32.070 --> 01:52:42.420
Ryan Mehta: Alright, we kind of broke our loading screen which sort of makes sense because we're like immediately setting loading to fall so it never has a chance to have this loading screen display.

912
01:52:43.770 --> 01:52:46.170
Ryan Mehta: What if we put this in a set time

913
01:52:47.580 --> 01:52:53.940
Ryan Mehta: Kind of mimicking a promise, right, because a promise is going to take some amount of time.

914
01:52:55.080 --> 01:52:57.600
Ryan Mehta: So after one second. Go to loading false

915
01:53:01.290 --> 01:53:02.550
And then see what happens.

916
01:53:09.450 --> 01:53:09.840
Okay.

917
01:53:12.450 --> 01:53:19.710
Ryan Mehta: A little bit better. Now, we never see our villagers thing again. I think this is maybe where we need the

918
01:53:22.320 --> 01:53:25.530
Ryan Mehta: Test id the asynchronous, one that will wait

919
01:53:26.700 --> 01:53:28.980
Ryan Mehta: For it. Oh, no.

920
01:53:31.920 --> 01:53:33.450
Maybe let's see what happens.

921
01:53:43.020 --> 01:53:43.380
Cool.

922
01:53:48.750 --> 01:53:49.260
Ryan Mehta: So,

923
01:53:50.370 --> 01:53:51.870
Ryan Mehta: This makes sense. Sort of.

924
01:53:53.700 --> 01:54:04.650
Ryan Mehta: So we're using the find by ID here instead of the get by ID, because it's asynchronous defined by ID will wait until the villagers list is on the page before moving on.

925
01:54:06.030 --> 01:54:17.550
Ryan Mehta: Which we need to do, because we have this whole promise thing to set time out right now that will eat at first display the loading screen and then after one second display our villager missed

926
01:54:18.960 --> 01:54:23.670
Ryan Mehta: This isn't how we're actually going to do it. I just wanted to see what would happen if we had this in a set time out.

927
01:54:24.840 --> 01:54:30.990
Ryan Mehta: What we actually want to do here is make a fetch to our API. Right.

928
01:54:32.760 --> 01:54:40.110
Ryan Mehta: Let's try that. Let's delete all that we're going to make effects request to this API.

929
01:54:45.390 --> 01:54:51.120
Ryan Mehta: We're then going to get back some a response will parse the response as JSON.

930
01:54:52.770 --> 01:54:54.690
Ryan Mehta: We're then going to get back that JSON.

931
01:54:56.700 --> 01:55:09.510
Ryan Mehta: The format of the JSON looks like this. We actually only care about the ID, the name and the image, right. So we're going to grab just those items off of this array.

932
01:55:10.560 --> 01:55:17.130
Ryan Mehta: So JSON. Here is an array for each item in JSON. We're going to map through it.

933
01:55:20.370 --> 01:55:21.600
Ryan Mehta: For each villager

934
01:55:23.610 --> 01:55:30.330
Ryan Mehta: Yeah, three two villager we're going to return an object with the villagers name.

935
01:55:33.840 --> 01:55:39.750
Ryan Mehta: image URL, which we get from villager dot image and the villagers ID.

936
01:55:48.180 --> 01:55:48.960
Ryan Mehta: That look okay

937
01:55:52.740 --> 01:56:10.650
Ryan Mehta: So in that through our JSON, which is this entire array here for each object and the array we get the ID, the name and the image, but we renamed the image from image to image URL. So for image to image URL.

938
01:56:12.000 --> 01:56:17.160
Ryan Mehta: And then we're going to take our villagers.

939
01:56:19.800 --> 01:56:21.420
Ryan Mehta: And set state.

940
01:56:22.560 --> 01:56:27.150
Ryan Mehta: We want to set our village or stake to whatever we got back from

941
01:56:29.070 --> 01:56:29.940
The API.

942
01:56:33.570 --> 01:56:42.090
Ryan Mehta: So fetch Brooke Perkins (she/her): He's gonna be like, whoa, it can you can make it do that.

1106
02:13:47.520 --> 02:13:47.970
Ron Yonker: Nice.

1107
02:13:48.000 --> 02:13:50.310
Ryan Mehta: Yeah, I think it's kind of cool playing with the bottle.

1108
02:13:51.750 --> 02:13:52.170
Ryan Mehta: That's here.

1109
02:13:52.230 --> 02:13:53.970
Ryan Mehta: Oops I push that console log

1110
02:13:55.650 --> 02:13:57.450
Ryan Mehta: It could be super impressive. I think

1111
02:13:59.040 --> 02:14:04.560
Ryan Mehta: Could be fun. For some of you, I just came up with this lab this morning. So hopefully it's cool.

1112
02:14:25.200 --> 02:14:30.150
Ryan Mehta: Well, good luck. See you all after lunch.

1113
02:14:31.980 --> 02:14:33.570
Ryan Mehta: Let me know if anything comes up.

1114
02:14:34.770 --> 02:14:35.010
Yeah.

1115
02:14:37.770 --> 02:14:39.360
Ron Yonker: Thanks, Ryan. Thank you, Ryan.

s tomorrow so

1279
02:28:05.370 --> 02:28:12.570
Ryan Mehta: Prepare yourself tomorrow's is a little bit cooler though because tomorrow's list of things is the mobile list.

1280
02:28:13.380 --> 02:28:26.790
Ryan Mehta: So you'll have a list of things that has like a toggle in the top right hand corner that lets you switch from like light mode to dark mode, just kind of a cool concept and the way that will do that is by adding some global state.

1281
02:28:28.110 --> 02:28:31.170
Ryan Mehta: Will do list of things with global state tomorrow.

1282
02:28:39.420 --> 02:28:39.930
Ryan Mehta: Alright.

1283
02:28:42.570 --> 02:28:44.220
Ryan Mehta: Any questions before line.

1284
02:28:50.580 --> 02:28:52.530
Ron Yonker: Any questions at all.

1285
02:28:53.250 --> 02:28:53.700
Yeah.

1286
02:28:55.410 --> 02:29:03.120
Ron Yonker: Oh, I'll have to bug you need to be able to hook up the virtual machine with access to my GitHub.

1287
02:29:06.900 --> 02:29:14.490
Ryan Mehta: You can use it and you can add the UN that SSH key that he had that pen key to your list of

1288
02:29:15.960 --> 02:29:18.060
Ryan Mehta: Like you just need to set up SSH access

1289
02:29:19.740 --> 02:29:23.280
Ryan Mehta: Look up GitHub SSH key and there's like that's tutorial.

1290
02:29:23.730 --> 02:29:25.410
Ron Yonker: Okay, thank you.

1291
02:29:25.920 --> 02:29:44.700
Patrick Wilson: Ryan at a quick question yesterday on the bootstrap. I had an error that it couldn't find the favorite icon and I was searching in the in the Bootstrap for reference to it and I couldn't find it. Is there a place where you can disable that or add one

1292
02:29:46.230 --> 02:29:47.040
Ryan Mehta: fav icon.

1293
02:29:47.430 --> 02:29:48.240
Patrick Wilson: Yeah, see,

1294
02:29:48.750 --> 02:29:50.970
Ryan Mehta: You can probably add it to

1295
02:29:54.660 --> 02:29:58.140
Ryan Mehta: This public folder. A fav icon.

1296
02:29:58.380 --> 02:29:58.710
Okay.

1297
02:30:04.890 --> 02:30:05.700
Good, thanks.

1298
02:30:09.420 --> 02:30:13.560
Brooke Perkins (she/her): So weird that you were getting that error. Patrick, because I've never gotten that error.

1299
02:30:17.160 --> 02:30:22.440
Patrick Wilson: And it was only yesterday. It wasn't either the last two labs and I started exactly the same each time.

1300
02:30:24.780 --> 02:30:25.290
Ryan Mehta: And

1301
02:30:27.060 --> 02:30:37.620
Ryan Mehta: I think most of the time I get that same thing but I think the browser. By default, tries to effects the fabric con, which is just that little icon that sits right here.

1302
02:30:41.220 --> 02:30:43.290
Brooke Perkins (she/her): Totally I've just never gotten an error for it.

1303
02:30:44.190 --> 02:30:45.840
Ryan Mehta: Yeah, so your app wouldn't even start.

1304
02:30:46.980 --> 02:30:53.520
Patrick Wilson: Know it just, it was just a red airline in my console. Every time you see

1305
02:30:54.960 --> 02:30:58.470
Patrick Wilson: Yeah, luckily it didn't stop anything

1306
02:31:02.280 --> 02:31:03.570
Ryan Mehta: Maybe different browsers.

1307
02:31:04.830 --> 02:31:12.450
Patrick Wilson: Between brick and Patrick, maybe, but I use the same browser every day. So, but I'll try throwing it in the public folder.

1308
02:31:16.740 --> 02:31:18.630
Brooke Perkins (she/her): I'm excited to learn global state.

1309
02:31:19.350 --> 02:31:20.610
Ryan Mehta: Nice, huh.

1310
02:31:21.870 --> 02:31:22.830
Ryan Mehta: Yeah, super fun.

1311
02:31:24.420 --> 02:31:26.280
Ryan Mehta: Or cool. Anyways, I don't know if it's fun.

1312
02:31:27.300 --> 02:31:29.490
Brooke Perkins (she/her): I'm not excited about pagination

1313
02:31:36.240 --> 02:31:43.320
Ryan Mehta: Alright, well, have a good lunch. Everyone see you this afternoon or tomorrow and good luck with this lab.

1314
02:31:45.420 --> 02:31:47.670
Brooke Perkins (she/her): Way. Is anyone else going. The next day, yes.

1315
02:31:49.770 --> 02:31:50.460
Sarah Rector: Yeah. Yes.

1316
02:31:50.940 --> 02:31:51.420
Cool.

1317
02:31:53.100 --> 02:31:55.800
Jerud Moyer: But I might be just making lists of things and said,

1318
02:31:56.700 --> 02:31:58.830
Brooke Perkins (she/her): Yeah, that's fair.

1319
02:31:59.670 --> 02:32:05.010
Ron Yonker: I'm sure they're going to have recordings of all the different presentations.

1320
02:32:05.340 --> 02:32:06.270
Ryan Mehta: Yeah, probably.

1321
02:32:08.340 --> 02:32:08.940
Well, maybe.

1322
02:32:12.750 --> 02:32:13.860
Ron Yonker: This afternoon, Ryan.

st so, so, so many dependencies.

930
02:12:57.540 --> 02:13:01.380
Ryan Mehta: And PM dash d, we need Babel.

931
02:13:02.790 --> 02:13:07.920
Ryan Mehta: Or we need Babel, the set and

932
02:13:09.210 --> 02:13:10.110
Ryan Mehta: Babel.

933
02:13:14.190 --> 02:13:15.060
Ryan Mehta: Longer

934
02:13:16.410 --> 02:13:22.920
Ryan Mehta: And I think that actually might be it but it feels like a lot to me. Anyways, it's like impossible for me to remember these

935
02:13:23.370 --> 02:13:24.120
Ryan Mehta: Why is what

936
02:13:24.780 --> 02:13:35.880
Annalise Murphy: To like at signs with the sort of like Babel core and M files that just like calling on it or is that part of the file name itself.

937
02:13:36.990 --> 02:13:39.900
Ryan Mehta: Yeah, and PM, there's these things called organizations.

938
02:13:40.680 --> 02:13:41.640
Ryan Mehta: It's just means that

939
02:13:41.700 --> 02:13:44.700
Ryan Mehta: This package is part of the Babel organization.

940
02:13:45.150 --> 02:13:47.940
Annalise Murphy: Got you. Okay, thank you.

941
02:13:50.100 --> 02:13:57.150
Ryan Mehta: So once we add all of those. We also need to add a Babel RC file to our application.

942
02:13:58.350 --> 02:13:59.580
So an

943
02:14:02.850 --> 02:14:03.990
RC file.

944
02:14:05.100 --> 02:14:08.760
Ryan Mehta: And the Babel RC file. Kind of looks like this.

945
02:14:14.490 --> 02:14:22.710
Ryan Mehta: So it tells us this is where we specify which browsers. We want our new code or transpired the code after it goes through Babel to be

946
02:14:25.890 --> 02:14:33.120
Ryan Mehta: Like chance piled to, in our case, we don't really care. But you can specify browsers here if you really wanted to

947
02:14:34.260 --> 02:14:37.590
Ryan Mehta: We're just going to use all the modern browsers. So we'll just leave it like this.

948
02:14:39.720 --> 02:14:46.050
Ryan Mehta: In the module, the rules section, we need to tell web pack to use Babel.

949
02:14:47.670 --> 02:14:49.590
Ryan Mehta: Anytime we have a

950
02:14:51.450 --> 02:14:52.500
Ryan Mehta: JS file.

951
02:14:54.330 --> 02:15:11.160
Ryan Mehta: We want to run it through our Data Loader so we'll test each file. If it ends with JS, it'll go through Babel loader. We're going to exclude any of our node modules. So the file is inside of our node modules directory. We're going to exclude it

952
02:15:12.780 --> 02:15:18.930
Ryan Mehta: And then anything that matches these conditions are going to run through the gobble loader.

953
02:15:22.770 --> 02:15:23.700
Options.

954
02:15:29.490 --> 02:15:42.420
Ryan Mehta: Okay, so now we're saying, whenever we have a JavaScript file that we want to bundle. In addition to just having web pack bundle it and change the code slightly. We want to run it through this Babel loader.

955
02:15:43.770 --> 02:15:45.990
Ryan Mehta: If we run our build again.

956
02:15:49.020 --> 02:15:53.400
Ryan Mehta: Assuming I set that all up ray will get our babble file.

957
02:15:54.840 --> 02:16:09.840
Ryan Mehta: And looks pretty much the same, because we aren't using any very modern JavaScript techniques. Let's try to use a few modern techniques. So let's create an object. It's a dog.

958
02:16:17.310 --> 02:16:21.000
Ryan Mehta: And let's see something kind of newish let's use

959
02:16:22.230 --> 02:16:26.760
Ryan Mehta: An optional chaining to get spots name and console log it

960
02:16:28.350 --> 02:16:33.210
Ryan Mehta: And bundle this thing. I think what we'll see is Babel loader.

961
02:16:34.650 --> 02:16:37.380
Ryan Mehta: Will take our optional chaining.

962
02:16:38.130 --> 02:16:41.700
Ryan Mehta: And turn it into a ternary for us automatically

963
02:16:43.350 --> 02:16:49.650
Ron Yonker: I'm sorry, Ryan, what, what's this optional chanting the question mark you put after spot in the console log

964
02:16:50.130 --> 02:16:52.170
Ryan Mehta: Yep. So this will only grab name.

965
02:16:52.200 --> 02:16:54.750
Ryan Mehta: A spa is it no for undefined.

966
02:16:59.670 --> 02:17:02.250
Ryan Mehta: So like this would still work if we did something

967
02:17:02.250 --> 02:17:02.760
Like

968
02:17:07.710 --> 02:17:08.460
Ryan Mehta: Block flaw.

969
02:17:13.260 --> 02:17:19.620
Ryan Mehta: Normally, your code or below up right here because you're trying to dot know take off of undefined.

970
02:17:20.640 --> 02:17:25.830
Ryan Mehta: But with optional changing your code won't blow up. It'll just console log undefined here.

971
02:17:27.750 --> 02:17:29.250
Ron Yonker: So can use that anywhere.

972
02:17:39.510 --> 02:17:40.140
Ryan Mehta: Yeah, totally.

973
02:17:43.140 --> 02:17:47.940
Ryan Mehta: So yeah, you'll see probably it does something similar with our bundled file.

974
02:17:49.800 --> 02:17:53.340
Ryan Mehta: Same sort of check your changes into a

975
02:17:56.280 --> 02:18:00.000
Ryan Mehta: Well this time of using or and a ternary to figure it out.

976
02:18:01.860 --> 02:18:17.160
Ryan Mehta: But it's transpiring this code now. So it's taking our modern JavaScript optional chaining feature which actually just came out in node in April of this year, so not too long ago and transpired it into something that all browsers can understand

977
02:18:19.290 --> 02:18:20.040
He's in Babel.

978
02:18:22.860 --> 02:18:35.970
Ryan Mehta: Kind of cool. Right. It's rewriting our code cool and scary. It's no. It feels like we no longer wrote the code. Now that's running in the browser web pack really wrote this code, we just kind of gave it some instructions about what we want it to do.

979
02:18:37.620 --> 02:18:44.280
Adrian Simental: Running run with that conditional that we have an app JS, can we, or after the dot name to give it something else.

980
02:18:45.840 --> 02:18:47.910
Ryan Mehta: Yep. You could do it or

981
02:18:49.590 --> 02:18:50.070
Ryan Mehta: I don't know.

982
02:18:51.690 --> 02:18:52.650
How to code we work

983
02:18:54.030 --> 02:18:56.610
Adrian Simental: So then how does that look in the bundle, will they

984
02:18:58.500 --> 02:18:59.430
Let's check it out.

985
02:19:03.360 --> 02:19:03.960
Here.

986
02:19:05.280 --> 02:19:11.010
Ryan Mehta: Saying, so this thing. It's just now, this thing has parentheses around it.

987
02:19:12.660 --> 02:19:13.050
Adrian Simental: So,

988
02:19:13.080 --> 02:19:15.540
Ryan Mehta: See, they're going to get the result of that or

989
02:19:16.770 --> 02:19:17.610
Rover here.

990
02:19:19.260 --> 02:19:24.240
Ryan Mehta: Um, there's also a new one that you're actually supposed to use in these cases, the double question mark.

991
02:19:25.380 --> 02:19:33.930
Ryan Mehta: Knowledge coalescing. So if the output of this isn't dollar undefined, then do this right hand side which is slightly different than or

992
02:19:36.120 --> 02:19:38.100
Ryan Mehta: And I bet that it will

993
02:19:40.290 --> 02:19:40.650
Yeah.

994
02:19:41.730 --> 02:19:46.740
Ryan Mehta: Just changes have to, or which is actually a little bit of this. Actually, the old one. Good.

995
02:19:48.840 --> 02:19:51.600
Ryan Mehta: Okay, so with the knowledge coalescing. It makes it

996
02:19:53.640 --> 02:19:54.690
Ron Yonker: Is that

997
02:19:55.710 --> 02:19:56.730
Ron Yonker: Another ternary

998
02:20:03.270 --> 02:20:06.240
Ryan Mehta: So if it doesn't equal

999
02:20:08.220 --> 02:20:12.660
Ryan Mehta: If z doesn't equal one than one

1000
02:20:14.010 --> 02:20:21.180
Ryan Mehta: Cool. I have no idea what they're trying to say here, or what this this was, this is always going to be

1001
02:20:22.050 --> 02:20:23.190
Ron Yonker: Not the case right

1002
02:20:28.320 --> 02:20:28.740
Greg Mall: L.

1003
02:20:29.700 --> 02:20:33.090
Ryan Mehta: I think it's a. Oh, it isn't. Now that's a good catch.

1004
02:20:33.720 --> 02:20:35.370
Ryan Mehta: So where's el defined

1005
02:20:35.430 --> 02:20:43.500
Ron Yonker: You know, what is that, so x equals know is equivalent to oh equals blah.

1006
02:20:45.600 --> 02:20:47.670
Ryan Mehta: That they say l equals and all somewhere.

1007
02:20:49.050 --> 02:20:54.360
Ryan Mehta: Oh yeah, l equals now. Yeah. So if zero

1008
02:20:55.230 --> 02:20:57.420
Ryan Mehta: Does not. Oh, but they probably change.

1009
02:20:57.480 --> 02:21:00.150
Ryan Mehta: L somewhere in here also. Right.

1010
02:21:01.200 --> 02:21:05.850
Adrian Simental: Because it will not first D structure does the name is it was

1011
02:21:09.930 --> 02:21:10.950
Ryan Mehta: Ellis here.

1012
02:21:13.590 --> 02:21:15.030
Adrian Simental: Even to left even more.

1013
02:21:16.230 --> 02:21:21.390
Ryan Mehta: I know. I think it's just like defining L. O. And then he is equal to this thing.

1014
02:21:25.860 --> 02:21:29.250
Ryan Mehta: I don't know. We could try to figure out this code, but it seems so

1015
02:21:30.270 --> 02:21:33.510
Ryan Mehta: Crazy. So L equals no

1016
02:21:35.310 --> 02:21:38.190
Ryan Mehta: Does not equal L equals no

1017
02:21:40.320 --> 02:21:47.580
Ryan Mehta: O L is either true or false. So L equals the result of Mel triple equals equals blah.

1018
02:21:48.990 --> 02:21:50.100
Ryan Mehta: So, oh,

1019
02:21:51.330 --> 02:21:56.190
Ryan Mehta: Oh, equals blah if know if blahs know

1020
02:21:58.800 --> 02:22:01.140
Ryan Mehta: Then Ellis true if

1021
02:22:02.370 --> 02:22:07.560
Ryan Mehta: Blah is not know that this is false. And it goes on to this second part of the or

1022
02:22:09.240 --> 02:22:13.260
Ryan Mehta: And then we do this ternary if OH is zero.

1023
02:22:14.340 --> 02:22:17.850
Ryan Mehta: Then we return zero otherwise return. Oh name.

1024
02:22:19.350 --> 02:22:21.720
Ryan Mehta: And where does this thing and

1025
02:22:22.860 --> 02:22:26.520
Ryan Mehta: Okay, so if no doesn't equal this thing and

1026
02:22:30.810 --> 02:22:31.320
Ryan Mehta: I don't know.

1027
02:22:32.340 --> 02:22:39.570
Ryan Mehta: It would be nice if there was a multiple lines. There's so many orders and ends and and like Boolean logic here.

1028
02:22:39.690 --> 02:22:40.890
Ryan Mehta: And Boolean logic is so

1029
02:22:40.890 --> 02:22:42.420
Ryan Mehta: Hard for me to understand all

1030
02:22:43.440 --> 02:22:50.550
Adrian Simental: Week, so would browser is this for them breaks the ideas to make it simpler to redo a specific browser. Yeah.

1031
02:22:51.390 --> 02:22:58.950
Ryan Mehta: To all browser. So this is probably very easy for computer read and I think almost all browsers have be able to read this probably

1032
02:22:59.790 --> 02:23:00.930
Ryan Mehta: Okay, to try it.

1033
02:23:02.910 --> 02:23:05.250
Ryan Mehta: The computer probably has no problem.

1034
02:23:10.530 --> 02:23:11.400
Ryan Mehta: Then this one.

1035
02:23:14.310 --> 02:23:17.700
Ryan Mehta: A block is not defined. Perfect.

1036
02:23:22.380 --> 02:23:25.470
Ryan Mehta: Okay, so yeah, there's a little console log rover.

1037
02:23:27.120 --> 02:23:28.380
Ryan Mehta: Because blogs undefined.

1038
02:23:32.730 --> 02:23:35.580
Ryan Mehta: But if we have like equals

1039
02:23:42.330 --> 02:23:44.940
Ryan Mehta: Then that same code console log spot.

1040
02:23:47.670 --> 02:23:53.070
Ryan Mehta: Yeah, I think every browser. Like, no matter how old it is would probably be able to read that code.

1041
02:23:54.270 --> 02:23:55.650
Ryan Mehta: Army like relatively

1042
02:23:57.240 --> 02:23:58.860
Ryan Mehta: Like maybe not I six

1043
02:24:00.630 --> 02:24:03.030
Ryan Mehta: But no, there's nothing here that doesn't seem like it's just

1044
02:24:03.030 --> 02:24:04.560
Ryan Mehta: Part of core JavaScript.

1045
02:24:07.350 --> 02:24:09.510
Ryan Mehta: It's just super complicated for humans to read

1046
02:24:10.080 --> 02:24:12.420
Ryan Mehta: You know, there's like nothing modern in it. Anything.

1047
02:24:22.320 --> 02:24:22.740
Ryan Mehta: Okay.

1048
02:24:24.330 --> 02:24:28.290
Ryan Mehta: Yeah, so that's what pack, pretty much. It does a lot of crazy stuff with our code.

1049
02:24:29.310 --> 02:24:31.980
Ryan Mehta: I don't know. It makes me very

1050
02:24:33.420 --> 02:24:40.890
Ryan Mehta: Sometimes it makes me very uncomfortable when I think about what's actually happening to my code and how web pack is changing my code.

1051
02:24:43.770 --> 02:24:47.280
Ryan Mehta: Like this, like so extremely feels like sometimes

1052
02:24:50.010 --> 02:24:59.070
Ryan Mehta: But yeah, if that's happening. This is the life of a front end developer, you can imagine the frustration that you would experience if

1053
02:25:00.330 --> 02:25:16.950
Ryan Mehta: You wrote some code there were some bug in it that got reported and you're like spending hours or days or like a week, trying to find the bug in your code and then realize that it was a bug in the way that Babel chance piled your code that would be incredibly frustrating.

1054
02:25:18.210 --> 02:25:19.290
To experience.

1055
02:25:21.240 --> 02:25:35.370
Adrian Simental: In that case, would like a bigger company or if you were building something. Would you use like a loader like this, or would you build your own in house one where you would know where all the bugs or or you could look at the code more directly

1056
02:25:36.270 --> 02:25:38.010
Ryan Mehta: I would be way more afraid of it in

1057
02:25:38.010 --> 02:25:53.610
Ryan Mehta: House one because it would have only been tested for your previous use cases, not for future use cases were at least Babel, because it's open source, and tons of companies are using it. It's used for like use cases that you haven't thought of yet.

1058
02:25:54.930 --> 02:25:56.820
Ryan Mehta: So I feel like, way more comfortable with it.

1059
02:25:59.700 --> 02:26:03.120
Josh Olloqui: Is there's like a quick way to know that. It's Babel and not your code.

1060
02:26:04.770 --> 02:26:05.100
Ryan Mehta: Know,

1061
02:26:06.780 --> 02:26:12.120
Ryan Mehta: It's probably almost never babel. But that's why you wouldn't assume that it was to begin with.

1062
02:26:16.170 --> 02:26:18.750
Ryan Mehta: But it would be frustrating if you found out that it was

1063
02:26:22.170 --> 02:26:24.570
Ron Yonker: There are other jazz sex transpires than Babel.

1064
02:26:26.370 --> 02:26:27.960
Ryan Mehta: Yeah, there's other ones.

1065
02:26:28.230 --> 02:26:33.060
Ryan Mehta: For sure, but pretty much if you're using web pack, you're going to be using Babel.

1066
02:26:41.970 --> 02:26:42.480
Ryan Mehta: All right.

1067
02:26:43.980 --> 02:26:47.550
Ryan Mehta: Um, I think that was it that I really wanted to talk about today.

1068
02:26:49.530 --> 02:26:53.130
Ryan Mehta: The lab for today is really just playing with web pack like this.

1069
02:27:02.250 --> 02:27:04.560
Ryan Mehta: So the lab today.

1070
02:27:08.370 --> 02:27:09.330
Is this thing.

1071
02:27:10.470 --> 02:27:11.520
Ryan Mehta: There's a GitHub.

1072
02:27:12.900 --> 02:27:15.360
Ryan Mehta: Classrooms link for the lab today.

1073
02:27:17.760 --> 02:27:19.230
Ryan Mehta: It will take you

1074
02:27:21.210 --> 02:27:21.990
Ryan Mehta: To get hub.

1075
02:27:28.350 --> 02:27:29.790
Ryan Mehta: And I already have one.

1076
02:27:33.990 --> 02:27:39.030
Ryan Mehta: So I'll take you to these exercises. There are seven exercises today.

1077
02:27:40.560 --> 02:27:48.000
Ryan Mehta: You should be able to run in PM. Run Test star and they'll tell you which of these exercises you passed which he failed.

1078
02:27:49.500 --> 02:28:06.510
Ryan Mehta: It's going to be auto graded. So you can see your grade by typing in PM read grade and they'll tell you what your grade will be if you turned it in currently in each of these directories is another readme. That tells you what you're supposed to do for the exercise. So for exercise one

1079
02:1160
02:13:44.760 --> 02:13:45.930
Ryan Mehta: So this red stuff.

1161
02:13:47.460 --> 02:13:52.020
Ryan Mehta: Anybody, anybody know what that red stuff might be closing us into

1162
02:13:54.060 --> 02:13:55.050
Ben Waples: Doesn't need a key.

1163
02:13:55.890 --> 02:13:58.350
Ryan Mehta: Needs a key. Exactly.

1164
02:14:00.300 --> 02:14:01.620
Ryan Mehta: Can make the key the link

1165
02:14:02.670 --> 02:14:07.620
Ryan Mehta: Anybody know what these keys are doing wide list items. Always want keys here.

1166
02:14:11.580 --> 02:14:16.050
Patrick Wilson: Ops react. Keep the items straight and system.

1167
02:14:16.830 --> 02:14:17.970
Ryan Mehta: Exactly, yeah.

1168
02:14:19.020 --> 02:14:21.720
Ryan Mehta: So these keys.

1169
02:14:23.310 --> 02:14:26.280
Ryan Mehta: Help keep react help react. Keep the list item straight

1170
02:14:26.700 --> 02:14:27.900
Patrick Wilson: For the render, I guess.

1171
02:14:28.560 --> 02:14:32.070
Ryan Mehta: For the render. Exactly. So the key is basically the ID.

1172
02:14:33.240 --> 02:14:34.320
Ryan Mehta: Each list item.

1173
02:14:35.490 --> 02:14:56.610
Ryan Mehta: So each one should have some unique ID associated with it. This is what helps react when it renders the list items not have to do too many renderings. So let's say we have a list like this and at some point in the future we append a new item to the list.

1174
02:14:59.520 --> 02:15:09.960
Ryan Mehta: If we didn't have keys react would have no way of knowing whether we just appended a new item or whether we have a brand new list. So without keys react has to go through

1175
02:15:10.440 --> 02:15:25.020
Ryan Mehta: And re render each item and the list redraw everything with keys, it will notice that the IDs. The keys are all the same of the first three items and instead of rendering everything. It will append to the DOM.

1176
02:15:26.370 --> 02:15:29.100
Ryan Mehta: The same thing happens if you add an item in the middle here.

1177
02:15:30.720 --> 02:15:45.180
Ryan Mehta: We add an item to the middle react will see that this items, the same this items, the same this items, the same and this items have the same. So we'll inject an item into the list. Instead of trying to redraw the entire thing.

1178
02:15:46.230 --> 02:15:47.940
Ryan Mehta: The keys are wet let it do that.

1179
02:15:49.200 --> 02:15:58.140
Ryan Mehta: So whenever it sees a new key and knows that it needs it can, like, figure out where that key exists on the list without the keys. It just sees a brand new list every time.

1180
02:16:00.090 --> 02:16:19.770
Ryan Mehta: With a list of, like, three things you can imagine that not being super important, but with a list of 1000 things if you append your 1001 thing to the list. It makes it so just has to draw one thing on the DOM instead of redrawing the entire page which can be super expensive.

1181
02:16:21.300 --> 02:16:39.510
Ryan Mehta: So make sure that you have these keys and these keys are unique. It also totally breaks the system. If you have to list items with the same key because now it doesn't know really how to handle that it sees to list is the same key and thinks of the same thing.

1182
02:16:40.860 --> 02:16:41.550
Don't break it.

1183
02:16:44.070 --> 02:16:52.020
Patrick Wilson: I used to use the iterator as the key, but the readings said that it could be, it could cause problems when you rearrange the list.

1184
02:16:52.620 --> 02:16:53.940
Ryan Mehta: Yep. So you don't want to use the

1185
02:16:53.970 --> 02:16:54.780
Index.

1186
02:16:55.980 --> 02:16:57.150
Ryan Mehta: Because

1187
02:16:58.650 --> 02:17:02.280
Ryan Mehta: If you use the key as the index.

1188
02:17:05.130 --> 02:17:08.520
Ryan Mehta: Say, so this is zero, this was

1189
02:17:09.990 --> 02:17:10.590
One.

1190
02:17:11.730 --> 02:17:15.720
Ryan Mehta: Key is to if you rearrange these two items.

1191
02:17:17.430 --> 02:17:29.580
Ryan Mehta: The keys don't change it doesn't react as a know that you put two here and one down below it thinks that you just didn't do anything. You didn't make a change, because they'll have the same key. So it actually won't redraw it all.

1192
02:17:31.410 --> 02:17:37.500
Ryan Mehta: So if you rearrange those and had used the indexes. The key react actually wouldn't change the display would be a bug.

1193
02:17:40.710 --> 02:17:46.890
Patrick Wilson: But if you use the index and some text would it just be the same problem because the key would just be the same.

1194
02:17:49.740 --> 02:17:57.000
Ryan Mehta: Yeah, then instead of actually moving these items because it can just like what flip the two items and not have to redraw things

1195
02:17:57.360 --> 02:18:06.570
Ryan Mehta: It would destroy the two items and then redraw them, but only these two. So it's still slightly less performant because the keys would change instead of the keys remaining the same.

1196
02:18:08.940 --> 02:18:09.270
Okay.

1197
02:18:12.030 --> 02:18:21.690
Ryan Mehta: Um, for us, once we have full stack apps. It'll be easy to figure out what to use as the key, because we'll just see us like our database IDs as a key these items.

1198
02:18:26.130 --> 02:18:28.650
Ryan Mehta: All right, well, we've gone five minutes over.

1199
02:18:30.960 --> 02:18:33.960
Ryan Mehta: Any final questions about this little up here.

1200
02:18:39.300 --> 02:18:40.950
Okay, I'm gonna kill this thing.

1201
02:18:42.600 --> 02:18:48.090
Ryan Mehta: And let's look at the lab, really, really quick and then we can go to lunch.

1202
02:18:50.130 --> 02:18:52.800
Ryan Mehta: The lab for today is

1203
02:18:56.100 --> 02:18:57.570
Ryan Mehta: A list of things.

1204
02:18:59.220 --> 02:19:05.610
Ryan Mehta: So you can use one of these API's for any other one of your pic choosing

1205
02:19:06.960 --> 02:19:15.510
Ryan Mehta: You're going to have a page that displays a list of items from this API, you should be able to click on one of the items and go to a detail page.

1206
02:19:17.040 --> 02:19:21.750
Ryan Mehta: So we didn't talk about react router. We're not going to talk about react router. Until next week, probably

1207
02:19:22.800 --> 02:19:27.240
Ryan Mehta: But you all have used react router in the past so

1208
02:19:29.100 --> 02:19:34.440
Ryan Mehta: You should be able to do it. Still, I think, if not react router has really really good documentation.

1209
02:19:37.230 --> 02:19:42.000
Ryan Mehta: That's pretty much it. So have a list of things and a detail page.

1210
02:19:45.840 --> 02:19:48.840
Ryan Mehta: I'm going to get rid of this because we didn't talk about that.

1211
02:19:55.110 --> 02:20:00.960
ryan Diffenbaugh: So it's pretty similar to the pokey decks after we made like but one of the last things and conditions.

1212
02:20:02.850 --> 02:20:05.280
Ryan Mehta: Yep, except with all that without all the searching stuff.

1213
02:20:10.920 --> 02:20:15.090
Thomas Stussi: So we're not testing this anymore until we get snapshots.

1214
02:20:16.650 --> 02:20:18.270
Ryan Mehta: Yeah, it's not tested yet.

1215
02:20:19.620 --> 02:20:19.890
Ryan Mehta: Was

1216
02:20:20.310 --> 02:20:21.810
Thomas Stussi: Testing to tomorrow's lab.

1217
02:20:31.650 --> 02:20:34.170
Jerud Moyer: Are you pushing that first app you made. So we use

1218
02:20:35.190 --> 02:20:37.470
Jerud Moyer: Or one of them just going to fetch we suffer.

1219
02:20:38.730 --> 02:20:41.490
Ryan Mehta: Yeah, I'm gonna push all of those apps. Cool. Thanks.

1220
02:20:49.560 --> 02:20:51.630
Ryan Mehta: Any other questions. Does the

1221
02:20:57.060 --> 02:20:57.900
Ryan Mehta: List of things.

1222
02:21:02.700 --> 02:21:09.960
ryan Diffenbaugh: Lots of things he was fine. I'm just trying to remember how to route to the details page and to show the details of a particular thing.

1223
02:21:10.800 --> 02:21:11.640
Ryan Mehta: Yeah, totally.

1224
02:21:12.330 --> 02:21:12.510
Yeah.

1225
02:21:14.100 --> 02:21:15.510
Edgar Cuellar: We're using a bootstrap

1226
02:21:16.980 --> 02:21:17.820
Ryan Mehta: Can use what

1227
02:21:18.330 --> 02:21:19.800
Edgar Cuellar: Are we were using the bootstrap

1228
02:21:20.430 --> 02:21:20.700
Yep.

1229
02:21:30.150 --> 02:21:30.720
Patrick Wilson: And we said that

1230
02:21:33.720 --> 02:21:34.770
Ryan Mehta: You don't need to deploy it.

1231
02:21:36.810 --> 02:21:37.770
Patrick Wilson: You don't need to play.

1232
02:21:38.700 --> 02:21:42.510
Thomas Stussi: Is this a GitHub classroom situation again.

1233
02:21:42.990 --> 02:21:44.850
It's not just

1234
02:21:45.960 --> 02:21:46.830
Ryan Mehta: Your own repo.

1235
02:21:52.410 --> 02:21:55.050
Ryan Mehta: The good thing is we're going to do the same app like

1236
02:21:56.160 --> 02:22:01.650
Ryan Mehta: Three times, pretty much. So they'll get good at making lists and detail pages.

1237
02:22:09.540 --> 02:22:16.980
Ryan Mehta: By, by the way. One strategy for this, especially since the router part is something that we haven't covered yet and career track it might have been a while.

1238
02:22:18.720 --> 02:22:35.340
Ryan Mehta: I would write your application just the list part of your application and import the list into App JS and make sure you can display a list of items first before even touching the router. So just worried about getting a list on the page before touching the router.

1239
02:22:42.330 --> 02:22:45.870
Ryan Mehta: All right. Good luck. See you all after lunch.

1240
02:22:51.300 --> 02:22:51.630
Annalise Murphy: You

from the API manage the data a little bit and then set our villagers array to whatever the API gave us back.

943
01:56:43.800 --> 01:56:46.020
Let's see that test passes still

944
01:56:48.270 --> 01:56:50.700
Ryan Mehta: Broke everything which is probably okay.

945
01:56:58.410 --> 01:57:00.720
Ryan Mehta: That's perfect. Okay, that's kind of where I want to be.

946
01:57:04.110 --> 01:57:06.630
Ryan Mehta: This look good dispatch thing here.

947
01:57:09.210 --> 01:57:21.360
Ryan Mehta: All right, let's manually test this and see if we get anything a loading spinner, a loading spinner loading spinner. Let's check out our react state.

948
01:57:24.720 --> 01:57:26.520
Ryan Mehta: Nothing nothing's happening.

949
01:57:34.560 --> 01:57:35.190
Ryan Mehta: Course

950
01:57:37.980 --> 01:57:41.280
Ryan Mehta: Anybody remember that trick that we use yesterday to get around course.

951
01:57:42.180 --> 01:57:44.400
Brooke Perkins (she/her): Or is anywhere. Nice.

952
01:57:45.420 --> 01:57:54.780
Ryan Mehta: Let's grab that course anywhere you can drop it in front of this thing, the one key with course anywhere.

953
01:57:56.070 --> 01:57:59.100
Ryan Mehta: Is that we need to have a header.

954
01:58:01.110 --> 01:58:02.670
Ryan Mehta: That says origin.

955
01:58:04.440 --> 01:58:05.040
Ryan Mehta: No.

956
01:58:06.960 --> 01:58:10.440
Ryan Mehta: All right, let's see if that that worked.

957
01:58:13.080 --> 01:58:20.490
Ryan Mehta: Over and our components we get our list of villagers now which is perfect, but our loading screen stays forever.

958
01:58:22.050 --> 01:58:24.240
Ryan Mehta: Any ideas of why the loading screen stays

959
01:58:25.470 --> 01:58:27.090
ryan Diffenbaugh: Because they need to announce or something.

960
01:58:28.860 --> 01:58:30.390
Ryan Mehta: We never set loading the false

961
01:58:33.600 --> 01:58:35.310
Ryan Mehta: So we could set loading defaults here.

962
01:58:39.150 --> 01:58:40.170
Ryan Mehta: And then

963
01:58:41.850 --> 01:58:46.620
Ryan Mehta: We get our initial little loading page and the list of characters.

964
01:59:01.740 --> 01:59:03.840
Ryan Mehta: How does that look this fetch.

965
01:59:08.310 --> 01:59:19.920
Ryan Mehta: Alright, let's migrate this fetch into a service directory that because we don't really want this code here. We're going to move it to a service directory. So it's in its own little location has its own little spot.

966
01:59:21.810 --> 01:59:34.500
Ryan Mehta: I'm going to make a services and let's call this villager API, J. Yes, we're going to export a constant get villagers.

967
01:59:36.570 --> 01:59:40.380
Ryan Mehta: And from this, we're going to return this fetch chain.

968
01:59:41.580 --> 01:59:41.970
Here.

969
01:59:44.430 --> 01:59:47.550
Ryan Mehta: Return all that fetch stuff.

970
01:59:51.780 --> 01:59:53.040
Ryan Mehta: Disable that line.

971
01:59:54.330 --> 02:00:01.410
Ryan Mehta: So this get villagers will return and array with id, name and image URL of our villager

972
02:00:02.490 --> 02:00:04.470
Ryan Mehta: Back in are all villagers.

973
02:00:05.790 --> 02:00:08.400
Ryan Mehta: We can use our get villager

974
02:00:11.130 --> 02:00:12.030
Ryan Mehta: villager us

975
02:00:13.950 --> 02:00:14.520
Like so.

976
02:00:19.050 --> 02:00:19.380
Ryan Mehta: Good.

977
02:00:22.350 --> 02:00:34.320
Ryan Mehta: It should still work as it did before we just move some code from this folder into our villager API file.

978
02:00:39.090 --> 02:00:39.630
Ryan Mehta: Alright.

979
02:00:42.060 --> 02:00:48.360
Ryan Mehta: Kind of a big concept that we want to that I want to introduce right here is the concept of mocking

980
02:00:49.890 --> 02:00:53.760
Ryan Mehta: Right now, we're actually fetching from this villagers API.

981
02:00:54.840 --> 02:01:02.460
Ryan Mehta: Which is unfortunate, for a few reasons. First reason why it's unfortunate is if this API had a rate limit on it.

982
02:01:03.150 --> 02:01:14.160
Ryan Mehta: Every time we run our test we're running up our rate limit. We don't really want to run up our rate limit for our tests, we don't want our test to start failing because we've ran too many tests either like Imagine running your tests.

983
02:01:14.790 --> 02:01:26.460
Ryan Mehta: 200 times in the day, but your rate limit and your rate limit is only 200 per day, your tests would start to fail after that and not for a good reason. But because you ran too many tests.

984
02:01:28.260 --> 02:01:36.570
Ryan Mehta: Also, if your API costs money you're going to be charged every time you run your tests by the API, which is also unfortunate.

985
02:01:37.800 --> 02:01:49.200
Ryan Mehta: So what we often do when we're using a third party API like this in our test. We're going to mock the service mock the request to the API.

986
02:01:50.430 --> 02:02:03.570
Ryan Mehta: What that looks like is in our test will say something like, just Mock and then we give the just mock the directory of our the file where our service lives.

987
02:02:04.740 --> 02:02:15.720
Ryan Mehta: Like this. At this point, Justice seeing that we're trying to mock this API and will no longer bring in the real fetch function that we have over here.

988
02:02:16.980 --> 02:02:23.220
Ryan Mehta: It brings in a mock version of it so will no longer actually be hitting the API in our

989
02:02:26.250 --> 02:02:29.940
Ryan Mehta: In our test we're faking that we're going to the API.

990
02:02:31.380 --> 02:02:35.580
Ryan Mehta: Inside of the actual it block you do something like

991
02:02:37.980 --> 02:02:41.910
Ryan Mehta: Get villagers dot mock resolve.

992
02:02:42.930 --> 02:02:43.680
Ryan Mehta: Value.

993
02:02:45.060 --> 02:02:50.340
Ryan Mehta: And you give it what you want get villagers to return in this mock case.

994
02:02:51.510 --> 02:03:10.290
Ryan Mehta: So we're saying mock this function over here whenever somebody calls this get villagers function return whatever we put in these parentheses. So we're not going to actually go to the API and get a villager we're going to return an array of our villagers.

995
02:03:11.520 --> 02:03:12.300
ID.

996
02:03:36.090 --> 02:03:37.440
Ryan Mehta: Kind of confusing, but

997
02:03:39.120 --> 02:03:41.340
Ryan Mehta: Anybody have any questions about this.

998
02:03:42.300 --> 02:03:52.950
Thomas Stussi: Mocking situation. So you got you like hard saved that whole like the entire API almost in that services folders that right

999
02:03:56.580 --> 02:03:58.950
Thomas Stussi: Didn't you do something along those lines.

1000
02:03:59.340 --> 02:04:01.350
Ryan Mehta: I don't want point I did, but I got rid of all of

1001
02:04:01.350 --> 02:04:13.350
Thomas Stussi: That. Okay, assuming you did do that. Like you just made the call once and then like copied all that information to a file, could you have the mock resolve value be that whole array.

1002
02:04:13.830 --> 02:04:20.370
Thomas Stussi: Totally. So you're basically like have the API. Totally good. Okay.

1003
02:04:23.250 --> 02:04:27.060
Ron Yonker: So if you're not doing that. What's the mock actually doing.

1004
02:04:27.810 --> 02:04:31.470
Ron Yonker: The market as far as filling in like that data.

1005
02:04:32.490 --> 02:04:35.610
Ryan Mehta: Yeah. All it's doing is making it so we don't actually hit

1006
02:04:35.610 --> 02:04:37.380
Ryan Mehta: This API. So this line.

1007
02:04:37.440 --> 02:04:42.060
Ryan Mehta: Is just making it so it pretty much just clears out this function for us.

1008
02:04:44.310 --> 02:05:05.160
Ryan Mehta: The second part of the mock is this mock resolved value which is saying, whenever we call get villagers instead of actually hitting the API and getting a result we're going to make it return this array here so villagers here in our test will always equal

1009
02:05:06.090 --> 02:05:06.750
Ron Yonker: This array.

1010
02:05:07.980 --> 02:05:08.310
Ron Yonker: Okay.

1011
02:05:09.600 --> 02:05:09.990
Ron Yonker: Thank you.

1012
02:05:12.660 --> 02:05:23.280
Sarah Rector: So then ran when you're doing this. Should you always test the actual API call first before setting up a mock to know that that's working.

1013
02:05:24.510 --> 02:05:28.920
Ryan Mehta: Yeah, so the actual API call test, you could test.

1014
02:05:31.650 --> 02:05:45.570
Ryan Mehta: By like testing this file if you wanted to, but you can always do this right away or really like quite soon because you're probably going to be manually testing this anyways and making sure that you get

1015
02:05:46.950 --> 02:05:52.200
Ryan Mehta: The results when you actually go to this in your browser you're still going to be getting the results from the real API.

1016
02:05:52.560 --> 02:06:00.030
Ryan Mehta: It's just in these like automated tests, you won't get the real results from the API. Gotcha. Okay.

1017
02:06:07.140 --> 02:06:07.500
OK.

1018
02:06:10.230 --> 02:06:11.640
So we also need this thing.

1019
02:06:13.140 --> 02:06:15.150
Ryan Mehta: Here for a loading screen.

1020
02:06:17.520 --> 02:06:21.090
Ryan Mehta: Let's make sure these tests all pass before we move too far.

1021
02:06:28.350 --> 02:06:28.620
Okay.

1022
02:06:30.600 --> 02:06:31.170
That's good.

1023
02:06:32.520 --> 02:06:33.900
Ryan Mehta: I'm actually just gonna delete.

1024
02:06:35.280 --> 02:06:37.860
Ryan Mehta: The app snapshot test is sort of

1025
02:06:39.630 --> 02:06:41.490
Ryan Mehta: Like silly at this point.

1026
02:06:43.410 --> 02:06:44.970
Ryan Mehta: It's not really testing anything

1027
02:06:53.100 --> 02:06:57.690
Ryan Mehta: Okay. All of our tests pass now so we're mocking resolved value.

1028
02:06:59.040 --> 02:06:59.490
Sets.

1029
02:07:06.450 --> 02:07:14.370
Ryan Mehta: Were mocking are resolved value. Whenever we call get villagers. We're always going to be returning disarray villagers. This prevents us from actually hitting

1030
02:07:14.730 --> 02:07:29.490
Ryan Mehta: The villagers API. We don't actually want to go there in our tests. If you have auto save on every time you type something in your terminal or in your VS Code, you're going to be hitting that API. And very quickly, anger, these API people

1031
02:07:31.110 --> 02:07:37.710
Ryan Mehta: Now we kind of avoid that. But we can still test that we actually get results back from our API in our browser.

1032
02:07:38.790 --> 02:07:39.060
Here.

1033
02:07:43.080 --> 02:07:47.520
Ryan Mehta: All right. There's our little list of things component

1034
02:07:49.620 --> 02:07:59.790
Ryan Mehta: Let's add a little bit more to this test, assuming everything finishes. Once we get our villagers list, we want to make sure that our villagers list.

1035
02:08:03.180 --> 02:08:04.170
Ryan Mehta: To

1036
02:08:06.480 --> 02:08:07.170
Ryan Mehta: Not

1037
02:08:14.700 --> 02:08:15.780
Ryan Mehta: Empty DOM element.

1038
02:08:18.390 --> 02:08:26.130
Ryan Mehta: Is thing makes sense. We expect the villagers list, not to be empty basically effect is actually list items in it.

1039
02:08:28.260 --> 02:08:29.010
Should pass

1040
02:08:43.830 --> 02:08:44.550
Ryan Mehta: See him. Okay.

1041
02:08:45.720 --> 02:08:55.050
Ryan Mehta: So mockery API. Whenever we call it get villagers. We're going to get a list of villagers we render are all villagers on the page.

1042
02:08:56.130 --> 02:09:07.350
Ryan Mehta: We find our villagers list, which is going to take some time. So we use the Find instead of the get it takes some time because initially when the page first loads. We're going to have a loading spinner.

1043
02:09:09.000 --> 02:09:18.150
Ryan Mehta: We're going to fetch from our API, which is going to give us back this mocked array and then we're going to set our village or state. We're going to set loading to false.

1044
02:09:18.630 --> 02:09:31.500
Ryan Mehta: And then actually display our list of villagers once we get our list of villagers. We expect the list of villagers to not be empty, we expect there to be list items inside of the UL

1045
02:09:34.140 --> 02:09:35.490
Ryan Mehta: And that's pretty much our whole thing.

1046
02:09:37.020 --> 02:09:38.490
A whole little list of run

1047
02:09:39.720 --> 02:09:46.710
Ron Yonker: Were saying about the fine taking some time bye bye test ID versus the get

1048
02:09:47.430 --> 02:09:52.050
Ryan Mehta: Yeah, so get here whenever you get by.

1049
02:09:53.610 --> 02:09:57.630
Ryan Mehta: It's checking to see if the screen currently has villagers on it.

1050
02:09:59.040 --> 02:10:00.000
Ryan Mehta: Find by

1051
02:10:02.160 --> 02:10:10.260
Ryan Mehta: checks to see if it currently has villagers but waits a little while to see if it will eventually have Villagers also I think it waits for one second.

1052
02:10:10.560 --> 02:10:11.490
Ron Yonker: Or something like that.

1053
02:10:14.370 --> 02:10:22.950
Ryan Mehta: Which is why we have to await it. So if it's not there right at the beginning. It'll wait for up to one second to check to see if villagers list eventually makes it onto the

1054
02:10:22.950 --> 02:10:28.560
Ryan Mehta: Screen, which is perfect for us because we really don't have villagers list on the page initially

1055
02:10:29.070 --> 02:10:31.020
Ryan Mehta: We have loading initially and then

1056
02:10:31.320 --> 02:10:37.740
Ryan Mehta: At some point in the future villagers list ends up on the page. Once this promise results.

1057
02:10:41.700 --> 02:10:42.870
Ron Yonker: Okay, thank you.

1058
02:10:44.970 --> 02:10:54.420
Brooke Perkins (she/her): That's something that is like a universal and like find versus get or is it just something that's happening here in this kind of syntax.

1059
02:10:54.900 --> 02:10:55.710
Ryan Mehta: Yeah, it's

1060
02:10:56.160 --> 02:11:07.710
Ryan Mehta: The it surprised me that that was the two usages of those things normally they're synonyms finding get so yeah I was surprised.

1061
02:11:14.640 --> 02:11:20.880
Ben Waples: See, he said, this is like behavior testing, right. So, or like mock testing. So is it like mocking the

1062
02:11:22.140 --> 02:11:29.700
Ben Waples: What the app is going to do, whereas those stuff was like the screenshot tests are just making sure the UI looks right.

1063
02:11:30.600 --> 02:11:31.920
Ryan Mehta: Yeah. So usually the

1064
02:11:32.040 --> 02:11:40.950
Ryan Mehta: The snapshot tests are like, like you said, making sure the UI looks good. These are called regression tests, usually because

1065
02:11:41.940 --> 02:11:54.780
Ryan Mehta: You don't test beforehand you manually test. Make sure everything looks good and then take a snapshot. And the whole point of the snapshot is to make sure that you never regress backwards. You never get out of a good state.

1066
02:11:56.280 --> 02:12:06.510
Ryan Mehta: These tests are more like unit tests behavioral unit tests, they're checking to make sure that the behavior of the application works the way you expect it to.

1067
02:12:16.440 --> 02:12:18.990
Ryan Mehta: All right, we have like 15 minutes for our router.

1068
02:12:20.340 --> 02:12:31.050
Ryan Mehta: Let's, let's, let's do this router thing. Um, let's see how quickly can be with it. I don't think it'll take too long. I think you all just need like a little bit of remembering the router.

1069
02:12:32.130 --> 02:12:36.720
Ryan Mehta: So I'm going to MPM I react router DOM.

1070
02:12:39.300 --> 02:12:47.310
Ryan Mehta: React router DOM allows us to have this fret and rowdy fig. So almost acts as if we're going to different pages.

1071
02:12:47.910 --> 02:12:58.170
Ryan Mehta: To the user, it seems like they're going to different pages, but in actuality, they're always hitting the same index dot HTML. And then we're conditionally rendering different components.

1072
02:12:59.790 --> 02:13:06.990
Ryan Mehta: And really that's28:07.710 --> 02:28:19.770
Ryan Mehta: You are supposed to fix the web pack config JS so that entry dot j s is used as the entry point. So instead of using the default entry point. Make sure it points to this entry JS file.

1080
02:28:21.090 --> 02:28:23.070
Looks. That's the answer. Don't look at that.

1081
02:28:25.380 --> 02:28:31.890
Ryan Mehta: So that's the upgrade. You've already. I'm going to use Greg. Can I use yours as an example.

1082
02:28:32.130 --> 02:28:32.490
Sure.

1083
02:28:37.530 --> 02:28:44.190
Ryan Mehta: So yeah, so you need to change this web pack config file, which starts off as empty and

1084
02:28:46.980 --> 02:28:49.200
Ryan Mehta: Make it so easy. This entry JS file.

1085
02:28:50.670 --> 02:28:57.090
Ryan Mehta: Exercise to fix a web pack config jazz. So the bundle is saved and build slash bundle JS.

1086
02:28:58.440 --> 02:29:02.490
Ryan Mehta: So you need to update this so that way it uses the

1087
02:29:03.540 --> 02:29:09.300
Ryan Mehta: Index JS here and outputs a build bundle JS, there's some documentation that you can read

1088
02:29:11.220 --> 02:29:13.890
Ryan Mehta: Well that exercise three

1089
02:29:15.090 --> 02:29:21.510
Ryan Mehta: Entry is bundled in bit builds bundle JS, so use this entry jazz change the web pack config.

1090
02:29:22.560 --> 02:29:23.850
Ryan Mehta: They're all kind of like this.

1091
02:29:26.640 --> 02:29:30.120
Ryan Mehta: Bundle some hash. So now you're going to use some hash.

1092
02:29:33.210 --> 02:29:50.130
Ryan Mehta: Yeah, I think them, the only one that's sort of different is this exercise seven, which tells you to create a React application using the Create React app built pack or whatever, calling it bootstrap and then run and PM rented jacked.

1093
02:29:51.240 --> 02:29:53.850
Ryan Mehta: When you inject a create React app.

1094
02:29:54.870 --> 02:30:07.050
Ryan Mehta: It will show you the web pack file that it used to bundle your create React app. And you'll see something that's probably pretty crazy looking compared to the one that that you right

1095
02:30:10.530 --> 02:30:12.330
Ryan Mehta: Yeah, so seven exercises.

1096
02:30:13.950 --> 02:30:15.660
Ryan Mehta: Any questions about these things.

1097
02:30:24.060 --> 02:30:24.990
Michelle Stermitz: How do you turn it in.

1098
02:30:27.570 --> 02:30:31.530
Ryan Mehta: It'll automatically get turned in at least the grade will automatically get

1099
02:30:32.130 --> 02:30:34.560
Ryan Mehta: Compiled it's just the normal canvas submission

1100
02:30:36.060 --> 02:30:37.140
Ryan Mehta: To link to your repo.

1101
02:30:38.580 --> 02:30:46.200
Ryan Mehta: But this this classroom thing is kind of nice. I don't know. I can share you the view that we get. We get to see

1102
02:30:47.280 --> 02:30:52.650
Ryan Mehta: Like your grade on it over time. Maybe I shouldn't have shown this because it shows everybody's grade.

1103
02:30:55.650 --> 02:31:00.510
Ryan Mehta: But like as you fill in the exercise like Greg, you're, you're totally failing this right now.

1104
02:31:04.170 --> 02:31:05.820
Ryan Mehta: But as you pass the test to like

1105
02:31:06.870 --> 02:31:07.950
Ryan Mehta: Increase your points.

1106
02:31:11.310 --> 02:31:14.640
Ryan Mehta: But yeah, to answer your question, just turned it to be a canvas, like always.

1107
02:31:27.180 --> 02:31:27.810
Come here.

1108
02:31:31.590 --> 02:31:33.030
Ryan Mehta: Any other questions about it.

1109
02:31:38.280 --> 02:31:40.320
Thomas Stussi: How do we navigate to that again.

1110
02:31:41.580 --> 02:31:44.910
Ryan Mehta: There's a link to it in the

1111
02:31:47.070 --> 02:31:48.810
Ryan Mehta: Lab MD file for today.

1112
02:32:14.550 --> 02:32:15.930
Ryan Mehta: Any other questions.

1113
02:32:17.820 --> 02:32:19.470
Ben Waples: We just for the repo. That's all.

1114
02:32:20.700 --> 02:32:23.070
Ryan Mehta: If you go to that lab repo.

1115
02:32:23.430 --> 02:32:27.810
Ryan Mehta: Or this like if you click on this link, it'll automatically set up the repo for you.

1116
02:32:28.560 --> 02:32:28.890
Good.

1117
02:32:38.220 --> 02:32:38.820
Annalise Murphy: Sweet.

1118
02:32:40.560 --> 02:32:41.370
Ryan Mehta: All right, well,

1119
02:32:41.430 --> 02:32:50.940
Ryan Mehta: That's it. Good luck. I don't think yeah i think if you get done with this lab early which is totally possible. Just try to play with web pack a little bit and explore it.

1120
02:32:51.240 --> 02:33:04.290
Ryan Mehta: also explore the Create react apps web pack. There's, it's like a really large file and it's just interesting to go through it and look up some of the packages and plugins that they're using see what they do see what's out there.

1121
02:33:08.160 --> 02:33:21.390
Jerud Moyer: Did you say the link change because I'm getting a 404 on FS JS September 2020. I don't think so.

1122
02:33:24.390 --> 02:33:27.090
Ryan Mehta: Let me see. Did you did you, did we just like delete you

1123
02:33:28.230 --> 02:33:34.830
Jerud Moyer: I don't know i i did yesterday, you know, erase all my internet files or whatever but

1124
02:33:36.300 --> 02:33:37.980
Jerud Moyer: I don't know why would not use the

1125
02:33:39.900 --> 02:33:40.650
Patrick Wilson: Calendar, Jared.

1126
02:33:41.250 --> 02:33:41.850
Jerud Moyer: Was that

1127
02:33:42.180 --> 02:33:43.530
Patrick Wilson: I found it through the calendar.

1128
02:33:43.890 --> 02:33:44.400
Jerud Moyer: You did.

1129
02:33:44.820 --> 02:33:47.100
Patrick Wilson: Just click on the assignment and it has the link in there.

1130
02:33:47.520 --> 02:33:56.700
Jerud Moyer: Okay, but it's very okay I'll look at that, too. But is there any reason why this link. I'm going to put in the chat here. Should I be working

1131
02:33:57.630 --> 02:33:59.160
Ryan Mehta: I think, are you not logged in.

1132
02:34:01.830 --> 02:34:04.050
Jerud Moyer: Maybe not, but why we can use world for

1133
02:34:06.630 --> 02:34:12.870
Ryan Mehta: The class repo will give you a forum for if you're not a part of the alchemy organization.

1134
02:34:15.450 --> 02:34:16.260
Ryan Mehta: Not logged in.

1135
02:34:17.310 --> 02:34:18.300
Jerud Moyer: Okay. Alright, cool.

1136
02:34:20.310 --> 02:34:20.580
Weird

1137
02:34:24.840 --> 02:34:27.120
Ryan Mehta: It's a private rebel, essentially, yeah.

1138
02:34:27.330 --> 02:34:27.630
Okay.

1139
02:34:29.340 --> 02:34:36.540
Edgar Cuellar: With our check ins are you gonna message us to let us know time or should we go to lecture room or how we can do

1140
02:34:38.940 --> 02:34:41.220
Ryan Mehta: Like where to go for the check in.

1141
02:34:41.940 --> 02:34:43.230
Edgar Cuellar: Yeah, I think.

1142
02:34:43.260 --> 02:34:49.680
Ryan Mehta: Inside of the you should have gotten a calendar invite inside of the calendar invite the zoom link.

1143
02:34:52.350 --> 02:34:54.960
Ryan Mehta: I believe so. Yeah, I can share my calendar.

1144
02:34:57.300 --> 02:35:01.560
Ryan Mehta: Any of these calendar invites have a zoom link associated with it.

1145
02:35:03.330 --> 02:35:03.870
Edgar Cuellar: Yeah, I see.

1146
02:35:05.100 --> 02:35:05.400
Edgar Cuellar: Cool.

1147
02:35:08.340 --> 02:35:12.390
Ryan Mehta: Oh my gosh, my calendar so packed so intimidating.

1148
02:35:17.970 --> 02:35:20.580
Ryan Mehta: Let's see anything else, any other questions.

1149
02:35:24.330 --> 02:35:35.310
Ben Waples: I have a question about portfolios. If we use like one of our alchemy bootstraps for for, like, just to get the boilerplate for

1150
02:35:37.410 --> 02:35:43.590
Ben Waples: A repo to use for like a portfolio. Is there anything that's like

1151
02:35:46.080 --> 02:35:52.140
Ben Waples: Obvious that it's like a bootstrap like cuz or should we just start from scratch and bringing all that boilerplate.

1152
02:35:53.430 --> 02:35:55.290
Ryan Mehta: There's nothing obvious that it's a bootstrap

1153
02:35:56.310 --> 02:35:56.700
Ryan Mehta: Is it

1154
02:35:57.240 --> 02:35:57.630
Cool.

 what the router is it's really just a conditional rendering library that's like one thing to think that's how I think about this thing.

1073
02:13:08.460 --> 02:13:22.290
Ryan Mehta: So we're going to have an app JS page right and we have maybe two different main components that we want to load from our app JS page. We have our list component, and we have our detailed component

1074
02:13:26.070 --> 02:13:30.990
Ryan Mehta: Sometimes we want to render the list. Sometimes we want to render the detail.

1075
02:13:33.390 --> 02:13:51.480
Ryan Mehta: And it's conditional. It's based on the route. So let's say that when we're at the homepage. We want to live render the list component when we're at the slash detail slash ID page or route we want to render this detail component

1076
02:13:52.980 --> 02:14:00.300
Ryan Mehta: Under the hood all react router DOM is really doing is just saying if location.

1077
02:14:02.250 --> 02:14:12.510
Ryan Mehta: triple equals slash load this component. Else if location triple equals details ID load this component

1078
02:14:13.950 --> 02:14:33.510
Ryan Mehta: It's very similar to week one or two whenever we did that, like TCP router thing where we had those bunch of FL fifth react router Damas really doing the same thing under the hood, it's checking this URL and then conditionally rendering one component or another component

1079
02:14:35.670 --> 02:14:39.300
Ryan Mehta: The setup for it looks a bit wonky sometimes but

1080
02:14:41.730 --> 02:14:42.570
Let's check it out.

1081
02:14:43.710 --> 02:14:47.580
Ryan Mehta: So we're going to import a bunch of things from

1082
02:14:48.660 --> 02:14:50.550
Ryan Mehta: React router DOM.

1083
02:14:51.690 --> 02:15:10.650
Ryan Mehta: We're going to import something called browser router. Most people rename this to just router. So all this is doing the as is saying import browser router, but we're going to call it router in the body of our code if you got rid of this you would have browser router here.

1084
02:15:11.970 --> 02:15:13.710
Ryan Mehta: When you add as

1085
02:15:14.910 --> 02:15:21.180
Ryan Mehta: Router you're just renaming browser router to the other stuff that's all the ads is doing.

1086
02:15:24.360 --> 02:15:34.260
Ryan Mehta: The router is what sets up the initial router for us, like how we want to manage pages. This is where we're saying that we want to have a bunch of conditional inside of here.

1087
02:15:35.280 --> 02:15:46.740
Ryan Mehta: There's a few different types of routers. There's the browser router, which is the one that we're all familiar with. And there's also one called hash router. We'll explore those two different routers in just a second.

1088
02:15:48.180 --> 02:15:51.450
Ryan Mehta: Or maybe tomorrow because we have like only 10 minutes

1089
02:15:53.520 --> 02:15:55.890
Ryan Mehta: But the browser router is what we're most used to

1090
02:15:57.870 --> 02:16:02.910
Ryan Mehta: Surround everything with router after the router, we have these things called routes.

1091
02:16:04.380 --> 02:16:16.800
Ryan Mehta: So a route a route is those conditional that we had. So we're saying like, if something matches some path load this component. If it matches this path load this other component

1092
02:16:18.030 --> 02:16:21.330
Ryan Mehta: So in our case, we have at least right now a single route.

1093
02:16:22.380 --> 02:16:33.480
Ryan Mehta: Where the path is our homepage. I noticed that a lot of you use the render syntax here where you do you like drops or whatever.

1094
02:16:34.890 --> 02:16:38.220
And then all villagers.

1095
02:16:44.730 --> 02:16:50.340
Ryan Mehta: So whenever you're on the splash page render the all villagers component

1096
02:16:51.630 --> 02:17:00.960
Ryan Mehta: So if the path matches this render all villagers. I almost never use the render syntax. I prefer the component syntax.

1097
02:17:02.040 --> 02:17:03.780
Ryan Mehta: For you just do this sort of thing.

1098
02:17:05.430 --> 02:17:11.130
Ryan Mehta: So when you're on the home path load the all villagers component

1099
02:17:13.770 --> 02:17:16.290
Ryan Mehta: There's one key thing with React router, though.

1100
02:17:18.090 --> 02:17:28.620
Ryan Mehta: It does a match, but it's very loose with its matching algorithm. So right now this is saying that if any

1101
02:17:29.640 --> 02:17:36.930
Ryan Mehta: Like load the all villagers component whenever the URL has a slash in it.

1102
02:17:38.370 --> 02:17:42.960
Ryan Mehta: So the all villagers component will actually load on both of these pages.

1103
02:17:43.980 --> 02:17:51.480
Ryan Mehta: Actually see that right now. So we're saying load all villagers on slash free go to our page.

1104
02:17:52.650 --> 02:17:57.360
Ryan Mehta: All villagers loads. If we go to slash blah.

1105
02:17:58.620 --> 02:17:59.280
Blah.

1106
02:18:00.450 --> 02:18:00.930
Blah.

1107
02:18:02.040 --> 02:18:12.510
Ryan Mehta: All villagers still loads, because this path, still has a slash in it. So it's saying load all villagers whenever the path has a slash in it.

1108
02:18:13.320 --> 02:18:33.750
Ryan Mehta: If we had like the list here. Now we're saying load all villagers whenever there's a slash list on the page. So it won't load on blah, blah, blah. But it will load on flash list, it will load on flash list slash hy it'll load on flash list slash whatever

1109
02:18:35.220 --> 02:18:37.590
Ron Yonker: So, do we just pop it exact in there.

1110
02:18:38.460 --> 02:18:40.170
Ryan Mehta: Exactly. So that's what the exact

1111
02:18:40.170 --> 02:18:47.460
Ryan Mehta: Does so the exact says only load this when the path exactly matches flash

1112
02:18:49.410 --> 02:18:56.160
Ryan Mehta: So now and have to go to the actual homepage to load our all villagers.

1113
02:19:04.140 --> 02:19:09.990
Ryan Mehta: There's one other big thing with React router. One other big component that we often use that switch

1114
02:19:12.420 --> 02:19:14.880
Ryan Mehta: Where you all using switch also probably right.

1115
02:19:17.370 --> 02:19:37.710
Ryan Mehta: So with switch without switch react router will load every single route that matches a path. So it's not like if Elsa. It's like a bunch of ifs. So you could potentially load multiple of these components. If multiple of them matched your path.

1116
02:19:39.120 --> 02:19:44.730
Ryan Mehta: Switch says load only the first route that matches the path and ignore the rest

1117
02:19:46.350 --> 02:19:51.300
Ryan Mehta: So let me demonstrate this by creating a quick little

1118
02:19:53.070 --> 02:19:54.960
Ryan Mehta: Silly component here.

1119
02:19:56.670 --> 02:20:00.090
Ryan Mehta: That renders H1. That's a silly.

1120
02:20:02.370 --> 02:20:04.800
Ryan Mehta: If food have a route.

1121
02:20:06.900 --> 02:20:11.220
Ryan Mehta: Slash component equals silly.

1122
02:20:13.260 --> 02:20:17.460
Ryan Mehta: Right now will only see the all villagers component

1123
02:20:18.720 --> 02:20:22.800
Ryan Mehta: So we just see the all villagers on the home path.

1124
02:20:24.180 --> 02:20:25.830
Ryan Mehta: If we got rid of switch

1125
02:20:27.180 --> 02:20:30.840
Ryan Mehta: We would end up seeing both of these components on the page.

1126
02:20:32.100 --> 02:20:33.000
Ryan Mehta: So they're silly.

1127
02:20:36.540 --> 02:20:58.770
Ryan Mehta: So any path that matches right now will be loaded on the page with switch only the first one that matches will be loaded, which means if I put silly on top of villagers, I would have no way to get to villagers anymore because only the first route that matches will be loaded on the page.

1128
02:21:05.820 --> 02:21:06.270
Ryan Mehta: Okay.

1129
02:21:10.230 --> 02:21:10.680
Ryan Mehta: Okay.

1130
02:21:11.970 --> 02:21:26.280
Ryan Mehta: I'm gonna cheat a little bit to do our detail page and like a, like, six minutes, I'm going to reuse our village or component, which shows our villagers image and our villagers name that will be there detail page.

1131
02:21:28.110 --> 02:21:42.210
Ryan Mehta: We're going to need a container, though, that fetches from the API and gets a villager by ID. So I'm going to very quickly make a villager detail that J SX file.

1132
02:21:43.950 --> 02:21:47.910
Ryan Mehta: This is going to be a class based component, since it is

1133
02:21:51.570 --> 02:21:52.260
Ryan Mehta: A container.

1134
02:22:10.260 --> 02:22:14.280
Ryan Mehta: We're going to return our villager

1135
02:22:17.130 --> 02:22:20.220
Ryan Mehta: Here we're going to have some state.

1136
02:22:22.920 --> 02:22:24.330
Ryan Mehta: With our villager

1137
02:22:25.770 --> 02:22:32.070
Ryan Mehta: Which will start off as know and we'll also have some loading state, just like we did with the last component

1138
02:22:34.170 --> 02:22:34.860
Ryan Mehta: So,

1139
02:22:36.390 --> 02:22:45.000
Ryan Mehta: Inside of our actual components body will take loading and villager off of this stop state.

1140
02:22:46.560 --> 02:22:57.450
Ryan Mehta: If we're in a loading state, we're going to return our loading component. Otherwise, we'll return our villager will pass our villager everything

1141
02:22:59.190 --> 02:23:07.200
Ryan Mehta: From villager so I'll it'll convert all of the key value pairs of villager to props name image URL, etc.

1142
02:23:09.360 --> 02:23:11.340
Ryan Mehta: When the component first mounts.

1143
02:23:12.720 --> 02:23:17.160
Ryan Mehta: We're going to want to fetch from this villager API.

1144
02:23:18.750 --> 02:23:27.660
Ryan Mehta: This villager API lets us put an ID afterwards, like that and will give us a single villager

1145
02:23:29.400 --> 02:23:30.630
Ryan Mehta: So we'll use that

1146
02:23:31.950 --> 02:23:34.440
Ryan Mehta: We're going to want to replace this ID.

1147
02:23:35.670 --> 02:23:36.510
Ryan Mehta: With something

1148
02:23:38.220 --> 02:23:42.690
Ryan Mehta: Once we get a response. We're going to parse the response as JSON.

1149
02:23:45.240 --> 02:23:47.730
Ryan Mehta: And then we're going to get our single villager

1150
02:23:50.070 --> 02:23:54.300
Ryan Mehta: And we're going to manage that villager a little bit. We want our villager to have an ID.

1151
02:23:56.700 --> 02:23:58.350
Ryan Mehta: We want our villager to have a name.

1152
02:24:00.270 --> 02:24:10.260
Ryan Mehta: And we want our village to have an image URL, which it gets from villager image. So our messaging is basically just to change image to image URL.

1153
02:24:15.390 --> 02:24:16.110
Ryan Mehta: Look, okay.

1154
02:24:18.150 --> 02:24:18.960
Ryan Mehta: And then

1155
02:24:20.190 --> 02:24:29.610
Ryan Mehta: We're going to take our villager and set state with that villager and set loading to false.

1156
02:24:32.880 --> 02:24:50.490
Ryan Mehta: When big key here are the last little piece here that we really need is to fill in this ID whenever you're routed to buy react router, you automatically get some props. So let's make sure we add our route.

1157
02:24:51.600 --> 02:24:52.470
Detail

1158
02:24:54.000 --> 02:24:57.870
And the ID and we'll have our villager detail here.

1159
02:25:00.810 --> 02:25:18.810
Ryan Mehta: So since our container here is going to be routed to buy react router DOM, we get some extra props, one of those props is match inside of match. We have programs and inside of programs. We're going to have ID, which is what is currently in the URL bar.

1160
02:25:20.490 --> 02:25:21.060
Ryan Mehta: So,

1161
02:25:24.480 --> 02:25:26.580
Ryan Mehta: We can get our ID.

1162
02:25:28.950 --> 02:25:29.700
Ryan Mehta: With

1163
02:25:31.170 --> 02:25:35.070
Ryan Mehta: This thought. Stop. Stop that. Stop plans got ID.

1164
02:25:36.600 --> 02:25:57.480
Ryan Mehta: This whole part is like an express when you do racked up programs. Right. So this is like wreck dot parameter ID. It's ID here because in our route we named it colon ID over here, whatever we named. This is what we got notate off of programs.

1165
02:26:00.090 --> 02:26:00.810
Ryan Mehta: All right.

1166
02:26:02.970 --> 02:26:17.910
Ryan Mehta: At this point, I think if we manually copy an ID, go back to our list detail page and go to slash details slash and that ID, we should see

1167
02:26:20.430 --> 02:26:24.570
Ryan Mehta: Well, I mean. Oh course anywhere course anywhere.

1168
02:26:26.220 --> 02:26:30.570
Ryan Mehta: I forgot that this API doesn't support core. So we need our cores anywhere thing.

1169
02:26:30.990 --> 02:26:36.930
Ron Yonker: Yeah, I was about to ask. So why aren't you doing a corps thing there.

1170
02:26:39.030 --> 02:26:40.200
Ryan Mehta: Yeah, I just forgot

1171
02:26:45.210 --> 02:26:52.320
Ryan Mehta: OK, so now if we go directly to the IDP the detail page we see our Admiral

1172
02:26:57.480 --> 02:27:05.670
Ryan Mehta: So there's a few things that need to happen. Still, we should probably extract this into a services directory, but you all know how to do that already. I think

1173
02:27:06.900 --> 02:27:15.480
Ryan Mehta: So do that on your own time. The other thing that we want to do is make sure that in our villager list.

1174
02:27:16.500 --> 02:27:18.570
Ryan Mehta: We can click on each list item.

1175
02:27:20.340 --> 02:27:22.470
Ryan Mehta: We do that by adding a link

1176
02:27:23.850 --> 02:27:25.950
Ryan Mehta: That we import from react router DOM.

1177
02:27:28.920 --> 02:27:30.450
Ryan Mehta: We're going to link to

1178
02:27:32.370 --> 02:27:36.810
Ryan Mehta: The details page with the villagers.

1179
02:27:38.550 --> 02:27:39.060
Ryan Mehta: ID.

1180
02:27:46.800 --> 02:27:47.280
Excel.

1181
02:27:48.360 --> 02:27:55.380
Ryan Mehta: So now the list items have links in them that link to the detail page for that individual villager

1182
02:27:57.210 --> 02:28:05.580
Ryan Mehta: Go back to our list page, we should now be able to click on these villagers.

1183
02:28:06.630 --> 02:28:08.250
And go to a detail page.

1184
02:28:11.640 --> 02:28:18.240
Ryan Mehta: Alright that was super fast at the end, but hopefully that helps a little bit. We'll talk more about the router tomorrow.

1185
02:28:20.040 --> 02:28:21.150
Ryan Mehta: Tomorrow's Thursday.

1186
02:28:23.280 --> 02:28:27.390
Ryan Mehta: Thursday. Yeah. Tomorrow's Thursday. So we'll talk more about the router tomorrow.

1187
02:28:31.170 --> 02:28:31.440
Yeah.

1188
02:28:32.880 --> 02:28:34.350
Ryan Mehta: The lab for today.

1189
02:28:35.670 --> 02:28:36.840
Ryan Mehta: Is to

1190
02:28:38.850 --> 02:28:40.440
Ryan Mehta: Make a news.

1191
02:28:42.000 --> 02:28:44.850
Ryan Mehta: Thing that's a new search

1192
02:28:48.240 --> 02:28:49.410
Ryan Mehta: There is

1193
02:28:51.720 --> 02:29:03.180
Ryan Mehta: This news API, you should have a couple of three presentational components. An article and articles or article list if you prefer, and a search component

1194
02:29:04.320 --> 02:29:07.110
Ryan Mehta: You should be able to type into the search component with like

1195
02:29:08.610 --> 02:29:09.780
Ryan Mehta: Some term.

1196
02:29:11.100 --> 02:29:17.010
Ryan Mehta: use that term to search the news API and return a list of articles from the news API.

1197
02:29:18.060 --> 02:29:26.820
Ryan Mehta: You're going to have a single container component called new search with told the search term loading state and articles state.

1198
02:29:28.860 --> 02:29:33.990
Ryan Mehta: And then you should snapshot. Test your presentational components and behavior. Test your container.

1199
02:29:38.400 --> 02:29:46.950
Ryan Mehta: This application makes sense. So it's a bit of a mish like a mash up of our last two days of demo.

1200
02:29:48.300 --> 02:29:51.000
Ryan Mehta: In today's demo, we did a list of things.

1201
02:29:55.350 --> 02:30:08.400
Ryan Mehta: And then in yesterday's demo, we had this like search field where you type stuff into the search field. I guess it is kind of like yesterday's demo and then you create this list of things based on what's in the search field.

1202
02:30:11.970 --> 02:30:17.130
Ryan Mehta: There's no detail page. So you don't need react router at all for this lab today.

1203
02:30:18.450 --> 02:30:32.400
Ryan Mehta: You just want to be able to type into this input and get a list of articles, based on what you typed there so you could type in like video games, you know, get a list of like the latest video game articles or whatever.

1204
02:30:40.050 --> 02:30:40.500
Ryan Mehta: Okay.

1205
02:30:45.720 --> 02:30:55.440
Ron Yonker: Should display no articles or nothing except the search box at first, until you actually make a search. Exactly. Yeah.

1206
02:31:01.440 --> 02:31:01.830
Sarah Rector: Ryan.

1207
02:31:02.940 --> 02:31:09.750
Sarah Rector: What we need react router, though, because we're displaying the list of articles, but also and article

1208
02:31:11.430 --> 02:31:15.030
Ryan Mehta: You don't have to display a single article just the list of articles.

1209
02:31:16.170 --> 02:31:16.470
Sarah Rector: Okay.

1210
02:31:16.950 --> 02:31:23.910
Ryan Mehta: So yeah, just the search form and then a list of articles with like the article list and this is like

1211
02:31:23.910 --> 02:31:24.780
Ryan Mehta: The article

1212
02:31:25.020 --> 02:31:30.990
Ryan Mehta: Detail or the article list item, but you don't have to click on them and coded detail for that article.

1213
02:31:31.380 --> 02:31:32.460
Sarah Rector: Gotcha. Okay, thank you.

1214
02:31:36.120 --> 02:31:43.050
Ryan Mehta: But that's a cool stretch goal if any of you finish this to be able to click on the articles and actually be able to read the article be cool.

1215
02:32:02.220 --> 02:32:02.820
Ryan Mehta: Yes.

1216
02:32:03.960 --> 02:32:05.940
Ryan Mehta: I have to figure out what the topic is

1217
02:32:06.210 --> 02:32:06.360
Oh,

1218
02:32:07.440 --> 02:32:07.830
Ryan Mehta: Yeah.

1219
02:32:11.490 --> 02:32:13.770
Ryan Mehta: I think somebody just messaged me

1220
02:32:14.970 --> 02:32:29.610
Ryan Mehta: But I haven't read it yet. So there is somebody who wants to present on D3 and like data visualization. I don't know if that's going to be this week, or like next week or the week after. But sometime in the next

1221
02:32:29.640 --> 02:32:31.050
Ron Yonker: Few weeks that didn't do that.

1222
02:32:37.590 --> 02:32:39.960
Ryan Mehta: All right, well, have a good lunch. Good luck.

1223
02:32:42.510 --> 02:32:43.500
Ryan Mehta: See you all

1224
02:32:44.250 --> 02:32:45.960
Ryan Mehta: Afternoon. Yeah.

1225
02:32:47.220 --> 02:32:47.760
Sarah Rector: Thank you.

1226
02:32:48.660 --> 02:32:49.050
Thanks.

1227
02:32:50.190 --> 02:32:50.490
Patrick Wilson: Yeah.

